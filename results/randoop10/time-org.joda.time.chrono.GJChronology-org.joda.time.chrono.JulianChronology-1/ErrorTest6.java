import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3001");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField14 = gJChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        boolean boolean28 = instant23.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.monthOfYear();
        boolean boolean39 = instant23.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Instant instant41 = instant23.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant41.isSupported(dateTimeFieldType44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = instant41.toString(dateTimeFormatter46);
        boolean boolean49 = instant41.isAfter(3L);
        boolean boolean50 = gJChronology2.equals((java.lang.Object) instant41);
        org.joda.time.MutableDateTime mutableDateTime51 = instant41.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant41.minus(readableDuration52);
        boolean boolean54 = instant41.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime51 and instant41", (mutableDateTime51.compareTo(instant41) == 0) == mutableDateTime51.equals(instant41));
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3002");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-12219292799965L));
        org.joda.time.Instant instant3 = instant1.plus((-75600000L));
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.Instant instant10 = gJChronology6.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTime(dateTimeZone12);
        boolean boolean15 = mutableDateTime13.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        java.lang.String str19 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.dayOfYear();
        java.lang.String str21 = gJChronology18.toString();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology18.monthOfYear();
        int int24 = mutableDateTime13.get(dateTimeField23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        java.lang.String str29 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.weekyearOfCentury();
        boolean boolean31 = mutableDateTime13.equals((java.lang.Object) gJChronology27);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime13.getZone();
        org.joda.time.Instant instant33 = mutableDateTime13.toInstant();
        int int34 = instant3.compareTo((org.joda.time.ReadableInstant) instant33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime13", (instant10.compareTo(mutableDateTime13) == 0) == instant10.equals(mutableDateTime13));
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3003");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        java.lang.String str12 = dateTimeZone7.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfYear();
        java.lang.String str30 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.monthOfYear();
        int int33 = mutableDateTime22.get(dateTimeField32);
        int int34 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Instant instant35 = mutableDateTime22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DurationField durationField40 = gJChronology38.millis();
        long long44 = gJChronology38.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField45 = gJChronology38.millis();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology38.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime22.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        int int52 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) instant51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime49", (instant19.compareTo(mutableDateTime49) == 0) == instant19.equals(mutableDateTime49));
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3004");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        java.lang.String str6 = julianChronology3.toString();
        org.joda.time.DurationField durationField7 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone8 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DurationField durationField10 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField4, and durationField7", !(durationField10.compareTo(durationField4) == 0) || (Math.signum(durationField10.compareTo(durationField7)) == Math.signum(durationField4.compareTo(durationField7))));
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3005");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = julianChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField12, and durationField9", !(durationField9.compareTo(durationField12) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField12.compareTo(durationField9))));
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3006");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = instant12.toMutableDateTime(dateTimeZone18);
        int int25 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant12);
        boolean boolean27 = instant12.isAfter((-3600000L));
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = instant12.toMutableDateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone31.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = instant36.toString(dateTimeFormatter37);
        java.lang.String str39 = instant36.toString();
        int int40 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant36);
        java.util.Date date41 = instant36.toDate();
        org.joda.time.MutableDateTime mutableDateTime42 = instant36.toMutableDateTime();
        boolean boolean43 = instant12.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        boolean boolean45 = mutableDateTime42.isEqual((-60514214955067L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime24", (instant12.compareTo(mutableDateTime24) == 0) == instant12.equals(mutableDateTime24));
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3007");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = julianChronology3.getZone();
        org.joda.time.DurationField durationField7 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField9 = julianChronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField7, durationField9, and durationField7", !(durationField7.compareTo(durationField9) == 0) || (Math.signum(durationField7.compareTo(durationField7)) == Math.signum(durationField9.compareTo(durationField7))));
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3008");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DurationField durationField6 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField4, and durationField5", !(durationField6.compareTo(durationField4) == 0) || (Math.signum(durationField6.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3009");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant14);
        org.joda.time.Instant instant17 = instant14.minus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DurationField durationField22 = gJChronology20.millis();
        long long26 = gJChronology20.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField27 = gJChronology20.millis();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Instant instant30 = gJChronology20.getGregorianCutover();
        int int31 = instant14.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant33 = instant30.minus((-66447976L));
        org.joda.time.MutableDateTime mutableDateTime34 = instant30.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = instant30.getZone();
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime34", (instant30.compareTo(mutableDateTime34) == 0) == instant30.equals(mutableDateTime34));
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3010");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.minutes();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DurationField durationField8 = julianChronology3.centuries();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        boolean boolean24 = instant19.isEqual(35L);
        boolean boolean25 = instant10.isEqual((org.joda.time.ReadableInstant) instant19);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.MutableDateTime mutableDateTime27 = instant10.toMutableDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, (org.joda.time.ReadableInstant) instant36);
        java.lang.String str38 = instant36.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.minus(readableDuration46);
        org.joda.time.Instant instant50 = instant47.withDurationAdded((-12219292800000L), 0);
        int int51 = instant36.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant52 = instant47.toInstant();
        org.joda.time.Instant instant55 = instant52.withDurationAdded((-36000000L), 0);
        int int56 = instant10.compareTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        java.lang.String str60 = gJChronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology59.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology59.dayOfWeek();
        org.joda.time.DurationField durationField65 = gJChronology59.eras();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology68.getZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str72 = dateTimeZone71.getID();
        org.joda.time.Chronology chronology73 = gJChronology68.withZone(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology68.getZone();
        long long76 = dateTimeZone74.nextTransition((-12219292800000L));
        long long78 = dateTimeZone74.convertUTCToLocal((long) 1);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeZone74.getName((long) (-1), locale80);
        java.util.Locale locale83 = null;
        java.lang.String str84 = dateTimeZone74.getName(35L, locale83);
        java.lang.String str85 = dateTimeZone74.getID();
        java.lang.String str87 = dateTimeZone74.getShortName((-179999601L));
        org.joda.time.Chronology chronology88 = gJChronology59.withZone(dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime89 = instant10.toMutableDateTime((org.joda.time.Chronology) gJChronology59);
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField65", Math.signum(durationField4.compareTo(durationField65)) == -Math.signum(durationField65.compareTo(durationField4)));
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3011");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology3.getZone();
        org.joda.time.Chronology chronology23 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology32 = julianChronology27.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField33 = julianChronology27.days();
        org.joda.time.Chronology chronology34 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology27.secondOfDay();
        org.joda.time.DurationField durationField37 = julianChronology27.hours();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.hourOfHalfday();
        long long46 = gJChronology40.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = julianChronology50.minuteOfDay();
        org.joda.time.DurationField durationField52 = julianChronology50.weekyears();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str55 = dateTimeZone54.getID();
        boolean boolean56 = dateTimeZone54.isFixed();
        long long58 = dateTimeZone54.previousTransition(100L);
        java.util.TimeZone timeZone59 = dateTimeZone54.toTimeZone();
        long long61 = dateTimeZone54.previousTransition(5201L);
        org.joda.time.Chronology chronology62 = julianChronology50.withZone(dateTimeZone54);
        org.joda.time.Chronology chronology63 = gJChronology40.withZone(dateTimeZone54);
        org.joda.time.Chronology chronology64 = julianChronology27.withZone(dateTimeZone54);
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone54.getName((long) 3600000, locale66);
        org.joda.time.chrono.JulianChronology julianChronology68 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone54);
        org.joda.time.Chronology chronology69 = julianChronology3.withZone(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField21 and durationField52", (durationField21.compareTo(durationField52) == 0) == durationField21.equals(durationField52));
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3012");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.hourOfHalfday();
        java.lang.String str8 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology15 = julianChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = julianChronology12.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = julianChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = julianChronology12.getZone();
        org.joda.time.Chronology chronology23 = julianChronology3.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        boolean boolean29 = julianChronology27.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology30 = julianChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology27.era();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology27.minuteOfHour();
        org.joda.time.DurationField durationField33 = julianChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology27.hourOfHalfday();
        boolean boolean35 = dateTimeZone22.equals((java.lang.Object) julianChronology27);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone22.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone22.getStandardOffset(151200024L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.Instant instant46 = gJChronology42.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant46.minus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant46.plus(readableDuration49);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant50);
        org.joda.time.Instant instant52 = instant50.toInstant();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.Chronology chronology56 = gJChronology55.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.millisOfDay();
        org.joda.time.DurationField durationField59 = gJChronology55.halfdays();
        org.joda.time.DurationField durationField60 = gJChronology55.millis();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology63 = gJChronology55.withZone(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology55.minuteOfDay();
        org.joda.time.Instant instant65 = gJChronology55.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime66 = instant65.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.Chronology chronology70 = gJChronology69.withUTC();
        org.joda.time.DurationField durationField71 = gJChronology69.millis();
        org.joda.time.DurationField durationField72 = gJChronology69.halfdays();
        org.joda.time.DurationField durationField73 = gJChronology69.years();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = gJChronology69.add(readablePeriod74, 5201L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology69.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology69.weekOfWeekyear();
        int int80 = instant65.get(dateTimeField79);
        long long81 = instant65.getMillis();
        int int82 = instant50.compareTo((org.joda.time.ReadableInstant) instant65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime66", (instant50.compareTo(mutableDateTime66) == 0) == instant50.equals(mutableDateTime66));
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3013");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.chrono.JulianChronology julianChronology4 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone2);
        java.lang.String str6 = dateTimeZone2.getNameKey(10L);
        long long8 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        long long36 = instant20.getMillis();
        long long37 = instant20.getMillis();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant40 = instant20.withDurationAdded(readableDuration38, (int) (short) -1);
        org.joda.time.Chronology chronology41 = instant20.getChronology();
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = instant20.isEqual(readableInstant42);
        org.joda.time.Chronology chronology44 = instant20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = instant20.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50);
        boolean boolean54 = julianChronology52.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology55 = julianChronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology52.era();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology52.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime58 = instant48.toMutableDateTime((org.joda.time.Chronology) julianChronology52);
        org.joda.time.DateTimeZone dateTimeZone59 = instant48.getZone();
        java.lang.String str60 = instant48.toString();
        boolean boolean61 = mutableDateTime45.isBefore((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime45.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant48 and mutableDateTime58", (instant48.compareTo(mutableDateTime58) == 0) == instant48.equals(mutableDateTime58));
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3014");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        java.lang.String str12 = dateTimeZone7.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfYear();
        java.lang.String str30 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.monthOfYear();
        int int33 = mutableDateTime22.get(dateTimeField32);
        int int34 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Instant instant35 = mutableDateTime22.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant38 = instant35.withDurationAdded(readableDuration36, 4200000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime22", (instant19.compareTo(mutableDateTime22) == 0) == instant19.equals(mutableDateTime22));
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3015");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        boolean boolean8 = instant5.isAfter((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant5.isSupported(dateTimeFieldType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant5.minus(readableDuration11);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime6", (instant13.compareTo(dateTime6) == 0) == instant13.equals(dateTime6));
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        long long27 = dateTimeZone18.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.Instant instant29 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant31 = instant29.plus(151200349L);
        boolean boolean32 = instant31.isBeforeNow();
        org.joda.time.DateTime dateTime33 = instant31.toDateTime();
        org.joda.time.DateTime dateTime34 = instant31.toDateTime();
        java.lang.String str35 = dateTime34.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime33", (instant31.compareTo(dateTime33) == 0) == instant31.equals(dateTime33));
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3017");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.Instant instant11 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.minus(readableDuration12);
        org.joda.time.Instant instant16 = instant13.withDurationAdded((-12219292800000L), 0);
        boolean boolean18 = instant13.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.Chronology chronology22 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology21.monthOfYear();
        boolean boolean29 = instant13.equals((java.lang.Object) dateTimeField28);
        org.joda.time.Instant instant31 = instant13.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = instant31.isSupported(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant31.isSupported(dateTimeFieldType34);
        org.joda.time.Instant instant38 = instant31.withDurationAdded(151199999L, (int) (short) 100);
        java.lang.String str39 = instant38.toString();
        int int40 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant38);
        org.joda.time.DateTime dateTime41 = instant38.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.Chronology chronology45 = gJChronology44.withUTC();
        org.joda.time.DurationField durationField46 = gJChronology44.millis();
        long long50 = gJChronology44.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField51 = gJChronology44.millis();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology44.clockhourOfHalfday();
        org.joda.time.DurationField durationField54 = gJChronology44.months();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.Chronology chronology62 = gJChronology57.withZone(dateTimeZone60);
        long long65 = dateTimeZone60.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone66 = dateTimeZone60.toTimeZone();
        long long69 = dateTimeZone60.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology70 = gJChronology44.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField71 = gJChronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology44.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone74);
        org.joda.time.chrono.JulianChronology julianChronology76 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone74);
        boolean boolean78 = julianChronology76.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField79 = julianChronology76.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField80 = julianChronology76.weekOfWeekyear();
        org.joda.time.DurationField durationField81 = julianChronology76.weeks();
        org.joda.time.DateTimeZone dateTimeZone82 = julianChronology76.getZone();
        java.util.Locale locale84 = null;
        java.lang.String str85 = dateTimeZone82.getName(0L, locale84);
        java.lang.String str87 = dateTimeZone82.getName((long) '4');
        java.lang.String str88 = dateTimeZone82.getID();
        long long90 = dateTimeZone82.previousTransition(90000000L);
        org.joda.time.Chronology chronology91 = gJChronology44.withZone(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime92 = instant38.toMutableDateTime(chronology91);
        org.joda.time.Chronology chronology93 = mutableDateTime92.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant38 and dateTime41", (instant38.compareTo(dateTime41) == 0) == instant38.equals(dateTime41));
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3018");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.secondOfMinute();
        org.joda.time.Chronology chronology10 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology2.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField11, and durationField5", !(durationField5.compareTo(durationField11) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField11.compareTo(durationField5))));
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3019");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.DurationField durationField16 = gJChronology2.years();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField18 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField17", (durationField16.compareTo(durationField17) == 0) == durationField16.equals(durationField17));
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3020");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.Chronology chronology23 = gJChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology26 = chronology23.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = instant16.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = dateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.Instant instant30 = dateTime27.toInstant();
        boolean boolean31 = instant30.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime27", (instant9.compareTo(dateTime27) == 0) == instant9.equals(dateTime27));
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3021");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) (short) 10, false);
        long long25 = dateTimeZone17.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant30 = instant27.withDurationAdded(readableDuration28, 0);
        boolean boolean32 = instant30.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant30.withDurationAdded(readableDuration33, 4);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone37);
        boolean boolean41 = julianChronology39.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField42 = julianChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology39.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = instant30.toMutableDateTime((org.joda.time.Chronology) julianChronology39);
        int int47 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) mutableDateTime46);
        int int48 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone50);
        org.joda.time.DurationField durationField53 = julianChronology52.centuries();
        java.lang.String str54 = julianChronology52.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = julianChronology52.getZone();
        org.joda.time.Instant instant56 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant56.plus(readableDuration57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        org.joda.time.Instant instant70 = instant67.withDurationAdded((-12219292800000L), 0);
        boolean boolean72 = instant67.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology75.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology75.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology75.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology75.monthOfYear();
        boolean boolean83 = instant67.equals((java.lang.Object) dateTimeField82);
        org.joda.time.Instant instant85 = instant67.withMillis(1L);
        boolean boolean86 = instant56.equals((java.lang.Object) 1L);
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant56);
        boolean boolean88 = mutableDateTime46.isBefore((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant90 = instant56.minus((-60514214961078L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime46", (instant27.compareTo(mutableDateTime46) == 0) == instant27.equals(mutableDateTime46));
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3022");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = julianChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        boolean boolean11 = julianChronology9.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology12 = julianChronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology14 = julianChronology9.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = julianChronology9.days();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = julianChronology9.getZone();
        org.joda.time.DurationField durationField18 = julianChronology9.days();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology9.getZone();
        org.joda.time.Chronology chronology21 = julianChronology2.withZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getShortName((-12219292800000L));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField28 = julianChronology27.centuries();
        org.joda.time.DurationField durationField29 = julianChronology27.weeks();
        org.joda.time.DurationField durationField30 = julianChronology27.minutes();
        int int31 = julianChronology27.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology27.clockhourOfDay();
        boolean boolean34 = dateTimeZone20.equals((java.lang.Object) julianChronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField4 and durationField28", (durationField4.compareTo(durationField28) == 0) == durationField4.equals(durationField28));
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3023");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = instant1.toDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        java.lang.String str11 = gJChronology10.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.millisOfSecond();
        org.joda.time.Chronology chronology14 = gJChronology10.withUTC();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology10.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3024");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        int int17 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.millisOfSecond();
        org.joda.time.Chronology chronology22 = julianChronology20.withUTC();
        java.lang.String str23 = julianChronology20.toString();
        org.joda.time.MutableDateTime mutableDateTime24 = instant11.toMutableDateTime((org.joda.time.Chronology) julianChronology20);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime24", (instant9.compareTo(mutableDateTime24) == 0) == instant9.equals(mutableDateTime24));
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3025");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = julianChronology2.centuries();
        org.joda.time.DurationField durationField5 = julianChronology2.weeks();
        org.joda.time.DurationField durationField6 = julianChronology2.days();
        org.joda.time.DurationField durationField7 = julianChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology16 = julianChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology18 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = julianChronology13.days();
        org.joda.time.Chronology chronology20 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology13.secondOfDay();
        org.joda.time.DurationField durationField23 = julianChronology13.hours();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.hourOfHalfday();
        long long32 = gJChronology26.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = julianChronology36.minuteOfDay();
        org.joda.time.DurationField durationField38 = julianChronology36.weekyears();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str41 = dateTimeZone40.getID();
        boolean boolean42 = dateTimeZone40.isFixed();
        long long44 = dateTimeZone40.previousTransition(100L);
        java.util.TimeZone timeZone45 = dateTimeZone40.toTimeZone();
        long long47 = dateTimeZone40.previousTransition(5201L);
        org.joda.time.Chronology chronology48 = julianChronology36.withZone(dateTimeZone40);
        org.joda.time.Chronology chronology49 = gJChronology26.withZone(dateTimeZone40);
        org.joda.time.Chronology chronology50 = julianChronology13.withZone(dateTimeZone40);
        long long52 = dateTimeZone9.getMillisKeepLocal(dateTimeZone40, 90280007L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField19", (durationField6.compareTo(durationField19) == 0) == durationField6.equals(durationField19));
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3026");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.util.Date date7 = instant6.toDate();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        int int20 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((java.lang.Object) instant17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((java.lang.Object) instant21);
        java.util.Date date23 = instant22.toDate();
        org.joda.time.Instant instant25 = instant22.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology41 = gJChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology36.getZone();
        long long44 = dateTimeZone42.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology45 = gJChronology28.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean49 = dateTimeZone47.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        boolean boolean55 = julianChronology53.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology56 = julianChronology53.withUTC();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology58 = julianChronology53.withZone(dateTimeZone57);
        long long60 = dateTimeZone47.getMillisKeepLocal(dateTimeZone57, 10L);
        org.joda.time.Chronology chronology61 = gJChronology28.withZone(dateTimeZone57);
        long long63 = dateTimeZone57.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime64 = instant22.toMutableDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        org.joda.time.Chronology chronology68 = gJChronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology67.millisOfDay();
        org.joda.time.DateTime dateTime71 = mutableDateTime64.toDateTime((org.joda.time.Chronology) gJChronology67);
        boolean boolean73 = dateTime71.isEqual(100L);
        boolean boolean74 = instant6.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        org.joda.time.chrono.JulianChronology julianChronology78 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone76);
        boolean boolean80 = julianChronology78.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology81 = julianChronology78.withUTC();
        org.joda.time.DateTimeField dateTimeField82 = julianChronology78.era();
        org.joda.time.DateTimeField dateTimeField83 = julianChronology78.minuteOfHour();
        org.joda.time.DurationField durationField84 = julianChronology78.weeks();
        org.joda.time.DurationField durationField85 = julianChronology78.days();
        org.joda.time.DateTimeField dateTimeField86 = julianChronology78.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField87 = julianChronology78.millisOfDay();
        org.joda.time.DurationField durationField88 = julianChronology78.millis();
        boolean boolean89 = dateTime71.equals((java.lang.Object) julianChronology78);
        org.joda.time.DateTimeField dateTimeField90 = julianChronology78.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime71", (instant17.compareTo(dateTime71) == 0) == instant17.equals(dateTime71));
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = julianChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        org.joda.time.Chronology chronology12 = julianChronology3.withZone(dateTimeZone9);
        org.joda.time.Chronology chronology13 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.millisOfSecond();
        org.joda.time.DurationField durationField15 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField15, durationField4, and durationField7", !(durationField15.compareTo(durationField4) == 0) || (Math.signum(durationField15.compareTo(durationField7)) == Math.signum(durationField4.compareTo(durationField7))));
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3028");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(0L);
        long long9 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.minus(readableDuration10);
        boolean boolean12 = instant1.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = instant1.isSupported(dateTimeFieldType14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3029");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        java.lang.String str17 = gJChronology15.toString();
        org.joda.time.DurationField durationField18 = gJChronology15.eras();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.era();
        boolean boolean22 = gJChronology2.equals((java.lang.Object) dateTimeField21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField18", Math.signum(durationField6.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField6)));
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3030");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant17.minus(readableDuration33);
        java.util.Date date35 = instant17.toDate();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        boolean boolean48 = instant17.isEqual((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant50 = instant17.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        java.lang.String str54 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.dayOfYear();
        java.lang.String str56 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology53.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology53.weekOfWeekyear();
        java.lang.String str60 = gJChronology53.toString();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology53.dayOfWeek();
        int int62 = instant50.get(dateTimeField61);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((java.lang.Object) instant50);
        org.joda.time.Instant instant66 = instant63.withDurationAdded((long) (-3600000), 19);
        org.joda.time.MutableDateTime mutableDateTime67 = instant63.toMutableDateTimeISO();
        int int68 = instant5.compareTo((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and mutableDateTime67", (instant50.compareTo(mutableDateTime67) == 0) == instant50.equals(mutableDateTime67));
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3031");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.Chronology chronology9 = gJChronology4.withZone(dateTimeZone7);
        java.lang.String str11 = dateTimeZone7.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology16.getZone();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant22);
        java.lang.String str24 = instant22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.joda.time.Instant instant36 = instant33.withDurationAdded((-12219292800000L), 0);
        int int37 = instant22.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant22.minus(readableDuration38);
        java.util.Date date40 = instant22.toDate();
        boolean boolean42 = instant22.isBefore((-62112218399999L));
        org.joda.time.Instant instant45 = instant22.withDurationAdded((-35999899L), (int) ' ');
        boolean boolean46 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) instant22);
        org.joda.time.MutableDateTime mutableDateTime47 = instant22.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3032");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        java.lang.String str53 = instant51.toString();
        int int54 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((java.lang.Object) instant51);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((java.lang.Object) instant55);
        java.util.Date date57 = instant56.toDate();
        org.joda.time.Instant instant59 = instant56.withMillis((long) (byte) 10);
        boolean boolean61 = instant56.isAfter(223199999L);
        boolean boolean62 = instant1.isEqual((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime63 = instant56.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.chrono.GJChronology gJChronology66 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, readableInstant65);
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology66.getZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str70 = dateTimeZone69.getID();
        org.joda.time.Chronology chronology71 = gJChronology66.withZone(dateTimeZone69);
        java.lang.String str73 = dateTimeZone69.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField75 = julianChronology74.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology74.millisOfSecond();
        org.joda.time.DateTime dateTime77 = mutableDateTime63.toDateTime((org.joda.time.Chronology) julianChronology74);
        java.lang.String str78 = mutableDateTime63.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime77", (instant1.compareTo(dateTime77) == 0) == instant1.equals(dateTime77));
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3033");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField10 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField10, and durationField5", !(durationField5.compareTo(durationField10) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField10.compareTo(durationField5))));
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3034");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology18.era();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.era();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology18.year();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        java.lang.String str30 = dateTimeZone28.getName((long) 0);
        long long32 = dateTimeZone28.nextTransition(0L);
        org.joda.time.Chronology chronology33 = julianChronology18.withZone(dateTimeZone28);
        boolean boolean34 = instant13.equals((java.lang.Object) dateTimeZone28);
        long long35 = instant13.getMillis();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant13.plus(readableDuration36);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone40.getName((-1L), locale43);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone40.isLocalDateTimeGap(localDateTime45);
        boolean boolean48 = dateTimeZone40.isStandardOffset(36000000L);
        java.lang.String str49 = dateTimeZone40.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str58 = dateTimeZone57.getID();
        org.joda.time.Chronology chronology59 = gJChronology54.withZone(dateTimeZone57);
        java.lang.String str61 = dateTimeZone57.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology62 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime63 = instant51.toMutableDateTime(dateTimeZone57);
        int int64 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTime dateTime65 = instant51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        org.joda.time.chrono.JulianChronology julianChronology69 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone67);
        boolean boolean71 = julianChronology69.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology72 = julianChronology69.withUTC();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology74 = julianChronology69.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField75 = julianChronology69.days();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology69.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str79 = dateTimeZone78.getID();
        boolean boolean80 = dateTimeZone78.isFixed();
        long long82 = dateTimeZone78.previousTransition(100L);
        java.util.TimeZone timeZone83 = dateTimeZone78.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        org.joda.time.Chronology chronology85 = julianChronology69.withZone(dateTimeZone84);
        java.util.TimeZone timeZone86 = dateTimeZone84.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone84);
        org.joda.time.DateTimeZone dateTimeZone88 = gJChronology87.getZone();
        int int90 = dateTimeZone88.getOffset((-143999601L));
        org.joda.time.MutableDateTime mutableDateTime91 = instant51.toMutableDateTime(dateTimeZone88);
        long long93 = dateTimeZone38.getMillisKeepLocal(dateTimeZone88, (long) 86400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and mutableDateTime63", (instant51.compareTo(mutableDateTime63) == 0) == instant51.equals(mutableDateTime63));
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3035");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        boolean boolean7 = julianChronology5.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology8 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology5.era();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology5.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = instant1.toMutableDateTime((org.joda.time.Chronology) julianChronology5);
        boolean boolean13 = mutableDateTime11.isEqual(18684000000L);
        long long14 = mutableDateTime11.getMillis();
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        boolean boolean29 = instant24.isEqual(35L);
        boolean boolean30 = instant15.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant15.isSupported(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant41);
        java.lang.String str43 = instant41.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.Instant instant50 = gJChronology46.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.minus(readableDuration51);
        org.joda.time.Instant instant55 = instant52.withDurationAdded((-12219292800000L), 0);
        int int56 = instant41.compareTo((org.joda.time.ReadableInstant) instant52);
        long long57 = instant41.getMillis();
        long long58 = instant41.getMillis();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant41.withDurationAdded(readableDuration59, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant41.plus(readableDuration62);
        int int64 = instant15.compareTo((org.joda.time.ReadableInstant) instant63);
        boolean boolean65 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) instant63);
        boolean boolean67 = instant63.isBefore((long) 14400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3036");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.Chronology chronology7 = gJChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.millisOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.halfdays();
        org.joda.time.DurationField durationField11 = gJChronology6.millis();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology14 = gJChronology6.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.halfdayOfDay();
        org.joda.time.DurationField durationField17 = gJChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology6.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = gJChronology6.add(readablePeriod20, 52L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology6.hourOfDay();
        boolean boolean25 = instant1.equals((java.lang.Object) dateTimeField24);
        org.joda.time.DateTimeZone dateTimeZone26 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.clockhourOfHalfday();
        org.joda.time.Chronology chronology38 = gJChronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Chronology chronology46 = gJChronology41.withZone(dateTimeZone44);
        java.lang.String str48 = dateTimeZone44.getName((long) (byte) 10);
        long long51 = dateTimeZone44.convertLocalToUTC((-35999900L), false);
        long long54 = dateTimeZone44.adjustOffset((long) '#', false);
        int int56 = dateTimeZone44.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone44);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone44.getName((long) 'a', locale59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        long long64 = dateTimeZone44.adjustOffset(132477042376800000L, false);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((java.lang.Object) long64);
        boolean boolean66 = instant1.isBefore((org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.chrono.JulianChronology julianChronology70 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone68);
        boolean boolean72 = julianChronology70.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField73 = julianChronology70.months();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        java.util.Locale locale78 = null;
        java.lang.String str79 = dateTimeZone75.getName((-1L), locale78);
        org.joda.time.LocalDateTime localDateTime80 = null;
        boolean boolean81 = dateTimeZone75.isLocalDateTimeGap(localDateTime80);
        boolean boolean83 = dateTimeZone75.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology84 = julianChronology70.withZone(dateTimeZone75);
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        java.lang.String str87 = dateTimeZone75.getShortName((-31L));
        org.joda.time.DateTime dateTime88 = instant65.toDateTime(dateTimeZone75);
        boolean boolean89 = dateTimeZone75.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant65 and dateTime88", (instant65.compareTo(dateTime88) == 0) == instant65.equals(dateTime88));
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3037");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField2 = gJChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField3 = gJChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        java.lang.String str8 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfYear();
        java.lang.String str10 = gJChronology7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int15 = dateTimeZone12.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.Chronology chronology17 = gJChronology7.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology32.getZone();
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, (org.joda.time.ReadableInstant) instant38);
        java.lang.String str40 = instant38.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.Chronology chronology44 = gJChronology43.withUTC();
        java.lang.String str45 = gJChronology43.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.monthOfYear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology43.dayOfWeek();
        org.joda.time.Instant instant49 = gJChronology43.getGregorianCutover();
        boolean boolean50 = instant38.equals((java.lang.Object) gJChronology43);
        boolean boolean51 = instant29.isAfter((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Instant instant53 = instant38.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant53);
        boolean boolean55 = instant53.isEqualNow();
        boolean boolean57 = instant53.isAfter((long) 3600000);
        org.joda.time.Instant instant60 = instant53.withDurationAdded((long) 5, (int) (short) -1);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.Instant instant63 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant66 = instant63.withDurationAdded(readableDuration64, 10);
        java.util.Date date67 = instant66.toDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = instant66.toString(dateTimeFormatter68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = instant66.isSupported(dateTimeFieldType70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        boolean boolean73 = instant66.isSupported(dateTimeFieldType72);
        int int74 = dateTime61.compareTo((org.joda.time.ReadableInstant) instant66);
        boolean boolean75 = gJChronology0.equals((java.lang.Object) instant66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and dateTime61", (instant60.compareTo(dateTime61) == 0) == instant60.equals(dateTime61));
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3038");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DateTimeZone dateTimeZone21 = instant11.getZone();
        org.joda.time.Instant instant23 = instant11.plus((-386L));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        boolean boolean37 = instant32.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology40.monthOfYear();
        boolean boolean48 = instant32.equals((java.lang.Object) dateTimeField47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology51.getZone();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant57);
        java.lang.String str59 = instant57.toString();
        boolean boolean60 = instant57.isEqualNow();
        boolean boolean61 = instant32.isEqual((org.joda.time.ReadableInstant) instant57);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63);
        org.joda.time.Chronology chronology65 = gJChronology64.withUTC();
        java.lang.String str66 = gJChronology64.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology64.dayOfWeek();
        org.joda.time.Instant instant70 = gJChronology64.getGregorianCutover();
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.Instant instant72 = instant70.toInstant();
        boolean boolean73 = instant32.equals((java.lang.Object) instant72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, readableInstant75);
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology76.getZone();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology76.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology76.dayOfYear();
        org.joda.time.Instant instant80 = gJChronology76.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant80.minus(readableDuration81);
        java.lang.String str83 = instant80.toString();
        org.joda.time.Instant instant85 = instant80.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone86 = instant80.getZone();
        org.joda.time.DateTimeZone dateTimeZone87 = instant80.getZone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.Instant instant90 = instant80.withDurationAdded(readableDuration88, (int) '#');
        boolean boolean91 = instant72.isBefore((org.joda.time.ReadableInstant) instant80);
        int int92 = instant11.compareTo((org.joda.time.ReadableInstant) instant72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant85", (dateTime20.compareTo(instant85) == 0) == dateTime20.equals(instant85));
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3039");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        boolean boolean14 = instant9.isEqual(35L);
        boolean boolean15 = instant0.isEqual((org.joda.time.ReadableInstant) instant9);
        org.joda.time.MutableDateTime mutableDateTime16 = instant9.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime17 = instant9.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime16", (instant9.compareTo(mutableDateTime16) == 0) == instant9.equals(mutableDateTime16));
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3040");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.Chronology chronology22 = gJChronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology17.getZone();
        long long25 = dateTimeZone23.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology26 = gJChronology9.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        boolean boolean36 = julianChronology34.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology37 = julianChronology34.withUTC();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology39 = julianChronology34.withZone(dateTimeZone38);
        long long41 = dateTimeZone28.getMillisKeepLocal(dateTimeZone38, 10L);
        org.joda.time.Chronology chronology42 = gJChronology9.withZone(dateTimeZone38);
        org.joda.time.Chronology chronology43 = gJChronology9.withUTC();
        org.joda.time.DateTime dateTime44 = instant5.toDateTime(chronology43);
        org.joda.time.Instant instant46 = instant5.minus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime44", (instant1.compareTo(dateTime44) == 0) == instant1.equals(dateTime44));
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3041");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField16 = julianChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.year();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.halfdayOfDay();
        org.joda.time.Chronology chronology20 = julianChronology13.withUTC();
        org.joda.time.DateTime dateTime21 = instant9.toDateTime(chronology20);
        org.joda.time.Instant instant22 = instant9.toInstant();
        long long23 = instant22.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime21", (instant22.compareTo(dateTime21) == 0) == instant22.equals(dateTime21));
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3042");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(353);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant10);
        java.lang.String str12 = instant10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        int int25 = instant10.compareTo((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DurationField durationField31 = gJChronology28.years();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.weekyear();
        boolean boolean33 = instant10.equals((java.lang.Object) dateTimeField32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone37.getName((long) 36000000, locale39);
        int int42 = dateTimeZone37.getOffset((long) ' ');
        long long46 = dateTimeZone37.convertLocalToUTC(110L, true, 110L);
        org.joda.time.DateTime dateTime47 = instant10.toDateTime(dateTimeZone37);
        java.util.Date date48 = instant10.toDate();
        boolean boolean49 = dateTimeZone1.equals((java.lang.Object) instant10);
        long long50 = instant10.getMillis();
        org.joda.time.DateTime dateTime51 = instant10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology54.getZone();
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, (org.joda.time.ReadableInstant) instant60);
        java.lang.String str62 = instant60.toString();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.dayOfYear();
        org.joda.time.Instant instant69 = gJChronology65.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Instant instant71 = instant69.minus(readableDuration70);
        org.joda.time.Instant instant74 = instant71.withDurationAdded((-12219292800000L), 0);
        int int75 = instant60.compareTo((org.joda.time.ReadableInstant) instant71);
        long long76 = instant60.getMillis();
        org.joda.time.Instant instant77 = instant60.toInstant();
        org.joda.time.Chronology chronology78 = instant60.getChronology();
        boolean boolean79 = instant60.isAfterNow();
        org.joda.time.Instant instant82 = instant60.withDurationAdded(36000000L, 0);
        org.joda.time.Instant instant84 = new org.joda.time.Instant(14364002506L);
        boolean boolean85 = instant60.isAfter((org.joda.time.ReadableInstant) instant84);
        boolean boolean86 = instant10.isEqual((org.joda.time.ReadableInstant) instant60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and instant60", (dateTime47.compareTo(instant60) == 0) == dateTime47.equals(instant60));
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3043");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.clockhourOfHalfday();
        org.joda.time.DateTime dateTime10 = instant4.toDateTime((org.joda.time.Chronology) gJChronology7);
        org.joda.time.DateTimeField dateTimeField11 = gJChronology7.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime10", (instant1.compareTo(dateTime10) == 0) == instant1.equals(dateTime10));
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3044");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        boolean boolean10 = julianChronology8.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology11 = julianChronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology13 = julianChronology8.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = julianChronology8.days();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology8.minuteOfHour();
        long long25 = julianChronology8.getDateTimeMillis(10, 1, 1, (int) (byte) 0, (int) (short) 0, 10, 16);
        org.joda.time.DurationField durationField26 = julianChronology8.months();
        org.joda.time.DateTime dateTime27 = instant1.toDateTime((org.joda.time.Chronology) julianChronology8);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology8.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime27", (instant1.compareTo(dateTime27) == 0) == instant1.equals(dateTime27));
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3045");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.days();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.clockhourOfDay();
        java.lang.String str10 = gJChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology8.days();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = gJChronology8.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology29.getZone();
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = gJChronology8.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology37 = gJChronology2.withZone(dateTimeZone32);
        java.lang.String str38 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = gJChronology2.add(readablePeriod40, (-71997484L), 43203104);
        org.joda.time.DurationField durationField44 = gJChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField44", (durationField22.compareTo(durationField44) == 0) == durationField22.equals(durationField44));
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3046");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone35.getName((long) 36000000, locale37);
        int int40 = dateTimeZone35.getOffset((long) ' ');
        long long44 = dateTimeZone35.convertLocalToUTC(110L, true, 110L);
        org.joda.time.DateTime dateTime45 = instant8.toDateTime(dateTimeZone35);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone35.getName((-1168L), locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime45", (instant8.compareTo(dateTime45) == 0) == instant8.equals(dateTime45));
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3047");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.Chronology chronology31 = instant27.getChronology();
        org.joda.time.Chronology chronology32 = instant27.getChronology();
        org.joda.time.Chronology chronology33 = instant27.getChronology();
        org.joda.time.Instant instant36 = instant27.withDurationAdded((long) 36000, 353);
        boolean boolean38 = instant27.isEqual((long) 24);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        org.joda.time.DateTime dateTime42 = instant27.toDateTime(dateTimeZone41);
        long long43 = instant27.getMillis();
        org.joda.time.Instant instant44 = instant27.toInstant();
        org.joda.time.DateTime dateTime45 = instant44.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and dateTime42", (instant44.compareTo(dateTime42) == 0) == instant44.equals(dateTime42));
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3048");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.000Z");
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.Chronology chronology10 = gJChronology5.withZone(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName((long) (byte) 10);
        long long15 = dateTimeZone8.convertLocalToUTC((-35999900L), false);
        int int17 = dateTimeZone8.getOffsetFromLocal((long) 278);
        boolean boolean19 = dateTimeZone8.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = instant46.isSupported(dateTimeFieldType49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant46.toString(dateTimeFormatter51);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant46);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant46.withDurationAdded(readableDuration54, 0);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant46.minus(readableDuration57);
        java.util.Date date59 = instant58.toDate();
        boolean boolean60 = instant1.isBefore((org.joda.time.ReadableInstant) instant58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.chrono.JulianChronology julianChronology64 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone62);
        boolean boolean66 = julianChronology64.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology67 = julianChronology64.withUTC();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology69 = julianChronology64.withZone(dateTimeZone68);
        org.joda.time.DurationField durationField70 = julianChronology64.days();
        org.joda.time.DateTimeField dateTimeField71 = julianChronology64.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str74 = dateTimeZone73.getID();
        boolean boolean75 = dateTimeZone73.isFixed();
        long long77 = dateTimeZone73.previousTransition(100L);
        java.util.TimeZone timeZone78 = dateTimeZone73.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.Chronology chronology80 = julianChronology64.withZone(dateTimeZone79);
        java.util.TimeZone timeZone81 = dateTimeZone79.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.DateTime dateTime84 = instant58.toDateTime(dateTimeZone83);
        java.lang.String str85 = instant58.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant58 and dateTime84", (instant58.compareTo(dateTime84) == 0) == instant58.equals(dateTime84));
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3049");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = instant16.isAfter(readableInstant18);
        org.joda.time.Instant instant21 = instant16.withMillis(35999999L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        java.lang.String str25 = instant23.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime24", (instant23.compareTo(mutableDateTime24) == 0) == instant23.equals(mutableDateTime24));
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3050");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField22 = gJChronology2.months();
        org.joda.time.DurationField durationField23 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField25 = gJChronology2.days();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField27 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField22, and durationField23", !(durationField27.compareTo(durationField22) == 0) || (Math.signum(durationField27.compareTo(durationField23)) == Math.signum(durationField22.compareTo(durationField23))));
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3051");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.Instant instant5 = instant1.withDurationAdded((long) 353, 36000000);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant8 = instant1.withMillis((long) 5);
        org.joda.time.Instant instant9 = instant1.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant1.withDurationAdded(readableDuration10, (int) (short) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant12", (dateTime2.compareTo(instant12) == 0) == dateTime2.equals(instant12));
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3052");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.Instant instant11 = instant9.minus((-35999991L));
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant11.withDurationAdded(readableDuration13, 895);
        org.joda.time.DateTime dateTime16 = instant11.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and instant11", (mutableDateTime12.compareTo(instant11) == 0) == mutableDateTime12.equals(instant11));
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3053");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant74 = instant19.minus(3L);
        org.joda.time.MutableDateTime mutableDateTime75 = instant19.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime76 = instant19.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime75", (instant19.compareTo(mutableDateTime75) == 0) == instant19.equals(mutableDateTime75));
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3054");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField8 = gJChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfMonth();
        org.joda.time.DurationField durationField10 = gJChronology7.halfdays();
        org.joda.time.DurationField durationField11 = gJChronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        boolean boolean17 = julianChronology15.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology15.weekyear();
        org.joda.time.DurationField durationField19 = julianChronology15.days();
        org.joda.time.Chronology chronology20 = julianChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology15.hourOfDay();
        boolean boolean22 = gJChronology7.equals((java.lang.Object) julianChronology15);
        org.joda.time.DurationField durationField23 = gJChronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField8, and durationField10", !(durationField23.compareTo(durationField8) == 0) || (Math.signum(durationField23.compareTo(durationField10)) == Math.signum(durationField8.compareTo(durationField10))));
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3055");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        boolean boolean74 = instant19.isBefore(4L);
        org.joda.time.Instant instant77 = instant19.withDurationAdded((long) 1200, 69);
        long long78 = instant19.getMillis();
        java.lang.String str79 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80, readableInstant81);
        org.joda.time.DateTimeZone dateTimeZone83 = gJChronology82.getZone();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str86 = dateTimeZone85.getID();
        org.joda.time.Chronology chronology87 = gJChronology82.withZone(dateTimeZone85);
        org.joda.time.DateTimeZone dateTimeZone88 = gJChronology82.getZone();
        org.joda.time.DateTimeField dateTimeField89 = gJChronology82.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField90 = gJChronology82.secondOfMinute();
        int int91 = instant19.get(dateTimeField90);
        org.joda.time.MutableDateTime mutableDateTime92 = instant19.toMutableDateTimeISO();
        boolean boolean94 = instant19.isEqual((-1199766959970902L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime92", (instant19.compareTo(mutableDateTime92) == 0) == instant19.equals(mutableDateTime92));
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3056");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = instant8.getZone();
        boolean boolean28 = instant8.isEqual(0L);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.minus(readableDuration29);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.Instant instant38 = gJChronology34.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant38.minus(readableDuration39);
        org.joda.time.Instant instant43 = instant40.withDurationAdded((-12219292800000L), 0);
        boolean boolean45 = instant40.isEqual(35L);
        boolean boolean46 = instant31.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant31.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology51.getZone();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant57);
        java.lang.String str59 = instant57.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.dayOfYear();
        org.joda.time.Instant instant66 = gJChronology62.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant66.minus(readableDuration67);
        org.joda.time.Instant instant71 = instant68.withDurationAdded((-12219292800000L), 0);
        int int72 = instant57.compareTo((org.joda.time.ReadableInstant) instant68);
        long long73 = instant57.getMillis();
        long long74 = instant57.getMillis();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant77 = instant57.withDurationAdded(readableDuration75, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Instant instant79 = instant57.plus(readableDuration78);
        int int80 = instant31.compareTo((org.joda.time.ReadableInstant) instant79);
        org.joda.time.DateTime dateTime81 = instant79.toDateTimeISO();
        boolean boolean82 = instant8.isEqual((org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime81", (instant8.compareTo(dateTime81) == 0) == instant8.equals(dateTime81));
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3057");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = instant26.isSupported(dateTimeFieldType29);
        org.joda.time.Instant instant33 = instant26.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        java.lang.String str41 = dateTimeZone40.getID();
        long long43 = dateTimeZone40.nextTransition((long) 10);
        long long45 = dateTimeZone40.nextTransition((-35999900L));
        java.lang.String str47 = dateTimeZone40.getNameKey((long) 1582);
        org.joda.time.MutableDateTime mutableDateTime48 = instant33.toMutableDateTime(dateTimeZone40);
        long long51 = dateTimeZone40.convertLocalToUTC(2066L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime48", (instant33.compareTo(mutableDateTime48) == 0) == instant33.equals(mutableDateTime48));
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3058");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        boolean boolean40 = instant39.isAfterNow();
        boolean boolean41 = instant39.isAfterNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant39.withDurationAdded(readableDuration42, 20);
        boolean boolean45 = instant27.isEqual((org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.Chronology chronology49 = gJChronology48.withUTC();
        java.lang.String str50 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField55 = gJChronology48.seconds();
        org.joda.time.DateTime dateTime56 = instant27.toDateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.DurationField durationField57 = gJChronology48.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime56", (instant27.compareTo(dateTime56) == 0) == instant27.equals(dateTime56));
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3059");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = instant19.isSupported(dateTimeFieldType21);
        int int23 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant26 = instant19.withDurationAdded((-107999990L), (int) '#');
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime20", (instant19.compareTo(dateTime20) == 0) == instant19.equals(dateTime20));
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3060");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = instant1.isSupported(dateTimeFieldType5);
        boolean boolean8 = instant1.isEqual(51360008L);
        org.joda.time.Chronology chronology9 = instant1.getChronology();
        org.joda.time.DateTime dateTime10 = instant1.toDateTimeISO();
        org.joda.time.Instant instant11 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime10", (instant11.compareTo(dateTime10) == 0) == instant11.equals(dateTime10));
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3061");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology15 = julianChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = julianChronology12.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = julianChronology12.days();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology12.dayOfYear();
        org.joda.time.DurationField durationField22 = julianChronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology12.era();
        org.joda.time.DurationField durationField25 = julianChronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone26 = julianChronology12.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.Chronology chronology28 = julianChronology3.withZone(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField18", Math.signum(durationField5.compareTo(durationField18)) == -Math.signum(durationField18.compareTo(durationField5)));
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant6.withDurationAdded(readableDuration22, 1582);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime9", (instant24.compareTo(mutableDateTime9) == 0) == instant24.equals(mutableDateTime9));
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3063");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.000Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant4.toString(dateTimeFormatter8);
        org.joda.time.Instant instant12 = instant4.withDurationAdded(0L, 1582);
        org.joda.time.MutableDateTime mutableDateTime13 = instant4.toMutableDateTimeISO();
        boolean boolean14 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Instant instant15 = mutableDateTime13.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3064");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        long long13 = gJChronology2.add((long) 10, 151199999L, 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.minuteOfDay();
        org.joda.time.DurationField durationField18 = julianChronology16.weekyears();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        long long27 = dateTimeZone20.previousTransition(5201L);
        org.joda.time.Chronology chronology28 = julianChronology16.withZone(dateTimeZone20);
        java.lang.String str30 = dateTimeZone20.getName(3600000L);
        org.joda.time.Chronology chronology31 = gJChronology2.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField32 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField35 = gJChronology2.years();
        org.joda.time.DurationField durationField36 = gJChronology2.halfdays();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        boolean boolean38 = instant37.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime39 = instant37.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime39.getZone();
        org.joda.time.Chronology chronology41 = gJChronology2.withZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and mutableDateTime39", (instant37.compareTo(mutableDateTime39) == 0) == instant37.equals(mutableDateTime39));
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3065");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        boolean boolean21 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = instant11.getZone();
        boolean boolean23 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = instant11.getZone();
        boolean boolean25 = dateTimeZone24.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime20", (instant11.compareTo(dateTime20) == 0) == instant11.equals(dateTime20));
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3066");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        long long33 = instant17.getMillis();
        long long34 = instant17.getMillis();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant17.withDurationAdded(readableDuration35, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant17.plus(readableDuration38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant17.minus(readableDuration40);
        org.joda.time.Instant instant43 = instant41.plus((-36000001L));
        boolean boolean44 = instant7.isBefore((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant46.plus(readableDuration47);
        org.joda.time.Instant instant50 = instant46.minus((long) 10);
        java.util.Date date51 = instant50.toDate();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        int int56 = dateTimeZone53.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone53);
        org.joda.time.DurationField durationField58 = julianChronology57.centuries();
        boolean boolean59 = instant50.equals((java.lang.Object) durationField58);
        java.lang.String str60 = instant50.toString();
        boolean boolean61 = instant41.isBefore((org.joda.time.ReadableInstant) instant50);
        org.joda.time.MutableDateTime mutableDateTime62 = instant41.toMutableDateTimeISO();
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        boolean boolean64 = instant63.isAfterNow();
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        boolean boolean66 = instant41.isEqual((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime62", (instant1.compareTo(mutableDateTime62) == 0) == instant1.equals(mutableDateTime62));
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3067");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        boolean boolean13 = instant6.isAfter((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField18 = julianChronology17.centuries();
        org.joda.time.DurationField durationField19 = julianChronology17.weeks();
        org.joda.time.DurationField durationField20 = julianChronology17.days();
        org.joda.time.DurationField durationField21 = julianChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.hourOfHalfday();
        org.joda.time.Chronology chronology23 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology17.minuteOfDay();
        boolean boolean26 = instant6.equals((java.lang.Object) dateTimeField25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant6.getZone();
        boolean boolean28 = instant6.isEqualNow();
        org.joda.time.DateTime dateTime29 = instant6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone30 = instant6.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime29", (instant6.compareTo(dateTime29) == 0) == instant6.equals(dateTime29));
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3068");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-59011667999903L));
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = instant1.getZone();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3069");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField9 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DurationField durationField11 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField6, and durationField9", !(durationField11.compareTo(durationField6) == 0) || (Math.signum(durationField11.compareTo(durationField9)) == Math.signum(durationField6.compareTo(durationField9))));
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3070");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = gJChronology2.add(readablePeriod13, (-484113670992585L), 24);
        org.joda.time.DurationField durationField17 = gJChronology2.centuries();
        org.joda.time.DurationField durationField18 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField4, and durationField17", !(durationField18.compareTo(durationField4) == 0) || (Math.signum(durationField18.compareTo(durationField17)) == Math.signum(durationField4.compareTo(durationField17))));
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3071");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DurationField durationField11 = gJChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        java.lang.String str17 = dateTimeZone15.getNameKey((-71999900L));
        boolean boolean18 = dateTimeZone15.isFixed();
        long long20 = dateTimeZone15.previousTransition(40L);
        org.joda.time.Chronology chronology21 = gJChronology9.withZone(dateTimeZone15);
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        long long49 = instant33.getMillis();
        org.joda.time.Instant instant50 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = instant33.getZone();
        int int52 = instant24.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant54 = instant24.plus((-62158787999900L));
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.Chronology chronology62 = gJChronology57.withZone(dateTimeZone60);
        long long65 = dateTimeZone60.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone66 = dateTimeZone60.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.Instant instant70 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Instant instant72 = instant70.plus(readableDuration71);
        org.joda.time.Instant instant74 = instant72.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime75 = instant74.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        boolean boolean77 = instant74.isSupported(dateTimeFieldType76);
        int int78 = dateTimeZone67.getOffset((org.joda.time.ReadableInstant) instant74);
        java.lang.String str79 = instant74.toString();
        org.joda.time.Chronology chronology80 = instant74.getChronology();
        boolean boolean81 = instant24.isAfter((org.joda.time.ReadableInstant) instant74);
        org.joda.time.DateTime dateTime82 = instant74.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant74 and dateTime75", (instant74.compareTo(dateTime75) == 0) == instant74.equals(dateTime75));
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3072");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        long long18 = gJChronology2.add((long) 9, 0L, 0);
        org.joda.time.Instant instant19 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        boolean boolean33 = instant28.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology36.monthOfYear();
        boolean boolean44 = instant28.equals((java.lang.Object) dateTimeField43);
        org.joda.time.Instant instant46 = instant28.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant46.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.Instant instant55 = gJChronology51.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.Instant instant60 = instant57.withDurationAdded((-12219292800000L), 0);
        boolean boolean62 = instant57.isEqual(35L);
        org.joda.time.Instant instant63 = instant57.toInstant();
        boolean boolean65 = instant63.isBefore((long) ' ');
        boolean boolean66 = instant46.isAfter((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Instant instant68 = instant46.minus(4L);
        org.joda.time.Chronology chronology69 = instant46.getChronology();
        boolean boolean71 = instant46.isAfter((-107999950L));
        boolean boolean72 = instant19.isEqual((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTime dateTime73 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75, readableInstant76);
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology77.getZone();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology77.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology77.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = gJChronology77.getZone();
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology84 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone81, (org.joda.time.ReadableInstant) instant83);
        java.lang.String str85 = instant83.toString();
        int int86 = dateTimeZone74.getOffset((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Instant instant87 = new org.joda.time.Instant((java.lang.Object) instant83);
        org.joda.time.DateTimeZone dateTimeZone88 = instant83.getZone();
        org.joda.time.DateTime dateTime89 = instant46.toDateTime(dateTimeZone88);
        int int91 = dateTimeZone88.getStandardOffset((-12959963999999L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant46 and dateTime73", (instant46.compareTo(dateTime73) == 0) == instant46.equals(dateTime73));
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3073");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone12.getName((-71999990L), locale15);
        long long20 = dateTimeZone12.convertLocalToUTC((long) ' ', false, (-35999900L));
        long long23 = dateTimeZone12.adjustOffset((-62112218399999L), false);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology40 = julianChronology35.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField41 = julianChronology35.days();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology35.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        boolean boolean46 = dateTimeZone44.isFixed();
        long long48 = dateTimeZone44.previousTransition(100L);
        java.util.TimeZone timeZone49 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.Chronology chronology51 = julianChronology35.withZone(dateTimeZone50);
        java.util.TimeZone timeZone52 = dateTimeZone50.toTimeZone();
        boolean boolean53 = instant30.equals((java.lang.Object) dateTimeZone50);
        int int54 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant55 = instant30.toInstant();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant55.minus(readableDuration56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.clockhourOfDay();
        org.joda.time.DurationField durationField62 = julianChronology60.hours();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology60.centuryOfEra();
        org.joda.time.DurationField durationField65 = julianChronology60.hours();
        org.joda.time.DurationField durationField66 = julianChronology60.eras();
        org.joda.time.MutableDateTime mutableDateTime67 = instant55.toMutableDateTime((org.joda.time.Chronology) julianChronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField41 and durationField66", Math.signum(durationField41.compareTo(durationField66)) == -Math.signum(durationField66.compareTo(durationField41)));
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3074");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.plus((long) (short) 0);
        java.lang.String str8 = instant7.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology15 = julianChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = julianChronology12.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField18 = julianChronology12.days();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        boolean boolean23 = dateTimeZone21.isFixed();
        long long25 = dateTimeZone21.previousTransition(100L);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.Chronology chronology28 = julianChronology12.withZone(dateTimeZone27);
        java.util.TimeZone timeZone29 = dateTimeZone27.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        long long43 = dateTimeZone38.nextTransition((long) 0);
        long long45 = dateTimeZone31.getMillisKeepLocal(dateTimeZone38, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime46 = instant7.toMutableDateTime(dateTimeZone31);
        java.lang.String str47 = dateTimeZone31.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime46", (instant5.compareTo(mutableDateTime46) == 0) == instant5.equals(mutableDateTime46));
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3075");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        long long11 = instant10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.Chronology chronology17 = gJChronology14.withUTC();
        org.joda.time.DurationField durationField18 = gJChronology14.seconds();
        boolean boolean19 = instant10.equals((java.lang.Object) durationField18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant21.withDurationAdded(readableDuration22, 10);
        org.joda.time.Instant instant26 = instant24.withMillis((-35999990L));
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant35);
        java.lang.String str37 = instant35.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        int int50 = instant35.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant52 = instant46.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = instant52.toString(dateTimeFormatter53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant52.plus(readableDuration55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology60.getZone();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone64, (org.joda.time.ReadableInstant) instant66);
        java.lang.String str68 = instant66.toString();
        int int69 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((java.lang.Object) instant66);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((java.lang.Object) instant70);
        java.util.Date date72 = instant71.toDate();
        org.joda.time.Instant instant74 = instant71.withMillis((long) (byte) 10);
        int int75 = instant56.compareTo((org.joda.time.ReadableInstant) instant74);
        boolean boolean76 = instant24.isAfter((org.joda.time.ReadableInstant) instant74);
        boolean boolean77 = instant10.isAfter((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Instant instant79 = instant10.plus(readableDuration78);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone81);
        org.joda.time.chrono.JulianChronology julianChronology83 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone81);
        boolean boolean85 = julianChronology83.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology86 = julianChronology83.withUTC();
        org.joda.time.DateTimeZone dateTimeZone87 = julianChronology83.getZone();
        org.joda.time.chrono.GJChronology gJChronology88 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone87);
        org.joda.time.DateTimeField dateTimeField89 = gJChronology88.weekOfWeekyear();
        org.joda.time.DurationField durationField90 = gJChronology88.weeks();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology88.hourOfDay();
        org.joda.time.DateTime dateTime92 = instant10.toDateTime((org.joda.time.Chronology) gJChronology88);
        boolean boolean93 = instant10.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime92", (instant10.compareTo(dateTime92) == 0) == instant10.equals(dateTime92));
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3076");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        int int43 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((java.lang.Object) instant40);
        boolean boolean46 = instant40.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        boolean boolean50 = dateTimeZone48.isFixed();
        long long53 = dateTimeZone48.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        boolean boolean55 = instant40.equals((java.lang.Object) dateTimeZone48);
        int int56 = instant30.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.year();
        org.joda.time.DurationField durationField62 = julianChronology60.eras();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology60.yearOfCentury();
        org.joda.time.DateTime dateTime67 = instant40.toDateTime((org.joda.time.Chronology) julianChronology60);
        org.joda.time.MutableDateTime mutableDateTime68 = instant40.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime67", (instant8.compareTo(dateTime67) == 0) == instant8.equals(dateTime67));
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3077");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Chronology chronology4 = instant1.getChronology();
        org.joda.time.Instant instant5 = instant1.toInstant();
        org.joda.time.Instant instant7 = instant1.withMillis((-60514215257783L));
        org.joda.time.Instant instant10 = instant7.withDurationAdded((-59003769599996L), 19);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, 0);
        boolean boolean17 = instant15.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant15.withDurationAdded(readableDuration18, 4);
        org.joda.time.Instant instant22 = instant20.minus((-35999991L));
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant32.plus(readableDuration36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = instant32.isEqual(readableInstant38);
        org.joda.time.Chronology chronology40 = instant32.getChronology();
        org.joda.time.Instant instant42 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.plus(readableDuration43);
        org.joda.time.Instant instant46 = instant44.withMillis((long) (byte) -1);
        boolean boolean47 = instant46.isEqualNow();
        int int48 = instant32.compareTo((org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        java.lang.String str52 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.dayOfYear();
        java.lang.String str54 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology51.getZone();
        org.joda.time.DurationField durationField58 = gJChronology51.seconds();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology51.monthOfYear();
        int int60 = instant46.get(dateTimeField59);
        org.joda.time.Instant instant61 = instant46.toInstant();
        boolean boolean62 = mutableDateTime23.isEqual((org.joda.time.ReadableInstant) instant61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology65.dayOfYear();
        org.joda.time.Instant instant69 = gJChronology65.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Instant instant71 = instant69.minus(readableDuration70);
        org.joda.time.Instant instant74 = instant71.withDurationAdded((-12219292800000L), 0);
        boolean boolean76 = instant71.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.chrono.GJChronology gJChronology79 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone77, readableInstant78);
        org.joda.time.Chronology chronology80 = gJChronology79.withUTC();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology79.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology79.millisOfDay();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology79.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology79.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology79.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology79.monthOfYear();
        boolean boolean87 = instant71.equals((java.lang.Object) dateTimeField86);
        boolean boolean88 = mutableDateTime23.isAfter((org.joda.time.ReadableInstant) instant71);
        int int89 = instant10.compareTo((org.joda.time.ReadableInstant) instant71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime23", (instant22.compareTo(mutableDateTime23) == 0) == instant22.equals(mutableDateTime23));
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3078");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime20 = instant4.toMutableDateTime((org.joda.time.Chronology) julianChronology13);
        long long21 = mutableDateTime20.getMillis();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology24.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime20.toMutableDateTime((org.joda.time.Chronology) julianChronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = julianChronology24.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime20", (instant1.compareTo(mutableDateTime20) == 0) == instant1.equals(mutableDateTime20));
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3079");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        boolean boolean11 = instant8.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone12 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.weekyear();
        org.joda.time.Instant instant17 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant26);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DurationField durationField29 = gJChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.millisOfDay();
        int int32 = instant17.get(dateTimeField31);
        java.lang.String str33 = instant17.toString();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant17.minus(readableDuration34);
        boolean boolean36 = instant8.isEqual((org.joda.time.ReadableInstant) instant17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant26", (dateTime10.compareTo(instant26) == 0) == dateTime10.equals(instant26));
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        long long26 = instant8.getMillis();
        org.joda.time.Instant instant28 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant28.withDurationAdded(readableDuration29, 10);
        java.util.Date date32 = instant31.toDate();
        boolean boolean33 = instant8.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTime(dateTimeZone44);
        boolean boolean47 = mutableDateTime45.equals((java.lang.Object) (-35999900L));
        boolean boolean48 = instant31.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        java.lang.String str54 = dateTimeZone52.getName((long) 0);
        java.lang.String str56 = dateTimeZone52.getShortName((long) 10);
        boolean boolean58 = dateTimeZone52.equals((java.lang.Object) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime45.toMutableDateTime(dateTimeZone52);
        boolean boolean60 = mutableDateTime45.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime59", (instant17.compareTo(mutableDateTime59) == 0) == instant17.equals(mutableDateTime59));
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3081");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.centuryOfEra();
        int int8 = julianChronology3.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        long long37 = instant21.getMillis();
        org.joda.time.Instant instant40 = instant21.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant43 = instant40.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str46 = dateTimeZone45.getID();
        boolean boolean47 = dateTimeZone45.isFixed();
        int int49 = dateTimeZone45.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime50 = instant40.toDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.Chronology chronology54 = gJChronology53.withUTC();
        org.joda.time.DurationField durationField55 = gJChronology53.millis();
        org.joda.time.DurationField durationField56 = gJChronology53.months();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology53.getZone();
        int int59 = dateTimeZone57.getStandardOffset((-3743994852L));
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime50.toMutableDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology61 = julianChronology3.withZone(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField55", (durationField5.compareTo(durationField55) == 0) == durationField5.equals(durationField55));
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3082");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant8.withDurationAdded(readableDuration27, 1);
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        long long42 = gJChronology36.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField43 = gJChronology36.millis();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology36.hourOfHalfday();
        org.joda.time.DurationField durationField45 = gJChronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology36.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = instant33.toMutableDateTime((org.joda.time.Chronology) gJChronology36);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.Chronology chronology51 = gJChronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.millisOfDay();
        long long57 = gJChronology50.add((long) (byte) 1, (long) (short) 100, (int) '4');
        org.joda.time.DateTimeField dateTimeField58 = gJChronology50.hourOfHalfday();
        org.joda.time.DurationField durationField59 = gJChronology50.millis();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime47.toMutableDateTime((org.joda.time.Chronology) gJChronology50);
        org.joda.time.DateTimeField dateTimeField61 = gJChronology50.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime47", (instant6.compareTo(mutableDateTime47) == 0) == instant6.equals(mutableDateTime47));
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3083");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = gJChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.halfdayOfDay();
        int int18 = instant9.get(dateTimeField17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = instant9.toString(dateTimeFormatter19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = instant9.isEqual(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        java.lang.String str26 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.dayOfYear();
        java.lang.String str28 = gJChronology25.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        int int33 = dateTimeZone30.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        org.joda.time.Chronology chronology35 = gJChronology25.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, (org.joda.time.ReadableInstant) instant56);
        java.lang.String str58 = instant56.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.Chronology chronology62 = gJChronology61.withUTC();
        java.lang.String str63 = gJChronology61.toString();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology61.dayOfWeek();
        org.joda.time.Instant instant67 = gJChronology61.getGregorianCutover();
        boolean boolean68 = instant56.equals((java.lang.Object) gJChronology61);
        boolean boolean69 = instant47.isAfter((org.joda.time.ReadableInstant) instant56);
        org.joda.time.Instant instant71 = instant56.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (org.joda.time.ReadableInstant) instant71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.joda.time.DurationField durationField77 = gJChronology75.millis();
        long long81 = gJChronology75.add((long) '4', 0L, (int) (byte) -1);
        int int82 = gJChronology75.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology75.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime84 = instant71.toMutableDateTime((org.joda.time.Chronology) gJChronology75);
        boolean boolean85 = instant9.isEqual((org.joda.time.ReadableInstant) instant71);
        org.joda.time.Instant instant87 = instant9.withMillis((-60514840683410L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant71 and mutableDateTime84", (instant71.compareTo(mutableDateTime84) == 0) == instant71.equals(mutableDateTime84));
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3084");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone43 = instant9.getZone();
        org.joda.time.Instant instant45 = instant9.minus((-59003805599996L));
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.minus(readableDuration46);
        org.joda.time.MutableDateTime mutableDateTime48 = instant47.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone49 = instant47.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant47 and mutableDateTime48", (instant47.compareTo(mutableDateTime48) == 0) == instant47.equals(mutableDateTime48));
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3085");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        org.joda.time.DurationField durationField21 = gJChronology13.eras();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField25 = gJChronology13.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField25, and durationField21", !(durationField21.compareTo(durationField25) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField25.compareTo(durationField21))));
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3086");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        boolean boolean28 = instant8.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) instant37);
        java.lang.String str39 = instant37.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology42.dayOfYear();
        org.joda.time.Instant instant46 = gJChronology42.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant46.minus(readableDuration47);
        org.joda.time.Instant instant51 = instant48.withDurationAdded((-12219292800000L), 0);
        int int52 = instant37.compareTo((org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone53 = instant37.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str60 = dateTimeZone59.getID();
        org.joda.time.Chronology chronology61 = gJChronology56.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField62 = gJChronology56.minuteOfDay();
        boolean boolean63 = instant37.equals((java.lang.Object) gJChronology56);
        org.joda.time.DateTime dateTime64 = instant37.toDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = dateTime64.toString(dateTimeFormatter65);
        boolean boolean67 = instant8.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.chrono.GJChronology gJChronology70 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, readableInstant69);
        org.joda.time.DateTimeZone dateTimeZone71 = gJChronology70.getZone();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology70.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology70.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology70.secondOfDay();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology70.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology70.secondOfMinute();
        boolean boolean77 = instant8.equals((java.lang.Object) gJChronology70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime64", (instant37.compareTo(dateTime64) == 0) == instant37.equals(dateTime64));
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3087");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        org.joda.time.MutableDateTime mutableDateTime33 = instant30.toMutableDateTime(dateTimeZone32);
        org.joda.time.Instant instant34 = instant30.toInstant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = instant30.toString(dateTimeFormatter35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime33 and instant30", (mutableDateTime33.compareTo(instant30) == 0) == mutableDateTime33.equals(instant30));
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3088");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        long long4 = instant1.getMillis();
        java.lang.String str5 = instant1.toString();
        boolean boolean6 = instant1.isBeforeNow();
        org.joda.time.Instant instant8 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime9 = instant8.toDateTimeISO();
        org.joda.time.Instant instant12 = instant8.withDurationAdded((long) 353, 36000000);
        org.joda.time.MutableDateTime mutableDateTime13 = instant8.toMutableDateTimeISO();
        org.joda.time.Instant instant15 = instant8.withMillis((long) 5);
        boolean boolean16 = instant1.isEqual((org.joda.time.ReadableInstant) instant8);
        boolean boolean17 = instant1.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime9", (instant8.compareTo(dateTime9) == 0) == instant8.equals(dateTime9));
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3089");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DurationField durationField32 = gJChronology30.millis();
        org.joda.time.Chronology chronology33 = gJChronology30.withUTC();
        org.joda.time.DurationField durationField34 = gJChronology30.seconds();
        org.joda.time.DateTime dateTime35 = instant26.toDateTime((org.joda.time.Chronology) gJChronology30);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology30.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime35", (instant8.compareTo(dateTime35) == 0) == instant8.equals(dateTime35));
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = instant6.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.joda.time.DateTime dateTime17 = instant6.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant26);
        java.lang.String str28 = instant26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        int int41 = instant26.compareTo((org.joda.time.ReadableInstant) instant37);
        long long42 = instant26.getMillis();
        org.joda.time.Instant instant45 = instant26.withDurationAdded((long) '#', 278);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone47.getName(0L, locale49);
        java.lang.String str52 = dateTimeZone47.getName((-71999990L));
        org.joda.time.DateTime dateTime53 = instant45.toDateTime(dateTimeZone47);
        boolean boolean54 = dateTime17.isBefore((org.joda.time.ReadableInstant) instant45);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant57 = instant45.withDurationAdded(readableDuration55, (int) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime17", (instant6.compareTo(dateTime17) == 0) == instant6.equals(dateTime17));
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3091");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant18.minus(readableDuration19);
        org.joda.time.Instant instant23 = instant20.withDurationAdded((-12219292800000L), 0);
        boolean boolean25 = instant20.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology28.monthOfYear();
        boolean boolean36 = instant20.equals((java.lang.Object) dateTimeField35);
        boolean boolean38 = instant20.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.Instant instant53 = instant50.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant50.plus(readableDuration54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.dayOfYear();
        org.joda.time.Instant instant63 = gJChronology59.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant65 = instant63.minus(readableDuration64);
        org.joda.time.Instant instant68 = instant65.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime69 = instant65.toMutableDateTime();
        int int70 = instant55.compareTo((org.joda.time.ReadableInstant) mutableDateTime69);
        boolean boolean71 = instant20.isBefore((org.joda.time.ReadableInstant) mutableDateTime69);
        int int72 = instant11.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant75 = instant20.withDurationAdded(296L, (int) (byte) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant75 and mutableDateTime69", (instant75.compareTo(mutableDateTime69) == 0) == instant75.equals(mutableDateTime69));
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3092");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant32 = instant2.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        long long35 = instant32.getMillis();
        org.joda.time.Instant instant37 = instant32.plus((-71999990L));
        org.joda.time.Instant instant38 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.minus(readableDuration46);
        org.joda.time.Instant instant50 = instant47.withDurationAdded((-12219292800000L), 0);
        boolean boolean52 = instant47.isEqual(35L);
        boolean boolean53 = instant38.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant38.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, (org.joda.time.ReadableInstant) instant64);
        java.lang.String str66 = instant64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant73.minus(readableDuration74);
        org.joda.time.Instant instant78 = instant75.withDurationAdded((-12219292800000L), 0);
        int int79 = instant64.compareTo((org.joda.time.ReadableInstant) instant75);
        long long80 = instant64.getMillis();
        long long81 = instant64.getMillis();
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Instant instant84 = instant64.withDurationAdded(readableDuration82, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant64.plus(readableDuration85);
        int int87 = instant38.compareTo((org.joda.time.ReadableInstant) instant86);
        org.joda.time.DateTimeZone dateTimeZone88 = instant86.getZone();
        boolean boolean89 = instant86.isEqualNow();
        int int90 = instant32.compareTo((org.joda.time.ReadableInstant) instant86);
        long long91 = instant86.getMillis();
        org.joda.time.DateTime dateTime92 = instant86.toDateTimeISO();
        long long93 = instant86.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime92", (instant11.compareTo(dateTime92) == 0) == instant11.equals(dateTime92));
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = gJChronology12.years();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfEra();
        boolean boolean18 = instant6.equals((java.lang.Object) dateTimeField17);
        boolean boolean19 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfWeek();
        org.joda.time.Chronology chronology25 = gJChronology22.withUTC();
        org.joda.time.DurationField durationField26 = gJChronology22.halfdays();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology22.getZone();
        int int29 = dateTimeZone27.getOffset((long) 1);
        org.joda.time.DateTime dateTime30 = instant6.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Chronology chronology38 = gJChronology33.withZone(dateTimeZone36);
        long long41 = dateTimeZone36.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone42 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean44 = dateTimeZone43.isFixed();
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone43.getName((-71999990L), locale46);
        long long51 = dateTimeZone43.convertLocalToUTC((long) ' ', false, (-35999900L));
        long long54 = dateTimeZone43.adjustOffset((-62112218399999L), false);
        boolean boolean55 = instant6.equals((java.lang.Object) (-62112218399999L));
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.Chronology chronology59 = gJChronology58.withUTC();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        java.lang.String str65 = dateTimeZone63.getName((long) 0);
        long long68 = dateTimeZone63.adjustOffset(1L, true);
        org.joda.time.Chronology chronology69 = gJChronology58.withZone(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology72.getZone();
        boolean boolean75 = dateTimeZone73.isStandardOffset((long) ' ');
        java.lang.String str76 = dateTimeZone73.getID();
        boolean boolean77 = dateTimeZone63.equals((java.lang.Object) dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime78 = instant6.toMutableDateTime(dateTimeZone63);
        boolean boolean79 = dateTimeZone63.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3094");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField9", Math.signum(durationField4.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField4)));
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3095");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.Instant instant11 = instant9.minus((-35999991L));
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant11.withDurationAdded(readableDuration13, 895);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime12", (instant15.compareTo(mutableDateTime12) == 0) == instant15.equals(mutableDateTime12));
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3096");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = instant8.isSupported(dateTimeFieldType25);
        org.joda.time.MutableDateTime mutableDateTime27 = instant8.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DurationField durationField32 = gJChronology30.millis();
        org.joda.time.Chronology chronology33 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekyearOfCentury();
        boolean boolean35 = instant8.equals((java.lang.Object) chronology33);
        java.lang.String str36 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.Instant instant43 = gJChronology39.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.minus(readableDuration44);
        org.joda.time.Instant instant48 = instant45.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology51.getZone();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant57);
        java.lang.String str59 = instant57.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.Chronology chronology63 = gJChronology62.withUTC();
        java.lang.String str64 = gJChronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology62.dayOfWeek();
        org.joda.time.Instant instant68 = gJChronology62.getGregorianCutover();
        boolean boolean69 = instant57.equals((java.lang.Object) gJChronology62);
        boolean boolean70 = instant48.isAfter((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Instant instant72 = instant57.minus((-61543965598418L));
        org.joda.time.DateTimeZone dateTimeZone73 = instant57.getZone();
        org.joda.time.Instant instant74 = instant57.toInstant();
        org.joda.time.Instant instant76 = instant74.minus((-6211224791991830L));
        org.joda.time.Instant instant77 = instant76.toInstant();
        boolean boolean78 = instant8.isAfter((org.joda.time.ReadableInstant) instant77);
        org.joda.time.MutableDateTime mutableDateTime79 = instant8.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime27 and instant57", (mutableDateTime27.compareTo(instant57) == 0) == mutableDateTime27.equals(instant57));
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3097");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Chronology chronology12 = julianChronology3.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.days();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology16.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        boolean boolean27 = dateTimeZone25.isFixed();
        long long29 = dateTimeZone25.previousTransition(100L);
        java.util.TimeZone timeZone30 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.Chronology chronology32 = julianChronology16.withZone(dateTimeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone31.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        long long37 = dateTimeZone35.previousTransition((-60514215186866L));
        org.joda.time.Chronology chronology38 = julianChronology3.withZone(dateTimeZone35);
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField39, durationField10, and durationField22", !(durationField39.compareTo(durationField10) == 0) || (Math.signum(durationField39.compareTo(durationField22)) == Math.signum(durationField10.compareTo(durationField22))));
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3098");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        long long13 = instant11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        long long22 = gJChronology16.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.dayOfYear();
        org.joda.time.DurationField durationField25 = gJChronology16.weekyears();
        boolean boolean26 = instant11.equals((java.lang.Object) durationField25);
        org.joda.time.Instant instant28 = instant11.plus((-60514215195738L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.Chronology chronology34 = gJChronology31.withUTC();
        org.joda.time.DurationField durationField35 = gJChronology31.hours();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.clockhourOfDay();
        java.lang.String str37 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology31.halfdayOfDay();
        org.joda.time.Chronology chronology40 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology31.yearOfEra();
        org.joda.time.DateTime dateTime43 = instant28.toDateTime((org.joda.time.Chronology) gJChronology31);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant28.plus(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant28.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and instant28", (dateTime43.compareTo(instant28) == 0) == dateTime43.equals(instant28));
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3099");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        org.joda.time.DurationField durationField17 = julianChronology15.weeks();
        org.joda.time.DurationField durationField18 = julianChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.dayOfYear();
        boolean boolean20 = gJChronology2.equals((java.lang.Object) julianChronology15);
        org.joda.time.DurationField durationField21 = gJChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (-1));
        int int27 = dateTimeZone23.getOffsetFromLocal((-35999105L));
        long long31 = dateTimeZone23.convertLocalToUTC(0L, false, 7196400020L);
        org.joda.time.Chronology chronology32 = gJChronology2.withZone(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField18 and durationField21", (durationField18.compareTo(durationField21) == 0) == durationField18.equals(durationField21));
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3100");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.DurationField durationField1 = gJChronology0.eras();
        org.joda.time.DurationField durationField2 = gJChronology0.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField1, durationField2, and durationField1", !(durationField1.compareTo(durationField2) == 0) || (Math.signum(durationField1.compareTo(durationField1)) == Math.signum(durationField2.compareTo(durationField1))));
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3101");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        long long26 = instant8.getMillis();
        org.joda.time.Instant instant28 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant28.withDurationAdded(readableDuration29, 10);
        java.util.Date date32 = instant31.toDate();
        boolean boolean33 = instant8.isAfter((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime45 = instant42.toMutableDateTime(dateTimeZone44);
        boolean boolean47 = mutableDateTime45.equals((java.lang.Object) (-35999900L));
        boolean boolean48 = instant31.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        java.lang.String str54 = dateTimeZone52.getName((long) 0);
        java.lang.String str56 = dateTimeZone52.getShortName((long) 10);
        boolean boolean58 = dateTimeZone52.equals((java.lang.Object) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime45.toMutableDateTime(dateTimeZone52);
        boolean boolean61 = dateTimeZone52.isStandardOffset(10371503484098510L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime45", (instant17.compareTo(mutableDateTime45) == 0) == instant17.equals(mutableDateTime45));
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3102");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.Chronology chronology23 = gJChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology26 = chronology23.withZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = instant16.toDateTime(dateTimeZone25);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DurationField durationField29 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.clockhourOfHalfday();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime((org.joda.time.Chronology) gJChronology28);
        boolean boolean32 = dateTime27.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime31", (instant9.compareTo(dateTime31) == 0) == instant9.equals(dateTime31));
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3103");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.dayOfMonth();
        java.lang.String str16 = gJChronology2.toString();
        java.lang.String str17 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.weekOfWeekyear();
        org.joda.time.Instant instant20 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.plus(readableDuration21);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(1L);
        boolean boolean25 = instant20.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(100L);
        boolean boolean28 = instant24.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant30 = instant27.withMillis((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        java.lang.String str36 = dateTimeZone32.getNameKey(10L);
        long long38 = dateTimeZone32.convertUTCToLocal((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        boolean boolean44 = julianChronology42.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology47 = julianChronology42.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField48 = julianChronology42.days();
        int int49 = julianChronology42.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField50 = julianChronology42.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology42.millisOfDay();
        boolean boolean52 = dateTimeZone32.equals((java.lang.Object) dateTimeField51);
        java.util.TimeZone timeZone53 = dateTimeZone32.toTimeZone();
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeZone32.getShortName((long) (-1), locale55);
        org.joda.time.MutableDateTime mutableDateTime57 = instant27.toMutableDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology58 = gJChronology2.withZone(dateTimeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime57", (instant27.compareTo(mutableDateTime57) == 0) == instant27.equals(mutableDateTime57));
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3104");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        int int43 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((java.lang.Object) instant40);
        boolean boolean46 = instant40.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        boolean boolean50 = dateTimeZone48.isFixed();
        long long53 = dateTimeZone48.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        boolean boolean55 = instant40.equals((java.lang.Object) dateTimeZone48);
        int int56 = instant30.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.year();
        org.joda.time.DurationField durationField62 = julianChronology60.eras();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology60.yearOfCentury();
        org.joda.time.DateTime dateTime67 = instant40.toDateTime((org.joda.time.Chronology) julianChronology60);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70);
        boolean boolean74 = julianChronology72.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology75 = julianChronology72.withUTC();
        org.joda.time.DateTimeZone dateTimeZone76 = julianChronology72.getZone();
        org.joda.time.chrono.GJChronology gJChronology77 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = gJChronology77.weekOfWeekyear();
        org.joda.time.DurationField durationField79 = gJChronology77.years();
        boolean boolean80 = dateTime67.equals((java.lang.Object) durationField79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField62, durationField79, and durationField62", !(durationField62.compareTo(durationField79) == 0) || (Math.signum(durationField62.compareTo(durationField62)) == Math.signum(durationField79.compareTo(durationField62))));
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3105");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.Instant instant30 = instant28.withMillis((-593285867998337L));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.DurationField durationField35 = julianChronology34.weeks();
        org.joda.time.DurationField durationField36 = julianChronology34.millis();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology34.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology34.year();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology34.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = julianChronology34.seconds();
        org.joda.time.DateTimeZone dateTimeZone42 = julianChronology34.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = julianChronology34.getZone();
        java.lang.String str45 = dateTimeZone43.getName(86400000L);
        org.joda.time.DateTime dateTime46 = instant28.toDateTime(dateTimeZone43);
        java.util.Date date47 = instant28.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime46", (instant8.compareTo(dateTime46) == 0) == instant8.equals(dateTime46));
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3106");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = instant26.toMutableDateTimeISO();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) mutableDateTime28);
        org.joda.time.DateTime dateTime30 = instant29.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime28", (instant26.compareTo(mutableDateTime28) == 0) == instant26.equals(mutableDateTime28));
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3107");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = julianChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfWeek();
        org.joda.time.Chronology chronology10 = gJChronology7.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology7.halfdays();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.dayOfWeek();
        org.joda.time.Chronology chronology18 = gJChronology15.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology21 = chronology18.withZone(dateTimeZone20);
        java.lang.String str22 = dateTimeZone20.getID();
        org.joda.time.Chronology chronology23 = gJChronology7.withZone(dateTimeZone20);
        long long25 = dateTimeZone20.convertUTCToLocal((-107999990L));
        org.joda.time.Chronology chronology26 = julianChronology2.withZone(dateTimeZone20);
        java.lang.String str27 = dateTimeZone20.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.minus(readableDuration35);
        org.joda.time.Instant instant39 = instant36.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant36.plus(readableDuration40);
        java.util.Date date42 = instant41.toDate();
        org.joda.time.Instant instant44 = instant41.plus(35L);
        java.lang.String str45 = instant41.toString();
        int int46 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTime dateTime47 = instant41.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime47", (instant41.compareTo(dateTime47) == 0) == instant41.equals(dateTime47));
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.Instant instant33 = instant8.withMillis(32L);
        java.util.Date date34 = instant33.toDate();
        org.joda.time.DateTimeZone dateTimeZone35 = instant33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology38.getZone();
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) instant44);
        org.joda.time.DateTime dateTime46 = instant44.toDateTime();
        boolean boolean47 = instant44.isEqualNow();
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime46", (instant8.compareTo(dateTime46) == 0) == instant8.equals(dateTime46));
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3109");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.Instant instant38 = gJChronology34.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant38.minus(readableDuration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant40.plus(readableDuration41);
        boolean boolean43 = instant8.isBefore((org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeZone dateTimeZone44 = instant8.getZone();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant47 = instant8.withDurationAdded(readableDuration45, (int) '#');
        org.joda.time.Instant instant49 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        boolean boolean50 = instant8.isBefore((org.joda.time.ReadableInstant) instant49);
        boolean boolean52 = instant49.isBefore((long) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = instant49.isSupported(dateTimeFieldType53);
        org.joda.time.Instant instant55 = instant49.toInstant();
        boolean boolean57 = instant49.isBefore(0L);
        org.joda.time.Instant instant59 = instant49.minus((-59082393599991L));
        org.joda.time.Instant instant61 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant61.plus(readableDuration62);
        org.joda.time.Instant instant65 = instant61.minus((long) 10);
        java.util.Date date66 = instant65.toDate();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        int int71 = dateTimeZone68.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone68);
        org.joda.time.DurationField durationField73 = julianChronology72.centuries();
        boolean boolean74 = instant65.equals((java.lang.Object) durationField73);
        java.lang.String str75 = instant65.toString();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.MutableDateTime mutableDateTime78 = instant65.toMutableDateTime(dateTimeZone77);
        int int79 = instant59.compareTo((org.joda.time.ReadableInstant) mutableDateTime78);
        org.joda.time.Chronology chronology80 = mutableDateTime78.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant65 and mutableDateTime78", (instant65.compareTo(mutableDateTime78) == 0) == instant65.equals(mutableDateTime78));
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3110");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        long long20 = instant6.getMillis();
        java.util.Date date21 = instant6.toDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField26 = julianChronology25.centuries();
        java.lang.String str27 = julianChronology25.toString();
        java.lang.String str28 = julianChronology25.toString();
        org.joda.time.DurationField durationField29 = julianChronology25.weekyears();
        org.joda.time.DateTimeZone dateTimeZone30 = julianChronology25.getZone();
        int int32 = dateTimeZone30.getOffset((long) 126000000);
        long long35 = dateTimeZone30.adjustOffset((-35999981L), false);
        org.joda.time.DateTime dateTime36 = instant6.toDateTime(dateTimeZone30);
        boolean boolean37 = dateTime36.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3111");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.seconds();
        org.joda.time.DurationField durationField7 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology9 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.centuryOfEra();
        java.lang.String str14 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField16 = gJChronology2.seconds();
        org.joda.time.DurationField durationField17 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField4, and durationField6", !(durationField17.compareTo(durationField4) == 0) || (Math.signum(durationField17.compareTo(durationField6)) == Math.signum(durationField4.compareTo(durationField6))));
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3112");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Chronology chronology16 = gJChronology11.withZone(dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getName((long) (byte) 10);
        java.util.TimeZone timeZone19 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.Chronology chronology21 = julianChronology3.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forID("+10:00");
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.Chronology chronology25 = julianChronology3.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField26 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant35);
        java.lang.String str37 = instant35.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        int int50 = instant35.compareTo((org.joda.time.ReadableInstant) instant46);
        long long51 = instant35.getMillis();
        org.joda.time.Instant instant54 = instant35.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant57 = instant54.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime58 = instant54.toMutableDateTime();
        org.joda.time.Instant instant59 = instant54.toInstant();
        boolean boolean60 = julianChronology3.equals((java.lang.Object) instant59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant59 and mutableDateTime58", (instant59.compareTo(mutableDateTime58) == 0) == instant59.equals(mutableDateTime58));
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3113");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime8 = instant6.toMutableDateTime();
        boolean boolean9 = mutableDateTime8.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime7", (instant6.compareTo(dateTime7) == 0) == instant6.equals(dateTime7));
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3114");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField7 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField9 = gJChronology2.days();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField7, and durationField9", !(durationField10.compareTo(durationField7) == 0) || (Math.signum(durationField10.compareTo(durationField9)) == Math.signum(durationField7.compareTo(durationField9))));
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3115");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant41 = instant8.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        java.lang.String str45 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.dayOfYear();
        java.lang.String str47 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology44.weekOfWeekyear();
        java.lang.String str51 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfWeek();
        int int53 = instant41.get(dateTimeField52);
        org.joda.time.Instant instant55 = instant41.minus((-35999191L));
        org.joda.time.DateTime dateTime56 = instant55.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = instant55.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone65 = gJChronology61.getZone();
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, (org.joda.time.ReadableInstant) instant67);
        org.joda.time.DateTime dateTime69 = instant67.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.Chronology chronology73 = gJChronology72.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.millisOfDay();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology72.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology72.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology72.dayOfYear();
        boolean boolean79 = instant67.equals((java.lang.Object) dateTimeField78);
        org.joda.time.DateTime dateTime80 = instant67.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Instant instant82 = instant67.plus(readableDuration81);
        boolean boolean83 = instant55.isEqual((org.joda.time.ReadableInstant) instant67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime69", (instant8.compareTo(dateTime69) == 0) == instant8.equals(dateTime69));
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3116");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.Instant instant11 = instant9.minus((-35999991L));
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = instant9.isSupported(dateTimeFieldType12);
        org.joda.time.Instant instant16 = instant9.withDurationAdded(162000001L, 0);
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime17.getZone();
        long long21 = dateTimeZone18.convertLocalToUTC(809L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime17", (instant1.compareTo(mutableDateTime17) == 0) == instant1.equals(mutableDateTime17));
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3117");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        long long22 = instant6.getMillis();
        java.lang.String str23 = instant6.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = instant6.getZone();
        boolean boolean25 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone26 = instant6.getZone();
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3118");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology45.monthOfYear();
        boolean boolean53 = instant37.equals((java.lang.Object) dateTimeField52);
        org.joda.time.Instant instant55 = instant37.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant55.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = instant55.isSupported(dateTimeFieldType58);
        org.joda.time.Instant instant62 = instant55.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant64 = instant62.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant67 = instant62.withDurationAdded(readableDuration65, 1200);
        boolean boolean68 = instant26.isEqual((org.joda.time.ReadableInstant) instant62);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = instant62.isSupported(dateTimeFieldType69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str77 = dateTimeZone76.getID();
        org.joda.time.Chronology chronology78 = gJChronology73.withZone(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology73.getZone();
        long long81 = dateTimeZone79.nextTransition((-12219292800000L));
        long long83 = dateTimeZone79.convertUTCToLocal((long) 1);
        java.util.Locale locale85 = null;
        java.lang.String str86 = dateTimeZone79.getName((long) (-1), locale85);
        long long90 = dateTimeZone79.convertLocalToUTC(1L, true, (long) 0);
        org.joda.time.DateTime dateTime91 = instant62.toDateTime(dateTimeZone79);
        boolean boolean92 = instant62.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant62 and dateTime91", (instant62.compareTo(dateTime91) == 0) == instant62.equals(dateTime91));
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3119");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DurationField durationField19 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology27 = julianChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = julianChronology24.getZone();
        org.joda.time.Chronology chronology29 = gJChronology16.withZone(dateTimeZone28);
        long long33 = gJChronology16.add((-12219292800000L), (long) (short) 0, (int) (short) 0);
        org.joda.time.DurationField durationField34 = gJChronology16.seconds();
        org.joda.time.DurationField durationField35 = gJChronology16.years();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTime dateTime38 = instant11.toDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        boolean boolean44 = julianChronology42.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.Chronology chronology46 = julianChronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = julianChronology42.monthOfYear();
        long long51 = julianChronology42.add((long) (byte) 0, (-79199989L), 0);
        org.joda.time.MutableDateTime mutableDateTime52 = instant11.toMutableDateTime((org.joda.time.Chronology) julianChronology42);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.Chronology chronology56 = gJChronology55.withUTC();
        org.joda.time.DurationField durationField57 = gJChronology55.millis();
        org.joda.time.Chronology chronology58 = gJChronology55.withUTC();
        org.joda.time.DurationField durationField59 = gJChronology55.seconds();
        org.joda.time.Instant instant60 = gJChronology55.getGregorianCutover();
        org.joda.time.Instant instant62 = instant60.plus((-107999989L));
        org.joda.time.Instant instant64 = instant60.minus((-12219364800000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = instant64.isSupported(dateTimeFieldType65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.DurationField durationField74 = gJChronology69.millis();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology69.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology69.hourOfDay();
        org.joda.time.Instant instant77 = gJChronology69.getGregorianCutover();
        org.joda.time.Instant instant79 = instant77.minus(9730L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = null;
        java.lang.String str81 = instant79.toString(dateTimeFormatter80);
        boolean boolean82 = instant64.isEqual((org.joda.time.ReadableInstant) instant79);
        java.util.Date date83 = instant64.toDate();
        boolean boolean84 = mutableDateTime52.isAfter((org.joda.time.ReadableInstant) instant64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime38", (instant11.compareTo(dateTime38) == 0) == instant11.equals(dateTime38));
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3120");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = instant11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        boolean boolean27 = instant22.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.Chronology chronology31 = gJChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology30.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology30.monthOfYear();
        boolean boolean38 = instant22.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant22.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = instant40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = instant40.isSupported(dateTimeFieldType43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = instant40.toString(dateTimeFormatter45);
        boolean boolean48 = instant40.isAfter(3L);
        org.joda.time.DateTimeZone dateTimeZone49 = instant40.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField54 = julianChronology53.year();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone59.getName((long) 36000000, locale61);
        int int64 = dateTimeZone59.getOffset((long) ' ');
        org.joda.time.Chronology chronology65 = julianChronology53.withZone(dateTimeZone59);
        org.joda.time.DurationField durationField66 = chronology65.weeks();
        org.joda.time.DateTime dateTime67 = instant40.toDateTime(chronology65);
        boolean boolean68 = instant11.isAfter((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant70 = new org.joda.time.Instant(224765998800L);
        boolean boolean71 = instant11.isBefore((org.joda.time.ReadableInstant) instant70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and dateTime67", (instant40.compareTo(dateTime67) == 0) == instant40.equals(dateTime67));
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3121");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField11, and durationField9", !(durationField9.compareTo(durationField11) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField11.compareTo(durationField9))));
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3122");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.Instant instant8 = instant6.toInstant();
        org.joda.time.Instant instant11 = instant6.withDurationAdded((-36000001L), 1200);
        org.joda.time.DateTime dateTime12 = instant6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        int int19 = instant6.get(dateTimeField18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime12", (instant6.compareTo(dateTime12) == 0) == instant6.equals(dateTime12));
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3123");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.Instant instant7 = instant5.plus((long) (short) 0);
        java.lang.String str8 = instant7.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.plus(readableDuration9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime11.toMutableDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = mutableDateTime13.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and mutableDateTime11", (instant5.compareTo(mutableDateTime11) == 0) == instant5.equals(mutableDateTime11));
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3124");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        java.lang.String str2 = gJChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = gJChronology0.days();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        boolean boolean10 = julianChronology8.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology11 = julianChronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology13 = julianChronology8.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = julianChronology8.seconds();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology17 = julianChronology8.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology18 = gJChronology0.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology21.getZone();
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.Chronology chronology28 = gJChronology0.withZone(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal(52005600809L);
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField32 = gJChronology31.seconds();
        org.joda.time.DurationField durationField33 = gJChronology31.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField32", (durationField14.compareTo(durationField32) == 0) == durationField14.equals(durationField32));
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3125");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = gJChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.halfdayOfDay();
        int int18 = instant9.get(dateTimeField17);
        boolean boolean19 = instant9.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) instant28);
        java.lang.String str30 = instant28.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        int int43 = instant28.compareTo((org.joda.time.ReadableInstant) instant39);
        long long44 = instant28.getMillis();
        org.joda.time.Instant instant45 = instant28.toInstant();
        long long46 = instant28.getMillis();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology49.getZone();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTime dateTime57 = instant55.toDateTime();
        long long58 = dateTime57.getMillis();
        org.joda.time.Instant instant60 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Instant instant62 = instant60.plus(readableDuration61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant(1L);
        boolean boolean65 = instant60.isEqual((org.joda.time.ReadableInstant) instant64);
        boolean boolean66 = dateTime57.isBefore((org.joda.time.ReadableInstant) instant64);
        int int67 = instant28.compareTo((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean69 = dateTime57.isBefore((-6211220191199799L));
        boolean boolean70 = instant9.equals((java.lang.Object) boolean69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime57", (instant9.compareTo(dateTime57) == 0) == instant9.equals(dateTime57));
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3126");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.Instant instant8 = instant6.toInstant();
        boolean boolean9 = instant8.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime7", (instant8.compareTo(dateTime7) == 0) == instant8.equals(dateTime7));
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3127");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime12 = instant8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.Chronology chronology40 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.dayOfWeek();
        org.joda.time.DurationField durationField42 = gJChronology39.years();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.weekyear();
        boolean boolean44 = instant21.equals((java.lang.Object) dateTimeField43);
        int int45 = mutableDateTime12.get(dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = mutableDateTime12.isSupported(dateTimeFieldType46);
        boolean boolean49 = mutableDateTime12.isEqual((-71936861L));
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime12.getZone();
        int int52 = dateTimeZone50.getStandardOffset((-1087200000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime12", (instant6.compareTo(mutableDateTime12) == 0) == instant6.equals(mutableDateTime12));
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.Chronology chronology26 = instant8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = instant8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        java.util.Date date35 = instant34.toDate();
        boolean boolean36 = instant34.isEqualNow();
        boolean boolean37 = instant34.isEqualNow();
        java.util.Date date38 = instant34.toDate();
        boolean boolean40 = instant34.isEqual(0L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant34.plus(readableDuration41);
        int int43 = instant8.compareTo((org.joda.time.ReadableInstant) instant42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime27", (instant8.compareTo(mutableDateTime27) == 0) == instant8.equals(mutableDateTime27));
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3129");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        boolean boolean13 = instant7.isAfter((-179999601L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = instant24.getZone();
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology27.centuries();
        org.joda.time.DateTime dateTime30 = instant7.toDateTime((org.joda.time.Chronology) julianChronology27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.chrono.JulianChronology julianChronology34 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        boolean boolean36 = julianChronology34.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology37 = julianChronology34.withUTC();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology39 = julianChronology34.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField40 = julianChronology34.days();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology34.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str44 = dateTimeZone43.getID();
        boolean boolean45 = dateTimeZone43.isFixed();
        long long47 = dateTimeZone43.previousTransition(100L);
        java.util.TimeZone timeZone48 = dateTimeZone43.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Chronology chronology50 = julianChronology34.withZone(dateTimeZone49);
        java.util.TimeZone timeZone51 = dateTimeZone49.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        boolean boolean53 = dateTimeZone49.isFixed();
        org.joda.time.Chronology chronology54 = julianChronology27.withZone(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime30", (instant1.compareTo(dateTime30) == 0) == instant1.equals(dateTime30));
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3130");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DurationField durationField10 = gJChronology9.millis();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.millisOfDay();
        org.joda.time.DurationField durationField14 = gJChronology9.eras();
        org.joda.time.DurationField durationField15 = gJChronology9.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField14", Math.signum(durationField10.compareTo(durationField14)) == -Math.signum(durationField14.compareTo(durationField10)));
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3131");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.Chronology chronology29 = instant8.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = instant8.isEqual(readableInstant30);
        org.joda.time.Chronology chronology32 = instant8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = instant8.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant8.plus(readableDuration34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and mutableDateTime33", (instant35.compareTo(mutableDateTime33) == 0) == instant35.equals(mutableDateTime33));
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3132");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField13 = julianChronology12.centuries();
        java.lang.String str14 = julianChronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology12.getZone();
        long long18 = dateTimeZone15.convertLocalToUTC((long) 0, true);
        boolean boolean19 = gJChronology2.equals((java.lang.Object) true);
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField22 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.hourOfDay();
        org.joda.time.DurationField durationField24 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField13, and durationField22", !(durationField24.compareTo(durationField13) == 0) || (Math.signum(durationField24.compareTo(durationField22)) == Math.signum(durationField13.compareTo(durationField22))));
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3133");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.Chronology chronology13 = gJChronology2.withUTC();
        org.joda.time.Chronology chronology14 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField15 = gJChronology2.eras();
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField16", Math.signum(durationField10.compareTo(durationField16)) == -Math.signum(durationField16.compareTo(durationField10)));
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3134");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.Instant instant11 = instant8.minus((-35999900L));
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = instant11.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime15 = instant11.toMutableDateTimeISO();
        java.lang.String str16 = mutableDateTime15.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime12", (instant11.compareTo(mutableDateTime12) == 0) == instant11.equals(mutableDateTime12));
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3135");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.Instant instant10 = instant7.plus(1338L);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = instant10.isSupported(dateTimeFieldType11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3136");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-32870900L));
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone3);
        boolean boolean7 = julianChronology5.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology8 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology5.era();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology5.minuteOfHour();
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        org.joda.time.DateTime dateTime14 = instant12.toDateTime();
        boolean boolean15 = julianChronology5.equals((java.lang.Object) instant12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.secondOfMinute();
        org.joda.time.DurationField durationField20 = julianChronology18.centuries();
        org.joda.time.DurationField durationField21 = julianChronology18.weeks();
        org.joda.time.DurationField durationField22 = julianChronology18.days();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.monthOfYear();
        org.joda.time.DurationField durationField24 = julianChronology18.centuries();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology18.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = instant12.toMutableDateTime((org.joda.time.Chronology) julianChronology18);
        boolean boolean28 = instant1.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime14", (instant12.compareTo(dateTime14) == 0) == instant12.equals(dateTime14));
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3137");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant32 = instant2.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant32.withDurationAdded(readableDuration33, 16);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) 10);
        boolean boolean38 = instant32.isBefore((org.joda.time.ReadableInstant) instant37);
        org.joda.time.MutableDateTime mutableDateTime39 = instant32.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant32.withDurationAdded(readableDuration40, 43203104);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime39", (instant42.compareTo(mutableDateTime39) == 0) == instant42.equals(mutableDateTime39));
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3138");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        boolean boolean27 = instant26.isEqualNow();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.Instant instant30 = instant28.minus((long) (byte) 1);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTime dateTime32 = instant31.toDateTimeISO();
        boolean boolean34 = instant31.isEqual((-12242591999904L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime32", (instant31.compareTo(dateTime32) == 0) == instant31.equals(dateTime32));
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3139");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        int int43 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((java.lang.Object) instant40);
        boolean boolean46 = instant40.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        boolean boolean50 = dateTimeZone48.isFixed();
        long long53 = dateTimeZone48.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48);
        boolean boolean55 = instant40.equals((java.lang.Object) dateTimeZone48);
        int int56 = instant30.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.year();
        org.joda.time.DurationField durationField62 = julianChronology60.eras();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = julianChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology60.yearOfCentury();
        org.joda.time.DateTime dateTime67 = instant40.toDateTime((org.joda.time.Chronology) julianChronology60);
        org.joda.time.Instant instant69 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Instant instant71 = instant69.plus(readableDuration70);
        org.joda.time.Instant instant73 = instant69.minus((long) 10);
        java.util.Date date74 = instant73.toDate();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        int int79 = dateTimeZone76.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology80 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone76);
        org.joda.time.DurationField durationField81 = julianChronology80.centuries();
        boolean boolean82 = instant73.equals((java.lang.Object) durationField81);
        org.joda.time.MutableDateTime mutableDateTime83 = instant73.toMutableDateTime();
        boolean boolean84 = instant40.isBefore((org.joda.time.ReadableInstant) mutableDateTime83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime67", (instant8.compareTo(dateTime67) == 0) == instant8.equals(dateTime67));
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3140");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.weekyearOfCentury();
        long long19 = gJChronology11.getDateTimeMillis(1582, (int) (short) 1, 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.millisOfSecond();
        boolean boolean21 = gJChronology2.equals((java.lang.Object) gJChronology11);
        org.joda.time.DurationField durationField22 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField22, and durationField5", !(durationField5.compareTo(durationField22) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField22.compareTo(durationField5))));
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3141");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        boolean boolean14 = instant9.isEqual(35L);
        boolean boolean15 = instant0.isEqual((org.joda.time.ReadableInstant) instant9);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.MutableDateTime mutableDateTime17 = instant0.toMutableDateTime((org.joda.time.Chronology) gJChronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, (org.joda.time.ReadableInstant) instant26);
        java.lang.String str28 = instant26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        int int41 = instant26.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant42 = instant37.toInstant();
        org.joda.time.Instant instant45 = instant42.withDurationAdded((-36000000L), 0);
        int int46 = instant0.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant0.minus(readableDuration47);
        org.joda.time.Chronology chronology49 = instant0.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant0", (mutableDateTime17.compareTo(instant0) == 0) == mutableDateTime17.equals(instant0));
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3142");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.Instant instant14 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        boolean boolean28 = instant23.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.monthOfYear();
        boolean boolean39 = instant23.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Instant instant41 = instant23.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.Instant instant50 = gJChronology46.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.minus(readableDuration51);
        org.joda.time.Instant instant55 = instant52.withDurationAdded((-12219292800000L), 0);
        boolean boolean57 = instant52.isEqual(35L);
        org.joda.time.Instant instant58 = instant52.toInstant();
        boolean boolean60 = instant58.isBefore((long) ' ');
        boolean boolean61 = instant41.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant63 = instant41.minus(4L);
        org.joda.time.Chronology chronology64 = instant41.getChronology();
        boolean boolean66 = instant41.isAfter((-107999950L));
        int int67 = instant14.compareTo((org.joda.time.ReadableInstant) instant41);
        org.joda.time.MutableDateTime mutableDateTime68 = instant41.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime69 = instant41.toMutableDateTime();
        org.joda.time.Instant instant70 = new org.joda.time.Instant((java.lang.Object) instant41);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone72);
        org.joda.time.chrono.JulianChronology julianChronology74 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone72);
        boolean boolean76 = julianChronology74.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField77 = julianChronology74.days();
        org.joda.time.DurationField durationField78 = julianChronology74.minutes();
        org.joda.time.DateTimeField dateTimeField79 = julianChronology74.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80, readableInstant81);
        org.joda.time.DateTimeZone dateTimeZone83 = gJChronology82.getZone();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str86 = dateTimeZone85.getID();
        org.joda.time.Chronology chronology87 = gJChronology82.withZone(dateTimeZone85);
        java.lang.String str89 = dateTimeZone85.getName((long) (byte) 10);
        java.util.TimeZone timeZone90 = dateTimeZone85.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.Chronology chronology92 = julianChronology74.withZone(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField93 = julianChronology74.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField94 = julianChronology74.minuteOfHour();
        boolean boolean95 = instant41.equals((java.lang.Object) dateTimeField94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime68 and instant70", (mutableDateTime68.compareTo(instant70) == 0) == mutableDateTime68.equals(instant70));
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3143");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        java.lang.String str40 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfWeek();
        org.joda.time.Instant instant44 = gJChronology38.getGregorianCutover();
        boolean boolean45 = instant33.equals((java.lang.Object) gJChronology38);
        boolean boolean46 = instant24.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant48 = instant33.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.Chronology chronology53 = gJChronology52.withUTC();
        org.joda.time.DurationField durationField54 = gJChronology52.millis();
        long long58 = gJChronology52.add((long) '4', 0L, (int) (byte) -1);
        int int59 = gJChronology52.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology52.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime61 = instant48.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        org.joda.time.chrono.JulianChronology julianChronology65 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone63);
        boolean boolean67 = julianChronology65.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField68 = julianChronology65.millisOfSecond();
        long long73 = julianChronology65.getDateTimeMillis((int) (byte) -1, 4, 1, (int) '4');
        org.joda.time.DurationField durationField74 = julianChronology65.centuries();
        org.joda.time.DurationField durationField75 = julianChronology65.days();
        org.joda.time.DateTimeField dateTimeField76 = julianChronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology65.clockhourOfDay();
        int int78 = instant48.get(dateTimeField77);
        org.joda.time.Instant instant81 = instant48.withDurationAdded((-60514215282090L), 0);
        org.joda.time.DateTimeZone dateTimeZone82 = instant81.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant81 and mutableDateTime61", (instant81.compareTo(mutableDateTime61) == 0) == instant81.equals(mutableDateTime61));
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3144");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.DateTime dateTime7 = instant4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.Instant instant14 = gJChronology10.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.minus(readableDuration15);
        org.joda.time.Instant instant19 = instant16.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant16.plus(readableDuration20);
        java.util.Date date22 = instant21.toDate();
        org.joda.time.Instant instant24 = instant21.plus(35L);
        org.joda.time.Instant instant25 = instant21.toInstant();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant21.withDurationAdded(readableDuration26, 1002240000);
        boolean boolean29 = dateTime7.isBefore((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3145");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.yearOfCentury();
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology13.clockhourOfDay();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DurationField durationField17 = gJChronology13.days();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        boolean boolean23 = julianChronology21.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology24 = julianChronology21.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology26 = julianChronology21.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField27 = julianChronology21.seconds();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology30 = julianChronology21.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology31 = gJChronology13.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology32 = julianChronology3.withZone(dateTimeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField17", (durationField10.compareTo(durationField17) == 0) == durationField10.equals(durationField17));
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3146");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.Chronology chronology11 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant18.minus(readableDuration19);
        org.joda.time.Instant instant23 = instant20.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant20.plus(readableDuration24);
        java.util.Date date26 = instant25.toDate();
        org.joda.time.Instant instant28 = instant25.plus(35L);
        java.lang.String str29 = instant28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant28.isSupported(dateTimeFieldType30);
        boolean boolean32 = instant8.isBefore((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant34 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.plus(readableDuration35);
        org.joda.time.Instant instant38 = instant36.withMillis((long) (byte) -1);
        org.joda.time.Instant instant40 = instant38.plus((long) (short) 0);
        java.lang.String str41 = instant40.toString();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant40.plus(readableDuration42);
        org.joda.time.Instant instant45 = instant40.plus((-61907104799981L));
        org.joda.time.Instant instant47 = instant40.plus((-35999965L));
        int int48 = instant8.compareTo((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant49 = instant8.toInstant();
        org.joda.time.Instant instant51 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.plus(readableDuration52);
        org.joda.time.Instant instant55 = instant53.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = instant55.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = instant55.isSupported(dateTimeFieldType57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Instant instant67 = instant65.minus(readableDuration66);
        org.joda.time.Instant instant70 = instant67.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Instant instant72 = instant67.plus(readableDuration71);
        java.util.Date date73 = instant72.toDate();
        org.joda.time.Instant instant75 = instant72.plus(35L);
        int int76 = instant55.compareTo((org.joda.time.ReadableInstant) instant72);
        boolean boolean77 = instant8.isBefore((org.joda.time.ReadableInstant) instant55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant8", (dateTime10.compareTo(instant8) == 0) == dateTime10.equals(instant8));
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3147");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T10:00:00.000+10:00");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str10 = dateTimeZone9.getID();
        org.joda.time.Chronology chronology11 = gJChronology6.withZone(dateTimeZone9);
        java.lang.String str13 = dateTimeZone9.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean15 = dateTimeZone3.equals((java.lang.Object) dateTimeZone9);
        long long18 = dateTimeZone3.convertLocalToUTC((long) (byte) -1, true);
        org.joda.time.MutableDateTime mutableDateTime19 = instant1.toMutableDateTime(dateTimeZone3);
        org.joda.time.Instant instant20 = instant1.toInstant();
        boolean boolean21 = instant1.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime19 and instant1", (mutableDateTime19.compareTo(instant1) == 0) == mutableDateTime19.equals(instant1));
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3148");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        long long4 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DurationField durationField9 = gJChronology7.millis();
        long long13 = gJChronology7.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField14 = gJChronology7.millis();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = gJChronology7.months();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone29 = dateTimeZone23.toTimeZone();
        long long32 = dateTimeZone23.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology33 = gJChronology7.withZone(dateTimeZone23);
        org.joda.time.Instant instant34 = gJChronology7.getGregorianCutover();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = gJChronology7.add(readablePeriod35, (-36000001L), 1);
        org.joda.time.Chronology chronology39 = gJChronology7.withUTC();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = gJChronology7.add(readablePeriod40, 1836000071L, 0);
        org.joda.time.DateTimeField dateTimeField44 = gJChronology7.millisOfDay();
        org.joda.time.DateTime dateTime45 = instant1.toDateTime((org.joda.time.Chronology) gJChronology7);
        java.util.Date date46 = instant1.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime45", (instant1.compareTo(dateTime45) == 0) == instant1.equals(dateTime45));
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3149");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        long long13 = instant11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        long long22 = gJChronology16.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology16.dayOfYear();
        org.joda.time.DurationField durationField25 = gJChronology16.weekyears();
        boolean boolean26 = instant11.equals((java.lang.Object) durationField25);
        org.joda.time.Instant instant28 = instant11.plus((-60514215195738L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.Chronology chronology34 = gJChronology31.withUTC();
        org.joda.time.DurationField durationField35 = gJChronology31.hours();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.clockhourOfDay();
        java.lang.String str37 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology31.halfdayOfDay();
        org.joda.time.Chronology chronology40 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology31.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology31.yearOfEra();
        org.joda.time.DateTime dateTime43 = instant28.toDateTime((org.joda.time.Chronology) gJChronology31);
        long long47 = gJChronology31.add((long) 2022, (-35997934L), (int) (byte) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime43", (instant28.compareTo(dateTime43) == 0) == instant28.equals(dateTime43));
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3150");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField10 = gJChronology2.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField10, and durationField5", !(durationField5.compareTo(durationField10) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField10.compareTo(durationField5))));
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3151");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.Chronology chronology7 = gJChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.millisOfDay();
        org.joda.time.DurationField durationField10 = gJChronology6.halfdays();
        org.joda.time.DurationField durationField11 = gJChronology6.millis();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology14 = gJChronology6.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = gJChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology6.halfdayOfDay();
        org.joda.time.DurationField durationField17 = gJChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology6.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = gJChronology6.add(readablePeriod20, 52L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology6.hourOfDay();
        boolean boolean25 = instant1.equals((java.lang.Object) dateTimeField24);
        org.joda.time.DateTimeZone dateTimeZone26 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology29.getZone();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology36.clockhourOfHalfday();
        org.joda.time.Chronology chronology38 = gJChronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Chronology chronology46 = gJChronology41.withZone(dateTimeZone44);
        java.lang.String str48 = dateTimeZone44.getName((long) (byte) 10);
        long long51 = dateTimeZone44.convertLocalToUTC((-35999900L), false);
        long long54 = dateTimeZone44.adjustOffset((long) '#', false);
        int int56 = dateTimeZone44.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone44);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone44.getName((long) 'a', locale59);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44);
        long long64 = dateTimeZone44.adjustOffset(132477042376800000L, false);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((java.lang.Object) long64);
        boolean boolean66 = instant1.isBefore((org.joda.time.ReadableInstant) instant65);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.chrono.JulianChronology julianChronology70 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone68);
        boolean boolean72 = julianChronology70.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField73 = julianChronology70.months();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        java.util.Locale locale78 = null;
        java.lang.String str79 = dateTimeZone75.getName((-1L), locale78);
        org.joda.time.LocalDateTime localDateTime80 = null;
        boolean boolean81 = dateTimeZone75.isLocalDateTimeGap(localDateTime80);
        boolean boolean83 = dateTimeZone75.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology84 = julianChronology70.withZone(dateTimeZone75);
        org.joda.time.chrono.GJChronology gJChronology85 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone75);
        java.lang.String str87 = dateTimeZone75.getShortName((-31L));
        org.joda.time.DateTime dateTime88 = instant65.toDateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime89 = instant65.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime89.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant65 and dateTime88", (instant65.compareTo(dateTime88) == 0) == instant65.equals(dateTime88));
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3152");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.minus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        int int17 = instant10.get(dateTimeField16);
        boolean boolean18 = instant1.isAfter((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Chronology chronology26 = gJChronology21.withZone(dateTimeZone24);
        java.lang.String str28 = dateTimeZone24.getName((long) (byte) 10);
        long long31 = dateTimeZone24.convertLocalToUTC((-35999900L), false);
        long long34 = dateTimeZone24.adjustOffset((long) '#', false);
        long long36 = dateTimeZone24.previousTransition((long) 4);
        long long38 = dateTimeZone24.convertUTCToLocal(0L);
        java.lang.String str40 = dateTimeZone24.getShortName(224729998800L);
        org.joda.time.MutableDateTime mutableDateTime41 = instant10.toMutableDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime42 = instant10.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime41", (instant10.compareTo(mutableDateTime41) == 0) == instant10.equals(mutableDateTime41));
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3153");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology22 = gJChronology14.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology14.minutes();
        org.joda.time.DurationField durationField24 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField25 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField26 = gJChronology14.weeks();
        boolean boolean27 = instant8.equals((java.lang.Object) gJChronology14);
        boolean boolean29 = instant8.isAfter((long) 19);
        long long30 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Chronology chronology46 = gJChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology41.getZone();
        long long49 = dateTimeZone47.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology50 = gJChronology33.withZone(dateTimeZone47);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone47.getShortName(31799999L, locale52);
        java.util.TimeZone timeZone54 = dateTimeZone47.toTimeZone();
        java.lang.String str55 = dateTimeZone47.toString();
        org.joda.time.MutableDateTime mutableDateTime56 = instant8.toMutableDateTime(dateTimeZone47);
        boolean boolean57 = instant8.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime56", (mutableDateTime11.compareTo(mutableDateTime56) == 0) == mutableDateTime11.equals(mutableDateTime56));
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3154");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        long long12 = dateTimeZone5.convertLocalToUTC((-35999900L), false);
        int int14 = dateTimeZone5.getOffsetFromLocal((long) 278);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology33.monthOfYear();
        boolean boolean41 = instant25.equals((java.lang.Object) dateTimeField40);
        org.joda.time.Instant instant43 = instant25.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant43.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = instant43.toString(dateTimeFormatter48);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField55 = julianChronology54.weeks();
        org.joda.time.DurationField durationField56 = julianChronology54.millis();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology54.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = julianChronology54.yearOfCentury();
        int int60 = instant43.get(dateTimeField59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        java.lang.String str64 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.dayOfYear();
        java.lang.String str66 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology63.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology63.weekOfWeekyear();
        java.lang.String str70 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology63.dayOfWeek();
        org.joda.time.DurationField durationField72 = gJChronology63.minutes();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology63.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology63.secondOfDay();
        org.joda.time.Chronology chronology75 = gJChronology63.withUTC();
        org.joda.time.Chronology chronology76 = chronology75.withUTC();
        org.joda.time.DateTime dateTime77 = instant43.toDateTime(chronology75);
        java.lang.Class<?> wildcardClass78 = chronology75.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant43 and dateTime77", (instant43.compareTo(dateTime77) == 0) == instant43.equals(dateTime77));
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3155");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        int int21 = instant8.get(dateTimeField20);
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        long long49 = instant33.getMillis();
        org.joda.time.Instant instant50 = instant33.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = instant33.getZone();
        int int52 = instant24.compareTo((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant54 = instant24.plus((-62158787999900L));
        org.joda.time.DateTime dateTime55 = instant24.toDateTime();
        boolean boolean56 = instant8.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Instant instant57 = dateTime55.toInstant();
        org.joda.time.DateTime dateTime58 = instant57.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime55", (instant22.compareTo(dateTime55) == 0) == instant22.equals(dateTime55));
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3156");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(5649965911L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology4.getZone();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant10);
        java.lang.String str12 = instant10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        int int25 = instant10.compareTo((org.joda.time.ReadableInstant) instant21);
        long long26 = instant10.getMillis();
        org.joda.time.Instant instant27 = instant10.toInstant();
        org.joda.time.Chronology chronology28 = instant10.getChronology();
        boolean boolean29 = instant10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology33.getZone();
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, (org.joda.time.ReadableInstant) instant39);
        java.lang.String str41 = instant39.toString();
        int int42 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((java.lang.Object) instant39);
        boolean boolean45 = instant39.isAfter((-107999990L));
        boolean boolean47 = instant39.isAfter((-12219292799965L));
        boolean boolean48 = instant10.isAfter((org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        java.lang.String str52 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean58 = dateTimeZone56.isStandardOffset((long) (-1));
        long long62 = dateTimeZone56.convertLocalToUTC((long) 4, true, (long) (short) -1);
        boolean boolean63 = gJChronology51.equals((java.lang.Object) dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField64 = gJChronology51.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime65 = instant10.toMutableDateTime((org.joda.time.Chronology) gJChronology51);
        int int66 = instant1.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        java.lang.String str70 = gJChronology69.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.dayOfYear();
        java.lang.String str72 = gJChronology69.toString();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology69.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology69.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology69.getZone();
        org.joda.time.Chronology chronology76 = gJChronology69.withUTC();
        org.joda.time.DateTime dateTime77 = instant1.toDateTime(chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime65", (instant10.compareTo(mutableDateTime65) == 0) == instant10.equals(mutableDateTime65));
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3157");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.Instant instant11 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant23.plus(readableDuration27);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant28);
        int int31 = dateTimeZone13.getOffset(151200000L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.Chronology chronology35 = gJChronology34.withUTC();
        java.lang.String str36 = gJChronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.monthOfYear();
        org.joda.time.Chronology chronology38 = gJChronology34.withUTC();
        java.lang.String str39 = chronology38.toString();
        boolean boolean40 = dateTimeZone13.equals((java.lang.Object) str39);
        org.joda.time.MutableDateTime mutableDateTime41 = instant11.toMutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        boolean boolean47 = julianChronology45.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology48 = julianChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology45.era();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology45.minuteOfHour();
        org.joda.time.DurationField durationField51 = julianChronology45.weeks();
        org.joda.time.DurationField durationField52 = julianChronology45.days();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology45.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = julianChronology45.getZone();
        int int56 = dateTimeZone54.getOffset((-35999899L));
        java.lang.String str58 = dateTimeZone54.getNameKey((-126000001L));
        java.lang.String str60 = dateTimeZone54.getNameKey((-421199991L));
        int int62 = dateTimeZone54.getStandardOffset(30L);
        org.joda.time.MutableDateTime mutableDateTime63 = instant11.toMutableDateTime(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime41", (instant11.compareTo(mutableDateTime41) == 0) == instant11.equals(mutableDateTime41));
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3158");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getID();
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 1);
        long long11 = dateTimeZone1.convertUTCToLocal(151199999L);
        java.lang.String str12 = dateTimeZone1.toString();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone1.getShortName((long) 100, locale14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.parse("1582-10-15T00:00:00.000Z");
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DurationField durationField20 = gJChronology19.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime18", (instant17.compareTo(dateTime18) == 0) == instant17.equals(dateTime18));
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3159");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-61851808789984L));
        org.joda.time.Instant instant3 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant3.withDurationAdded(readableDuration4, 10);
        java.lang.String str7 = instant3.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.Instant instant14 = gJChronology10.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.minus(readableDuration15);
        org.joda.time.Chronology chronology17 = instant14.getChronology();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant19.withDurationAdded(readableDuration20, 0);
        boolean boolean24 = instant22.isEqual((long) 1);
        boolean boolean25 = instant22.isBeforeNow();
        boolean boolean26 = instant14.isEqual((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Instant instant28 = instant22.withMillis(312910024L);
        org.joda.time.DateTime dateTime29 = instant22.toDateTimeISO();
        boolean boolean30 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = instant1.isEqual((org.joda.time.ReadableInstant) instant3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime29", (instant19.compareTo(dateTime29) == 0) == instant19.equals(dateTime29));
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.weekyear();
        org.joda.time.Instant instant14 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.monthOfYear();
        org.joda.time.Instant instant18 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant20 = instant18.withMillis((long) 24);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) (-1));
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22);
        boolean boolean27 = dateTimeZone22.isStandardOffset((-32399903L));
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant29.withDurationAdded(readableDuration30, 0);
        java.util.Date date33 = instant29.toDate();
        long long34 = instant29.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, (org.joda.time.ReadableInstant) instant43);
        java.lang.String str45 = instant43.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.dayOfYear();
        org.joda.time.Instant instant52 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.minus(readableDuration53);
        org.joda.time.Instant instant57 = instant54.withDurationAdded((-12219292800000L), 0);
        int int58 = instant43.compareTo((org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.Chronology chronology62 = gJChronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.dayOfWeek();
        org.joda.time.DurationField durationField64 = gJChronology61.years();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology61.weekyear();
        boolean boolean66 = instant43.equals((java.lang.Object) dateTimeField65);
        org.joda.time.Instant instant68 = instant43.withMillis(32L);
        boolean boolean69 = instant29.isEqual((org.joda.time.ReadableInstant) instant68);
        org.joda.time.Instant instant71 = instant68.minus((long) 1200);
        org.joda.time.DateTimeZone dateTimeZone72 = instant71.getZone();
        long long74 = dateTimeZone22.getMillisKeepLocal(dateTimeZone72, 129605695200000L);
        org.joda.time.DateTime dateTime75 = instant20.toDateTime(dateTimeZone22);
        java.lang.String str77 = dateTimeZone22.getNameKey(1836000071L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime75", (instant20.compareTo(dateTime75) == 0) == instant20.equals(dateTime75));
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3161");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology2 = gJChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField5 = gJChronology0.eras();
        org.joda.time.DurationField durationField6 = gJChronology0.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField6, and durationField5", !(durationField5.compareTo(durationField6) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField6.compareTo(durationField5))));
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3162");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        long long10 = gJChronology2.add((-6211221875988790L), (-12219292799965L), 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        java.lang.String str20 = dateTimeZone18.getName((long) 0);
        long long23 = dateTimeZone18.adjustOffset(1L, true);
        org.joda.time.Chronology chronology24 = gJChronology13.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) ' ');
        java.lang.String str31 = dateTimeZone28.getID();
        boolean boolean32 = dateTimeZone18.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.Chronology chronology33 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.Chronology chronology41 = gJChronology36.withZone(dateTimeZone39);
        long long44 = dateTimeZone39.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone45 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.plus(readableDuration50);
        org.joda.time.Instant instant53 = instant51.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = instant53.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant53.isSupported(dateTimeFieldType55);
        int int57 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) instant53);
        long long58 = instant53.getMillis();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str65 = dateTimeZone64.getID();
        org.joda.time.Chronology chronology66 = gJChronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = gJChronology61.getZone();
        long long69 = dateTimeZone67.nextTransition((-12219292800000L));
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone70, readableInstant71);
        org.joda.time.DateTimeZone dateTimeZone73 = gJChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology72.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology72.dayOfYear();
        org.joda.time.Instant instant76 = gJChronology72.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.minus(readableDuration77);
        java.lang.String str79 = instant76.toString();
        org.joda.time.Instant instant81 = instant76.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone82 = instant76.getZone();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Instant instant85 = instant76.withDurationAdded(readableDuration83, (int) '4');
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, (org.joda.time.ReadableInstant) instant85);
        boolean boolean88 = instant53.isEqual((org.joda.time.ReadableInstant) instant85);
        boolean boolean89 = gJChronology2.equals((java.lang.Object) instant53);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.Instant instant91 = instant53.minus(readableDuration90);
        org.joda.time.Instant instant94 = instant53.withDurationAdded((-61132233599977L), (int) (short) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime54 and instant53", (dateTime54.compareTo(instant53) == 0) == dateTime54.equals(instant53));
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3163");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = instant16.isAfter(readableInstant18);
        org.joda.time.Instant instant21 = instant16.withMillis(35999999L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = instant23.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime24", (instant23.compareTo(mutableDateTime24) == 0) == instant23.equals(mutableDateTime24));
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3164");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.Instant instant8 = instant6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology20.getZone();
        long long28 = dateTimeZone26.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology29 = gJChronology12.withZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        boolean boolean39 = julianChronology37.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology40 = julianChronology37.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology42 = julianChronology37.withZone(dateTimeZone41);
        long long44 = dateTimeZone31.getMillisKeepLocal(dateTimeZone41, 10L);
        org.joda.time.Chronology chronology45 = gJChronology12.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField54 = julianChronology53.centuries();
        java.lang.String str55 = julianChronology53.toString();
        java.lang.String str56 = julianChronology53.toString();
        org.joda.time.DurationField durationField57 = julianChronology53.weekyears();
        org.joda.time.DateTimeZone dateTimeZone58 = julianChronology53.getZone();
        org.joda.time.Chronology chronology59 = gJChronology12.withZone(dateTimeZone58);
        org.joda.time.Chronology chronology60 = gJChronology12.withUTC();
        org.joda.time.Instant instant61 = gJChronology12.getGregorianCutover();
        int int62 = instant8.compareTo((org.joda.time.ReadableInstant) instant61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime9", (instant8.compareTo(mutableDateTime9) == 0) == instant8.equals(mutableDateTime9));
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3165");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        long long30 = dateTime29.getMillis();
        int int31 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology34.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology34.era();
        org.joda.time.DurationField durationField41 = gJChronology34.centuries();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime29.toMutableDateTime((org.joda.time.Chronology) gJChronology34);
        boolean boolean43 = mutableDateTime42.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime29", (instant27.compareTo(dateTime29) == 0) == instant27.equals(dateTime29));
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3166");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant6.withDurationAdded(readableDuration14, (int) '#');
        java.util.Date date17 = instant6.toDate();
        org.joda.time.Instant instant20 = instant6.withDurationAdded((-110L), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.Instant instant27 = gJChronology23.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DurationField durationField37 = gJChronology33.hours();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.yearOfEra();
        boolean boolean39 = instant27.equals((java.lang.Object) dateTimeField38);
        boolean boolean40 = instant27.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        java.lang.String str44 = gJChronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.centuryOfEra();
        boolean boolean46 = instant27.equals((java.lang.Object) gJChronology43);
        boolean boolean47 = instant27.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime48 = instant27.toMutableDateTime();
        boolean boolean49 = instant6.isAfter((org.joda.time.ReadableInstant) instant27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime30", (instant6.compareTo(mutableDateTime30) == 0) == instant6.equals(mutableDateTime30));
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3167");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = gJChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.halfdayOfDay();
        int int18 = instant9.get(dateTimeField17);
        org.joda.time.DateTime dateTime19 = instant9.toDateTime();
        org.joda.time.Instant instant21 = instant9.withMillis(3780000825L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime19", (instant9.compareTo(dateTime19) == 0) == instant9.equals(dateTime19));
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3168");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        boolean boolean32 = julianChronology30.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField33 = julianChronology30.days();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology30.year();
        java.lang.String str36 = julianChronology30.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.Chronology chronology44 = gJChronology39.withZone(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone48 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.Chronology chronology50 = julianChronology30.withZone(dateTimeZone42);
        int int52 = dateTimeZone42.getOffset((long) 1);
        org.joda.time.MutableDateTime mutableDateTime53 = instant8.toMutableDateTime(dateTimeZone42);
        java.lang.String str54 = dateTimeZone42.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime53", (instant6.compareTo(mutableDateTime53) == 0) == instant6.equals(mutableDateTime53));
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3169");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant6.withDurationAdded(readableDuration33, 86400000);
        long long36 = instant35.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and mutableDateTime32", (instant35.compareTo(mutableDateTime32) == 0) == instant35.equals(mutableDateTime32));
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3170");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str4 = dateTimeZone2.getName(35L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology7.getZone();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) instant13);
        java.lang.String str15 = instant13.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        int int28 = instant13.compareTo((org.joda.time.ReadableInstant) instant24);
        long long29 = instant13.getMillis();
        org.joda.time.Instant instant31 = instant13.withMillis(110L);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, (org.joda.time.ReadableInstant) instant13, (int) (short) 1);
        org.joda.time.DateTime dateTime34 = instant13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant46.plus(readableDuration50);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeField dateTimeField53 = gJChronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.secondOfDay();
        java.lang.String str56 = gJChronology52.toString();
        org.joda.time.MutableDateTime mutableDateTime57 = instant13.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology60.secondOfMinute();
        org.joda.time.DurationField durationField62 = julianChronology60.centuries();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.chrono.JulianChronology julianChronology67 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone65);
        boolean boolean69 = julianChronology67.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology70 = julianChronology67.withUTC();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology72 = julianChronology67.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField73 = julianChronology67.days();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology67.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone75 = julianChronology67.getZone();
        org.joda.time.DurationField durationField76 = julianChronology67.days();
        org.joda.time.DateTimeField dateTimeField77 = julianChronology67.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone78 = julianChronology67.getZone();
        org.joda.time.Chronology chronology79 = julianChronology60.withZone(dateTimeZone78);
        org.joda.time.DateTimeField dateTimeField80 = julianChronology60.secondOfMinute();
        org.joda.time.DurationField durationField81 = julianChronology60.months();
        org.joda.time.DateTime dateTime82 = instant13.toDateTime((org.joda.time.Chronology) julianChronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and mutableDateTime57", (dateTime34.compareTo(mutableDateTime57) == 0) == dateTime34.equals(mutableDateTime57));
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3171");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-5970296843698911L));
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.Chronology chronology7 = gJChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.millisOfDay();
        java.lang.String str10 = gJChronology6.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology6.yearOfEra();
        org.joda.time.DurationField durationField12 = gJChronology6.weeks();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology6.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime14 = instant3.toMutableDateTime((org.joda.time.Chronology) gJChronology6);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = instant23.getZone();
        java.lang.String str27 = dateTimeZone26.toString();
        boolean boolean28 = dateTimeZone26.isFixed();
        org.joda.time.DateTime dateTime29 = instant3.toDateTime(dateTimeZone26);
        boolean boolean30 = instant1.equals((java.lang.Object) dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime14", (instant3.compareTo(mutableDateTime14) == 0) == instant3.equals(mutableDateTime14));
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DurationField durationField11 = julianChronology3.weekyears();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.monthOfYear();
        org.joda.time.DurationField durationField14 = julianChronology3.centuries();
        org.joda.time.DurationField durationField15 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField15", (durationField11.compareTo(durationField15) == 0) == durationField11.equals(durationField15));
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3173");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        boolean boolean4 = instant3.isAfterNow();
        org.joda.time.DateTime dateTime5 = instant3.toDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant3.withDurationAdded(readableDuration6, 86399991);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime5", (instant8.compareTo(dateTime5) == 0) == instant8.equals(dateTime5));
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3174");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 19);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        int int14 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant11);
        org.joda.time.DateTimeZone dateTimeZone16 = instant11.getZone();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant11.withDurationAdded(readableDuration17, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        boolean boolean25 = julianChronology23.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology28 = julianChronology23.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField29 = julianChronology23.days();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        long long36 = dateTimeZone32.previousTransition(100L);
        java.util.TimeZone timeZone37 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.Chronology chronology39 = julianChronology23.withZone(dateTimeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone38.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        long long54 = dateTimeZone49.nextTransition((long) 0);
        long long56 = dateTimeZone42.getMillisKeepLocal(dateTimeZone49, (long) (byte) 100);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone49.getShortName((-110L), locale58);
        java.lang.String str61 = dateTimeZone49.getShortName(9L);
        org.joda.time.DateTime dateTime62 = instant19.toDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone63, readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology65.getZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str69 = dateTimeZone68.getID();
        org.joda.time.Chronology chronology70 = gJChronology65.withZone(dateTimeZone68);
        long long73 = dateTimeZone68.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone74 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        boolean boolean76 = dateTimeZone75.isFixed();
        org.joda.time.Instant instant78 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant78.plus(readableDuration79);
        org.joda.time.Instant instant82 = instant80.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime83 = instant82.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        boolean boolean85 = instant82.isSupported(dateTimeFieldType84);
        int int86 = dateTimeZone75.getOffset((org.joda.time.ReadableInstant) instant82);
        java.lang.String str87 = instant82.toString();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone89);
        org.joda.time.chrono.JulianChronology julianChronology91 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone89);
        org.joda.time.DurationField durationField92 = julianChronology91.centuries();
        java.lang.String str93 = julianChronology91.toString();
        org.joda.time.DateTimeField dateTimeField94 = julianChronology91.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField95 = julianChronology91.secondOfMinute();
        boolean boolean96 = instant82.equals((java.lang.Object) dateTimeField95);
        int int97 = dateTime62.compareTo((org.joda.time.ReadableInstant) instant82);
        boolean boolean98 = instant1.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant82 and dateTime83", (instant82.compareTo(dateTime83) == 0) == instant82.equals(dateTime83));
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3175");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getID();
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 1);
        java.lang.String str11 = dateTimeZone1.getName((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = julianChronology14.minuteOfDay();
        org.joda.time.DurationField durationField16 = julianChronology14.weekyears();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        boolean boolean20 = dateTimeZone18.isFixed();
        long long22 = dateTimeZone18.previousTransition(100L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        long long25 = dateTimeZone18.previousTransition(5201L);
        org.joda.time.Chronology chronology26 = julianChronology14.withZone(dateTimeZone18);
        long long28 = dateTimeZone1.getMillisKeepLocal(dateTimeZone18, 36000001L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone1.getShortName(1644572718819L, locale30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        java.lang.String str42 = instant40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = instant40.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology46.getZone();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, (org.joda.time.ReadableInstant) instant52);
        java.lang.String str54 = instant52.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology57.dayOfYear();
        org.joda.time.Instant instant61 = gJChronology57.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Instant instant63 = instant61.minus(readableDuration62);
        org.joda.time.Instant instant66 = instant63.withDurationAdded((-12219292800000L), 0);
        int int67 = instant52.compareTo((org.joda.time.ReadableInstant) instant63);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Instant instant69 = instant52.minus(readableDuration68);
        int int70 = instant40.compareTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.DateTime dateTime71 = instant40.toDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology72 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant52 and dateTime71", (instant52.compareTo(dateTime71) == 0) == instant52.equals(dateTime71));
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3176");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        java.lang.String str15 = instant13.toString();
        org.joda.time.Instant instant18 = instant13.withDurationAdded((-110L), (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology22.getZone();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTime dateTime30 = instant28.toDateTime();
        boolean boolean31 = instant28.isAfterNow();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant28.plus(readableDuration32);
        int int34 = mutableDateTime19.compareTo((org.joda.time.ReadableInstant) instant33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and dateTime30", (instant33.compareTo(dateTime30) == 0) == instant33.equals(dateTime30));
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3177");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant8.isSupported(dateTimeFieldType31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant8.minus(readableDuration33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = instant34.toMutableDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38);
        boolean boolean42 = julianChronology40.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology43 = julianChronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology40.era();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology40.minuteOfHour();
        org.joda.time.Instant instant47 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        org.joda.time.DateTime dateTime49 = instant47.toDateTime();
        boolean boolean50 = julianChronology40.equals((java.lang.Object) instant47);
        boolean boolean51 = mutableDateTime36.isBefore((org.joda.time.ReadableInstant) instant47);
        boolean boolean53 = instant47.isAfter(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime36", (instant8.compareTo(mutableDateTime36) == 0) == instant8.equals(mutableDateTime36));
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3178");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.Instant instant43 = instant37.toInstant();
        boolean boolean45 = instant43.isBefore((long) ' ');
        boolean boolean46 = instant26.isAfter((org.joda.time.ReadableInstant) instant43);
        boolean boolean47 = instant26.isBeforeNow();
        org.joda.time.DateTime dateTime48 = instant26.toDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = dateTime48.toString(dateTimeFormatter49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.chrono.JulianChronology julianChronology54 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField55 = julianChronology54.centuries();
        org.joda.time.DurationField durationField56 = julianChronology54.weeks();
        org.joda.time.DurationField durationField57 = julianChronology54.days();
        org.joda.time.DurationField durationField58 = julianChronology54.centuries();
        org.joda.time.DateTimeField dateTimeField59 = julianChronology54.hourOfHalfday();
        org.joda.time.Chronology chronology60 = julianChronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = julianChronology54.era();
        org.joda.time.DurationField durationField63 = julianChronology54.hours();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology54.clockhourOfHalfday();
        boolean boolean65 = dateTime48.equals((java.lang.Object) julianChronology54);
        org.joda.time.DateTimeZone dateTimeZone66 = julianChronology54.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime48", (instant26.compareTo(dateTime48) == 0) == instant26.equals(dateTime48));
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3179");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        org.joda.time.Instant instant16 = instant13.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.Instant instant23 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        org.joda.time.Instant instant28 = instant25.withDurationAdded((-12219292800000L), 0);
        boolean boolean30 = instant25.isEqual(35L);
        org.joda.time.Instant instant31 = instant25.toInstant();
        boolean boolean33 = instant31.isBefore((long) ' ');
        boolean boolean34 = instant16.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = instant16.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DurationField durationField40 = gJChronology38.millis();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.secondOfDay();
        org.joda.time.DateTime dateTime42 = instant16.toDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone44.getName((-1L), locale47);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone44.isLocalDateTimeGap(localDateTime49);
        boolean boolean52 = dateTimeZone44.isStandardOffset(36000000L);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.Chronology chronology63 = gJChronology58.withZone(dateTimeZone61);
        java.lang.String str65 = dateTimeZone61.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime67 = instant55.toMutableDateTime(dateTimeZone61);
        int int68 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) instant55);
        boolean boolean69 = dateTime42.equals((java.lang.Object) dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and mutableDateTime67", (instant55.compareTo(mutableDateTime67) == 0) == instant55.equals(mutableDateTime67));
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3180");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant9 = instant7.minus(readableDuration8);
        org.joda.time.Instant instant12 = instant9.withDurationAdded((-12219292800000L), 0);
        boolean boolean14 = instant9.isEqual(35L);
        boolean boolean15 = instant0.isEqual((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant16 = instant0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DurationField durationField30 = julianChronology29.centuries();
        java.lang.String str31 = julianChronology29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology29.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC((long) 0, true);
        boolean boolean36 = gJChronology19.equals((java.lang.Object) true);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology19.yearOfEra();
        org.joda.time.Instant instant38 = gJChronology19.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant38.minus(readableDuration39);
        boolean boolean42 = instant40.isAfter(36000029L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = instant40.toString(dateTimeFormatter43);
        long long45 = instant40.getMillis();
        boolean boolean46 = instant16.isEqual((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.chrono.JulianChronology julianChronology50 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone48);
        boolean boolean52 = julianChronology50.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology50.secondOfDay();
        long long58 = julianChronology50.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField59 = julianChronology50.year();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology50.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        boolean boolean64 = dateTimeZone62.isFixed();
        long long67 = dateTimeZone62.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62);
        org.joda.time.Chronology chronology69 = julianChronology50.withZone(dateTimeZone62);
        int int71 = dateTimeZone62.getStandardOffset((long) 1582);
        org.joda.time.LocalDateTime localDateTime72 = null;
        boolean boolean73 = dateTimeZone62.isLocalDateTimeGap(localDateTime72);
        org.joda.time.MutableDateTime mutableDateTime74 = instant40.toMutableDateTime(dateTimeZone62);
        java.util.Date date75 = instant40.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and mutableDateTime74", (instant40.compareTo(mutableDateTime74) == 0) == instant40.equals(mutableDateTime74));
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3181");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        boolean boolean13 = instant7.isAfter((-179999601L));
        org.joda.time.Instant instant15 = instant7.plus((-71999991L));
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        boolean boolean18 = instant15.isAfter((-3743994852L));
        org.joda.time.Instant instant20 = instant15.withMillis((-35999722L));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant29);
        java.lang.String str31 = instant29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.Instant instant38 = gJChronology34.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant38.minus(readableDuration39);
        org.joda.time.Instant instant43 = instant40.withDurationAdded((-12219292800000L), 0);
        int int44 = instant29.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Instant instant45 = instant40.toInstant();
        org.joda.time.Instant instant48 = instant45.withDurationAdded((-36000000L), 0);
        org.joda.time.DateTime dateTime49 = instant45.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology52 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = julianChronology52.minuteOfDay();
        org.joda.time.DurationField durationField54 = julianChronology52.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology52.halfdayOfDay();
        org.joda.time.DateTime dateTime57 = dateTime49.toDateTime((org.joda.time.Chronology) julianChronology52);
        boolean boolean58 = instant20.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime16", (instant15.compareTo(dateTime16) == 0) == instant15.equals(dateTime16));
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3182");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean43 = instant9.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.Instant instant50 = gJChronology46.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.minus(readableDuration51);
        java.lang.String str53 = instant50.toString();
        org.joda.time.Instant instant55 = instant50.minus((long) 36000000);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        long long57 = instant55.getMillis();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology60.hourOfHalfday();
        long long66 = gJChronology60.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField67 = gJChronology60.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology60.dayOfYear();
        org.joda.time.DurationField durationField69 = gJChronology60.weekyears();
        boolean boolean70 = instant55.equals((java.lang.Object) durationField69);
        org.joda.time.Instant instant72 = instant55.plus((-60514215195738L));
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology75.dayOfWeek();
        org.joda.time.Chronology chronology78 = gJChronology75.withUTC();
        org.joda.time.DurationField durationField79 = gJChronology75.hours();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology75.clockhourOfDay();
        java.lang.String str81 = gJChronology75.toString();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology75.dayOfYear();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology75.halfdayOfDay();
        org.joda.time.Chronology chronology84 = gJChronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField85 = gJChronology75.yearOfEra();
        org.joda.time.DateTimeField dateTimeField86 = gJChronology75.yearOfEra();
        org.joda.time.DateTime dateTime87 = instant72.toDateTime((org.joda.time.Chronology) gJChronology75);
        int int88 = instant9.compareTo((org.joda.time.ReadableInstant) dateTime87);
        java.util.Date date89 = instant9.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant72 and dateTime87", (instant72.compareTo(dateTime87) == 0) == instant72.equals(dateTime87));
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3183");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField11 = julianChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.millisOfDay();
        org.joda.time.DurationField durationField19 = gJChronology15.halfdays();
        org.joda.time.DurationField durationField20 = gJChronology15.millis();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology23 = gJChronology15.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField24 = gJChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology15.weekyear();
        org.joda.time.Instant instant27 = gJChronology15.getGregorianCutover();
        org.joda.time.Instant instant28 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology15.dayOfWeek();
        int int30 = gJChronology15.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology15.dayOfMonth();
        java.lang.Class<?> wildcardClass32 = dateTimeField31.getClass();
        boolean boolean33 = julianChronology3.equals((java.lang.Object) wildcardClass32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField24", (durationField11.compareTo(durationField24) == 0) == durationField11.equals(durationField24));
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3184");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DurationField durationField5 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField10 = gJChronology2.days();
        org.joda.time.Chronology chronology11 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DurationField durationField13 = chronology11.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField12", (durationField5.compareTo(durationField12) == 0) == durationField5.equals(durationField12));
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3185");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, (org.joda.time.ReadableInstant) instant46);
        org.joda.time.DateTime dateTime48 = instant46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.Chronology chronology52 = gJChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology51.dayOfYear();
        boolean boolean58 = instant46.equals((java.lang.Object) dateTimeField57);
        org.joda.time.Chronology chronology59 = instant46.getChronology();
        org.joda.time.DateTime dateTime60 = instant46.toDateTime();
        boolean boolean61 = dateTime37.equals((java.lang.Object) dateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime48", (instant8.compareTo(dateTime48) == 0) == instant8.equals(dateTime48));
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3186");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        org.joda.time.DurationField durationField12 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.year();
        org.joda.time.DurationField durationField14 = julianChronology3.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField14, and durationField12", !(durationField12.compareTo(durationField14) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField14.compareTo(durationField12))));
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3187");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.millisOfSecond();
        org.joda.time.DurationField durationField14 = gJChronology2.eras();
        int int15 = gJChronology2.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField14", Math.signum(durationField4.compareTo(durationField14)) == -Math.signum(durationField14.compareTo(durationField4)));
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3188");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Chronology chronology4 = instant1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.Chronology chronology12 = gJChronology7.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology7.getZone();
        org.joda.time.DateTime dateTime14 = instant1.toDateTime((org.joda.time.Chronology) gJChronology7);
        boolean boolean16 = instant1.isBefore((-93L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime14", (instant1.compareTo(dateTime14) == 0) == instant1.equals(dateTime14));
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3189");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.chrono.JulianChronology julianChronology9 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.DurationField durationField10 = julianChronology9.centuries();
        org.joda.time.DurationField durationField11 = julianChronology9.weeks();
        org.joda.time.DurationField durationField12 = julianChronology9.days();
        org.joda.time.DurationField durationField13 = julianChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology9.hourOfHalfday();
        org.joda.time.Chronology chronology15 = julianChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology9.era();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology9.year();
        org.joda.time.DateTime dateTime18 = instant5.toDateTime((org.joda.time.Chronology) julianChronology9);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.Chronology chronology22 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology21.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Chronology chronology34 = gJChronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology29.getZone();
        long long37 = dateTimeZone35.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology38 = gJChronology21.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.chrono.JulianChronology julianChronology46 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone44);
        boolean boolean48 = julianChronology46.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology49 = julianChronology46.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology51 = julianChronology46.withZone(dateTimeZone50);
        long long53 = dateTimeZone40.getMillisKeepLocal(dateTimeZone50, 10L);
        org.joda.time.Chronology chronology54 = gJChronology21.withZone(dateTimeZone50);
        org.joda.time.Chronology chronology55 = gJChronology21.withUTC();
        org.joda.time.DurationField durationField56 = gJChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology21.hourOfDay();
        boolean boolean58 = julianChronology9.equals((java.lang.Object) gJChronology21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime18", (instant5.compareTo(dateTime18) == 0) == instant5.equals(dateTime18));
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3190");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        boolean boolean22 = instant6.isBeforeNow();
        boolean boolean23 = instant6.isEqualNow();
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = instant6.isEqual(readableInstant24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant6.minus(readableDuration26);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime9", (instant27.compareTo(mutableDateTime9) == 0) == instant27.equals(mutableDateTime9));
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3191");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Chronology chronology14 = gJChronology9.withZone(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean20 = dateTimeZone19.isFixed();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-71999990L), locale22);
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology33 = gJChronology28.withZone(dateTimeZone31);
        long long36 = dateTimeZone31.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean39 = dateTimeZone38.isFixed();
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone38.getName((-71999990L), locale41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.Chronology chronology44 = gJChronology25.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.secondOfDay();
        org.joda.time.DurationField durationField53 = gJChronology48.millis();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = gJChronology56.getZone();
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, (org.joda.time.ReadableInstant) instant62);
        java.lang.String str64 = instant62.toString();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant67 = instant62.withDurationAdded(readableDuration65, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone68 = instant62.getZone();
        java.lang.String str70 = dateTimeZone68.getShortName((long) 18600000);
        long long73 = dateTimeZone68.adjustOffset((-35999976L), true);
        org.joda.time.Chronology chronology74 = gJChronology48.withZone(dateTimeZone68);
        org.joda.time.Chronology chronology75 = chronology44.withZone(dateTimeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField53", Math.signum(durationField6.compareTo(durationField53)) == -Math.signum(durationField53.compareTo(durationField6)));
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3192");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.minutes();
        org.joda.time.DurationField durationField7 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone9.getName((-1L), locale12);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone9.isLocalDateTimeGap(localDateTime14);
        java.lang.String str16 = dateTimeZone9.getID();
        java.lang.String str18 = dateTimeZone9.getNameKey((long) 4);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField20 = julianChronology3.hours();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.clockhourOfHalfday();
        org.joda.time.Chronology chronology32 = gJChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str39 = dateTimeZone38.getID();
        org.joda.time.Chronology chronology40 = gJChronology35.withZone(dateTimeZone38);
        java.lang.String str42 = dateTimeZone38.getName((long) (byte) 10);
        long long45 = dateTimeZone38.convertLocalToUTC((-35999900L), false);
        long long48 = dateTimeZone38.adjustOffset((long) '#', false);
        int int50 = dateTimeZone38.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology51 = chronology32.withZone(dateTimeZone38);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, 9730L, (int) (short) 1);
        java.lang.String str56 = dateTimeZone38.getNameKey((long) 69);
        org.joda.time.Chronology chronology57 = julianChronology3.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField58 = chronology57.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField58, durationField4, and durationField5", !(durationField58.compareTo(durationField4) == 0) || (Math.signum(durationField58.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3193");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        int int17 = instant1.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology18 = instant11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField23 = julianChronology22.centuries();
        java.lang.String str24 = julianChronology22.toString();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.yearOfEra();
        org.joda.time.DurationField durationField26 = julianChronology22.months();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology22.clockhourOfHalfday();
        boolean boolean28 = instant11.equals((java.lang.Object) julianChronology22);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Chronology chronology36 = gJChronology31.withZone(dateTimeZone34);
        java.lang.String str38 = dateTimeZone34.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology39.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Chronology chronology49 = gJChronology44.withZone(dateTimeZone47);
        java.lang.String str51 = dateTimeZone47.getName((long) (byte) 10);
        long long54 = dateTimeZone47.convertLocalToUTC((-35999900L), false);
        int int56 = dateTimeZone47.getOffsetFromLocal((long) 278);
        boolean boolean58 = dateTimeZone47.isStandardOffset((long) 4);
        org.joda.time.Chronology chronology59 = julianChronology39.withZone(dateTimeZone47);
        long long63 = dateTimeZone47.convertLocalToUTC((long) (short) 1, false, 151200000L);
        long long66 = dateTimeZone47.adjustOffset(0L, false);
        java.util.TimeZone timeZone67 = dateTimeZone47.toTimeZone();
        boolean boolean68 = instant11.equals((java.lang.Object) dateTimeZone47);
        long long69 = instant11.getMillis();
        org.joda.time.MutableDateTime mutableDateTime70 = instant11.toMutableDateTime();
        java.lang.Class<?> wildcardClass71 = instant11.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime70", (instant11.compareTo(mutableDateTime70) == 0) == instant11.equals(mutableDateTime70));
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3194");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.plus((-35999999L));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getName((long) (byte) 10);
        long long30 = dateTimeZone23.convertLocalToUTC((-35999900L), false);
        int int32 = dateTimeZone23.getOffsetFromLocal((long) 278);
        boolean boolean34 = dateTimeZone23.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.minus(readableDuration42);
        org.joda.time.Instant instant46 = instant43.withDurationAdded((-12219292800000L), 0);
        boolean boolean48 = instant43.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.Chronology chronology52 = gJChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology51.monthOfYear();
        boolean boolean59 = instant43.equals((java.lang.Object) dateTimeField58);
        org.joda.time.Instant instant61 = instant43.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = instant61.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = instant61.isSupported(dateTimeFieldType64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = instant61.toString(dateTimeFormatter66);
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant71 = instant61.withDurationAdded((long) 0, (int) 'a');
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, readableInstant75);
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology76.getZone();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology76.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology76.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone80 = gJChronology76.getZone();
        org.joda.time.Instant instant82 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology83 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80, (org.joda.time.ReadableInstant) instant82);
        org.joda.time.DateTime dateTime84 = instant82.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.chrono.GJChronology gJChronology87 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone85, readableInstant86);
        org.joda.time.Chronology chronology88 = gJChronology87.withUTC();
        java.lang.String str89 = gJChronology87.toString();
        org.joda.time.DurationField durationField90 = gJChronology87.eras();
        org.joda.time.DateTimeField dateTimeField91 = gJChronology87.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology87.clockhourOfHalfday();
        int int93 = instant82.get(dateTimeField92);
        java.lang.Object obj94 = null;
        boolean boolean95 = instant82.equals(obj94);
        boolean boolean96 = instant71.isBefore((org.joda.time.ReadableInstant) instant82);
        java.lang.String str97 = instant82.toString();
        boolean boolean98 = instant17.isBefore((org.joda.time.ReadableInstant) instant82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime84", (instant9.compareTo(dateTime84) == 0) == instant9.equals(dateTime84));
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3195");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant8.isSupported(dateTimeFieldType31);
        org.joda.time.Instant instant34 = instant8.minus((long) 4200000);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Chronology chronology46 = julianChronology37.withZone(dateTimeZone45);
        org.joda.time.DurationField durationField47 = julianChronology37.minutes();
        org.joda.time.DateTime dateTime48 = instant34.toDateTime((org.joda.time.Chronology) julianChronology37);
        org.joda.time.Instant instant49 = instant34.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.Chronology chronology54 = julianChronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology53.year();
        org.joda.time.Chronology chronology56 = julianChronology53.withUTC();
        org.joda.time.DateTimeZone dateTimeZone57 = julianChronology53.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = julianChronology53.getZone();
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone58.getShortName(72320035L, locale60);
        org.joda.time.DateTime dateTime62 = instant49.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant49 and dateTime48", (instant49.compareTo(dateTime48) == 0) == instant49.equals(dateTime48));
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3196");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = instant26.isSupported(dateTimeFieldType29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = instant26.toString(dateTimeFormatter31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = instant26.isEqual(readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.millisOfDay();
        org.joda.time.DurationField durationField41 = gJChronology37.halfdays();
        org.joda.time.DurationField durationField42 = gJChronology37.millis();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology45 = gJChronology37.withZone(dateTimeZone44);
        org.joda.time.DurationField durationField46 = gJChronology37.minutes();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology37.halfdayOfDay();
        org.joda.time.DurationField durationField48 = gJChronology37.centuries();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology37.secondOfDay();
        long long53 = gJChronology37.add((long) 9, 0L, 0);
        org.joda.time.Instant instant54 = gJChronology37.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = gJChronology57.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.Chronology chronology62 = gJChronology57.withZone(dateTimeZone60);
        long long65 = dateTimeZone60.convertLocalToUTC((long) (short) 10, false);
        long long68 = dateTimeZone60.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Chronology chronology69 = gJChronology37.withZone(dateTimeZone60);
        org.joda.time.chrono.JulianChronology julianChronology70 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime71 = instant26.toMutableDateTime(dateTimeZone60);
        java.util.TimeZone timeZone72 = dateTimeZone60.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime71", (instant26.compareTo(mutableDateTime71) == 0) == instant26.equals(mutableDateTime71));
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3197");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.equals((java.lang.Object) (-35999900L));
        long long12 = mutableDateTime9.getMillis();
        boolean boolean13 = mutableDateTime9.isEqualNow();
        org.joda.time.Instant instant14 = mutableDateTime9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology21 = julianChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.era();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.minuteOfHour();
        org.joda.time.DurationField durationField24 = julianChronology18.weeks();
        org.joda.time.DurationField durationField25 = julianChronology18.days();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology18.hourOfDay();
        java.lang.String str28 = julianChronology18.toString();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology18.secondOfDay();
        org.joda.time.DurationField durationField34 = julianChronology18.years();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology18.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = julianChronology18.getZone();
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime9.toMutableDateTime((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3198");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = mutableDateTime2.getZone();
        int int5 = dateTimeZone3.getStandardOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime2", (instant0.compareTo(mutableDateTime2) == 0) == instant0.equals(mutableDateTime2));
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3199");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        boolean boolean32 = instant20.equals((java.lang.Object) gJChronology25);
        boolean boolean33 = instant11.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.MutableDateTime mutableDateTime34 = instant11.toMutableDateTime();
        org.joda.time.Chronology chronology35 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime34", (instant6.compareTo(mutableDateTime34) == 0) == instant6.equals(mutableDateTime34));
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3200");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        java.lang.String str10 = mutableDateTime9.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.toMutableDateTime(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = mutableDateTime12.toString(dateTimeFormatter13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3201");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant3 = instant1.plus(110L);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        org.joda.time.Instant instant10 = instant8.minus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isStandardOffset((long) 4);
        org.joda.time.DateTime dateTime16 = instant8.toDateTime(dateTimeZone12);
        boolean boolean17 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime16);
        java.lang.Object obj18 = null;
        boolean boolean19 = instant3.equals(obj18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime16", (instant1.compareTo(dateTime16) == 0) == instant1.equals(dateTime16));
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3202");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime12 = instant8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology15.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        java.lang.String str23 = instant21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        int int36 = instant21.compareTo((org.joda.time.ReadableInstant) instant32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.Chronology chronology40 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.dayOfWeek();
        org.joda.time.DurationField durationField42 = gJChronology39.years();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.weekyear();
        boolean boolean44 = instant21.equals((java.lang.Object) dateTimeField43);
        int int45 = mutableDateTime12.get(dateTimeField43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = mutableDateTime12.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, (org.joda.time.ReadableInstant) instant56);
        java.lang.String str58 = instant56.toString();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant61 = instant56.withDurationAdded(readableDuration59, (int) (byte) -1);
        boolean boolean63 = instant56.isBefore(809L);
        boolean boolean64 = instant56.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone65 = instant56.getZone();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.DateTimeField dateTimeField69 = gJChronology68.weekyear();
        org.joda.time.Instant instant70 = gJChronology68.getGregorianCutover();
        org.joda.time.Instant instant73 = instant70.withDurationAdded((long) (-3600000), 5);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.chrono.GJChronology gJChronology76 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone74, readableInstant75);
        java.lang.String str77 = gJChronology76.toString();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology76.dayOfYear();
        java.lang.String str79 = gJChronology76.toString();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology76.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField81 = gJChronology76.monthOfYear();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology76.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology76.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField84 = gJChronology76.weekyear();
        int int85 = gJChronology76.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone86 = gJChronology76.getZone();
        long long88 = dateTimeZone86.previousTransition((-12959999999999L));
        java.lang.String str90 = dateTimeZone86.getNameKey((-7433151155985290L));
        org.joda.time.MutableDateTime mutableDateTime91 = instant73.toMutableDateTime(dateTimeZone86);
        int int92 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) mutableDateTime91);
        org.joda.time.DateTime dateTime93 = mutableDateTime12.toDateTime(dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant73 and mutableDateTime91", (instant73.compareTo(mutableDateTime91) == 0) == instant73.equals(mutableDateTime91));
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3203");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        long long32 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant8.minus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.clockhourOfHalfday();
        org.joda.time.DurationField durationField41 = gJChronology37.weeks();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology37.getZone();
        int int45 = dateTimeZone43.getStandardOffset((long) (byte) 0);
        java.lang.String str47 = dateTimeZone43.getShortName((long) (short) -1);
        int int49 = dateTimeZone43.getOffsetFromLocal((-62159565599948L));
        org.joda.time.MutableDateTime mutableDateTime50 = instant8.toMutableDateTime(dateTimeZone43);
        long long52 = dateTimeZone43.previousTransition((-60514215076641L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime50", (instant8.compareTo(mutableDateTime50) == 0) == instant8.equals(mutableDateTime50));
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3204");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        org.joda.time.DurationField durationField21 = gJChronology13.eras();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.millisOfSecond();
        org.joda.time.DurationField durationField23 = gJChronology13.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField23, and durationField21", !(durationField21.compareTo(durationField23) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField23.compareTo(durationField21))));
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3205");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = instant16.toDateTime(dateTimeZone18);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime19", (instant20.compareTo(dateTime19) == 0) == instant20.equals(dateTime19));
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3206");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        java.lang.String str9 = julianChronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Chronology chronology17 = gJChronology12.withZone(dateTimeZone15);
        long long20 = dateTimeZone15.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone21 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.Chronology chronology23 = julianChronology3.withZone(dateTimeZone15);
        int int25 = dateTimeZone15.getOffset((long) 1);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField27 = gJChronology26.days();
        org.joda.time.Instant instant28 = gJChronology26.getGregorianCutover();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField27", (durationField6.compareTo(durationField27) == 0) == durationField6.equals(durationField27));
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3207");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DurationField durationField12 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField14 = gJChronology2.weeks();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.Instant instant21 = gJChronology17.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.minus(readableDuration22);
        org.joda.time.Instant instant26 = instant23.withDurationAdded((-12219292800000L), 0);
        boolean boolean28 = instant23.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.Chronology chronology32 = gJChronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.monthOfYear();
        boolean boolean39 = instant23.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Instant instant41 = instant23.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = instant41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = instant41.isSupported(dateTimeFieldType44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = instant41.toString(dateTimeFormatter46);
        boolean boolean49 = instant41.isAfter(3L);
        boolean boolean50 = gJChronology2.equals((java.lang.Object) instant41);
        org.joda.time.MutableDateTime mutableDateTime51 = instant41.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant41.minus(readableDuration52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        boolean boolean55 = instant54.isAfterNow();
        org.joda.time.Instant instant57 = instant54.minus(151200000L);
        org.joda.time.Chronology chronology58 = instant54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = instant54.getZone();
        boolean boolean60 = instant41.isBefore((org.joda.time.ReadableInstant) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime51 and instant41", (mutableDateTime51.compareTo(instant41) == 0) == mutableDateTime51.equals(instant41));
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3208");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        boolean boolean6 = instant5.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField11 = julianChronology10.centuries();
        java.lang.String str12 = julianChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology10.yearOfEra();
        org.joda.time.DurationField durationField14 = julianChronology10.months();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.Chronology chronology18 = gJChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology17.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.getID();
        org.joda.time.Chronology chronology30 = gJChronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology25.getZone();
        long long33 = dateTimeZone31.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology34 = gJChronology17.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        boolean boolean44 = julianChronology42.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology45 = julianChronology42.withUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology47 = julianChronology42.withZone(dateTimeZone46);
        long long49 = dateTimeZone36.getMillisKeepLocal(dateTimeZone46, 10L);
        org.joda.time.Chronology chronology50 = gJChronology17.withZone(dateTimeZone46);
        org.joda.time.Chronology chronology51 = gJChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.minuteOfDay();
        boolean boolean53 = julianChronology10.equals((java.lang.Object) dateTimeField52);
        org.joda.time.DurationField durationField54 = julianChronology10.weeks();
        org.joda.time.DateTime dateTime55 = instant5.toDateTime((org.joda.time.Chronology) julianChronology10);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant57 = instant5.plus(readableDuration56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Instant instant60 = instant57.withDurationAdded(readableDuration58, 3600000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and dateTime55", (instant60.compareTo(dateTime55) == 0) == instant60.equals(dateTime55));
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3209");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        long long12 = gJChronology2.add((-71999990L), 36009730L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.dayOfMonth();
        org.joda.time.Chronology chronology15 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField16 = gJChronology2.years();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DurationField durationField18 = gJChronology2.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField17", (durationField16.compareTo(durationField17) == 0) == durationField16.equals(durationField17));
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3210");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant8.withDurationAdded(readableDuration11, (int) (byte) -1);
        org.joda.time.Instant instant15 = instant13.plus(4L);
        boolean boolean16 = instant13.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime17 = instant13.toMutableDateTime();
        org.joda.time.Instant instant19 = instant13.withMillis(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime17", (instant13.compareTo(mutableDateTime17) == 0) == instant13.equals(mutableDateTime17));
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3211");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        boolean boolean13 = instant6.isAfter((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField18 = julianChronology17.centuries();
        org.joda.time.DurationField durationField19 = julianChronology17.weeks();
        org.joda.time.DurationField durationField20 = julianChronology17.days();
        org.joda.time.DurationField durationField21 = julianChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.hourOfHalfday();
        org.joda.time.Chronology chronology23 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology17.minuteOfDay();
        boolean boolean26 = instant6.equals((java.lang.Object) dateTimeField25);
        org.joda.time.DateTimeZone dateTimeZone27 = instant6.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.plus(readableDuration30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(1L);
        boolean boolean34 = instant29.isEqual((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant(100L);
        boolean boolean37 = instant33.isEqual((org.joda.time.ReadableInstant) instant36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = gJChronology40.add(readablePeriod42, (long) (short) -1, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology40.getZone();
        org.joda.time.DateTime dateTime47 = instant36.toDateTime((org.joda.time.Chronology) gJChronology40);
        java.util.Date date48 = instant36.toDate();
        int int49 = instant6.compareTo((org.joda.time.ReadableInstant) instant36);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.chrono.JulianChronology julianChronology53 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone51);
        org.joda.time.DurationField durationField54 = julianChronology53.centuries();
        java.lang.String str55 = julianChronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField59 = julianChronology53.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = julianChronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = julianChronology53.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone62 = julianChronology53.getZone();
        org.joda.time.DateTime dateTime63 = instant6.toDateTime(dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and dateTime47", (instant36.compareTo(dateTime47) == 0) == instant36.equals(dateTime47));
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3212");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant43 = instant9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology47.year();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology47.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = julianChronology47.getZone();
        org.joda.time.DurationField durationField51 = julianChronology47.eras();
        org.joda.time.DateTimeZone dateTimeZone52 = julianChronology47.getZone();
        boolean boolean53 = instant43.equals((java.lang.Object) julianChronology47);
        org.joda.time.DurationField durationField54 = julianChronology47.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField51, durationField54, and durationField51", !(durationField51.compareTo(durationField54) == 0) || (Math.signum(durationField51.compareTo(durationField51)) == Math.signum(durationField54.compareTo(durationField51))));
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3213");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        boolean boolean26 = instant8.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        org.joda.time.Instant instant41 = instant38.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant38.plus(readableDuration42);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        org.joda.time.MutableDateTime mutableDateTime57 = instant53.toMutableDateTime();
        int int58 = instant43.compareTo((org.joda.time.ReadableInstant) mutableDateTime57);
        boolean boolean59 = instant8.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Instant instant61 = instant8.minus((-61513243200001L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime57", (instant8.compareTo(mutableDateTime57) == 0) == instant8.equals(mutableDateTime57));
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3214");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.weekyear();
        org.joda.time.DurationField durationField7 = julianChronology3.days();
        org.joda.time.Chronology chronology8 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.hourOfDay();
        org.joda.time.DurationField durationField10 = julianChronology3.eras();
        org.joda.time.DurationField durationField11 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField11", Math.signum(durationField7.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField7)));
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3215");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.seconds();
        org.joda.time.DurationField durationField6 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField4, and durationField5", !(durationField6.compareTo(durationField4) == 0) || (Math.signum(durationField6.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3216");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.DateTime dateTime30 = instant25.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant25.isSupported(dateTimeFieldType31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime30", (instant25.compareTo(dateTime30) == 0) == instant25.equals(dateTime30));
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3217");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        boolean boolean3 = instant0.isBeforeNow();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        java.util.Date date9 = instant5.toDate();
        long long10 = instant5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        int int34 = instant19.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.weekyear();
        boolean boolean42 = instant19.equals((java.lang.Object) dateTimeField41);
        org.joda.time.Instant instant44 = instant19.withMillis(32L);
        boolean boolean45 = instant5.isEqual((org.joda.time.ReadableInstant) instant44);
        boolean boolean46 = instant0.equals((java.lang.Object) instant5);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = instant0.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.clockhourOfHalfday();
        int int55 = gJChronology51.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology51.getZone();
        java.lang.String str58 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology51.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology51.hourOfDay();
        boolean boolean61 = dateTime48.equals((java.lang.Object) dateTimeField60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63);
        org.joda.time.Chronology chronology65 = gJChronology64.withUTC();
        java.lang.String str66 = gJChronology64.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology64.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology64.dayOfWeek();
        org.joda.time.Instant instant70 = gJChronology64.getGregorianCutover();
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        int int72 = dateTime48.compareTo((org.joda.time.ReadableInstant) instant70);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant75 = instant70.withDurationAdded(readableDuration73, 2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime48", (instant0.compareTo(dateTime48) == 0) == instant0.equals(dateTime48));
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3218");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = instant1.toDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        java.lang.String str11 = gJChronology10.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.millisOfSecond();
        org.joda.time.Chronology chronology14 = gJChronology10.withUTC();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime((org.joda.time.Chronology) gJChronology10);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant17.withDurationAdded(readableDuration18, 0);
        org.joda.time.Instant instant22 = instant20.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology26.getZone();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, (org.joda.time.ReadableInstant) instant32);
        java.lang.String str34 = instant32.toString();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.minus(readableDuration42);
        org.joda.time.Instant instant46 = instant43.withDurationAdded((-12219292800000L), 0);
        int int47 = instant32.compareTo((org.joda.time.ReadableInstant) instant43);
        boolean boolean49 = instant32.isBefore((long) 'a');
        org.joda.time.Instant instant50 = instant32.toInstant();
        boolean boolean51 = instant50.isEqualNow();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((java.lang.Object) instant50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.dayOfYear();
        org.joda.time.Instant instant59 = gJChronology55.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant59.minus(readableDuration60);
        org.joda.time.Instant instant64 = instant61.withDurationAdded((-12219292800000L), 0);
        boolean boolean66 = instant61.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.Chronology chronology70 = gJChronology69.withUTC();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.millisOfDay();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField74 = gJChronology69.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology69.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology69.monthOfYear();
        boolean boolean77 = instant61.equals((java.lang.Object) dateTimeField76);
        org.joda.time.Instant instant79 = instant61.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = instant79.isSupported(dateTimeFieldType80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = instant79.isSupported(dateTimeFieldType82);
        org.joda.time.Instant instant86 = instant79.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant88 = instant86.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Instant instant91 = instant86.withDurationAdded(readableDuration89, 1200);
        boolean boolean92 = instant50.isEqual((org.joda.time.ReadableInstant) instant86);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        boolean boolean94 = instant86.isSupported(dateTimeFieldType93);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        boolean boolean96 = instant86.isSupported(dateTimeFieldType95);
        java.lang.String str97 = instant86.toString();
        boolean boolean98 = instant22.isEqual((org.joda.time.ReadableInstant) instant86);
        int int99 = mutableDateTime15.compareTo((org.joda.time.ReadableInstant) instant22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3219");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant41 = instant8.minus((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        java.lang.String str45 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.dayOfYear();
        java.lang.String str47 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology44.weekOfWeekyear();
        java.lang.String str51 = gJChronology44.toString();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology44.dayOfWeek();
        int int53 = instant41.get(dateTimeField52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((java.lang.Object) instant41);
        org.joda.time.DateTime dateTime55 = instant54.toDateTimeISO();
        boolean boolean57 = instant54.isEqual((-107936861L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime55", (instant41.compareTo(dateTime55) == 0) == instant41.equals(dateTime55));
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3220");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        long long20 = instant6.getMillis();
        long long21 = instant6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.dayOfWeek();
        org.joda.time.DurationField durationField27 = gJChronology24.years();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology24.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        boolean boolean34 = julianChronology32.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology35 = julianChronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = julianChronology32.getZone();
        org.joda.time.Chronology chronology37 = gJChronology24.withZone(dateTimeZone36);
        long long41 = gJChronology24.add((long) (short) -1, (-11L), (int) '#');
        org.joda.time.DateTimeField dateTimeField42 = gJChronology24.dayOfWeek();
        org.joda.time.DateTime dateTime43 = instant6.toDateTime((org.joda.time.Chronology) gJChronology24);
        org.joda.time.DurationField durationField44 = gJChronology24.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3221");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology31.getZone();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, (org.joda.time.ReadableInstant) instant37);
        java.lang.String str39 = instant37.toString();
        int int40 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((java.lang.Object) instant37);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((java.lang.Object) instant41);
        org.joda.time.Instant instant44 = instant42.minus(5201L);
        int int45 = dateTime27.compareTo((org.joda.time.ReadableInstant) instant42);
        java.lang.String str46 = instant42.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime27", (instant8.compareTo(dateTime27) == 0) == instant8.equals(dateTime27));
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3222");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology33 = gJChronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology28.getZone();
        long long36 = dateTimeZone34.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology37 = gJChronology20.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        boolean boolean47 = julianChronology45.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology48 = julianChronology45.withUTC();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology50 = julianChronology45.withZone(dateTimeZone49);
        long long52 = dateTimeZone39.getMillisKeepLocal(dateTimeZone49, 10L);
        org.joda.time.Chronology chronology53 = gJChronology20.withZone(dateTimeZone49);
        long long55 = dateTimeZone49.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime56 = instant14.toMutableDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.Chronology chronology60 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology59.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology59.millisOfDay();
        org.joda.time.DateTime dateTime63 = mutableDateTime56.toDateTime((org.joda.time.Chronology) gJChronology59);
        int int64 = gJChronology59.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime63", (instant9.compareTo(dateTime63) == 0) == instant9.equals(dateTime63));
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3223");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant6.withDurationAdded(readableDuration13, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        boolean boolean29 = instant24.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.monthOfYear();
        boolean boolean40 = instant24.equals((java.lang.Object) dateTimeField39);
        org.joda.time.Instant instant42 = instant24.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = instant42.isSupported(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = instant42.getChronology();
        org.joda.time.Instant instant47 = instant42.withMillis((-35999968L));
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        boolean boolean49 = instant6.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant52 = instant6.withDurationAdded(readableDuration50, 0);
        org.joda.time.Instant instant54 = instant6.withMillis(36009730L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, readableInstant56);
        java.lang.String str58 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology57.dayOfYear();
        java.lang.String str60 = gJChronology57.toString();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology57.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology57.monthOfYear();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology57.secondOfDay();
        org.joda.time.DateTime dateTime64 = instant6.toDateTime((org.joda.time.Chronology) gJChronology57);
        boolean boolean66 = dateTime64.isBefore(36000030L);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime64.getZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        org.joda.time.chrono.JulianChronology julianChronology71 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone69);
        boolean boolean73 = julianChronology71.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField74 = julianChronology71.months();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        java.util.Locale locale79 = null;
        java.lang.String str80 = dateTimeZone76.getName((-1L), locale79);
        org.joda.time.LocalDateTime localDateTime81 = null;
        boolean boolean82 = dateTimeZone76.isLocalDateTimeGap(localDateTime81);
        boolean boolean84 = dateTimeZone76.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology85 = julianChronology71.withZone(dateTimeZone76);
        int int87 = dateTimeZone76.getOffset((-35999900L));
        java.lang.String str89 = dateTimeZone76.getShortName(0L);
        java.lang.String str90 = dateTimeZone76.getID();
        java.lang.String str92 = dateTimeZone76.getName(110L);
        long long94 = dateTimeZone67.getMillisKeepLocal(dateTimeZone76, (-1087200000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime64", (instant6.compareTo(dateTime64) == 0) == instant6.equals(dateTime64));
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3224");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant14);
        org.joda.time.Instant instant17 = instant14.minus((long) ' ');
        boolean boolean18 = instant14.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime19 = instant14.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        int int22 = dateTimeZone20.getOffset((-60514251117001L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime19", (instant9.compareTo(mutableDateTime19) == 0) == instant9.equals(mutableDateTime19));
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3225");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        boolean boolean29 = instant28.isBeforeNow();
        org.joda.time.Instant instant31 = instant28.minus((long) (byte) -1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.plus(readableDuration34);
        org.joda.time.Instant instant37 = instant35.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = instant37.toDateTimeISO();
        boolean boolean40 = instant37.isAfter((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.Instant instant52 = instant49.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant49.plus(readableDuration53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = instant49.isEqual(readableInstant55);
        boolean boolean57 = instant37.isEqual((org.joda.time.ReadableInstant) instant49);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime60 = instant37.toMutableDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = instant28.toDateTime(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime38", (instant37.compareTo(dateTime38) == 0) == instant37.equals(dateTime38));
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3226");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant8.isSupported(dateTimeFieldType31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant8.minus(readableDuration33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = instant34.toMutableDateTime(chronology35);
        boolean boolean38 = mutableDateTime36.isAfter((long) 36000001);
        long long39 = mutableDateTime36.getMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime36.getZone();
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime36", (instant8.compareTo(mutableDateTime36) == 0) == instant8.equals(mutableDateTime36));
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3227");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) ' ');
        long long8 = dateTimeZone3.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = instant17.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant17);
        boolean boolean22 = instant17.isEqualNow();
        org.joda.time.Instant instant24 = instant17.minus(36000030L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfWeek();
        org.joda.time.DurationField durationField30 = gJChronology27.years();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getNameKey(10L);
        java.lang.String str39 = dateTimeZone33.getName((long) (byte) -1);
        org.joda.time.Chronology chronology40 = gJChronology27.withZone(dateTimeZone33);
        long long43 = dateTimeZone33.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        org.joda.time.chrono.JulianChronology julianChronology47 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone45);
        boolean boolean49 = julianChronology47.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField50 = julianChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = julianChronology47.secondOfDay();
        long long55 = julianChronology47.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.chrono.JulianChronology julianChronology59 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone57);
        boolean boolean61 = julianChronology59.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology62 = julianChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = julianChronology59.era();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology59.minuteOfHour();
        org.joda.time.DurationField durationField65 = julianChronology59.weeks();
        org.joda.time.DurationField durationField66 = julianChronology59.days();
        org.joda.time.DateTimeField dateTimeField67 = julianChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology59.millisOfDay();
        org.joda.time.DurationField durationField69 = julianChronology59.millis();
        org.joda.time.DateTimeField dateTimeField70 = julianChronology59.clockhourOfHalfday();
        boolean boolean71 = julianChronology47.equals((java.lang.Object) julianChronology59);
        boolean boolean72 = dateTimeZone33.equals((java.lang.Object) julianChronology47);
        org.joda.time.Chronology chronology73 = julianChronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology47.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime75 = instant17.toMutableDateTime((org.joda.time.Chronology) julianChronology47);
        org.joda.time.DateTimeField dateTimeField76 = julianChronology47.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime75", (instant17.compareTo(mutableDateTime75) == 0) == instant17.equals(mutableDateTime75));
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3228");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology33 = instant6.getChronology();
        org.joda.time.Chronology chronology34 = instant6.getChronology();
        org.joda.time.DateTime dateTime35 = instant6.toDateTime();
        org.joda.time.Instant instant38 = instant6.withDurationAdded((long) 360000000, (int) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and dateTime35", (mutableDateTime32.compareTo(dateTime35) == 0) == mutableDateTime32.equals(dateTime35));
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3229");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime27.getZone();
        long long32 = dateTimeZone29.adjustOffset(61543929598418L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime27", (instant8.compareTo(dateTime27) == 0) == instant8.equals(dateTime27));
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3230");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.Instant instant14 = gJChronology10.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = instant14.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = instant14.toDateTime();
        java.util.Date date19 = instant14.toDate();
        boolean boolean20 = gJChronology2.equals((java.lang.Object) instant14);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant14.minus(readableDuration21);
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and mutableDateTime17", (instant22.compareTo(mutableDateTime17) == 0) == instant22.equals(mutableDateTime17));
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3231");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = julianChronology3.year();
        org.joda.time.DurationField durationField5 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.yearOfCentury();
        org.joda.time.DurationField durationField8 = julianChronology3.eras();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = julianChronology3.add(readablePeriod9, 24L, 9);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField14 = julianChronology3.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField14, and durationField5", !(durationField5.compareTo(durationField14) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField14.compareTo(durationField5))));
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3232");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        org.joda.time.Chronology chronology20 = instant6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        boolean boolean26 = julianChronology24.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology27 = julianChronology24.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology29 = julianChronology24.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField30 = julianChronology24.days();
        org.joda.time.Chronology chronology31 = julianChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = instant6.toMutableDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        java.lang.String str38 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField43 = gJChronology37.eras();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime34.toMutableDateTime((org.joda.time.Chronology) gJChronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3233");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.Instant instant15 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime20 = instant19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = instant19.isSupported(dateTimeFieldType21);
        int int23 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant19);
        java.lang.String str24 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField29 = julianChronology28.centuries();
        java.lang.String str30 = julianChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.secondOfMinute();
        boolean boolean33 = instant19.equals((java.lang.Object) dateTimeField32);
        org.joda.time.Instant instant35 = instant19.plus(151200349L);
        org.joda.time.MutableDateTime mutableDateTime36 = instant19.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime36.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime20", (instant19.compareTo(dateTime20) == 0) == instant19.equals(dateTime20));
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3234");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        org.joda.time.MutableDateTime mutableDateTime33 = instant30.toMutableDateTime(dateTimeZone32);
        org.joda.time.Instant instant34 = instant30.toInstant();
        boolean boolean36 = instant34.isBefore((-484113758469376L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and mutableDateTime33", (instant34.compareTo(mutableDateTime33) == 0) == instant34.equals(mutableDateTime33));
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3235");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Chronology chronology38 = gJChronology33.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology33.getZone();
        long long41 = dateTimeZone39.nextTransition((-12219292800000L));
        long long43 = dateTimeZone39.convertUTCToLocal((long) 1);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone39.getName((long) (-1), locale45);
        long long50 = dateTimeZone39.convertLocalToUTC(1L, true, (long) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.plus(readableDuration53);
        org.joda.time.Instant instant56 = instant54.withMillis((long) (byte) -1);
        java.util.Date date57 = instant54.toDate();
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTime dateTime59 = instant2.toDateTime(dateTimeZone39);
        org.joda.time.Instant instant62 = instant2.withDurationAdded(241898401199L, (int) (byte) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant62 and dateTime59", (instant62.compareTo(dateTime59) == 0) == instant62.equals(dateTime59));
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3236");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis(223199999L);
        boolean boolean13 = instant11.isEqual(296L);
        org.joda.time.Instant instant15 = instant11.withMillis((-59011667999904L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.DurationField durationField20 = julianChronology19.centuries();
        java.lang.String str21 = julianChronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology19.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime28 = instant15.toMutableDateTime((org.joda.time.Chronology) julianChronology19);
        org.joda.time.Instant instant30 = org.joda.time.Instant.parse("1970-06-24T23:59:59.901Z");
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime32 = instant30.toMutableDateTimeISO();
        int int33 = instant15.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = instant30.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime28", (instant15.compareTo(mutableDateTime28) == 0) == instant15.equals(mutableDateTime28));
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3237");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.clockhourOfHalfday();
        org.joda.time.Chronology chronology22 = gJChronology20.withUTC();
        org.joda.time.Instant instant23 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant23.minus(readableDuration24);
        boolean boolean26 = julianChronology3.equals((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = instant23.minus((-435599901L));
        boolean boolean29 = instant28.isBeforeNow();
        java.lang.String str30 = instant28.toString();
        org.joda.time.Chronology chronology31 = instant28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.era();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology35.minuteOfHour();
        org.joda.time.Instant instant42 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        org.joda.time.DateTime dateTime44 = instant42.toDateTime();
        boolean boolean45 = julianChronology35.equals((java.lang.Object) instant42);
        org.joda.time.Instant instant48 = instant42.withDurationAdded(18684000000L, (int) (byte) 100);
        boolean boolean49 = instant28.isBefore((org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime44", (instant42.compareTo(dateTime44) == 0) == instant42.equals(dateTime44));
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3238");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.Instant instant13 = instant8.minus((-60514215064188L));
        org.joda.time.DateTime dateTime14 = instant8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology17 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = julianChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = julianChronology17.getZone();
        org.joda.time.Chronology chronology21 = julianChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology17.era();
        org.joda.time.DateTime dateTime23 = dateTime14.toDateTime((org.joda.time.Chronology) julianChronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime11", (instant8.compareTo(mutableDateTime11) == 0) == instant8.equals(mutableDateTime11));
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3239");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        org.joda.time.DurationField durationField12 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.year();
        org.joda.time.DurationField durationField14 = julianChronology3.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField14, and durationField12", !(durationField12.compareTo(durationField14) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField14.compareTo(durationField12))));
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        long long16 = dateTimeZone12.convertLocalToUTC((-61513207200000L), true, (-12242519999904L));
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone12.getShortName((-60904828799341L), locale18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Chronology chronology27 = gJChronology22.withZone(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone25);
        org.joda.time.Chronology chronology31 = julianChronology30.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (-1));
        long long39 = dateTimeZone33.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long41 = dateTimeZone33.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology42 = julianChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = gJChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = gJChronology45.getZone();
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, (org.joda.time.ReadableInstant) instant51);
        java.lang.String str53 = instant51.toString();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant51.withDurationAdded(readableDuration54, (int) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, (org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.Chronology chronology62 = gJChronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.millisOfDay();
        org.joda.time.DurationField durationField65 = gJChronology61.halfdays();
        org.joda.time.DurationField durationField66 = gJChronology61.millis();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology69 = gJChronology61.withZone(dateTimeZone68);
        org.joda.time.DurationField durationField70 = gJChronology61.minutes();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology61.halfdayOfDay();
        org.joda.time.DurationField durationField72 = gJChronology61.centuries();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology61.secondOfDay();
        long long77 = gJChronology61.add((long) 9, 0L, 0);
        org.joda.time.Instant instant78 = gJChronology61.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.chrono.GJChronology gJChronology81 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone79, readableInstant80);
        org.joda.time.DateTimeZone dateTimeZone82 = gJChronology81.getZone();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str85 = dateTimeZone84.getID();
        org.joda.time.Chronology chronology86 = gJChronology81.withZone(dateTimeZone84);
        long long89 = dateTimeZone84.convertLocalToUTC((long) (short) 10, false);
        long long92 = dateTimeZone84.convertLocalToUTC((-12219292800000L), true);
        org.joda.time.Chronology chronology93 = gJChronology61.withZone(dateTimeZone84);
        org.joda.time.DateTime dateTime94 = instant51.toDateTime(dateTimeZone84);
        long long95 = instant51.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and dateTime94", (instant51.compareTo(dateTime94) == 0) == instant51.equals(dateTime94));
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3241");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology8.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant11.withDurationAdded(readableDuration12, 0);
        java.util.Date date15 = instant11.toDate();
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime17 = instant11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(126000000);
        java.lang.String str20 = dateTimeZone19.getID();
        java.util.TimeZone timeZone21 = dateTimeZone19.toTimeZone();
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime23 = instant11.toDateTime(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime17", (instant1.compareTo(dateTime17) == 0) == instant1.equals(dateTime17));
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.DateTime dateTime30 = instant25.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        java.lang.String str35 = gJChronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.clockhourOfHalfday();
        org.joda.time.DurationField durationField39 = gJChronology33.minutes();
        org.joda.time.DateTime dateTime40 = instant25.toDateTime((org.joda.time.Chronology) gJChronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime30", (instant25.compareTo(dateTime30) == 0) == instant25.equals(dateTime30));
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3243");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        boolean boolean40 = instant39.isAfterNow();
        boolean boolean41 = instant39.isAfterNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant44 = instant39.withDurationAdded(readableDuration42, 20);
        boolean boolean45 = instant27.isEqual((org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone46, readableInstant47);
        org.joda.time.Chronology chronology49 = gJChronology48.withUTC();
        java.lang.String str50 = gJChronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology48.minuteOfDay();
        org.joda.time.DurationField durationField55 = gJChronology48.seconds();
        org.joda.time.DateTime dateTime56 = instant27.toDateTime((org.joda.time.Chronology) gJChronology48);
        org.joda.time.Chronology chronology57 = instant27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime58 = instant27.toMutableDateTimeISO();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = mutableDateTime58.toString(dateTimeFormatter59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime56", (instant27.compareTo(dateTime56) == 0) == instant27.equals(dateTime56));
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3244");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = instant1.toString(dateTimeFormatter2);
        java.lang.String str4 = instant1.toString();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant1.withDurationAdded(readableDuration5, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        java.lang.String str15 = dateTimeZone14.getID();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone14.getShortName((-60514215252321L), locale17);
        org.joda.time.MutableDateTime mutableDateTime19 = instant7.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        boolean boolean25 = julianChronology23.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology28 = julianChronology23.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField29 = julianChronology23.days();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology23.millisOfSecond();
        java.lang.String str31 = julianChronology23.toString();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, (org.joda.time.ReadableInstant) instant43);
        java.lang.String str45 = instant43.toString();
        int int46 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) instant43);
        java.util.TimeZone timeZone47 = dateTimeZone34.toTimeZone();
        org.joda.time.Chronology chronology48 = julianChronology23.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology23.millisOfSecond();
        boolean boolean50 = instant7.equals((java.lang.Object) julianChronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime19", (instant7.compareTo(mutableDateTime19) == 0) == instant7.equals(mutableDateTime19));
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3245");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        boolean boolean2 = mutableDateTime1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, 0);
        boolean boolean8 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant10.withDurationAdded(readableDuration11, 0);
        org.joda.time.Instant instant15 = instant13.minus((long) (short) -1);
        org.joda.time.Instant instant17 = instant15.withMillis((-1L));
        java.util.Date date18 = instant15.toDate();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField25 = julianChronology22.days();
        boolean boolean26 = instant15.equals((java.lang.Object) julianChronology22);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant30 = instant28.plus(110L);
        org.joda.time.Instant instant31 = instant30.toInstant();
        boolean boolean32 = instant15.isBefore((org.joda.time.ReadableInstant) instant31);
        boolean boolean33 = instant15.isAfterNow();
        java.lang.String str34 = instant15.toString();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant36.withDurationAdded(readableDuration37, 0);
        java.util.Date date40 = instant36.toDate();
        long long41 = instant36.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology44.getZone();
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, (org.joda.time.ReadableInstant) instant50);
        java.lang.String str52 = instant50.toString();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.dayOfYear();
        org.joda.time.Instant instant59 = gJChronology55.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant59.minus(readableDuration60);
        org.joda.time.Instant instant64 = instant61.withDurationAdded((-12219292800000L), 0);
        int int65 = instant50.compareTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.Chronology chronology69 = gJChronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.dayOfWeek();
        org.joda.time.DurationField durationField71 = gJChronology68.years();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology68.weekyear();
        boolean boolean73 = instant50.equals((java.lang.Object) dateTimeField72);
        org.joda.time.Instant instant75 = instant50.withMillis(32L);
        boolean boolean76 = instant36.isEqual((org.joda.time.ReadableInstant) instant75);
        org.joda.time.Instant instant78 = instant75.minus((long) 1200);
        org.joda.time.DateTimeZone dateTimeZone79 = instant78.getZone();
        boolean boolean80 = instant15.isAfter((org.joda.time.ReadableInstant) instant78);
        boolean boolean81 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant83 = instant15.minus((-435600000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3246");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-11T09:47:27.796Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        long long6 = dateTimeZone4.previousTransition((-36000000L));
        org.joda.time.DateTime dateTime7 = dateTime2.toDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        java.lang.String str11 = gJChronology10.toString();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfYear();
        java.lang.String str13 = gJChronology10.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        int int18 = dateTimeZone15.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.Chronology chronology20 = gJChronology10.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.Instant instant27 = gJChronology23.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant27.minus(readableDuration28);
        org.joda.time.Instant instant32 = instant29.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant41);
        java.lang.String str43 = instant41.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        java.lang.String str48 = gJChronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology46.dayOfWeek();
        org.joda.time.Instant instant52 = gJChronology46.getGregorianCutover();
        boolean boolean53 = instant41.equals((java.lang.Object) gJChronology46);
        boolean boolean54 = instant32.isAfter((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Instant instant56 = instant41.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant56);
        boolean boolean58 = instant56.isEqualNow();
        boolean boolean60 = instant56.isAfter((long) 3600000);
        org.joda.time.Instant instant63 = instant56.withDurationAdded((long) 5, (int) (short) -1);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime65 = instant63.toMutableDateTimeISO();
        boolean boolean66 = dateTime2.isAfter((org.joda.time.ReadableInstant) instant63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime7", (instant1.compareTo(dateTime7) == 0) == instant1.equals(dateTime7));
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3247");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        boolean boolean8 = instant5.isAfter((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = instant17.isEqual(readableInstant23);
        boolean boolean25 = instant5.isEqual((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant37.plus(readableDuration41);
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.dayOfWeek();
        org.joda.time.Chronology chronology49 = gJChronology46.withUTC();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology52 = chronology49.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = instant42.toDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        boolean boolean55 = dateTime53.isBeforeNow();
        boolean boolean56 = dateTime53.isAfterNow();
        boolean boolean57 = dateTime53.isEqualNow();
        int int58 = instant17.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3248");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        boolean boolean2 = mutableDateTime1.isEqualNow();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant7 = instant4.withDurationAdded(readableDuration5, 0);
        boolean boolean8 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        org.joda.time.Instant instant31 = instant28.withDurationAdded((-12219292800000L), 0);
        int int32 = instant17.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.dayOfWeek();
        org.joda.time.DurationField durationField38 = gJChronology35.years();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.weekyear();
        boolean boolean40 = instant17.equals((java.lang.Object) dateTimeField39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.Instant instant47 = gJChronology43.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.minus(readableDuration48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.plus(readableDuration50);
        boolean boolean52 = instant17.isBefore((org.joda.time.ReadableInstant) instant51);
        org.joda.time.DateTimeZone dateTimeZone53 = instant17.getZone();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant56 = instant17.withDurationAdded(readableDuration54, (int) '#');
        boolean boolean57 = instant4.isBefore((org.joda.time.ReadableInstant) instant56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3249");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        int int12 = dateTimeZone1.getStandardOffset((-107999965L));
        org.joda.time.Instant instant14 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.plus(readableDuration15);
        long long17 = instant14.getMillis();
        java.util.Date date18 = instant14.toDate();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant14.plus(readableDuration19);
        int int21 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime22 = instant20.toDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant20.minus(readableDuration23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime22", (instant24.compareTo(dateTime22) == 0) == instant24.equals(dateTime22));
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3250");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = instant20.toDateTime();
        java.util.Date date25 = instant20.toDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.secondOfMinute();
        int int34 = instant20.get(dateTimeField33);
        org.joda.time.Chronology chronology35 = instant20.getChronology();
        boolean boolean36 = instant9.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant39 = instant20.withDurationAdded(readableDuration37, 7);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant41 = instant39.plus(readableDuration40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and mutableDateTime23", (instant41.compareTo(mutableDateTime23) == 0) == instant41.equals(mutableDateTime23));
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3251");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = instant26.withMillis(36000001L);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.secondOfDay();
        long long43 = julianChronology35.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField44 = julianChronology35.year();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        boolean boolean49 = dateTimeZone47.isFixed();
        long long51 = dateTimeZone47.previousTransition(100L);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        java.util.TimeZone timeZone53 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        java.lang.String str57 = dateTimeZone54.getName(36000030L);
        org.joda.time.Chronology chronology58 = julianChronology35.withZone(dateTimeZone54);
        boolean boolean59 = instant30.equals((java.lang.Object) julianChronology35);
        org.joda.time.MutableDateTime mutableDateTime60 = instant30.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        java.lang.String str64 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.dayOfYear();
        java.lang.String str66 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology63.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone69 = gJChronology63.getZone();
        java.lang.String str70 = gJChronology63.toString();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology63.clockhourOfDay();
        int int72 = instant30.get(dateTimeField71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime60", (instant30.compareTo(mutableDateTime60) == 0) == instant30.equals(mutableDateTime60));
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3252");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = instant8.isEqual(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        java.lang.String str20 = dateTimeZone17.getName((long) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime21 = instant8.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        boolean boolean27 = julianChronology25.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology28 = julianChronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone29 = julianChronology25.getZone();
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = gJChronology30.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = mutableDateTime21.toDateTime((org.joda.time.Chronology) gJChronology30);
        boolean boolean33 = mutableDateTime21.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime32", (instant6.compareTo(dateTime32) == 0) == instant6.equals(dateTime32));
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        org.joda.time.Instant instant12 = gJChronology9.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.minus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.plus(readableDuration17);
        org.joda.time.Instant instant20 = instant18.withMillis((long) (byte) -1);
        boolean boolean21 = instant20.isEqualNow();
        org.joda.time.Instant instant23 = instant20.plus(31799999L);
        boolean boolean24 = instant23.isAfterNow();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant23.minus(readableDuration25);
        boolean boolean27 = instant12.isEqual((org.joda.time.ReadableInstant) instant26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant12.minus(readableDuration28);
        org.joda.time.DateTime dateTime30 = instant12.toDateTimeISO();
        org.joda.time.Instant instant32 = instant12.withMillis((-119274517260204080L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime30", (instant8.compareTo(dateTime30) == 0) == instant8.equals(dateTime30));
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3254");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime();
        org.joda.time.Instant instant13 = instant8.withMillis((long) 9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime11", (instant8.compareTo(mutableDateTime11) == 0) == instant8.equals(mutableDateTime11));
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3255");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-386L));
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.minus(readableDuration3);
        org.joda.time.DateTime dateTime5 = instant1.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant1", (mutableDateTime2.compareTo(instant1) == 0) == mutableDateTime2.equals(instant1));
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3256");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.days();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.clockhourOfDay();
        java.lang.String str10 = gJChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.DurationField durationField12 = gJChronology8.days();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = julianChronology16.seconds();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology26 = gJChronology8.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = julianChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology29.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology29.getZone();
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = gJChronology8.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology37 = gJChronology2.withZone(dateTimeZone32);
        java.lang.String str38 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = gJChronology2.add(readablePeriod40, (-71997484L), 43203104);
        org.joda.time.DurationField durationField44 = gJChronology2.seconds();
        org.joda.time.DurationField durationField45 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField44", (durationField22.compareTo(durationField44) == 0) == durationField22.equals(durationField44));
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.DurationField durationField15 = gJChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField17 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours(9);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = gJChronology2.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField24 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.Instant instant31 = gJChronology27.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime34 = instant31.toMutableDateTime(dateTimeZone33);
        boolean boolean36 = mutableDateTime34.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime34.getZone();
        boolean boolean38 = mutableDateTime34.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long43 = dateTimeZone41.previousTransition(0L);
        long long45 = dateTimeZone41.previousTransition(110L);
        boolean boolean46 = mutableDateTime34.equals((java.lang.Object) dateTimeZone41);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant48.withDurationAdded(readableDuration49, 0);
        boolean boolean53 = instant51.isEqual((long) 1);
        org.joda.time.Instant instant55 = instant51.withMillis(25200L);
        boolean boolean56 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) instant51);
        java.lang.Object obj57 = null;
        boolean boolean58 = mutableDateTime34.equals(obj57);
        boolean boolean59 = gJChronology2.equals((java.lang.Object) boolean58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and mutableDateTime34", (instant31.compareTo(mutableDateTime34) == 0) == instant31.equals(mutableDateTime34));
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3258");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long26 = dateTimeZone17.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean27 = instant6.equals((java.lang.Object) (byte) 10);
        boolean boolean29 = instant6.isAfter((long) 36000000);
        org.joda.time.Instant instant31 = instant6.withMillis((-60514179194392L));
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant33 = instant31.minus(readableDuration32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3259");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant6.isBefore((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTime dateTime42 = instant6.toDateTimeISO();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((java.lang.Object) instant6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime42", (instant6.compareTo(dateTime42) == 0) == instant6.equals(dateTime42));
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3260");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(9);
        org.joda.time.MutableDateTime mutableDateTime33 = instant30.toMutableDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology34 = instant30.getChronology();
        org.joda.time.Instant instant36 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.Chronology chronology40 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.millisOfDay();
        java.lang.String str43 = gJChronology39.toString();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology39.yearOfEra();
        org.joda.time.DurationField durationField45 = gJChronology39.weeks();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology39.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime47 = instant36.toMutableDateTime((org.joda.time.Chronology) gJChronology39);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = gJChronology50.getZone();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology57 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone54, (org.joda.time.ReadableInstant) instant56);
        java.lang.String str58 = instant56.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = instant56.getZone();
        java.lang.String str60 = dateTimeZone59.toString();
        boolean boolean61 = dateTimeZone59.isFixed();
        org.joda.time.DateTime dateTime62 = instant36.toDateTime(dateTimeZone59);
        boolean boolean63 = instant30.isBefore((org.joda.time.ReadableInstant) instant36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime47 and dateTime62", (mutableDateTime47.compareTo(dateTime62) == 0) == mutableDateTime47.equals(dateTime62));
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfYear();
        java.lang.String str12 = gJChronology9.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        org.joda.time.Chronology chronology19 = gJChronology9.withZone(dateTimeZone14);
        org.joda.time.Chronology chronology20 = gJChronology9.withUTC();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        boolean boolean22 = julianChronology3.equals((java.lang.Object) chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField21", Math.signum(durationField4.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField4)));
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3262");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DurationField durationField29 = gJChronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology26.weekyear();
        boolean boolean31 = instant8.equals((java.lang.Object) dateTimeField30);
        long long32 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant8.minus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        org.joda.time.DurationField durationField39 = julianChronology38.centuries();
        org.joda.time.DurationField durationField40 = julianChronology38.weeks();
        org.joda.time.DurationField durationField41 = julianChronology38.days();
        org.joda.time.DurationField durationField42 = julianChronology38.centuries();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology38.hourOfHalfday();
        org.joda.time.Chronology chronology44 = julianChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology38.millisOfDay();
        int int46 = julianChronology38.getMinimumDaysInFirstWeek();
        java.lang.String str47 = julianChronology38.toString();
        org.joda.time.DateTimeField dateTimeField48 = julianChronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.Chronology chronology52 = gJChronology51.withUTC();
        java.lang.String str53 = gJChronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology51.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology51.clockhourOfHalfday();
        boolean boolean59 = julianChronology38.equals((java.lang.Object) dateTimeField58);
        org.joda.time.DateTime dateTime60 = instant34.toDateTime((org.joda.time.Chronology) julianChronology38);
        org.joda.time.DateTimeField dateTimeField61 = julianChronology38.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime60", (instant8.compareTo(dateTime60) == 0) == instant8.equals(dateTime60));
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3263");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Chronology chronology38 = gJChronology33.withZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology33.getZone();
        long long41 = dateTimeZone39.nextTransition((-12219292800000L));
        long long43 = dateTimeZone39.convertUTCToLocal((long) 1);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone39.getName((long) (-1), locale45);
        long long50 = dateTimeZone39.convertLocalToUTC(1L, true, (long) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant52.plus(readableDuration53);
        org.joda.time.Instant instant56 = instant54.withMillis((long) (byte) -1);
        java.util.Date date57 = instant54.toDate();
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant54);
        org.joda.time.DateTime dateTime59 = instant2.toDateTime(dateTimeZone39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = instant2.toString(dateTimeFormatter60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime59", (instant2.compareTo(dateTime59) == 0) == instant2.equals(dateTime59));
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3264");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant25.toString(dateTimeFormatter26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant25.plus(readableDuration28);
        org.joda.time.Instant instant31 = instant25.withMillis(52L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Instant instant34 = instant25.withDurationAdded(readableDuration32, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone36);
        boolean boolean40 = julianChronology38.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology41 = julianChronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology43 = julianChronology38.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField44 = julianChronology38.days();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology38.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        boolean boolean49 = dateTimeZone47.isFixed();
        long long51 = dateTimeZone47.previousTransition(100L);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = julianChronology38.withZone(dateTimeZone53);
        java.util.TimeZone timeZone55 = dateTimeZone53.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = instant25.toDateTime((org.joda.time.Chronology) gJChronology56);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology56.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime57", (instant17.compareTo(dateTime57) == 0) == instant17.equals(dateTime57));
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3265");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.lang.String str7 = gJChronology2.toString();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        boolean boolean11 = dateTime9.isEqual((long) 97);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DurationField durationField16 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        java.lang.String str20 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) (-1));
        long long30 = dateTimeZone24.convertLocalToUTC((long) 4, true, (long) (short) -1);
        boolean boolean31 = gJChronology19.equals((java.lang.Object) dateTimeZone24);
        org.joda.time.Chronology chronology32 = gJChronology14.withZone(dateTimeZone24);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone24.getName((-66950980L), locale34);
        org.joda.time.DateTime dateTime36 = dateTime9.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = dateTime9.isSupported(dateTimeFieldType37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime36", (instant6.compareTo(dateTime36) == 0) == instant6.equals(dateTime36));
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3266");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        boolean boolean11 = instant8.isAfterNow();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = instant8.toString(dateTimeFormatter12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology17.getZone();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant23);
        java.lang.String str25 = instant23.toString();
        int int26 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((java.lang.Object) instant23);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((java.lang.Object) instant27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) instant28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        java.lang.String str34 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.dayOfWeek();
        org.joda.time.Instant instant38 = gJChronology32.getGregorianCutover();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.millisOfSecond();
        org.joda.time.DurationField durationField40 = gJChronology32.halfdays();
        org.joda.time.MutableDateTime mutableDateTime41 = instant29.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime41.getZone();
        org.joda.time.Chronology chronology43 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long48 = dateTimeZone46.previousTransition(0L);
        int int50 = dateTimeZone46.getOffset((long) (short) 100);
        boolean boolean51 = dateTimeZone46.isFixed();
        int int53 = dateTimeZone46.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime54 = mutableDateTime41.toDateTime(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime55 = instant8.toMutableDateTime(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant23", (dateTime10.compareTo(instant23) == 0) == dateTime10.equals(instant23));
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3267");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant39 = instant27.plus((long) 1200);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-223199998L), 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime37", (instant27.compareTo(dateTime37) == 0) == instant27.equals(dateTime37));
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3268");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        boolean boolean32 = instant20.equals((java.lang.Object) gJChronology25);
        boolean boolean33 = instant11.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant35 = instant20.minus((-61543965598418L));
        org.joda.time.DateTimeZone dateTimeZone36 = instant20.getZone();
        org.joda.time.Instant instant37 = instant20.toInstant();
        org.joda.time.Instant instant39 = instant37.minus((-6211224791991830L));
        boolean boolean41 = instant39.isEqual((-6211221875999790L));
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.plus(readableDuration51);
        org.joda.time.MutableDateTime mutableDateTime53 = instant50.toMutableDateTime();
        boolean boolean54 = mutableDateTime53.isEqualNow();
        int int55 = instant39.compareTo((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime53.toMutableDateTime(dateTimeZone56);
        boolean boolean58 = mutableDateTime57.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime53", (instant6.compareTo(mutableDateTime53) == 0) == instant6.equals(mutableDateTime53));
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3269");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.DateTime dateTime5 = instant4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.Instant instant13 = gJChronology9.getGregorianCutover();
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant13.minus(readableDuration15);
        long long17 = instant13.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = instant13.isSupported(dateTimeFieldType18);
        boolean boolean20 = dateTime5.isBefore((org.joda.time.ReadableInstant) instant13);
        org.joda.time.MutableDateTime mutableDateTime21 = instant13.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime5", (instant1.compareTo(dateTime5) == 0) == instant1.equals(dateTime5));
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField12 = julianChronology11.centuries();
        java.lang.String str13 = julianChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.yearOfEra();
        org.joda.time.DurationField durationField15 = julianChronology11.months();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.minuteOfDay();
        boolean boolean20 = julianChronology11.equals((java.lang.Object) dateTimeField19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology11.secondOfMinute();
        int int22 = julianChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        boolean boolean28 = julianChronology26.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField29 = julianChronology26.months();
        boolean boolean30 = julianChronology11.equals((java.lang.Object) julianChronology26);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology11.dayOfYear();
        org.joda.time.DateTime dateTime32 = instant6.toDateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone33 = instant6.getZone();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime32", (instant6.compareTo(dateTime32) == 0) == instant6.equals(dateTime32));
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3271");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DurationField durationField28 = gJChronology26.millis();
        long long32 = gJChronology26.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = gJChronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology26.secondOfDay();
        org.joda.time.DurationField durationField36 = gJChronology26.hours();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology26.dayOfMonth();
        int int38 = instant8.get(dateTimeField37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant41 = instant8.withDurationAdded(readableDuration39, 1969);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.Chronology chronology45 = gJChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology44.clockhourOfDay();
        org.joda.time.Chronology chronology49 = gJChronology44.withUTC();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.joda.time.Chronology chronology53 = gJChronology44.withZone(dateTimeZone52);
        long long56 = dateTimeZone52.adjustOffset(1836000731L, true);
        org.joda.time.MutableDateTime mutableDateTime57 = instant8.toMutableDateTime(dateTimeZone52);
        java.lang.String str59 = dateTimeZone52.getName((-6211220191199799L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime57", (instant8.compareTo(mutableDateTime57) == 0) == instant8.equals(mutableDateTime57));
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3272");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        org.joda.time.Chronology chronology20 = instant6.getChronology();
        org.joda.time.Instant instant22 = instant6.plus(151200000L);
        org.joda.time.Instant instant25 = instant6.withDurationAdded((-12839710584110L), 36000);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant6.plus(readableDuration26);
        org.joda.time.DateTime dateTime28 = instant6.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant6", (mutableDateTime9.compareTo(instant6) == 0) == mutableDateTime9.equals(instant6));
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3273");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long5 = dateTimeZone1.previousTransition(100L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone8.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        long long19 = instant17.getMillis();
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DurationField durationField21 = gJChronology20.years();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        boolean boolean32 = instant31.isAfterNow();
        boolean boolean33 = instant31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone34 = instant31.getZone();
        org.joda.time.Instant instant37 = instant31.withDurationAdded(32409730L, 3600000);
        org.joda.time.MutableDateTime mutableDateTime38 = instant37.toMutableDateTimeISO();
        boolean boolean39 = instant37.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.chrono.JulianChronology julianChronology44 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42);
        java.lang.String str46 = dateTimeZone42.getNameKey(10L);
        long long48 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) (short) 10);
        org.joda.time.chrono.JulianChronology julianChronology49 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42);
        long long53 = dateTimeZone42.convertLocalToUTC((-143999601L), true, (-386L));
        org.joda.time.DateTime dateTime54 = instant37.toDateTime(dateTimeZone42);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and mutableDateTime38", (instant37.compareTo(mutableDateTime38) == 0) == instant37.equals(mutableDateTime38));
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3274");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        boolean boolean36 = instant33.isEqualNow();
        boolean boolean37 = instant8.isEqual((org.joda.time.ReadableInstant) instant33);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        java.lang.String str42 = gJChronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology40.dayOfWeek();
        org.joda.time.Instant instant46 = gJChronology40.getGregorianCutover();
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.Instant instant48 = instant46.toInstant();
        boolean boolean49 = instant8.equals((java.lang.Object) instant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology52.dayOfYear();
        org.joda.time.Instant instant56 = gJChronology52.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant56.minus(readableDuration57);
        java.lang.String str59 = instant56.toString();
        org.joda.time.Instant instant61 = instant56.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone62 = instant56.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = instant56.getZone();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Instant instant66 = instant56.withDurationAdded(readableDuration64, (int) '#');
        boolean boolean67 = instant48.isBefore((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime68 = instant56.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime68.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime68", (instant6.compareTo(mutableDateTime68) == 0) == instant6.equals(mutableDateTime68));
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3275");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.Chronology chronology10 = gJChronology5.withZone(dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.Chronology chronology14 = julianChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology13.dayOfMonth();
        org.joda.time.DurationField durationField16 = julianChronology13.seconds();
        java.lang.String str17 = julianChronology13.toString();
        org.joda.time.DateTime dateTime18 = instant1.toDateTime((org.joda.time.Chronology) julianChronology13);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3276");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        org.joda.time.Instant instant7 = instant1.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = instant7.isSupported(dateTimeFieldType8);
        org.joda.time.Instant instant11 = instant7.withMillis((-60514215257464L));
        boolean boolean13 = instant7.isAfter((-179999601L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = instant24.getZone();
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = julianChronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology27.centuries();
        org.joda.time.DateTime dateTime30 = instant7.toDateTime((org.joda.time.Chronology) julianChronology27);
        org.joda.time.Instant instant32 = instant7.withMillis(5920653705634798408L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime30", (instant7.compareTo(dateTime30) == 0) == instant7.equals(dateTime30));
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3277");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        org.joda.time.DurationField durationField21 = gJChronology13.eras();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology13.dayOfMonth();
        org.joda.time.DurationField durationField24 = gJChronology13.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField24, and durationField21", !(durationField21.compareTo(durationField24) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField24.compareTo(durationField21))));
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3278");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology17.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.Instant instant27 = gJChronology23.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long29 = instant27.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant27.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.secondOfMinute();
        int int35 = instant27.get(dateTimeField34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.Chronology chronology41 = gJChronology38.withUTC();
        org.joda.time.DurationField durationField42 = gJChronology38.halfdays();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology38.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.dayOfWeek();
        org.joda.time.Chronology chronology49 = gJChronology46.withUTC();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology52 = chronology49.withZone(dateTimeZone51);
        java.lang.String str53 = dateTimeZone51.getID();
        org.joda.time.Chronology chronology54 = gJChronology38.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField55 = gJChronology38.years();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology38.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = instant27.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        long long58 = instant27.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime57", (instant27.compareTo(mutableDateTime57) == 0) == instant27.equals(mutableDateTime57));
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3279");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant6.withDurationAdded(readableDuration14, (int) '#');
        java.util.Date date17 = instant6.toDate();
        org.joda.time.Instant instant20 = instant6.withDurationAdded((-110L), (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology23.getZone();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, (org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTime dateTime31 = instant29.toDateTime();
        long long32 = dateTime31.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.plus(readableDuration35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(1L);
        boolean boolean39 = instant34.isEqual((org.joda.time.ReadableInstant) instant38);
        boolean boolean40 = dateTime31.isBefore((org.joda.time.ReadableInstant) instant38);
        boolean boolean41 = instant6.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        boolean boolean47 = julianChronology45.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology48 = julianChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = julianChronology45.era();
        org.joda.time.DateTimeField dateTimeField50 = julianChronology45.minuteOfHour();
        org.joda.time.DurationField durationField51 = julianChronology45.weeks();
        org.joda.time.DurationField durationField52 = julianChronology45.days();
        org.joda.time.DateTimeField dateTimeField53 = julianChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = julianChronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology45.minuteOfHour();
        org.joda.time.DurationField durationField56 = julianChronology45.months();
        org.joda.time.DateTimeField dateTimeField57 = julianChronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = julianChronology45.clockhourOfHalfday();
        org.joda.time.DurationField durationField59 = julianChronology45.years();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = gJChronology62.getZone();
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, (org.joda.time.ReadableInstant) instant68);
        java.lang.String str70 = instant68.toString();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.chrono.GJChronology gJChronology73 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone71, readableInstant72);
        org.joda.time.DateTimeZone dateTimeZone74 = gJChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology73.dayOfYear();
        org.joda.time.Instant instant77 = gJChronology73.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Instant instant79 = instant77.minus(readableDuration78);
        org.joda.time.Instant instant82 = instant79.withDurationAdded((-12219292800000L), 0);
        int int83 = instant68.compareTo((org.joda.time.ReadableInstant) instant79);
        long long84 = instant68.getMillis();
        org.joda.time.Instant instant85 = instant68.toInstant();
        org.joda.time.DateTimeZone dateTimeZone86 = instant68.getZone();
        long long88 = dateTimeZone86.previousTransition((long) (short) 100);
        long long91 = dateTimeZone86.convertLocalToUTC((long) (-1), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        int int94 = dateTimeZone86.getOffset(0L);
        org.joda.time.Chronology chronology95 = julianChronology45.withZone(dateTimeZone86);
        org.joda.time.Chronology chronology96 = julianChronology45.withUTC();
        boolean boolean97 = instant6.equals((java.lang.Object) chronology96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and dateTime31", (instant29.compareTo(dateTime31) == 0) == instant29.equals(dateTime31));
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3280");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology22 = gJChronology14.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology14.minutes();
        org.joda.time.DurationField durationField24 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField25 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField26 = gJChronology14.weeks();
        boolean boolean27 = instant8.equals((java.lang.Object) gJChronology14);
        org.joda.time.Instant instant29 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.plus(readableDuration30);
        org.joda.time.Instant instant33 = instant31.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime34 = instant33.toDateTimeISO();
        boolean boolean35 = dateTime34.isEqualNow();
        boolean boolean36 = instant8.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = instant8.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and dateTime34", (instant33.compareTo(dateTime34) == 0) == instant33.equals(dateTime34));
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3281");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getName(0L, locale31);
        java.lang.String str34 = dateTimeZone29.getName((-71999990L));
        org.joda.time.DateTime dateTime35 = instant27.toDateTime(dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant27.minus(readableDuration36);
        org.joda.time.Instant instant39 = instant37.withMillis((long) 12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant37 and dateTime35", (instant37.compareTo(dateTime35) == 0) == instant37.equals(dateTime35));
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3282");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = gJChronology2.add(readablePeriod6, (-11L), (int) (short) 0);
        org.joda.time.DurationField durationField10 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.weekyear();
        java.lang.String str13 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField15 = gJChronology2.centuries();
        org.joda.time.DurationField durationField16 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField16, durationField10, and durationField15", !(durationField16.compareTo(durationField10) == 0) || (Math.signum(durationField16.compareTo(durationField15)) == Math.signum(durationField10.compareTo(durationField15))));
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3283");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.era();
        org.joda.time.DurationField durationField9 = gJChronology2.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField9, and durationField5", !(durationField5.compareTo(durationField9) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField9.compareTo(durationField5))));
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3284");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        boolean boolean15 = instant9.isAfter((-107999990L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        long long22 = dateTimeZone17.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17);
        boolean boolean24 = instant9.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.dayOfYear();
        org.joda.time.Instant instant42 = gJChronology38.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.Instant instant47 = instant44.withDurationAdded((-12219292800000L), 0);
        int int48 = instant33.compareTo((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant50 = instant44.withMillis((-12219292800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = instant50.toString(dateTimeFormatter51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant54 = instant50.plus(readableDuration53);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) dateTime55);
        long long58 = dateTimeZone17.nextTransition((-35994809L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime55", (instant42.compareTo(dateTime55) == 0) == instant42.equals(dateTime55));
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3285");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        java.util.Date date23 = instant22.toDate();
        org.joda.time.Instant instant25 = instant22.plus(35L);
        int int26 = instant5.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.MutableDateTime mutableDateTime27 = instant5.toMutableDateTime();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = instant5.toMutableDateTime(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = mutableDateTime29.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3286");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.monthOfYear();
        org.joda.time.DurationField durationField12 = julianChronology3.centuries();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.adjustOffset((long) (short) 0, false);
        long long27 = dateTimeZone20.adjustOffset((-71999990L), false);
        org.joda.time.Chronology chronology28 = julianChronology3.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField29 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField10, and durationField12", !(durationField29.compareTo(durationField10) == 0) || (Math.signum(durationField29.compareTo(durationField12)) == Math.signum(durationField10.compareTo(durationField12))));
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3287");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.Chronology chronology6 = gJChronology5.withUTC();
        org.joda.time.DurationField durationField7 = gJChronology5.millis();
        long long11 = gJChronology5.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField12 = gJChronology5.millis();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology5.clockhourOfHalfday();
        org.joda.time.Instant instant15 = gJChronology5.getGregorianCutover();
        boolean boolean16 = instant1.isAfter((org.joda.time.ReadableInstant) instant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone18.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTime dateTime21 = instant15.toDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(1970);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime(dateTimeZone23);
        boolean boolean25 = dateTime24.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime21", (instant15.compareTo(dateTime21) == 0) == instant15.equals(dateTime21));
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3288");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone40 = instant35.getZone();
        boolean boolean41 = instant35.isBeforeNow();
        java.util.Date date42 = instant35.toDate();
        org.joda.time.DateTime dateTime43 = instant35.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        boolean boolean47 = dateTime43.isAfter((long) 1200);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours(20);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime43.toMutableDateTime(dateTimeZone49);
        java.lang.String str53 = mutableDateTime52.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime43", (instant17.compareTo(dateTime43) == 0) == instant17.equals(dateTime43));
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3289");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.plus(readableDuration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean40 = instant35.isEqual(35L);
        boolean boolean41 = instant21.isAfter((org.joda.time.ReadableInstant) instant35);
        boolean boolean42 = instant9.isAfter((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Instant instant43 = instant9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime44 = instant9.toMutableDateTime();
        boolean boolean45 = instant9.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime44", (instant9.compareTo(mutableDateTime44) == 0) == instant9.equals(mutableDateTime44));
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3290");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology13.dayOfYear();
        boolean boolean20 = instant8.equals((java.lang.Object) dateTimeField19);
        org.joda.time.Chronology chronology21 = instant8.getChronology();
        java.util.Date date22 = instant8.toDate();
        org.joda.time.Instant instant24 = instant8.withMillis(7200000020L);
        boolean boolean26 = instant24.isAfter((-60514214982794L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3291");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeField dateTimeField18 = gJChronology17.millisOfSecond();
        org.joda.time.DurationField durationField19 = gJChronology17.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology17.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology23.getZone();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology23.dayOfYear();
        org.joda.time.Instant instant27 = gJChronology23.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long29 = instant27.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = instant27.isSupported(dateTimeFieldType30);
        int int32 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology33.secondOfMinute();
        int int35 = instant27.get(dateTimeField34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.Chronology chronology41 = gJChronology38.withUTC();
        org.joda.time.DurationField durationField42 = gJChronology38.halfdays();
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology38.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.Chronology chronology47 = gJChronology46.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.dayOfWeek();
        org.joda.time.Chronology chronology49 = gJChronology46.withUTC();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology52 = chronology49.withZone(dateTimeZone51);
        java.lang.String str53 = dateTimeZone51.getID();
        org.joda.time.Chronology chronology54 = gJChronology38.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField55 = gJChronology38.years();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology38.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = instant27.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeField dateTimeField58 = gJChronology38.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime57", (instant9.compareTo(mutableDateTime57) == 0) == instant9.equals(mutableDateTime57));
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3292");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.dayOfMonth();
        org.joda.time.DurationField durationField16 = julianChronology3.millis();
        org.joda.time.DurationField durationField17 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField9, and durationField10", !(durationField17.compareTo(durationField9) == 0) || (Math.signum(durationField17.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3293");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(10);
        long long12 = dateTimeZone10.convertUTCToLocal(288097310L);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = instant5.toDateTime(dateTimeZone10);
        boolean boolean15 = dateTimeZone10.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3294");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = gJChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology34.getZone();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology34.getZone();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, (org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTimeField dateTimeField42 = gJChronology41.clockhourOfHalfday();
        org.joda.time.Chronology chronology43 = gJChronology41.withUTC();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.Chronology chronology51 = gJChronology46.withZone(dateTimeZone49);
        java.lang.String str53 = dateTimeZone49.getName((long) (byte) 10);
        long long56 = dateTimeZone49.convertLocalToUTC((-35999900L), false);
        long long59 = dateTimeZone49.adjustOffset((long) '#', false);
        int int61 = dateTimeZone49.getOffset((long) (byte) 10);
        org.joda.time.Chronology chronology62 = chronology43.withZone(dateTimeZone49);
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone49.getShortName((long) '4', locale64);
        org.joda.time.Chronology chronology66 = gJChronology25.withZone(dateTimeZone49);
        java.lang.String str67 = dateTimeZone49.toString();
        org.joda.time.Chronology chronology68 = gJChronology15.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology69 = julianChronology3.withZone(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField8 and durationField19", (durationField8.compareTo(durationField19) == 0) == durationField8.equals(durationField19));
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3295");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant8.withDurationAdded(readableDuration27, 1);
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DurationField durationField38 = gJChronology36.millis();
        long long42 = gJChronology36.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField43 = gJChronology36.millis();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology36.hourOfHalfday();
        org.joda.time.DurationField durationField45 = gJChronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology36.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = instant33.toMutableDateTime((org.joda.time.Chronology) gJChronology36);
        java.util.Date date48 = instant33.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and mutableDateTime47", (instant33.compareTo(mutableDateTime47) == 0) == instant33.equals(mutableDateTime47));
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3296");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField8 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        long long16 = gJChronology2.add((-21361518000971028L), (long) 36000001, 115440000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField12", Math.signum(durationField6.compareTo(durationField12)) == -Math.signum(durationField12.compareTo(durationField6)));
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3297");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField11 = julianChronology3.centuries();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField13 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField9, and durationField11", !(durationField13.compareTo(durationField9) == 0) || (Math.signum(durationField13.compareTo(durationField11)) == Math.signum(durationField9.compareTo(durationField11))));
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3298");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.era();
        org.joda.time.DateTimeZone dateTimeZone12 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, 36000001L, 1);
        org.joda.time.DateTimeField dateTimeField16 = gJChronology15.millisOfSecond();
        org.joda.time.Chronology chronology17 = gJChronology15.withUTC();
        org.joda.time.DurationField durationField18 = chronology17.weeks();
        java.lang.String str19 = chronology17.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField18", (durationField5.compareTo(durationField18) == 0) == durationField5.equals(durationField18));
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3299");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.Instant instant11 = instant8.minus((-35999900L));
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = instant11.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone16.getName((-1L), locale19);
        long long22 = dateTimeZone16.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField27 = julianChronology26.weeks();
        org.joda.time.DurationField durationField28 = julianChronology26.millis();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology26.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = julianChronology26.add(readablePeriod30, (long) 36000000, 4);
        boolean boolean34 = dateTimeZone16.equals((java.lang.Object) 36000000);
        java.lang.String str35 = dateTimeZone16.toString();
        java.lang.String str37 = dateTimeZone16.getShortName((-71999900L));
        long long40 = dateTimeZone16.adjustOffset((-35999990L), true);
        int int42 = dateTimeZone16.getStandardOffset((-59082429599991L));
        java.lang.String str43 = dateTimeZone16.getID();
        int int45 = dateTimeZone16.getOffset((-35996080L));
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime14.toMutableDateTime(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime12", (instant11.compareTo(mutableDateTime12) == 0) == instant11.equals(mutableDateTime12));
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3300");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        int int15 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) instant12);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((java.lang.Object) instant16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) instant17);
        org.joda.time.Instant instant20 = instant17.minus((long) ' ');
        boolean boolean21 = instant0.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = instant0.isSupported(dateTimeFieldType22);
        org.joda.time.Instant instant24 = instant0.toInstant();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((java.lang.Object) instant0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        boolean boolean39 = julianChronology37.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology40 = julianChronology37.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology42 = julianChronology37.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField43 = julianChronology37.days();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology37.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str47 = dateTimeZone46.getID();
        boolean boolean48 = dateTimeZone46.isFixed();
        long long50 = dateTimeZone46.previousTransition(100L);
        java.util.TimeZone timeZone51 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Chronology chronology53 = julianChronology37.withZone(dateTimeZone52);
        java.util.TimeZone timeZone54 = dateTimeZone52.toTimeZone();
        boolean boolean55 = instant32.equals((java.lang.Object) dateTimeZone52);
        boolean boolean56 = instant32.isEqualNow();
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = instant32.isEqual(readableInstant57);
        org.joda.time.DateTime dateTime59 = instant32.toDateTimeISO();
        org.joda.time.DateTime dateTime60 = instant32.toDateTimeISO();
        int int61 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and dateTime59", (instant32.compareTo(dateTime59) == 0) == instant32.equals(dateTime59));
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3301");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.Instant instant10 = instant7.plus(1338L);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = instant10.isSupported(dateTimeFieldType11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3302");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone18.toTimeZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        long long34 = dateTimeZone29.nextTransition((long) 0);
        long long36 = dateTimeZone22.getMillisKeepLocal(dateTimeZone29, (long) (byte) 100);
        java.lang.String str38 = dateTimeZone29.getNameKey((-60514215282090L));
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        boolean boolean40 = instant39.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime41 = instant39.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime41.getZone();
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) mutableDateTime41);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone29.getShortName((-59011667999903L), locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime41", (instant39.compareTo(mutableDateTime41) == 0) == instant39.equals(mutableDateTime41));
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.Chronology chronology12 = gJChronology11.withUTC();
        java.lang.String str13 = gJChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.weekyearOfCentury();
        long long19 = gJChronology11.getDateTimeMillis(1582, (int) (short) 1, 10, (int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.millisOfSecond();
        boolean boolean21 = gJChronology2.equals((java.lang.Object) gJChronology11);
        org.joda.time.DurationField durationField22 = gJChronology11.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField22, and durationField5", !(durationField5.compareTo(durationField22) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField22.compareTo(durationField5))));
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3304");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Instant instant10 = instant8.toInstant();
        org.joda.time.Instant instant11 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        long long24 = dateTimeZone17.convertLocalToUTC((-35999900L), false);
        int int26 = dateTimeZone17.getOffsetFromLocal((long) 278);
        boolean boolean28 = dateTimeZone17.isStandardOffset((long) 1582);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology31.dayOfYear();
        org.joda.time.Instant instant35 = gJChronology31.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant35.minus(readableDuration36);
        org.joda.time.Instant instant40 = instant37.withDurationAdded((-12219292800000L), 0);
        boolean boolean42 = instant37.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology45.monthOfYear();
        boolean boolean53 = instant37.equals((java.lang.Object) dateTimeField52);
        org.joda.time.Instant instant55 = instant37.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant55.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = instant55.isSupported(dateTimeFieldType58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = instant55.toString(dateTimeFormatter60);
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        long long67 = gJChronology62.add((long) (short) 10, (long) 1, 20);
        org.joda.time.DurationField durationField68 = gJChronology62.eras();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        boolean boolean72 = dateTimeZone70.isFixed();
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeZone70.getShortName((long) ' ', locale74);
        org.joda.time.Chronology chronology76 = gJChronology62.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime77 = instant11.toDateTime(dateTimeZone70);
        long long79 = dateTimeZone70.previousTransition(41529110L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime77", (instant8.compareTo(dateTime77) == 0) == instant8.equals(dateTime77));
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3305");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        java.util.Date date8 = instant6.toDate();
        org.joda.time.Instant instant9 = instant6.toInstant();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant6.minus(readableDuration10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant11", (dateTime7.compareTo(instant11) == 0) == dateTime7.equals(instant11));
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3306");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField12 = gJChronology11.weekyears();
        org.joda.time.DurationField durationField13 = gJChronology11.years();
        org.joda.time.DurationField durationField14 = gJChronology11.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField12 and durationField13", (durationField12.compareTo(durationField13) == 0) == durationField12.equals(durationField13));
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3307");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        boolean boolean19 = instant13.isEqual((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime mutableDateTime20 = instant13.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime18", (instant15.compareTo(mutableDateTime18) == 0) == instant15.equals(mutableDateTime18));
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3308");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology3.centuryOfEra();
        org.joda.time.DurationField durationField10 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.monthOfYear();
        org.joda.time.DurationField durationField12 = julianChronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone14.getName((-1L), locale17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone14.isLocalDateTimeGap(localDateTime19);
        long long23 = dateTimeZone14.adjustOffset((long) (byte) -1, true);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, 36000001L, 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14, (int) (short) 1);
        org.joda.time.Chronology chronology29 = julianChronology3.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        java.lang.String str39 = instant36.toString();
        org.joda.time.Instant instant41 = instant36.minus((long) 36000000);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        boolean boolean44 = instant41.isBefore(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = instant41.isSupported(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = instant41.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant41.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = instant41.toDateTime(dateTimeZone50);
        int int52 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) instant41);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.dayOfYear();
        org.joda.time.Instant instant59 = gJChronology55.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Instant instant61 = instant59.minus(readableDuration60);
        java.lang.String str62 = instant59.toString();
        org.joda.time.Instant instant64 = instant59.minus((long) 36000000);
        boolean boolean66 = instant64.isEqual((-119274517260204080L));
        boolean boolean67 = instant41.isEqual((org.joda.time.ReadableInstant) instant64);
        long long68 = instant64.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant41 and dateTime47", (instant41.compareTo(dateTime47) == 0) == instant41.equals(dateTime47));
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3309");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology14.secondOfDay();
        org.joda.time.DurationField durationField22 = julianChronology14.eras();
        org.joda.time.MutableDateTime mutableDateTime23 = instant9.toMutableDateTime((org.joda.time.Chronology) julianChronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = instant9.toString(dateTimeFormatter24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime23", (instant9.compareTo(mutableDateTime23) == 0) == instant9.equals(mutableDateTime23));
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3310");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.era();
        org.joda.time.DurationField durationField12 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.secondOfDay();
        org.joda.time.DurationField durationField14 = gJChronology2.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField14, and durationField12", !(durationField12.compareTo(durationField14) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField14.compareTo(durationField12))));
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3311");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((-1L), locale4);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(36000000L);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField12 = gJChronology11.months();
        org.joda.time.DurationField durationField13 = gJChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.secondOfDay();
        org.joda.time.DurationField durationField15 = gJChronology11.days();
        long long19 = gJChronology11.add(0L, (long) (short) 1, (int) '#');
        org.joda.time.DateTimeField dateTimeField20 = gJChronology11.weekyear();
        org.joda.time.Chronology chronology21 = gJChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField26 = julianChronology25.centuries();
        org.joda.time.DurationField durationField27 = julianChronology25.weeks();
        org.joda.time.DurationField durationField28 = julianChronology25.minutes();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology25.dayOfYear();
        org.joda.time.DurationField durationField30 = julianChronology25.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology25.getZone();
        org.joda.time.Chronology chronology32 = gJChronology11.withZone(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField13 and durationField27", (durationField13.compareTo(durationField27) == 0) == durationField13.equals(durationField27));
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3312");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField17 = julianChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField20 = julianChronology3.years();
        java.lang.String str21 = julianChronology3.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField20", (durationField14.compareTo(durationField20) == 0) == durationField14.equals(durationField20));
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3313");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant18.minus(readableDuration19);
        boolean boolean21 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) instant18);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime9.getZone();
        long long24 = dateTimeZone22.nextTransition((-39600000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3314");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.dayOfYear();
        org.joda.time.DurationField durationField7 = gJChronology2.months();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField9", Math.signum(durationField7.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField7)));
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3315");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Chronology chronology14 = gJChronology9.withZone(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean20 = dateTimeZone19.isFixed();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-71999990L), locale22);
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DurationField durationField26 = gJChronology25.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField26, and durationField6", !(durationField6.compareTo(durationField26) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField26.compareTo(durationField6))));
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3316");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) ' ');
        long long8 = dateTimeZone3.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = instant17.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField26 = julianChronology25.centuries();
        java.lang.String str27 = julianChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology25.months();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.minuteOfDay();
        boolean boolean34 = julianChronology25.equals((java.lang.Object) dateTimeField33);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology25.secondOfDay();
        org.joda.time.DurationField durationField38 = julianChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology25.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime40 = instant17.toMutableDateTime((org.joda.time.Chronology) julianChronology25);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant17.minus(readableDuration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant44 and mutableDateTime40", (instant44.compareTo(mutableDateTime40) == 0) == instant44.equals(mutableDateTime40));
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3317");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        boolean boolean3 = instant0.isBeforeNow();
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        java.util.Date date9 = instant5.toDate();
        long long10 = instant5.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology13.getZone();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        int int34 = instant19.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.dayOfWeek();
        org.joda.time.DurationField durationField40 = gJChronology37.years();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology37.weekyear();
        boolean boolean42 = instant19.equals((java.lang.Object) dateTimeField41);
        org.joda.time.Instant instant44 = instant19.withMillis(32L);
        boolean boolean45 = instant5.isEqual((org.joda.time.ReadableInstant) instant44);
        boolean boolean46 = instant0.equals((java.lang.Object) instant5);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Instant instant48 = instant5.minus(readableDuration47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = instant50.isSupported(dateTimeFieldType52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and dateTime51", (instant50.compareTo(dateTime51) == 0) == instant50.equals(dateTime51));
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3318");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        boolean boolean14 = dateTimeZone12.isFixed();
        long long16 = dateTimeZone12.previousTransition(100L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology19 = julianChronology3.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField22 = julianChronology3.seconds();
        org.joda.time.DurationField durationField23 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField9, and durationField22", !(durationField23.compareTo(durationField9) == 0) || (Math.signum(durationField23.compareTo(durationField22)) == Math.signum(durationField9.compareTo(durationField22))));
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3319");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        java.util.Date date5 = instant1.toDate();
        long long6 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DurationField durationField36 = gJChronology33.years();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.weekyear();
        boolean boolean38 = instant15.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Instant instant40 = instant15.withMillis(32L);
        boolean boolean41 = instant1.isEqual((org.joda.time.ReadableInstant) instant40);
        boolean boolean43 = instant40.isEqual((long) 0);
        long long44 = instant40.getMillis();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant40.minus(readableDuration45);
        org.joda.time.DateTime dateTime47 = instant40.toDateTime();
        org.joda.time.Instant instant49 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant49.plus(readableDuration50);
        org.joda.time.Instant instant53 = instant49.minus((long) 10);
        java.util.Date date54 = instant53.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = instant53.isSupported(dateTimeFieldType55);
        long long57 = instant53.getMillis();
        boolean boolean58 = instant40.equals((java.lang.Object) long57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant40 and dateTime47", (instant40.compareTo(dateTime47) == 0) == instant40.equals(dateTime47));
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3320");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = julianChronology5.centuries();
        org.joda.time.Chronology chronology7 = julianChronology5.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3321");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = instant1.toString(dateTimeFormatter2);
        java.lang.String str4 = instant1.toString();
        org.joda.time.Instant instant6 = instant1.plus((-386L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Chronology chronology14 = gJChronology9.withZone(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        org.joda.time.Instant instant26 = instant24.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = instant26.isSupported(dateTimeFieldType28);
        int int30 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) instant26);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = instant26.isBefore(readableInstant31);
        boolean boolean33 = instant6.isAfter(readableInstant31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime27", (instant26.compareTo(dateTime27) == 0) == instant26.equals(dateTime27));
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3322");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(0L);
        long long9 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.minus(readableDuration10);
        boolean boolean12 = instant1.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime14 = instant1.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3323");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology12.getZone();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, (org.joda.time.ReadableInstant) instant18);
        java.lang.String str20 = instant18.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = instant18.getZone();
        boolean boolean23 = instant18.isBefore((-36000000L));
        boolean boolean25 = instant18.isBefore(0L);
        org.joda.time.Instant instant28 = instant18.withDurationAdded((-60514215177256L), 895);
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        java.lang.String str34 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.dayOfWeek();
        org.joda.time.Instant instant38 = gJChronology32.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = instant38.toMutableDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.Chronology chronology45 = gJChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.millisOfDay();
        org.joda.time.DurationField durationField48 = gJChronology44.halfdays();
        org.joda.time.DurationField durationField49 = gJChronology44.millis();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology52 = gJChronology44.withZone(dateTimeZone51);
        org.joda.time.DurationField durationField53 = gJChronology44.minutes();
        org.joda.time.DurationField durationField54 = gJChronology44.weekyears();
        org.joda.time.DurationField durationField55 = gJChronology44.weekyears();
        org.joda.time.DurationField durationField56 = gJChronology44.weeks();
        boolean boolean57 = instant38.equals((java.lang.Object) gJChronology44);
        boolean boolean59 = instant38.isAfter((long) 19);
        long long60 = instant38.getMillis();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.Chronology chronology64 = gJChronology63.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology63.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology63.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology63.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone69, readableInstant70);
        org.joda.time.DateTimeZone dateTimeZone72 = gJChronology71.getZone();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str75 = dateTimeZone74.getID();
        org.joda.time.Chronology chronology76 = gJChronology71.withZone(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = gJChronology71.getZone();
        long long79 = dateTimeZone77.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology80 = gJChronology63.withZone(dateTimeZone77);
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeZone77.getShortName(31799999L, locale82);
        java.util.TimeZone timeZone84 = dateTimeZone77.toTimeZone();
        java.lang.String str85 = dateTimeZone77.toString();
        org.joda.time.MutableDateTime mutableDateTime86 = instant38.toMutableDateTime(dateTimeZone77);
        long long88 = dateTimeZone8.getMillisKeepLocal(dateTimeZone77, (-61513203000000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant38 and mutableDateTime41", (instant38.compareTo(mutableDateTime41) == 0) == instant38.equals(mutableDateTime41));
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3324");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        long long14 = gJChronology9.add((long) (short) -1, (long) 10, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology9.getZone();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.DurationField durationField18 = gJChronology17.hours();
        java.lang.String str19 = gJChronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology17.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant32.plus(readableDuration36);
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, (org.joda.time.ReadableInstant) instant37);
        org.joda.time.DurationField durationField39 = gJChronology38.seconds();
        org.joda.time.Instant instant40 = gJChronology38.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str43 = dateTimeZone42.getID();
        boolean boolean44 = dateTimeZone42.isFixed();
        long long46 = dateTimeZone42.previousTransition(100L);
        java.util.TimeZone timeZone47 = dateTimeZone42.toTimeZone();
        long long49 = dateTimeZone42.previousTransition(5201L);
        org.joda.time.DateTime dateTime50 = instant40.toDateTime(dateTimeZone42);
        boolean boolean51 = gJChronology17.equals((java.lang.Object) dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime50", (instant30.compareTo(dateTime50) == 0) == instant30.equals(dateTime50));
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3325");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology2.minutes();
        int int7 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField8", Math.signum(durationField6.compareTo(durationField8)) == -Math.signum(durationField8.compareTo(durationField6)));
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3326");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, (int) ' ');
        java.util.Date date16 = instant12.toDate();
        boolean boolean17 = instant12.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime18 = instant12.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        boolean boolean24 = julianChronology22.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology22.millisOfDay();
        org.joda.time.DurationField durationField26 = julianChronology22.days();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology22.secondOfMinute();
        org.joda.time.Chronology chronology29 = julianChronology22.withUTC();
        org.joda.time.MutableDateTime mutableDateTime30 = instant12.toMutableDateTime(chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime18", (instant12.compareTo(mutableDateTime18) == 0) == instant12.equals(mutableDateTime18));
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3327");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.Chronology chronology10 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.hours();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = julianChronology3.add(readablePeriod14, (-68399903L), (int) '#');
        org.joda.time.DurationField durationField18 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField9, and durationField13", !(durationField18.compareTo(durationField9) == 0) || (Math.signum(durationField18.compareTo(durationField13)) == Math.signum(durationField9.compareTo(durationField13))));
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3328");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        int int8 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField10, and durationField5", !(durationField5.compareTo(durationField10) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField10.compareTo(durationField5))));
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3329");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        long long8 = instant6.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = instant6.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = julianChronology13.minuteOfDay();
        org.joda.time.DurationField durationField15 = julianChronology13.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long21 = dateTimeZone17.previousTransition(100L);
        java.util.TimeZone timeZone22 = dateTimeZone17.toTimeZone();
        long long24 = dateTimeZone17.previousTransition(5201L);
        org.joda.time.Chronology chronology25 = julianChronology13.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology13.year();
        int int27 = instant6.get(dateTimeField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant6.minus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.Chronology chronology37 = gJChronology32.withZone(dateTimeZone35);
        java.lang.String str39 = dateTimeZone35.getName((long) (byte) 10);
        java.util.TimeZone timeZone40 = dateTimeZone35.toTimeZone();
        long long44 = dateTimeZone35.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime45 = instant29.toMutableDateTime(dateTimeZone35);
        long long48 = dateTimeZone35.adjustOffset(3322993804935838L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime45", (instant6.compareTo(mutableDateTime45) == 0) == instant6.equals(mutableDateTime45));
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3330");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant3 = instant1.plus(110L);
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfWeek();
        org.joda.time.Chronology chronology10 = gJChronology7.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology7.halfdays();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = gJChronology7.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField23 = gJChronology7.clockhourOfDay();
        java.lang.String str24 = gJChronology7.toString();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology7.era();
        int int26 = instant3.get(dateTimeField25);
        org.joda.time.Chronology chronology27 = instant3.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3331");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.Chronology chronology11 = gJChronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.dayOfWeek();
        org.joda.time.Chronology chronology13 = gJChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology16 = chronology13.withZone(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.getID();
        org.joda.time.Chronology chronology18 = gJChronology2.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField19 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology2.getZone();
        org.joda.time.Instant instant22 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology25.getZone();
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, (org.joda.time.ReadableInstant) instant31);
        java.lang.String str33 = instant31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.Instant instant40 = gJChronology36.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant40.minus(readableDuration41);
        org.joda.time.Instant instant45 = instant42.withDurationAdded((-12219292800000L), 0);
        int int46 = instant31.compareTo((org.joda.time.ReadableInstant) instant42);
        long long47 = instant31.getMillis();
        long long48 = instant31.getMillis();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant51 = instant31.withDurationAdded(readableDuration49, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant31.plus(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant31.isSupported(dateTimeFieldType54);
        org.joda.time.Instant instant57 = instant31.minus((long) 4200000);
        org.joda.time.Instant instant59 = instant57.withMillis((-71999989L));
        java.lang.String str60 = instant59.toString();
        int int61 = instant22.compareTo((org.joda.time.ReadableInstant) instant59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.chrono.GJChronology gJChronology64 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, readableInstant63);
        org.joda.time.DateTimeZone dateTimeZone65 = gJChronology64.getZone();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology64.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology64.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = gJChronology64.getZone();
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone68, (org.joda.time.ReadableInstant) instant70);
        org.joda.time.DateTime dateTime72 = instant70.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.chrono.GJChronology gJChronology75 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone73, readableInstant74);
        org.joda.time.Chronology chronology76 = gJChronology75.withUTC();
        java.lang.String str77 = gJChronology75.toString();
        org.joda.time.DurationField durationField78 = gJChronology75.eras();
        org.joda.time.DateTimeField dateTimeField79 = gJChronology75.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField80 = gJChronology75.clockhourOfHalfday();
        int int81 = instant70.get(dateTimeField80);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Instant instant83 = instant70.minus(readableDuration82);
        boolean boolean84 = instant59.isEqual((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField78", Math.signum(durationField6.compareTo(durationField78)) == -Math.signum(durationField78.compareTo(durationField6)));
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3332");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeField dateTimeField5 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField7 = julianChronology3.seconds();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.year();
        org.joda.time.DurationField durationField9 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField4, and durationField7", !(durationField9.compareTo(durationField4) == 0) || (Math.signum(durationField9.compareTo(durationField7)) == Math.signum(durationField4.compareTo(durationField7))));
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3333");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.Chronology chronology9 = gJChronology4.withZone(dateTimeZone7);
        java.lang.String str11 = dateTimeZone7.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime13 = instant1.toMutableDateTime(dateTimeZone7);
        long long15 = dateTimeZone7.previousTransition(539257666922051391L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime13", (instant1.compareTo(mutableDateTime13) == 0) == instant1.equals(mutableDateTime13));
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3334");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        java.lang.String str11 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        java.lang.String str18 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.yearOfEra();
        org.joda.time.DurationField durationField22 = gJChronology16.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology16.getZone();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        java.lang.String str26 = dateTimeZone23.toString();
        java.lang.String str27 = dateTimeZone23.toString();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant32 = instant29.withDurationAdded(readableDuration30, 0);
        org.joda.time.Instant instant34 = instant32.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime35.getZone();
        boolean boolean38 = dateTimeZone23.equals((java.lang.Object) mutableDateTime35);
        org.joda.time.Chronology chronology39 = julianChronology3.withZone(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and mutableDateTime35", (instant34.compareTo(mutableDateTime35) == 0) == instant34.equals(mutableDateTime35));
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3335");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.MutableDateTime mutableDateTime12 = instant6.toMutableDateTime();
        java.lang.String str13 = instant6.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime12", (instant6.compareTo(mutableDateTime12) == 0) == instant6.equals(mutableDateTime12));
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3336");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = julianChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology2.getZone();
        org.joda.time.chrono.JulianChronology julianChronology6 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((-59011667999903L));
        org.joda.time.Instant instant10 = new org.joda.time.Instant(0L);
        long long11 = instant10.getMillis();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.minus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime16 = instant10.toMutableDateTime(dateTimeZone15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, (org.joda.time.ReadableInstant) mutableDateTime16);
        java.lang.String str18 = gJChronology17.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime16", (instant10.compareTo(mutableDateTime16) == 0) == instant10.equals(mutableDateTime16));
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3337");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.Chronology chronology41 = gJChronology40.withUTC();
        org.joda.time.DurationField durationField42 = gJChronology40.millis();
        org.joda.time.DurationField durationField43 = gJChronology40.months();
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology40.getZone();
        int int46 = dateTimeZone44.getStandardOffset((-3743994852L));
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime37.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = dateTime37.isAfter((long) 353);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime47", (instant27.compareTo(mutableDateTime47) == 0) == instant27.equals(mutableDateTime47));
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3338");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        boolean boolean28 = instant8.isBefore((-62112218399999L));
        org.joda.time.Instant instant31 = instant8.withDurationAdded((-35999899L), (int) ' ');
        org.joda.time.MutableDateTime mutableDateTime32 = instant31.toMutableDateTimeISO();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant37 = instant34.withDurationAdded(readableDuration35, 0);
        java.util.Date date38 = instant34.toDate();
        org.joda.time.Instant instant40 = instant34.plus((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone47, (org.joda.time.ReadableInstant) instant49);
        java.lang.String str51 = instant49.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.dayOfYear();
        org.joda.time.Instant instant58 = gJChronology54.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Instant instant60 = instant58.minus(readableDuration59);
        org.joda.time.Instant instant63 = instant60.withDurationAdded((-12219292800000L), 0);
        int int64 = instant49.compareTo((org.joda.time.ReadableInstant) instant60);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone65, readableInstant66);
        org.joda.time.Chronology chronology68 = gJChronology67.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = gJChronology67.dayOfWeek();
        org.joda.time.DurationField durationField70 = gJChronology67.years();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology67.weekyear();
        boolean boolean72 = instant49.equals((java.lang.Object) dateTimeField71);
        org.joda.time.Instant instant74 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant77 = instant74.withDurationAdded(readableDuration75, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = instant74.toString(dateTimeFormatter78);
        org.joda.time.Instant instant82 = instant74.withDurationAdded(0L, 1582);
        long long83 = instant82.getMillis();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Instant instant86 = instant82.withDurationAdded(readableDuration84, (int) (short) 100);
        boolean boolean87 = instant49.isAfter((org.joda.time.ReadableInstant) instant82);
        java.lang.String str88 = instant49.toString();
        int int89 = instant34.compareTo((org.joda.time.ReadableInstant) instant49);
        boolean boolean90 = mutableDateTime32.isBefore((org.joda.time.ReadableInstant) instant34);
        org.joda.time.MutableDateTime mutableDateTime91 = instant34.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and mutableDateTime32", (instant31.compareTo(mutableDateTime32) == 0) == instant31.equals(mutableDateTime32));
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3339");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DurationField durationField12 = julianChronology11.centuries();
        java.lang.String str13 = julianChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology11.yearOfEra();
        org.joda.time.DurationField durationField15 = julianChronology11.months();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = julianChronology18.minuteOfDay();
        boolean boolean20 = julianChronology11.equals((java.lang.Object) dateTimeField19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology11.secondOfMinute();
        int int22 = julianChronology11.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        boolean boolean28 = julianChronology26.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField29 = julianChronology26.months();
        boolean boolean30 = julianChronology11.equals((java.lang.Object) julianChronology26);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology11.dayOfYear();
        org.joda.time.DateTime dateTime32 = instant6.toDateTime((org.joda.time.Chronology) julianChronology11);
        org.joda.time.DateTimeZone dateTimeZone33 = instant6.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.Chronology chronology38 = gJChronology37.withUTC();
        java.lang.String str39 = gJChronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.yearOfEra();
        org.joda.time.DurationField durationField41 = gJChronology37.minutes();
        int int42 = gJChronology37.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField43 = gJChronology37.eras();
        boolean boolean44 = instant6.equals((java.lang.Object) durationField43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and mutableDateTime34", (dateTime32.compareTo(mutableDateTime34) == 0) == dateTime32.equals(mutableDateTime34));
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3340");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone40 = instant35.getZone();
        org.joda.time.DateTime dateTime41 = instant35.toDateTimeISO();
        boolean boolean43 = instant35.isBefore((-183339961199990L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime41", (instant35.compareTo(dateTime41) == 0) == instant35.equals(dateTime41));
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3341");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = instant6.getZone();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant6.withDurationAdded(readableDuration13, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone16, readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology18.dayOfYear();
        org.joda.time.Instant instant22 = gJChronology18.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.minus(readableDuration23);
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-12219292800000L), 0);
        boolean boolean29 = instant24.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology32.monthOfYear();
        boolean boolean40 = instant24.equals((java.lang.Object) dateTimeField39);
        org.joda.time.Instant instant42 = instant24.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = instant42.isSupported(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = instant42.getChronology();
        org.joda.time.Instant instant47 = instant42.withMillis((-35999968L));
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        boolean boolean49 = instant6.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.MutableDateTime mutableDateTime50 = instant6.toMutableDateTime();
        java.lang.String str51 = instant6.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime50", (instant6.compareTo(mutableDateTime50) == 0) == instant6.equals(mutableDateTime50));
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3342");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.secondOfMinute();
        long long7 = julianChronology2.add((-35999900L), 0L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField8 = julianChronology2.secondOfMinute();
        java.lang.String str9 = julianChronology2.toString();
        org.joda.time.DurationField durationField10 = julianChronology2.eras();
        org.joda.time.Chronology chronology11 = julianChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = julianChronology2.getZone();
        org.joda.time.DurationField durationField14 = julianChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField14, and durationField10", !(durationField10.compareTo(durationField14) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField14.compareTo(durationField10))));
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3343");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.minus(readableDuration34);
        org.joda.time.Instant instant38 = instant35.withDurationAdded((-12219292800000L), 0);
        boolean boolean39 = instant8.isEqual((org.joda.time.ReadableInstant) instant35);
        org.joda.time.DateTimeZone dateTimeZone40 = instant35.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = instant35.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone43, readableInstant44);
        org.joda.time.Chronology chronology46 = gJChronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology45.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = instant35.toMutableDateTime((org.joda.time.Chronology) gJChronology45);
        boolean boolean52 = instant35.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and mutableDateTime51", (instant35.compareTo(mutableDateTime51) == 0) == instant35.equals(mutableDateTime51));
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant29 = instant8.withDurationAdded(readableDuration27, 1);
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant30.withDurationAdded(readableDuration31, (-1));
        org.joda.time.MutableDateTime mutableDateTime34 = instant33.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.minus(readableDuration42);
        boolean boolean45 = instant43.isBefore(35999999L);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant43.plus(readableDuration46);
        boolean boolean48 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Instant instant50 = instant47.plus((long) 660);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant47 and mutableDateTime34", (instant47.compareTo(mutableDateTime34) == 0) == instant47.equals(mutableDateTime34));
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3345");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.centuryOfEra();
        org.joda.time.Instant instant12 = gJChronology9.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant12.minus(readableDuration13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant(36000001L);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.plus(readableDuration17);
        org.joda.time.Chronology chronology19 = instant16.getChronology();
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.Instant instant22 = instant16.withMillis((-60514215257783L));
        long long23 = instant16.getMillis();
        org.joda.time.DateTime dateTime24 = instant16.toDateTimeISO();
        boolean boolean25 = instant12.isBefore((org.joda.time.ReadableInstant) instant16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime24", (instant16.compareTo(dateTime24) == 0) == instant16.equals(dateTime24));
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3346");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime();
        boolean boolean13 = instant8.isEqual((-9044280000349L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime11", (instant8.compareTo(mutableDateTime11) == 0) == instant8.equals(mutableDateTime11));
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3347");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = instant8.isEqual(readableInstant14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = instant8.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant30.plus(readableDuration34);
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, (org.joda.time.ReadableInstant) instant35);
        long long40 = dateTimeZone20.convertLocalToUTC(1L, true, (-32399903L));
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTime dateTime42 = instant8.toDateTime(dateTimeZone20);
        boolean boolean44 = dateTimeZone20.isStandardOffset((-71999980L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime42", (instant6.compareTo(dateTime42) == 0) == instant6.equals(dateTime42));
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3348");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = julianChronology16.seconds();
        boolean boolean27 = instant13.equals((java.lang.Object) durationField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant13.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfYear();
        java.lang.String str35 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime39 = instant29.toMutableDateTime((org.joda.time.Chronology) gJChronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant29.isSupported(dateTimeFieldType40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime39", (instant9.compareTo(mutableDateTime39) == 0) == instant9.equals(mutableDateTime39));
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3349");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime14 = instant6.toMutableDateTime((org.joda.time.Chronology) gJChronology13);
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3350");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology16.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = gJChronology20.getZone();
        org.joda.time.Chronology chronology25 = julianChronology16.withZone(dateTimeZone24);
        org.joda.time.DurationField durationField26 = julianChronology16.seconds();
        boolean boolean27 = instant13.equals((java.lang.Object) durationField26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant13.plus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = gJChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology36.getZone();
        org.joda.time.Chronology chronology41 = julianChronology32.withZone(dateTimeZone40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone40.getShortName((long) (short) 100, locale43);
        long long48 = dateTimeZone40.convertLocalToUTC(36000001L, false, (-32399903L));
        org.joda.time.DateTime dateTime49 = instant29.toDateTime(dateTimeZone40);
        org.joda.time.Instant instant51 = instant29.withMillis((-422964038L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime49", (instant9.compareTo(dateTime49) == 0) == instant9.equals(dateTime49));
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3351");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DurationField durationField5 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.era();
        org.joda.time.DurationField durationField7 = gJChronology2.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField7, and durationField5", !(durationField5.compareTo(durationField7) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField7.compareTo(durationField5))));
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3352");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology10.getZone();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, (org.joda.time.ReadableInstant) instant16);
        java.lang.String str18 = instant16.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.minus(readableDuration26);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((-12219292800000L), 0);
        int int31 = instant16.compareTo((org.joda.time.ReadableInstant) instant27);
        boolean boolean33 = instant16.isBefore((long) 'a');
        org.joda.time.Instant instant34 = instant16.toInstant();
        boolean boolean35 = instant34.isEqualNow();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((java.lang.Object) instant34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.Instant instant43 = gJChronology39.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.minus(readableDuration44);
        org.joda.time.Instant instant48 = instant45.withDurationAdded((-12219292800000L), 0);
        boolean boolean50 = instant45.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, readableInstant52);
        org.joda.time.Chronology chronology54 = gJChronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology53.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology53.monthOfYear();
        boolean boolean61 = instant45.equals((java.lang.Object) dateTimeField60);
        org.joda.time.Instant instant63 = instant45.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = instant63.isSupported(dateTimeFieldType64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant63.isSupported(dateTimeFieldType66);
        org.joda.time.Instant instant70 = instant63.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant72 = instant70.withMillis(187199999L);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Instant instant75 = instant70.withDurationAdded(readableDuration73, 1200);
        boolean boolean76 = instant34.isEqual((org.joda.time.ReadableInstant) instant70);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = instant70.isSupported(dateTimeFieldType77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        boolean boolean80 = instant70.isSupported(dateTimeFieldType79);
        java.lang.String str81 = instant70.toString();
        boolean boolean82 = instant6.isEqual((org.joda.time.ReadableInstant) instant70);
        org.joda.time.DateTime dateTime83 = instant70.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3353");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DurationField durationField11 = julianChronology3.weekyears();
        org.joda.time.Chronology chronology12 = julianChronology3.withUTC();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DurationField durationField14 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField9, and durationField10", !(durationField14.compareTo(durationField9) == 0) || (Math.signum(durationField14.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3354");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        boolean boolean21 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone22 = instant11.getZone();
        boolean boolean23 = instant11.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.Chronology chronology27 = gJChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.millisOfDay();
        org.joda.time.DurationField durationField30 = gJChronology26.halfdays();
        org.joda.time.DurationField durationField31 = gJChronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology34 = gJChronology26.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = gJChronology26.minutes();
        org.joda.time.DurationField durationField36 = gJChronology26.weekyears();
        org.joda.time.DurationField durationField37 = gJChronology26.weekyears();
        org.joda.time.DurationField durationField38 = gJChronology26.weeks();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.minus(readableDuration46);
        org.joda.time.Instant instant50 = instant47.withDurationAdded((-12219292800000L), 0);
        boolean boolean52 = instant47.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.Chronology chronology56 = gJChronology55.withUTC();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology55.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField62 = gJChronology55.monthOfYear();
        boolean boolean63 = instant47.equals((java.lang.Object) dateTimeField62);
        org.joda.time.Instant instant65 = instant47.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = instant65.isSupported(dateTimeFieldType66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        boolean boolean69 = instant65.isSupported(dateTimeFieldType68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = instant65.toString(dateTimeFormatter70);
        boolean boolean73 = instant65.isAfter(3L);
        boolean boolean74 = gJChronology26.equals((java.lang.Object) instant65);
        org.joda.time.DateTime dateTime75 = instant11.toDateTime((org.joda.time.Chronology) gJChronology26);
        org.joda.time.Instant instant76 = gJChronology26.getGregorianCutover();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime20", (instant11.compareTo(dateTime20) == 0) == instant11.equals(dateTime20));
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3355");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfDay();
        org.joda.time.DurationField durationField13 = julianChronology3.millis();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.minuteOfHour();
        org.joda.time.Chronology chronology17 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.dayOfWeek();
        org.joda.time.DurationField durationField19 = julianChronology3.hours();
        org.joda.time.DurationField durationField20 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField9, and durationField10", !(durationField20.compareTo(durationField9) == 0) || (Math.signum(durationField20.compareTo(durationField10)) == Math.signum(durationField9.compareTo(durationField10))));
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3356");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((java.lang.Object) instant14);
        org.joda.time.Instant instant17 = instant14.minus((long) ' ');
        boolean boolean18 = instant14.isBeforeNow();
        org.joda.time.Chronology chronology19 = instant14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = instant14.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = instant14.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime20", (instant9.compareTo(mutableDateTime20) == 0) == instant9.equals(mutableDateTime20));
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology8 = chronology5.withZone(dateTimeZone7);
        java.lang.String str9 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone7.isLocalDateTimeGap(localDateTime10);
        java.lang.String str12 = dateTimeZone7.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) (-35999900L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        java.lang.String str28 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfYear();
        java.lang.String str30 = gJChronology27.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.monthOfYear();
        int int33 = mutableDateTime22.get(dateTimeField32);
        int int34 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Instant instant35 = mutableDateTime22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DurationField durationField40 = gJChronology38.millis();
        long long44 = gJChronology38.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField45 = gJChronology38.millis();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology38.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime22.toMutableDateTime((org.joda.time.Chronology) gJChronology38);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology38.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime22", (instant19.compareTo(mutableDateTime22) == 0) == instant19.equals(mutableDateTime22));
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3358");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        java.lang.String str13 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = julianChronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField19 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.millisOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField29 = gJChronology24.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology32 = gJChronology24.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField33 = gJChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology24.halfdayOfDay();
        org.joda.time.DurationField durationField35 = gJChronology24.centuries();
        org.joda.time.DurationField durationField36 = gJChronology24.days();
        org.joda.time.Instant instant37 = gJChronology24.getGregorianCutover();
        org.joda.time.Instant instant38 = instant37.toInstant();
        boolean boolean40 = instant38.isAfter((long) 1970);
        org.joda.time.Instant instant42 = instant38.minus(25200L);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant47 = instant44.withDurationAdded(readableDuration45, 43203104);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, (org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField36", (durationField10.compareTo(durationField36) == 0) == durationField10.equals(durationField36));
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3359");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        boolean boolean7 = instant4.isBeforeNow();
        org.joda.time.Instant instant10 = instant4.withDurationAdded((-12219364799999L), 1);
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean13 = instant10.isEqual((-60514179282091L));
        boolean boolean14 = instant10.isEqualNow();
        org.joda.time.DateTime dateTime15 = instant10.toDateTimeISO();
        org.joda.time.Instant instant16 = instant10.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime15", (instant16.compareTo(dateTime15) == 0) == instant16.equals(dateTime15));
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3360");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.Chronology chronology21 = gJChronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology20.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology33 = gJChronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology28.getZone();
        long long36 = dateTimeZone34.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology37 = gJChronology20.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.chrono.JulianChronology julianChronology45 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone43);
        boolean boolean47 = julianChronology45.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology48 = julianChronology45.withUTC();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology50 = julianChronology45.withZone(dateTimeZone49);
        long long52 = dateTimeZone39.getMillisKeepLocal(dateTimeZone49, 10L);
        org.joda.time.Chronology chronology53 = gJChronology20.withZone(dateTimeZone49);
        long long55 = dateTimeZone49.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime56 = instant14.toMutableDateTime(dateTimeZone49);
        org.joda.time.Instant instant58 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.dayOfYear();
        org.joda.time.Instant instant65 = gJChronology61.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime68 = instant65.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = instant65.toDateTime();
        org.joda.time.Instant instant71 = instant65.withMillis(100L);
        boolean boolean72 = instant58.isAfter((org.joda.time.ReadableInstant) instant65);
        boolean boolean73 = mutableDateTime56.isBefore((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant75 = org.joda.time.Instant.parse("1970-01-01T00:00:00.001Z");
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Instant instant78 = instant75.withDurationAdded(readableDuration76, 10);
        java.lang.String str79 = instant75.toString();
        boolean boolean81 = instant75.isEqual((-6211220191199799L));
        boolean boolean82 = instant75.isBeforeNow();
        org.joda.time.Instant instant84 = instant75.minus((-424799991L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = instant75.toString(dateTimeFormatter85);
        boolean boolean87 = instant65.isBefore((org.joda.time.ReadableInstant) instant75);
        org.joda.time.Instant instant89 = instant75.plus(2495400099L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant65 and mutableDateTime68", (instant65.compareTo(mutableDateTime68) == 0) == instant65.equals(mutableDateTime68));
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3361");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = julianChronology3.centuryOfEra();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = instant16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.minus(readableDuration26);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((-12219292800000L), 0);
        boolean boolean32 = instant27.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.Chronology chronology36 = gJChronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology35.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology35.monthOfYear();
        boolean boolean43 = instant27.equals((java.lang.Object) dateTimeField42);
        org.joda.time.Instant instant45 = instant27.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = instant45.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = instant45.isSupported(dateTimeFieldType48);
        org.joda.time.Instant instant52 = instant45.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone53, readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = gJChronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology55.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology55.getZone();
        java.lang.String str60 = dateTimeZone59.getID();
        long long62 = dateTimeZone59.nextTransition((long) 10);
        long long64 = dateTimeZone59.nextTransition((-35999900L));
        java.lang.String str66 = dateTimeZone59.getNameKey((long) 1582);
        org.joda.time.MutableDateTime mutableDateTime67 = instant52.toMutableDateTime(dateTimeZone59);
        boolean boolean68 = instant16.isEqual((org.joda.time.ReadableInstant) instant52);
        boolean boolean69 = instant52.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime70 = instant52.toMutableDateTime();
        boolean boolean71 = instant52.isBeforeNow();
        boolean boolean72 = julianChronology3.equals((java.lang.Object) boolean71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant52 and mutableDateTime67", (instant52.compareTo(mutableDateTime67) == 0) == instant52.equals(mutableDateTime67));
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3362");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.secondOfDay();
        java.lang.String str15 = gJChronology2.toString();
        org.joda.time.DurationField durationField16 = gJChronology2.years();
        org.joda.time.DurationField durationField17 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology2.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField17", (durationField16.compareTo(durationField17) == 0) == durationField16.equals(durationField17));
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3363");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.secondOfMinute();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Chronology chronology14 = gJChronology9.withZone(dateTimeZone12);
        long long17 = dateTimeZone12.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean20 = dateTimeZone19.isFixed();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone19.getName((-71999990L), locale22);
        org.joda.time.Chronology chronology24 = gJChronology2.withZone(dateTimeZone19);
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology25.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology25.getZone();
        org.joda.time.DurationField durationField28 = gJChronology25.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField28, and durationField6", !(durationField6.compareTo(durationField28) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField28.compareTo(durationField6))));
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3364");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        java.util.Date date15 = instant14.toDate();
        org.joda.time.Instant instant17 = instant14.withMillis((long) (byte) 10);
        boolean boolean19 = instant14.isAfter(223199999L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Instant instant25 = instant23.withMillis((long) (byte) -1);
        org.joda.time.Instant instant27 = instant25.minus((long) (short) 10);
        org.joda.time.Instant instant29 = instant27.plus((long) 126000000);
        boolean boolean30 = instant14.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone31 = instant14.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str34 = dateTimeZone33.getID();
        boolean boolean35 = dateTimeZone33.isFixed();
        long long37 = dateTimeZone33.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        java.lang.String str39 = dateTimeZone33.getID();
        int int41 = dateTimeZone33.getOffsetFromLocal((long) 1);
        long long43 = dateTimeZone33.convertUTCToLocal(151199999L);
        int int45 = dateTimeZone33.getStandardOffset((-60514215250013L));
        org.joda.time.MutableDateTime mutableDateTime46 = instant14.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = instant14.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime46", (instant9.compareTo(mutableDateTime46) == 0) == instant9.equals(mutableDateTime46));
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3365");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.yearOfCentury();
        org.joda.time.DurationField durationField11 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        org.joda.time.DurationField durationField16 = julianChronology15.centuries();
        org.joda.time.DurationField durationField17 = julianChronology15.weeks();
        org.joda.time.DurationField durationField18 = julianChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology15.dayOfYear();
        boolean boolean20 = gJChronology2.equals((java.lang.Object) julianChronology15);
        org.joda.time.DurationField durationField21 = gJChronology2.months();
        org.joda.time.DurationField durationField22 = gJChronology2.weeks();
        org.joda.time.Chronology chronology23 = gJChronology2.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField17 and durationField22", (durationField17.compareTo(durationField22) == 0) == durationField17.equals(durationField22));
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3366");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        boolean boolean9 = instant5.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        java.lang.String str19 = instant16.toString();
        org.joda.time.Instant instant21 = instant16.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.Chronology chronology25 = gJChronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.millisOfDay();
        org.joda.time.DurationField durationField28 = gJChronology24.halfdays();
        org.joda.time.DurationField durationField29 = gJChronology24.millis();
        org.joda.time.DateTime dateTime30 = instant21.toDateTime((org.joda.time.Chronology) gJChronology24);
        boolean boolean31 = instant21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = instant21.getZone();
        boolean boolean33 = instant21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone34 = instant21.getZone();
        org.joda.time.Instant instant35 = instant21.toInstant();
        int int36 = instant5.compareTo((org.joda.time.ReadableInstant) instant21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant21", (dateTime30.compareTo(instant21) == 0) == dateTime30.equals(instant21));
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3367");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = instant9.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str23 = dateTimeZone22.getID();
        boolean boolean24 = dateTimeZone22.isFixed();
        long long26 = dateTimeZone22.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology27 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        long long29 = dateTimeZone22.previousTransition(288097310L);
        java.util.TimeZone timeZone30 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = instant9.toMutableDateTime(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime20", (instant9.compareTo(dateTime20) == 0) == instant9.equals(dateTime20));
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3368");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        long long11 = dateTime10.getMillis();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant13.plus(readableDuration14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1L);
        boolean boolean18 = instant13.isEqual((org.joda.time.ReadableInstant) instant17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) instant17);
        boolean boolean21 = dateTime10.isEqual(187199999L);
        org.joda.time.Instant instant23 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        boolean boolean25 = dateTime10.equals((java.lang.Object) dateTimeZone24);
        int int27 = dateTimeZone24.getOffset((-60514575252321L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3369");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        long long2 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.Chronology chronology6 = gJChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.millisOfDay();
        org.joda.time.DurationField durationField9 = gJChronology5.halfdays();
        org.joda.time.DurationField durationField10 = gJChronology5.millis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology13 = gJChronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField14 = gJChronology5.minutes();
        org.joda.time.DurationField durationField15 = gJChronology5.weekyears();
        org.joda.time.DurationField durationField16 = gJChronology5.minutes();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology5.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = instant1.toMutableDateTime((org.joda.time.Chronology) gJChronology5);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        boolean boolean25 = julianChronology23.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology23.era();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology23.minuteOfHour();
        org.joda.time.DurationField durationField29 = julianChronology23.weeks();
        org.joda.time.DurationField durationField30 = julianChronology23.days();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology23.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = julianChronology23.getZone();
        int int34 = dateTimeZone32.getOffset((-35999899L));
        java.lang.String str36 = dateTimeZone32.getNameKey((-126000001L));
        int int38 = dateTimeZone32.getStandardOffset((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        java.lang.String str42 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.dayOfYear();
        java.lang.String str44 = gJChronology41.toString();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.monthOfYear();
        org.joda.time.DurationField durationField47 = gJChronology41.hours();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.chrono.GJChronology gJChronology50 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone48, readableInstant49);
        org.joda.time.Chronology chronology51 = gJChronology50.withUTC();
        org.joda.time.DurationField durationField52 = gJChronology50.millis();
        long long56 = gJChronology50.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField57 = gJChronology50.millis();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology50.clockhourOfHalfday();
        org.joda.time.DurationField durationField60 = gJChronology50.months();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone61, readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology63.getZone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str67 = dateTimeZone66.getID();
        org.joda.time.Chronology chronology68 = gJChronology63.withZone(dateTimeZone66);
        long long71 = dateTimeZone66.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone72 = dateTimeZone66.toTimeZone();
        long long75 = dateTimeZone66.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology76 = gJChronology50.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField77 = gJChronology50.yearOfEra();
        boolean boolean78 = gJChronology41.equals((java.lang.Object) gJChronology50);
        org.joda.time.DateTimeZone dateTimeZone79 = gJChronology50.getZone();
        long long81 = dateTimeZone32.getMillisKeepLocal(dateTimeZone79, (-35990270L));
        org.joda.time.DateTime dateTime82 = mutableDateTime19.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant84 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant84.plus(readableDuration85);
        org.joda.time.Instant instant88 = new org.joda.time.Instant(1L);
        boolean boolean89 = instant84.isEqual((org.joda.time.ReadableInstant) instant88);
        org.joda.time.Instant instant91 = new org.joda.time.Instant(100L);
        boolean boolean92 = instant88.isEqual((org.joda.time.ReadableInstant) instant91);
        long long93 = instant88.getMillis();
        org.joda.time.Instant instant95 = instant88.minus(126000000L);
        org.joda.time.Chronology chronology96 = instant95.getChronology();
        int int97 = dateTime82.compareTo((org.joda.time.ReadableInstant) instant95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime19", (instant1.compareTo(mutableDateTime19) == 0) == instant1.equals(mutableDateTime19));
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3370");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        long long11 = dateTime10.getMillis();
        org.joda.time.Instant instant13 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant13.plus(readableDuration14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1L);
        boolean boolean18 = instant13.isEqual((org.joda.time.ReadableInstant) instant17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant22 = instant17.withDurationAdded(readableDuration20, 1002240000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3371");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = instant12.toDateTime();
        java.util.Date date17 = instant12.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Chronology chronology25 = gJChronology20.withZone(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.getName((long) (byte) 10);
        java.util.TimeZone timeZone28 = dateTimeZone23.toTimeZone();
        long long32 = dateTimeZone23.convertLocalToUTC((long) 10, false, (long) (byte) 10);
        boolean boolean33 = instant12.equals((java.lang.Object) (byte) 10);
        boolean boolean34 = instant5.isBefore((org.joda.time.ReadableInstant) instant12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = instant5.toString(dateTimeFormatter35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime15", (instant12.compareTo(mutableDateTime15) == 0) == instant12.equals(mutableDateTime15));
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3372");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        long long10 = gJChronology2.add((-21361518036971028L), 36000003L, 45);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        java.lang.String str20 = instant17.toString();
        org.joda.time.Instant instant22 = instant17.minus((long) 36000000);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        long long24 = instant22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.hourOfHalfday();
        long long33 = gJChronology27.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology27.dayOfYear();
        org.joda.time.DurationField durationField36 = gJChronology27.weekyears();
        boolean boolean37 = instant22.equals((java.lang.Object) durationField36);
        org.joda.time.Instant instant39 = instant22.plus((-60514215195738L));
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        boolean boolean43 = dateTimeZone41.isFixed();
        long long46 = dateTimeZone41.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField48 = gJChronology47.era();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.year();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = instant39.toMutableDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology53 = gJChronology2.withZone(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime52", (instant39.compareTo(mutableDateTime52) == 0) == instant39.equals(mutableDateTime52));
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3373");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = gJChronology16.weeks();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        boolean boolean22 = instant13.equals((java.lang.Object) gJChronology16);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) 20);
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        int int26 = instant13.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Chronology chronology34 = gJChronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology29.getZone();
        long long37 = dateTimeZone35.nextTransition((-12219292800000L));
        long long39 = dateTimeZone35.convertUTCToLocal((long) 1);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone35.getName((long) (-1), locale41);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone35.getName(35L, locale44);
        java.lang.String str46 = dateTimeZone35.getID();
        java.util.TimeZone timeZone47 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        java.lang.String str49 = dateTimeZone48.toString();
        org.joda.time.DateTime dateTime50 = mutableDateTime25.toDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime25.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime50", (instant24.compareTo(dateTime50) == 0) == instant24.equals(dateTime50));
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3374");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant8.withDurationAdded(readableDuration14, (-1));
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.Chronology chronology20 = gJChronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.millisOfDay();
        java.lang.String str23 = gJChronology19.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology19.year();
        org.joda.time.DurationField durationField25 = gJChronology19.centuries();
        org.joda.time.DateTime dateTime26 = instant16.toDateTime((org.joda.time.Chronology) gJChronology19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        boolean boolean32 = julianChronology30.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField33 = julianChronology30.months();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone35.getName((-1L), locale38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone35.isLocalDateTimeGap(localDateTime40);
        boolean boolean43 = dateTimeZone35.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology44 = julianChronology30.withZone(dateTimeZone35);
        java.util.TimeZone timeZone45 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((-593285831998337L));
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        long long53 = dateTimeZone46.getMillisKeepLocal(dateTimeZone51, 134401582L);
        org.joda.time.DateTime dateTime54 = instant16.toDateTime(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime26", (instant16.compareTo(dateTime26) == 0) == instant16.equals(dateTime26));
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) ' ');
        long long8 = dateTimeZone3.convertLocalToUTC(100L, true);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology11.getZone();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, (org.joda.time.ReadableInstant) instant17);
        java.lang.String str19 = instant17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = instant17.getZone();
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, (org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DurationField durationField26 = julianChronology25.centuries();
        java.lang.String str27 = julianChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology25.yearOfEra();
        org.joda.time.DurationField durationField29 = julianChronology25.months();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.minuteOfDay();
        boolean boolean34 = julianChronology25.equals((java.lang.Object) dateTimeField33);
        org.joda.time.DateTimeField dateTimeField35 = julianChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology25.secondOfDay();
        org.joda.time.DurationField durationField38 = julianChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology25.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime40 = instant17.toMutableDateTime((org.joda.time.Chronology) julianChronology25);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.Chronology chronology44 = gJChronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.millisOfDay();
        org.joda.time.DurationField durationField47 = gJChronology43.halfdays();
        org.joda.time.DurationField durationField48 = gJChronology43.millis();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology51 = gJChronology43.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = gJChronology43.minuteOfDay();
        org.joda.time.Instant instant53 = gJChronology43.getGregorianCutover();
        org.joda.time.Instant instant55 = instant53.withMillis(52L);
        long long56 = instant55.getMillis();
        boolean boolean57 = mutableDateTime40.isEqual((org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.Chronology chronology61 = gJChronology60.withUTC();
        org.joda.time.DurationField durationField62 = gJChronology60.millis();
        org.joda.time.Chronology chronology63 = gJChronology60.withUTC();
        org.joda.time.DurationField durationField64 = gJChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology60.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.chrono.GJChronology gJChronology68 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone66, readableInstant67);
        org.joda.time.Chronology chronology69 = gJChronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField70 = gJChronology68.dayOfWeek();
        org.joda.time.Chronology chronology71 = gJChronology68.withUTC();
        org.joda.time.DurationField durationField72 = gJChronology68.years();
        org.joda.time.DateTimeField dateTimeField73 = gJChronology68.era();
        int int74 = gJChronology68.getMinimumDaysInFirstWeek();
        org.joda.time.Instant instant75 = gJChronology68.getGregorianCutover();
        boolean boolean76 = gJChronology60.equals((java.lang.Object) instant75);
        boolean boolean77 = instant55.isEqual((org.joda.time.ReadableInstant) instant75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and mutableDateTime40", (instant17.compareTo(mutableDateTime40) == 0) == instant17.equals(mutableDateTime40));
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.minus(readableDuration15);
        java.lang.String str17 = instant14.toString();
        org.joda.time.Instant instant19 = instant14.minus(18684000000L);
        org.joda.time.Instant instant20 = instant19.toInstant();
        long long21 = instant20.getMillis();
        org.joda.time.Instant instant22 = instant20.toInstant();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.millisOfDay();
        org.joda.time.DurationField durationField29 = gJChronology25.halfdays();
        org.joda.time.DurationField durationField30 = gJChronology25.millis();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology33 = gJChronology25.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField34 = gJChronology25.minutes();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology25.halfdayOfDay();
        org.joda.time.DurationField durationField36 = gJChronology25.centuries();
        org.joda.time.DurationField durationField37 = gJChronology25.days();
        org.joda.time.DurationField durationField38 = gJChronology25.weeks();
        org.joda.time.DurationField durationField39 = gJChronology25.hours();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = gJChronology42.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str46 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology47 = gJChronology42.withZone(dateTimeZone45);
        long long50 = dateTimeZone45.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str52 = dateTimeZone45.getName((long) (short) -1);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone45.getName(0L, locale54);
        org.joda.time.Chronology chronology56 = gJChronology25.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime57 = instant20.toDateTime(chronology56);
        long long58 = instant20.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime57", (instant20.compareTo(dateTime57) == 0) == instant20.equals(dateTime57));
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3377");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfDay();
        org.joda.time.DurationField durationField9 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField9", Math.signum(durationField6.compareTo(durationField9)) == -Math.signum(durationField9.compareTo(durationField6)));
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = instant8.toInstant();
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant14.minus(readableDuration16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime15", (instant17.compareTo(dateTime15) == 0) == instant17.equals(dateTime15));
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3379");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.weekyear();
        int int11 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology2.getZone();
        java.lang.String str14 = dateTimeZone12.getName(151200024L);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField16 = gJChronology15.months();
        org.joda.time.Chronology chronology17 = gJChronology15.withUTC();
        org.joda.time.DurationField durationField18 = gJChronology15.months();
        org.joda.time.DurationField durationField19 = gJChronology15.weeks();
        org.joda.time.DurationField durationField20 = gJChronology15.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField16, and durationField19", !(durationField20.compareTo(durationField16) == 0) || (Math.signum(durationField20.compareTo(durationField19)) == Math.signum(durationField16.compareTo(durationField19))));
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3380");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        java.lang.String str5 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.yearOfEra();
        org.joda.time.DurationField durationField7 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.minuteOfDay();
        boolean boolean12 = julianChronology3.equals((java.lang.Object) dateTimeField11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.halfdayOfDay();
        org.joda.time.DurationField durationField17 = julianChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology3.secondOfDay();
        org.joda.time.DurationField durationField20 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology3.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField20", (durationField14.compareTo(durationField20) == 0) == durationField14.equals(durationField20));
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3381");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant12 = instant9.withDurationAdded(readableDuration10, 3600000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, (int) ' ');
        java.util.Date date16 = instant12.toDate();
        org.joda.time.Instant instant18 = instant12.minus((-60514179281379L));
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.Instant instant25 = gJChronology21.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long27 = instant25.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = instant25.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = julianChronology32.minuteOfDay();
        org.joda.time.DurationField durationField34 = julianChronology32.weekyears();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str37 = dateTimeZone36.getID();
        boolean boolean38 = dateTimeZone36.isFixed();
        long long40 = dateTimeZone36.previousTransition(100L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        long long43 = dateTimeZone36.previousTransition(5201L);
        org.joda.time.Chronology chronology44 = julianChronology32.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField45 = julianChronology32.year();
        int int46 = instant25.get(dateTimeField45);
        org.joda.time.DateTime dateTime47 = instant25.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = instant25.toDateTimeISO();
        boolean boolean49 = instant18.equals((java.lang.Object) dateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime47", (instant25.compareTo(dateTime47) == 0) == instant25.equals(dateTime47));
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3382");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        java.util.Date date26 = instant8.toDate();
        boolean boolean28 = instant8.isBefore((-62112218399999L));
        org.joda.time.Instant instant31 = instant8.withDurationAdded((-35999899L), (int) ' ');
        org.joda.time.DateTime dateTime32 = instant8.toDateTimeISO();
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.chrono.JulianChronology julianChronology37 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone35);
        boolean boolean39 = julianChronology37.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField40 = julianChronology37.days();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = julianChronology37.year();
        java.lang.String str43 = julianChronology37.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.Chronology chronology51 = gJChronology46.withZone(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone55 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.Chronology chronology57 = julianChronology37.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime58 = instant33.toDateTime(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime32", (instant8.compareTo(dateTime32) == 0) == instant8.equals(dateTime32));
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3383");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        boolean boolean31 = julianChronology29.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology32 = julianChronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology34 = julianChronology29.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = julianChronology29.days();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology29.millisOfSecond();
        java.lang.String str37 = julianChronology29.toString();
        org.joda.time.DateTimeField dateTimeField38 = julianChronology29.hourOfHalfday();
        int int39 = instant8.get(dateTimeField38);
        org.joda.time.MutableDateTime mutableDateTime40 = instant8.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.Chronology chronology44 = gJChronology43.withUTC();
        org.joda.time.DurationField durationField45 = gJChronology43.millis();
        long long49 = gJChronology43.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = gJChronology43.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology43.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology43.monthOfYear();
        org.joda.time.DurationField durationField53 = gJChronology43.minutes();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime40.toMutableDateTime((org.joda.time.Chronology) gJChronology43);
        java.util.Date date55 = mutableDateTime54.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime40", (instant8.compareTo(mutableDateTime40) == 0) == instant8.equals(mutableDateTime40));
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3384");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DurationField durationField15 = gJChronology12.years();
        org.joda.time.DurationField durationField16 = gJChronology12.hours();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology12.yearOfEra();
        boolean boolean18 = instant6.equals((java.lang.Object) dateTimeField17);
        boolean boolean19 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        java.lang.String str23 = gJChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.centuryOfEra();
        boolean boolean25 = instant6.equals((java.lang.Object) gJChronology22);
        boolean boolean26 = instant6.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime27 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology30.getZone();
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, (org.joda.time.ReadableInstant) instant36);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.clockhourOfHalfday();
        org.joda.time.Chronology chronology39 = gJChronology37.withUTC();
        long long44 = gJChronology37.getDateTimeMillis(1, (int) (short) 10, 1, (int) (short) 1);
        org.joda.time.DateTime dateTime45 = mutableDateTime27.toDateTime((org.joda.time.Chronology) gJChronology37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3385");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.Chronology chronology10 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology9.millisOfDay();
        org.joda.time.Chronology chronology17 = gJChronology9.withUTC();
        org.joda.time.Chronology chronology18 = gJChronology9.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = gJChronology9.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant(36000001L);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        org.joda.time.Chronology chronology24 = instant21.getChronology();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, (org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DurationField durationField27 = chronology26.millis();
        org.joda.time.DurationField durationField28 = chronology26.eras();
        boolean boolean29 = gJChronology2.equals((java.lang.Object) chronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField27 and durationField28", Math.signum(durationField27.compareTo(durationField28)) == -Math.signum(durationField28.compareTo(durationField27)));
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3386");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        boolean boolean9 = instant8.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime10 = instant8.toMutableDateTime();
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        boolean boolean17 = julianChronology15.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology18 = julianChronology15.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = julianChronology15.getZone();
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = gJChronology20.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = gJChronology20.add(readablePeriod22, (-12219292800000L), (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField26 = gJChronology20.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology20.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime10.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.chrono.JulianChronology julianChronology33 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone31);
        org.joda.time.DurationField durationField34 = julianChronology33.weeks();
        org.joda.time.DurationField durationField35 = julianChronology33.millis();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology33.centuryOfEra();
        int int38 = julianChronology33.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology33.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology33.millisOfSecond();
        boolean boolean42 = mutableDateTime29.equals((java.lang.Object) julianChronology33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime10", (instant6.compareTo(mutableDateTime10) == 0) == instant6.equals(mutableDateTime10));
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3387");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        boolean boolean13 = instant6.isAfter((long) (byte) 1);
        org.joda.time.DateTime dateTime14 = instant6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((-60514214982273L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime14", (instant6.compareTo(dateTime14) == 0) == instant6.equals(dateTime14));
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3388");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        boolean boolean3 = instant1.isBefore(72320035L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant1.getZone();
        org.joda.time.DateTime dateTime5 = instant1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime5", (instant8.compareTo(dateTime5) == 0) == instant8.equals(dateTime5));
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3389");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = instant20.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = instant20.toDateTime();
        java.util.Date date25 = instant20.toDate();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.millisOfDay();
        org.joda.time.DurationField durationField32 = gJChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.secondOfMinute();
        int int34 = instant20.get(dateTimeField33);
        org.joda.time.Chronology chronology35 = instant20.getChronology();
        boolean boolean36 = instant9.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Instant instant37 = instant20.toInstant();
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant39.withDurationAdded(readableDuration40, 0);
        java.util.Date date43 = instant39.toDate();
        long long44 = instant39.getMillis();
        org.joda.time.Instant instant45 = new org.joda.time.Instant((java.lang.Object) instant39);
        org.joda.time.Instant instant47 = instant45.minus((long) (short) 1);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Instant instant49 = instant47.plus(readableDuration48);
        boolean boolean50 = instant20.isAfter((org.joda.time.ReadableInstant) instant49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime23 and instant20", (mutableDateTime23.compareTo(instant20) == 0) == mutableDateTime23.equals(instant20));
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3390");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        java.util.Date date14 = instant13.toDate();
        java.lang.String str15 = instant13.toString();
        boolean boolean16 = instant13.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime17 = instant13.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = julianChronology20.getZone();
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology24.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = instant13.toMutableDateTime((org.joda.time.Chronology) julianChronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime17", (instant13.compareTo(mutableDateTime17) == 0) == instant13.equals(mutableDateTime17));
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3391");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.util.Date date7 = instant6.toDate();
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.plus(readableDuration10);
        java.lang.String str12 = instant9.toString();
        boolean boolean13 = instant6.isAfter((org.joda.time.ReadableInstant) instant9);
        boolean boolean15 = instant6.isBefore(3129100L);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.plus(readableDuration18);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(1L);
        boolean boolean22 = instant17.isEqual((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = instant21.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField29 = julianChronology28.centuries();
        java.lang.String str30 = julianChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology28.yearOfEra();
        org.joda.time.DurationField durationField32 = julianChronology28.months();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology35.minuteOfDay();
        boolean boolean37 = julianChronology28.equals((java.lang.Object) dateTimeField36);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology28.secondOfMinute();
        org.joda.time.DurationField durationField39 = julianChronology28.weekyears();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology41 = julianChronology28.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfDay();
        boolean boolean43 = instant21.equals((java.lang.Object) dateTimeField42);
        boolean boolean44 = instant6.isAfter((org.joda.time.ReadableInstant) instant21);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant47 = instant6.withDurationAdded(readableDuration45, 14400000);
        org.joda.time.MutableDateTime mutableDateTime48 = instant6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.DateTimeZone dateTimeZone52 = gJChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = gJChronology51.getZone();
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone55, (org.joda.time.ReadableInstant) instant57);
        java.lang.String str59 = instant57.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.dayOfYear();
        org.joda.time.Instant instant66 = gJChronology62.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant66.minus(readableDuration67);
        org.joda.time.Instant instant71 = instant68.withDurationAdded((-12219292800000L), 0);
        int int72 = instant57.compareTo((org.joda.time.ReadableInstant) instant68);
        long long73 = instant57.getMillis();
        long long74 = instant57.getMillis();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Instant instant77 = instant57.withDurationAdded(readableDuration75, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Instant instant79 = instant57.plus(readableDuration78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = instant57.isSupported(dateTimeFieldType80);
        org.joda.time.Instant instant83 = instant57.minus((long) 4200000);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology86 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField87 = julianChronology86.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.chrono.GJChronology gJChronology90 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone88, readableInstant89);
        org.joda.time.DateTimeZone dateTimeZone91 = gJChronology90.getZone();
        org.joda.time.DateTimeField dateTimeField92 = gJChronology90.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField93 = gJChronology90.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone94 = gJChronology90.getZone();
        org.joda.time.Chronology chronology95 = julianChronology86.withZone(dateTimeZone94);
        org.joda.time.DurationField durationField96 = julianChronology86.minutes();
        org.joda.time.DateTime dateTime97 = instant83.toDateTime((org.joda.time.Chronology) julianChronology86);
        boolean boolean98 = instant83.isEqualNow();
        boolean boolean99 = instant6.isAfter((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime48", (instant6.compareTo(mutableDateTime48) == 0) == instant6.equals(mutableDateTime48));
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3392");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant6.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology17 = julianChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.minuteOfHour();
        org.joda.time.DurationField durationField20 = julianChronology14.weeks();
        org.joda.time.DurationField durationField21 = julianChronology14.days();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology14.dayOfMonth();
        org.joda.time.DurationField durationField23 = julianChronology14.days();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField25 = julianChronology14.months();
        org.joda.time.DateTime dateTime26 = instant10.toDateTime((org.joda.time.Chronology) julianChronology14);
        long long30 = julianChronology14.add((-9044280000349L), 36000029L, (-1));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime26", (instant6.compareTo(dateTime26) == 0) == instant6.equals(dateTime26));
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3393");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant39 = instant27.plus((long) 1200);
        org.joda.time.Instant instant41 = instant27.plus((-12242483999903L));
        org.joda.time.Instant instant42 = instant27.toInstant();
        boolean boolean44 = instant42.isEqual((-70955802890L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime37", (instant42.compareTo(dateTime37) == 0) == instant42.equals(dateTime37));
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3394");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.minuteOfHour();
        org.joda.time.DurationField durationField9 = gJChronology2.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField6, durationField9, and durationField6", !(durationField6.compareTo(durationField9) == 0) || (Math.signum(durationField6.compareTo(durationField6)) == Math.signum(durationField9.compareTo(durationField6))));
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3395");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone9);
        boolean boolean13 = julianChronology11.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology14 = julianChronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology16 = julianChronology11.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = julianChronology11.days();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean22 = dateTimeZone20.isFixed();
        long long24 = dateTimeZone20.previousTransition(100L);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Chronology chronology27 = julianChronology11.withZone(dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        boolean boolean29 = instant6.equals((java.lang.Object) dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = instant6.toMutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology33 = instant6.getChronology();
        org.joda.time.Instant instant34 = instant6.toInstant();
        org.joda.time.Instant instant36 = instant34.minus((-495215691L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and mutableDateTime32", (instant34.compareTo(mutableDateTime32) == 0) == instant34.equals(mutableDateTime32));
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3396");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        java.lang.String str9 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        java.lang.String str18 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.dayOfWeek();
        org.joda.time.Instant instant22 = gJChronology16.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.millisOfDay();
        org.joda.time.DurationField durationField29 = gJChronology25.halfdays();
        org.joda.time.DurationField durationField30 = gJChronology25.millis();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology33 = gJChronology25.withZone(dateTimeZone32);
        int int35 = dateTimeZone32.getStandardOffset((-12219292800000L));
        long long37 = dateTimeZone32.nextTransition((-59082429599991L));
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone32);
        boolean boolean39 = gJChronology16.equals((java.lang.Object) julianChronology38);
        org.joda.time.DurationField durationField40 = julianChronology38.days();
        org.joda.time.DateTimeZone dateTimeZone41 = julianChronology38.getZone();
        org.joda.time.Chronology chronology42 = gJChronology2.withZone(dateTimeZone41);
        org.joda.time.DurationField durationField43 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField43, durationField29, and durationField30", !(durationField43.compareTo(durationField29) == 0) || (Math.signum(durationField43.compareTo(durationField30)) == Math.signum(durationField29.compareTo(durationField30))));
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3397");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DurationField durationField11 = gJChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = instant19.toDateTime();
        java.util.Date date24 = instant19.toDate();
        boolean boolean25 = instant19.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime26 = instant19.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfYear();
        int int32 = instant19.get(dateTimeField31);
        boolean boolean33 = gJChronology9.equals((java.lang.Object) instant19);
        org.joda.time.Instant instant35 = instant19.minus(151200024L);
        org.joda.time.MutableDateTime mutableDateTime36 = instant19.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        java.lang.String str40 = gJChronology39.toString();
        org.joda.time.Chronology chronology41 = gJChronology39.withUTC();
        org.joda.time.DurationField durationField42 = gJChronology39.months();
        org.joda.time.DurationField durationField43 = gJChronology39.halfdays();
        org.joda.time.DateTime dateTime44 = mutableDateTime36.toDateTime((org.joda.time.Chronology) gJChronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime22", (instant19.compareTo(mutableDateTime22) == 0) == instant19.equals(mutableDateTime22));
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3398");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        boolean boolean8 = instant4.isEqual((long) (short) 1);
        org.joda.time.Chronology chronology9 = instant4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology12.clockhourOfDay();
        org.joda.time.Chronology chronology17 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology12.weekyear();
        org.joda.time.DurationField durationField19 = gJChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology12.getZone();
        org.joda.time.DateTime dateTime23 = instant4.toDateTime(dateTimeZone22);
        org.joda.time.Instant instant25 = instant4.minus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime23", (instant25.compareTo(dateTime23) == 0) == instant25.equals(dateTime23));
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3399");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField14 = julianChronology13.centuries();
        java.lang.String str15 = julianChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology13.yearOfEra();
        org.joda.time.DurationField durationField17 = julianChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology20.minuteOfDay();
        boolean boolean22 = julianChronology13.equals((java.lang.Object) dateTimeField21);
        org.joda.time.DateTimeField dateTimeField23 = julianChronology13.secondOfMinute();
        int int24 = julianChronology13.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        boolean boolean30 = julianChronology28.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField31 = julianChronology28.months();
        boolean boolean32 = julianChronology13.equals((java.lang.Object) julianChronology28);
        boolean boolean33 = instant8.equals((java.lang.Object) julianChronology13);
        org.joda.time.Instant instant35 = instant8.plus((-35999890L));
        org.joda.time.DateTimeZone dateTimeZone36 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.Chronology chronology40 = gJChronology39.withUTC();
        java.lang.String str41 = gJChronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology39.millisOfDay();
        org.joda.time.Chronology chronology44 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology39.clockhourOfHalfday();
        org.joda.time.Chronology chronology46 = gJChronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyear();
        boolean boolean48 = instant8.equals((java.lang.Object) chronology46);
        org.joda.time.DateTime dateTime49 = instant8.toDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant51 = instant8.plus(readableDuration50);
        org.joda.time.MutableDateTime mutableDateTime52 = instant51.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and dateTime49", (instant51.compareTo(dateTime49) == 0) == instant51.equals(dateTime49));
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3400");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DurationField durationField12 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone15.getName((-1L), locale18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        boolean boolean23 = dateTimeZone15.isStandardOffset(36000000L);
        java.lang.String str24 = dateTimeZone15.toString();
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15);
        org.joda.time.DurationField durationField26 = gJChronology25.weekyears();
        org.joda.time.DurationField durationField27 = gJChronology25.days();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str31 = dateTimeZone30.getID();
        boolean boolean32 = dateTimeZone30.isFixed();
        long long34 = dateTimeZone30.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        java.lang.String str36 = dateTimeZone30.getID();
        int int38 = dateTimeZone30.getOffsetFromLocal((long) 1);
        java.lang.String str40 = dateTimeZone30.getName((long) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology43 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = julianChronology43.minuteOfDay();
        org.joda.time.DurationField durationField45 = julianChronology43.weekyears();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        boolean boolean49 = dateTimeZone47.isFixed();
        long long51 = dateTimeZone47.previousTransition(100L);
        java.util.TimeZone timeZone52 = dateTimeZone47.toTimeZone();
        long long54 = dateTimeZone47.previousTransition(5201L);
        org.joda.time.Chronology chronology55 = julianChronology43.withZone(dateTimeZone47);
        long long57 = dateTimeZone30.getMillisKeepLocal(dateTimeZone47, 36000001L);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone30.getShortName(1644572718819L, locale59);
        org.joda.time.Chronology chronology61 = gJChronology25.withZone(dateTimeZone30);
        boolean boolean62 = dateTimeZone30.isFixed();
        org.joda.time.Chronology chronology63 = julianChronology3.withZone(dateTimeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField10 and durationField27", (durationField10.compareTo(durationField27) == 0) == durationField10.equals(durationField27));
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3401");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField11 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.DurationField durationField16 = gJChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField18 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField11, and durationField14", !(durationField18.compareTo(durationField11) == 0) || (Math.signum(durationField18.compareTo(durationField14)) == Math.signum(durationField11.compareTo(durationField14))));
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3402");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.DurationField durationField7 = julianChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.hourOfHalfday();
        org.joda.time.Chronology chronology9 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfDay();
        int int11 = julianChronology3.getMinimumDaysInFirstWeek();
        java.lang.String str12 = julianChronology3.toString();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = julianChronology3.getZone();
        org.joda.time.DurationField durationField15 = julianChronology3.months();
        long long19 = julianChronology3.add(11L, 134401582L, 82);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.Chronology chronology23 = gJChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.millisOfDay();
        org.joda.time.DurationField durationField26 = gJChronology22.halfdays();
        org.joda.time.DurationField durationField27 = gJChronology22.millis();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology30 = gJChronology22.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = gJChronology22.minutes();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology22.halfdayOfDay();
        org.joda.time.DurationField durationField33 = gJChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology22.secondOfDay();
        long long38 = gJChronology22.add((long) 9, 0L, 0);
        org.joda.time.Instant instant39 = gJChronology22.getGregorianCutover();
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-61851808789984L), 5);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant42.minus(readableDuration43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.Chronology chronology48 = gJChronology47.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = gJChronology47.clockhourOfDay();
        org.joda.time.Chronology chronology52 = gJChronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.joda.time.Chronology chronology56 = gJChronology47.withZone(dateTimeZone55);
        long long59 = dateTimeZone55.adjustOffset(1836000731L, true);
        org.joda.time.MutableDateTime mutableDateTime60 = instant42.toMutableDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology61 = julianChronology3.withZone(dateTimeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and mutableDateTime60", (instant42.compareTo(mutableDateTime60) == 0) == instant42.equals(mutableDateTime60));
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        long long4 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (short) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        boolean boolean22 = instant17.isEqual(35L);
        boolean boolean23 = instant8.isEqual((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = instant8.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, (org.joda.time.ReadableInstant) instant34);
        java.lang.String str36 = instant34.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.Instant instant43 = gJChronology39.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.minus(readableDuration44);
        org.joda.time.Instant instant48 = instant45.withDurationAdded((-12219292800000L), 0);
        int int49 = instant34.compareTo((org.joda.time.ReadableInstant) instant45);
        long long50 = instant34.getMillis();
        long long51 = instant34.getMillis();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant34.withDurationAdded(readableDuration52, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant34.plus(readableDuration55);
        int int57 = instant8.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.DateTimeZone dateTimeZone58 = instant56.getZone();
        int int59 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = instant56.isSupported(dateTimeFieldType60);
        long long62 = instant56.getMillis();
        org.joda.time.Instant instant64 = instant56.withMillis((-75600000L));
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone66.isLocalDateTimeGap(localDateTime68);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = instant71.toString(dateTimeFormatter72);
        java.lang.String str74 = instant71.toString();
        int int75 = dateTimeZone66.getOffset((org.joda.time.ReadableInstant) instant71);
        boolean boolean76 = instant71.isEqualNow();
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant79 = instant71.withDurationAdded(readableDuration77, (int) (byte) 100);
        org.joda.time.Chronology chronology80 = instant71.getChronology();
        org.joda.time.DateTime dateTime81 = instant71.toDateTimeISO();
        boolean boolean82 = instant64.isEqual((org.joda.time.ReadableInstant) instant71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and dateTime81", (instant34.compareTo(dateTime81) == 0) == instant34.equals(dateTime81));
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3404");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant8.plus(readableDuration12);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology30.dayOfYear();
        org.joda.time.Instant instant34 = gJChronology30.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.minus(readableDuration35);
        org.joda.time.Instant instant39 = instant36.withDurationAdded((-12219292800000L), 0);
        int int40 = instant25.compareTo((org.joda.time.ReadableInstant) instant36);
        long long41 = instant25.getMillis();
        org.joda.time.Instant instant42 = instant25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = instant25.getZone();
        int int44 = instant16.compareTo((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant46 = instant16.plus((-62158787999900L));
        long long47 = instant46.getMillis();
        boolean boolean48 = instant13.isBefore((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Instant instant50 = instant46.plus((-11L));
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.Instant instant53 = instant50.plus((-62159565600000L));
        long long54 = instant53.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant50 and dateTime51", (instant50.compareTo(dateTime51) == 0) == instant50.equals(dateTime51));
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3405");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.clockhourOfHalfday();
        int int6 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.hourOfDay();
        java.lang.String str8 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.centuryOfEra();
        org.joda.time.DurationField durationField10 = gJChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DurationField durationField15 = gJChronology13.millis();
        long long19 = gJChronology13.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField20 = gJChronology13.millis();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = gJChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Chronology chronology31 = gJChronology26.withZone(dateTimeZone29);
        long long34 = dateTimeZone29.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone35 = dateTimeZone29.toTimeZone();
        long long38 = dateTimeZone29.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology39 = gJChronology13.withZone(dateTimeZone29);
        boolean boolean40 = gJChronology2.equals((java.lang.Object) gJChronology13);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology13.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        boolean boolean51 = instant50.isAfterNow();
        boolean boolean52 = instant50.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone53 = instant50.getZone();
        org.joda.time.Chronology chronology54 = gJChronology13.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField55 = chronology54.months();
        org.joda.time.DurationField durationField56 = chronology54.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField55", (durationField23.compareTo(durationField55) == 0) == durationField23.equals(durationField55));
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3406");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        long long10 = dateTimeZone8.nextTransition((-12219292800000L));
        long long12 = dateTimeZone8.convertUTCToLocal((long) 1);
        java.lang.String str14 = dateTimeZone8.getNameKey((long) (byte) 100);
        java.lang.String str15 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.chrono.JulianChronology julianChronology19 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        boolean boolean21 = julianChronology19.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField22 = julianChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = julianChronology19.weeks();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology19.getZone();
        long long27 = dateTimeZone8.getMillisKeepLocal(dateTimeZone25, (-60514215257783L));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.chrono.JulianChronology julianChronology31 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone29);
        boolean boolean33 = julianChronology31.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology34 = julianChronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone35 = julianChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology31.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology31.centuryOfEra();
        org.joda.time.DurationField durationField38 = julianChronology31.years();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology41.getZone();
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology48 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, (org.joda.time.ReadableInstant) instant47);
        org.joda.time.DateTimeField dateTimeField49 = gJChronology48.clockhourOfHalfday();
        org.joda.time.Chronology chronology50 = gJChronology48.withUTC();
        org.joda.time.Instant instant51 = gJChronology48.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        boolean boolean54 = julianChronology31.equals((java.lang.Object) instant51);
        org.joda.time.Instant instant56 = instant51.minus((-435599901L));
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone57, readableInstant58);
        org.joda.time.Chronology chronology60 = gJChronology59.withUTC();
        org.joda.time.DurationField durationField61 = gJChronology59.millis();
        org.joda.time.Chronology chronology62 = gJChronology59.withUTC();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.chrono.JulianChronology julianChronology66 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone64);
        boolean boolean68 = julianChronology66.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology69 = julianChronology66.withUTC();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology71 = julianChronology66.withZone(dateTimeZone70);
        java.lang.String str72 = dateTimeZone70.getID();
        boolean boolean73 = gJChronology59.equals((java.lang.Object) str72);
        org.joda.time.DurationField durationField74 = gJChronology59.seconds();
        org.joda.time.DateTimeField dateTimeField75 = gJChronology59.weekyear();
        org.joda.time.DurationField durationField76 = gJChronology59.weeks();
        org.joda.time.Chronology chronology77 = gJChronology59.withUTC();
        org.joda.time.DateTimeField dateTimeField78 = gJChronology59.weekyearOfCentury();
        boolean boolean79 = instant56.equals((java.lang.Object) dateTimeField78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.chrono.GJChronology gJChronology82 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone80, readableInstant81);
        java.lang.String str83 = gJChronology82.toString();
        org.joda.time.Chronology chronology84 = gJChronology82.withUTC();
        org.joda.time.DurationField durationField85 = gJChronology82.months();
        org.joda.time.DurationField durationField86 = gJChronology82.weeks();
        org.joda.time.Instant instant87 = gJChronology82.getGregorianCutover();
        org.joda.time.MutableDateTime mutableDateTime88 = instant87.toMutableDateTime();
        int int89 = instant56.compareTo((org.joda.time.ReadableInstant) instant87);
        boolean boolean91 = instant87.isBefore(115200000L);
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.Instant instant94 = instant87.withDurationAdded(readableDuration92, 278);
        org.joda.time.chrono.GJChronology gJChronology95 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField76", (durationField24.compareTo(durationField76) == 0) == durationField24.equals(durationField76));
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3407");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        int int36 = dateTimeZone32.getOffsetFromLocal((-12219292800000L));
        org.joda.time.DateTime dateTime37 = instant27.toDateTime(dateTimeZone32);
        org.joda.time.Instant instant39 = instant27.plus((long) 1200);
        java.lang.String str40 = instant39.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime37", (instant27.compareTo(dateTime37) == 0) == instant27.equals(dateTime37));
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3408");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        long long4 = dateTimeZone1.convertUTCToLocal((long) ' ');
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 0);
        boolean boolean11 = instant9.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant9.withDurationAdded(readableDuration12, 4);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology18.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = instant9.toMutableDateTime((org.joda.time.Chronology) julianChronology18);
        int int26 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        long long28 = dateTimeZone1.previousTransition((-60514214946743L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime25", (instant6.compareTo(mutableDateTime25) == 0) == instant6.equals(mutableDateTime25));
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3409");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-11T09:47:27.796Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant1.plus(readableDuration3);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime2", (instant5.compareTo(dateTime2) == 0) == instant5.equals(dateTime2));
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3410");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-1L));
        java.lang.String str2 = instant1.toString();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant11.minus(readableDuration27);
        java.util.Date date29 = instant11.toDate();
        org.joda.time.Instant instant30 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant39.plus(readableDuration43);
        java.util.Date date45 = instant44.toDate();
        java.lang.String str46 = instant44.toString();
        org.joda.time.Instant instant49 = instant44.withDurationAdded((-110L), (int) (short) 0);
        boolean boolean50 = instant11.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.MutableDateTime mutableDateTime51 = instant44.toMutableDateTime();
        int int52 = instant1.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = mutableDateTime51.isSupported(dateTimeFieldType53);
        long long55 = mutableDateTime51.getMillis();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant62.minus(readableDuration63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Instant instant66 = instant64.plus(readableDuration65);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.Instant instant70 = instant66.withDurationAdded(36001582L, (int) (short) -1);
        org.joda.time.Instant instant72 = instant66.plus(0L);
        org.joda.time.DateTime dateTime73 = instant66.toDateTime();
        boolean boolean74 = mutableDateTime51.equals((java.lang.Object) dateTime73);
        org.joda.time.Instant instant76 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Instant instant78 = instant76.plus(readableDuration77);
        org.joda.time.Instant instant80 = instant78.withMillis((long) (byte) -1);
        boolean boolean81 = instant80.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone82 = instant80.getZone();
        long long84 = dateTimeZone82.nextTransition((long) 36000000);
        int int86 = dateTimeZone82.getStandardOffset((long) 5);
        boolean boolean87 = dateTimeZone82.isFixed();
        java.lang.String str89 = dateTimeZone82.getName((-48645335529L));
        java.util.Locale locale91 = null;
        java.lang.String str92 = dateTimeZone82.getName((-71992119L), locale91);
        org.joda.time.DateTime dateTime93 = mutableDateTime51.toDateTime(dateTimeZone82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime73", (instant20.compareTo(dateTime73) == 0) == instant20.equals(dateTime73));
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3411");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        long long4 = instant1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.chrono.JulianChronology julianChronology8 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField9 = julianChronology8.year();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology8.millisOfDay();
        org.joda.time.DurationField durationField11 = julianChronology8.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = chronology15.hours();
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        boolean boolean20 = julianChronology8.equals((java.lang.Object) chronology15);
        org.joda.time.DateTime dateTime21 = instant1.toDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3412");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.hourOfHalfday();
        long long8 = gJChronology2.add((-12219292800000L), (long) 0, (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = julianChronology12.minuteOfDay();
        org.joda.time.DurationField durationField14 = julianChronology12.weekyears();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean18 = dateTimeZone16.isFixed();
        long long20 = dateTimeZone16.previousTransition(100L);
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        long long23 = dateTimeZone16.previousTransition(5201L);
        org.joda.time.Chronology chronology24 = julianChronology12.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology25 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField26 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology2.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField26", Math.signum(durationField14.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField14)));
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3413");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField6 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.secondOfDay();
        long long11 = julianChronology3.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.millisOfSecond();
        org.joda.time.DurationField durationField13 = julianChronology3.eras();
        java.lang.String str14 = julianChronology3.toString();
        org.joda.time.DurationField durationField15 = julianChronology3.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField15, and durationField13", !(durationField13.compareTo(durationField15) == 0) || (Math.signum(durationField13.compareTo(durationField13)) == Math.signum(durationField15.compareTo(durationField13))));
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3414");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        boolean boolean6 = instant4.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 4);
        org.joda.time.Instant instant11 = instant9.minus((-35999991L));
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant11.withDurationAdded(readableDuration13, 895);
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime12", (instant16.compareTo(mutableDateTime12) == 0) == instant16.equals(mutableDateTime12));
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3415");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        boolean boolean8 = instant5.isAfter((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = instant17.isEqual(readableInstant23);
        boolean boolean25 = instant5.isEqual((org.joda.time.ReadableInstant) instant17);
        boolean boolean27 = instant17.isBefore((-60514215089329L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3416");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        boolean boolean22 = instant6.isBeforeNow();
        boolean boolean23 = instant6.isEqualNow();
        org.joda.time.Instant instant24 = instant6.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime9", (instant26.compareTo(mutableDateTime9) == 0) == instant26.equals(mutableDateTime9));
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3417");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        int int18 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((java.lang.Object) instant15);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((java.lang.Object) instant19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((java.lang.Object) instant20);
        org.joda.time.Instant instant23 = instant20.minus((long) ' ');
        boolean boolean24 = instant20.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime25 = instant20.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        boolean boolean27 = dateTimeZone5.equals((java.lang.Object) dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and mutableDateTime25", (instant15.compareTo(mutableDateTime25) == 0) == instant15.equals(mutableDateTime25));
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3418");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime6 = instant5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = instant5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant17.plus(readableDuration21);
        java.util.Date date23 = instant22.toDate();
        org.joda.time.Instant instant25 = instant22.plus(35L);
        int int26 = instant5.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant22.minus(readableDuration27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3419");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = gJChronology10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Chronology chronology15 = gJChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology10.getZone();
        long long18 = dateTimeZone16.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology19 = gJChronology2.withZone(dateTimeZone16);
        org.joda.time.Chronology chronology20 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField22 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology2.year();
        org.joda.time.DurationField durationField24 = gJChronology2.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField24, and durationField22", !(durationField22.compareTo(durationField24) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField24.compareTo(durationField22))));
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3420");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone18.toTimeZone();
        long long27 = dateTimeZone18.convertLocalToUTC((long) (-1), false);
        org.joda.time.Chronology chronology28 = gJChronology2.withZone(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = gJChronology2.add(readablePeriod29, (long) (byte) 0, (int) (short) 10);
        org.joda.time.DurationField durationField33 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField33, durationField4, and durationField12", !(durationField33.compareTo(durationField4) == 0) || (Math.signum(durationField33.compareTo(durationField12)) == Math.signum(durationField4.compareTo(durationField12))));
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3421");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.centuries();
        org.joda.time.DurationField durationField5 = julianChronology3.weeks();
        org.joda.time.DurationField durationField6 = julianChronology3.days();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = julianChronology3.add(readablePeriod7, 36000000L, 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.hourOfDay();
        boolean boolean18 = julianChronology3.equals((java.lang.Object) gJChronology13);
        org.joda.time.DateTimeZone dateTimeZone19 = julianChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology3.secondOfMinute();
        org.joda.time.DurationField durationField21 = julianChronology3.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField4, and durationField5", !(durationField21.compareTo(durationField4) == 0) || (Math.signum(durationField21.compareTo(durationField5)) == Math.signum(durationField4.compareTo(durationField5))));
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3422");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = julianChronology5.centuries();
        org.joda.time.Chronology chronology7 = julianChronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology5.yearOfEra();
        org.joda.time.DurationField durationField9 = julianChronology5.years();
        java.lang.String str10 = julianChronology5.toString();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 4);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean18 = dateTimeZone16.isFixed();
        long long20 = dateTimeZone16.previousTransition(100L);
        org.joda.time.chrono.JulianChronology julianChronology21 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        java.lang.String str22 = dateTimeZone16.getID();
        int int24 = dateTimeZone16.getOffsetFromLocal((long) 1);
        long long26 = dateTimeZone16.convertUTCToLocal(151199999L);
        java.lang.String str27 = dateTimeZone16.toString();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone16.getShortName((long) 100, locale29);
        long long32 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (-60514179282091L));
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        int int35 = dateTimeZone14.getStandardOffset((-59082688799647L));
        org.joda.time.Chronology chronology36 = julianChronology5.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField37 = julianChronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField6, and durationField9", !(durationField37.compareTo(durationField6) == 0) || (Math.signum(durationField37.compareTo(durationField9)) == Math.signum(durationField6.compareTo(durationField9))));
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3423");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = julianChronology3.getZone();
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = gJChronology8.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = gJChronology8.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology8.eras();
        org.joda.time.Chronology chronology12 = gJChronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology8.dayOfMonth();
        org.joda.time.DurationField durationField14 = gJChronology8.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField14, and durationField11", !(durationField11.compareTo(durationField14) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField14.compareTo(durationField11))));
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3424");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = instant26.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant26.withDurationAdded(readableDuration29, (int) '4');
        long long32 = instant26.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime28 and instant26", (mutableDateTime28.compareTo(instant26) == 0) == mutableDateTime28.equals(instant26));
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3425");
        org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = gJChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology2 = gJChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField3 = gJChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology0.dayOfYear();
        org.joda.time.DurationField durationField5 = gJChronology0.eras();
        org.joda.time.DurationField durationField6 = gJChronology0.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField6, and durationField5", !(durationField5.compareTo(durationField6) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField6.compareTo(durationField5))));
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3426");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        long long20 = instant6.getMillis();
        long long21 = instant6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone22, readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology24.dayOfYear();
        org.joda.time.Instant instant28 = gJChronology24.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant28.minus(readableDuration29);
        org.joda.time.Instant instant33 = instant30.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant30.plus(readableDuration34);
        org.joda.time.Instant instant36 = instant35.toInstant();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        int int39 = instant6.compareTo((org.joda.time.ReadableInstant) instant38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant6", (mutableDateTime9.compareTo(instant6) == 0) == mutableDateTime9.equals(instant6));
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3427");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        long long13 = instant11.getMillis();
        org.joda.time.Instant instant14 = instant11.toInstant();
        long long15 = instant11.getMillis();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant11.withDurationAdded(readableDuration16, 895);
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.minus(readableDuration20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and mutableDateTime19", (instant21.compareTo(mutableDateTime19) == 0) == instant21.equals(mutableDateTime19));
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3428");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        boolean boolean9 = instant8.isEqualNow();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        boolean boolean18 = instant8.equals((java.lang.Object) nameProvider10);
        org.joda.time.DateTime dateTime19 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone21, readableInstant22);
        org.joda.time.Chronology chronology24 = gJChronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology23.dayOfWeek();
        org.joda.time.DurationField durationField26 = gJChronology23.days();
        org.joda.time.DurationField durationField27 = gJChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology23.weekOfWeekyear();
        boolean boolean29 = dateTimeZone20.equals((java.lang.Object) dateTimeField28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime19", (instant8.compareTo(dateTime19) == 0) == instant8.equals(dateTime19));
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3429");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology22 = gJChronology14.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField23 = gJChronology14.minutes();
        org.joda.time.DurationField durationField24 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField25 = gJChronology14.weekyears();
        org.joda.time.DurationField durationField26 = gJChronology14.weeks();
        boolean boolean27 = instant8.equals((java.lang.Object) gJChronology14);
        boolean boolean29 = instant8.isAfter((long) 19);
        long long30 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.Chronology chronology34 = gJChronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology33.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Chronology chronology46 = gJChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology41.getZone();
        long long49 = dateTimeZone47.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology50 = gJChronology33.withZone(dateTimeZone47);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone47.getShortName(31799999L, locale52);
        java.util.TimeZone timeZone54 = dateTimeZone47.toTimeZone();
        java.lang.String str55 = dateTimeZone47.toString();
        org.joda.time.MutableDateTime mutableDateTime56 = instant8.toMutableDateTime(dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant8.plus(readableDuration57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime56", (mutableDateTime11.compareTo(mutableDateTime56) == 0) == mutableDateTime11.equals(mutableDateTime56));
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3430");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        long long4 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (short) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology11.dayOfYear();
        org.joda.time.Instant instant15 = gJChronology11.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.minus(readableDuration16);
        org.joda.time.Instant instant20 = instant17.withDurationAdded((-12219292800000L), 0);
        boolean boolean22 = instant17.isEqual(35L);
        boolean boolean23 = instant8.isEqual((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = instant8.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = gJChronology28.getZone();
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, (org.joda.time.ReadableInstant) instant34);
        java.lang.String str36 = instant34.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology39.dayOfYear();
        org.joda.time.Instant instant43 = gJChronology39.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.minus(readableDuration44);
        org.joda.time.Instant instant48 = instant45.withDurationAdded((-12219292800000L), 0);
        int int49 = instant34.compareTo((org.joda.time.ReadableInstant) instant45);
        long long50 = instant34.getMillis();
        long long51 = instant34.getMillis();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant54 = instant34.withDurationAdded(readableDuration52, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Instant instant56 = instant34.plus(readableDuration55);
        int int57 = instant8.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.DateTimeZone dateTimeZone58 = instant56.getZone();
        int int59 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant56);
        boolean boolean60 = instant56.isBeforeNow();
        long long61 = instant56.getMillis();
        org.joda.time.MutableDateTime mutableDateTime62 = instant56.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime63 = instant56.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant56 and mutableDateTime62", (instant56.compareTo(mutableDateTime62) == 0) == instant56.equals(mutableDateTime62));
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3431");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = instant8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        boolean boolean12 = dateTime10.isEqualNow();
        org.joda.time.Instant instant14 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant14.plus(readableDuration15);
        org.joda.time.Instant instant18 = instant16.withMillis((long) (byte) -1);
        boolean boolean19 = instant18.isEqualNow();
        org.joda.time.Instant instant21 = instant18.withMillis((-11L));
        java.util.Date date22 = instant21.toDate();
        boolean boolean23 = dateTime10.isBefore((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant25 = instant21.withMillis((long) 19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime10", (instant8.compareTo(dateTime10) == 0) == instant8.equals(dateTime10));
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3432");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DurationField durationField6 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.hourOfHalfday();
        org.joda.time.DurationField durationField9 = gJChronology2.months();
        org.joda.time.DurationField durationField10 = gJChronology2.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField6, and durationField9", !(durationField10.compareTo(durationField6) == 0) || (Math.signum(durationField10.compareTo(durationField9)) == Math.signum(durationField6.compareTo(durationField9))));
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3433");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.DurationField durationField18 = gJChronology17.seconds();
        org.joda.time.Instant instant19 = gJChronology17.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str22 = dateTimeZone21.getID();
        boolean boolean23 = dateTimeZone21.isFixed();
        long long25 = dateTimeZone21.previousTransition(100L);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        long long28 = dateTimeZone21.previousTransition(5201L);
        org.joda.time.DateTime dateTime29 = instant19.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        java.lang.String str33 = gJChronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.secondOfMinute();
        org.joda.time.DurationField durationField36 = gJChronology32.eras();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.chrono.GJChronology gJChronology39 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37, readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = gJChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.Chronology chronology44 = gJChronology39.withZone(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone48 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        boolean boolean50 = dateTimeZone49.isFixed();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone49.getName((-71999990L), locale52);
        org.joda.time.Chronology chronology54 = gJChronology32.withZone(dateTimeZone49);
        org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField56 = gJChronology55.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone57 = gJChronology55.getZone();
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone57.getShortName(129605659200001L, locale59);
        int int62 = dateTimeZone57.getOffset((-110L));
        long long64 = dateTimeZone21.getMillisKeepLocal(dateTimeZone57, (-32870900L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime29", (instant9.compareTo(dateTime29) == 0) == instant9.equals(dateTime29));
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3434");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology3.getZone();
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9);
        java.lang.String str11 = instant9.toString();
        int int12 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((java.lang.Object) instant9);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((java.lang.Object) instant13);
        org.joda.time.Instant instant16 = instant14.minus(5201L);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant20 = instant18.plus(110L);
        boolean boolean22 = instant20.isAfter((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.Chronology chronology26 = gJChronology25.withUTC();
        java.lang.String str27 = gJChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology25.dayOfWeek();
        org.joda.time.Instant instant31 = gJChronology25.getGregorianCutover();
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        boolean boolean33 = instant20.isAfter((org.joda.time.ReadableInstant) instant31);
        boolean boolean34 = instant14.isEqual((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone36.getName((-1L), locale39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone36.isLocalDateTimeGap(localDateTime41);
        boolean boolean44 = dateTimeZone36.isStandardOffset(36000000L);
        long long46 = dateTimeZone36.convertUTCToLocal(187199999L);
        org.joda.time.DateTime dateTime47 = instant14.toDateTime(dateTimeZone36);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Instant instant52 = instant49.withDurationAdded(readableDuration50, 0);
        org.joda.time.Instant instant54 = instant52.minus((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime55 = instant54.toMutableDateTime();
        org.joda.time.Chronology chronology56 = instant54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime62 = instant54.toMutableDateTime((org.joda.time.Chronology) gJChronology61);
        org.joda.time.DateTime dateTime63 = instant14.toDateTime((org.joda.time.Chronology) gJChronology61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime47", (instant9.compareTo(dateTime47) == 0) == instant9.equals(dateTime47));
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3435");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        java.lang.String str9 = instant6.toString();
        org.joda.time.Instant instant11 = instant6.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        org.joda.time.DurationField durationField18 = gJChronology14.halfdays();
        org.joda.time.DurationField durationField19 = gJChronology14.millis();
        org.joda.time.DateTime dateTime20 = instant11.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.DurationField durationField21 = gJChronology14.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime20", (instant11.compareTo(dateTime20) == 0) == instant11.equals(dateTime20));
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3436");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        org.joda.time.DateTime dateTime27 = instant26.toDateTimeISO();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime27", (instant26.compareTo(dateTime27) == 0) == instant26.equals(dateTime27));
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3437");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology7 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField8 = gJChronology2.eras();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.year();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = gJChronology2.add(readablePeriod10, (-60514215308675L), 278);
        org.joda.time.DateTimeField dateTimeField14 = gJChronology2.year();
        org.joda.time.Chronology chronology15 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField16 = gJChronology2.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField16, and durationField8", !(durationField8.compareTo(durationField16) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField16.compareTo(durationField8))));
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3438");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = gJChronology9.toString();
        org.joda.time.DurationField durationField11 = gJChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = instant19.toDateTime();
        java.util.Date date24 = instant19.toDate();
        boolean boolean25 = instant19.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime26 = instant19.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        java.lang.String str30 = gJChronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfYear();
        int int32 = instant19.get(dateTimeField31);
        boolean boolean33 = gJChronology9.equals((java.lang.Object) instant19);
        org.joda.time.DateTimeField dateTimeField34 = gJChronology9.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime22", (instant19.compareTo(mutableDateTime22) == 0) == instant19.equals(mutableDateTime22));
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3439");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology11 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone7);
        org.joda.time.Chronology chronology12 = gJChronology2.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.minus(readableDuration20);
        org.joda.time.Instant instant24 = instant21.withDurationAdded((-12219292800000L), 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = gJChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology27.getZone();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant33);
        java.lang.String str35 = instant33.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        java.lang.String str40 = gJChronology38.toString();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology38.dayOfWeek();
        org.joda.time.Instant instant44 = gJChronology38.getGregorianCutover();
        boolean boolean45 = instant33.equals((java.lang.Object) gJChronology38);
        boolean boolean46 = instant24.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Instant instant48 = instant33.minus((-61543965598418L));
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant48);
        boolean boolean50 = instant48.isEqualNow();
        boolean boolean52 = instant48.isAfter((long) 3600000);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Instant instant55 = instant48.withDurationAdded(readableDuration53, 0);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime57 = instant55.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant55 and dateTime56", (instant55.compareTo(dateTime56) == 0) == instant55.equals(dateTime56));
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3440");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeField dateTimeField10 = gJChronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology11 = gJChronology9.withUTC();
        org.joda.time.Instant instant12 = gJChronology9.getGregorianCutover();
        org.joda.time.Chronology chronology13 = gJChronology9.withUTC();
        org.joda.time.Chronology chronology14 = gJChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology9.dayOfYear();
        org.joda.time.DurationField durationField16 = gJChronology9.minutes();
        org.joda.time.DurationField durationField17 = gJChronology9.centuries();
        org.joda.time.DurationField durationField18 = gJChronology9.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField18, durationField16, and durationField17", !(durationField18.compareTo(durationField16) == 0) || (Math.signum(durationField18.compareTo(durationField17)) == Math.signum(durationField16.compareTo(durationField17))));
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3441");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant1.minus((long) 10);
        org.joda.time.Instant instant7 = instant5.withMillis(36000052L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = instant5.toString(dateTimeFormatter8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.dayOfYear();
        org.joda.time.Instant instant16 = gJChronology12.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.minus(readableDuration17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone20);
        org.joda.time.DurationField durationField23 = julianChronology22.centuries();
        org.joda.time.DurationField durationField24 = julianChronology22.weeks();
        org.joda.time.DurationField durationField25 = julianChronology22.days();
        org.joda.time.DurationField durationField26 = julianChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology22.hourOfHalfday();
        org.joda.time.Chronology chronology28 = julianChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology22.millisOfDay();
        int int30 = julianChronology22.getMinimumDaysInFirstWeek();
        java.lang.String str31 = julianChronology22.toString();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology22.yearOfEra();
        org.joda.time.DurationField durationField34 = julianChronology22.days();
        org.joda.time.DateTime dateTime35 = instant18.toDateTime((org.joda.time.Chronology) julianChronology22);
        boolean boolean36 = instant5.equals((java.lang.Object) julianChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime35", (instant16.compareTo(dateTime35) == 0) == instant16.equals(dateTime35));
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3442");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, 0);
        boolean boolean17 = instant15.isEqual((long) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant20 = instant15.withDurationAdded(readableDuration18, 4);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant23 = instant20.withDurationAdded(readableDuration21, 3600000);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone24, readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = gJChronology26.getZone();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology26.dayOfYear();
        org.joda.time.Instant instant30 = gJChronology26.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant32 = instant30.minus(readableDuration31);
        org.joda.time.Instant instant35 = instant32.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant32.plus(readableDuration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        boolean boolean51 = instant46.isEqual(35L);
        boolean boolean52 = instant32.isAfter((org.joda.time.ReadableInstant) instant46);
        boolean boolean53 = instant20.isAfter((org.joda.time.ReadableInstant) instant46);
        boolean boolean54 = instant8.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology57 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime59 = instant8.toMutableDateTime(dateTimeZone56);
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology60.secondOfMinute();
        org.joda.time.DurationField durationField62 = gJChronology60.halfdays();
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology60.getZone();
        org.joda.time.DateTimeZone dateTimeZone64 = gJChronology60.getZone();
        boolean boolean65 = instant8.equals((java.lang.Object) gJChronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime59", (instant12.compareTo(mutableDateTime59) == 0) == instant12.equals(mutableDateTime59));
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3443");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone12);
        boolean boolean16 = julianChronology14.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField17 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology14.era();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology14.secondOfDay();
        org.joda.time.DurationField durationField22 = julianChronology14.eras();
        org.joda.time.MutableDateTime mutableDateTime23 = instant9.toMutableDateTime((org.joda.time.Chronology) julianChronology14);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology14.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime23", (instant1.compareTo(mutableDateTime23) == 0) == instant1.equals(mutableDateTime23));
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3444");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Chronology chronology12 = gJChronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        boolean boolean22 = gJChronology2.equals((java.lang.Object) durationField21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField4 and durationField21", (durationField4.compareTo(durationField21) == 0) == durationField4.equals(durationField21));
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3445");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Instant instant6 = instant4.plus(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology9.getZone();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, (org.joda.time.ReadableInstant) instant15);
        java.lang.String str17 = instant15.toString();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = gJChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology20.dayOfYear();
        org.joda.time.Instant instant24 = gJChronology20.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant24.minus(readableDuration25);
        org.joda.time.Instant instant29 = instant26.withDurationAdded((-12219292800000L), 0);
        int int30 = instant15.compareTo((org.joda.time.ReadableInstant) instant26);
        long long31 = instant15.getMillis();
        org.joda.time.Instant instant32 = instant15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone33 = instant15.getZone();
        int int34 = instant6.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Instant instant36 = instant6.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.plus(readableDuration37);
        long long39 = instant36.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, (int) (short) 0);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.MutableDateTime mutableDateTime44 = instant36.toMutableDateTime(dateTimeZone42);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((java.lang.Object) mutableDateTime44);
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) mutableDateTime44, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.chrono.JulianChronology julianChronology51 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone49);
        boolean boolean53 = julianChronology51.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology54 = julianChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = julianChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = julianChronology51.minuteOfHour();
        org.joda.time.DateTime dateTime57 = mutableDateTime44.toDateTime((org.joda.time.Chronology) julianChronology51);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone58, readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = gJChronology60.getZone();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str64 = dateTimeZone63.getID();
        org.joda.time.Chronology chronology65 = gJChronology60.withZone(dateTimeZone63);
        java.lang.String str67 = dateTimeZone63.getName((long) (byte) 10);
        java.util.TimeZone timeZone68 = dateTimeZone63.toTimeZone();
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone63.getName(47520034319L, locale70);
        int int73 = dateTimeZone63.getOffsetFromLocal((-331798418L));
        org.joda.time.DateTime dateTime74 = dateTime57.toDateTime(dateTimeZone63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and mutableDateTime44", (instant36.compareTo(mutableDateTime44) == 0) == instant36.equals(mutableDateTime44));
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3446");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.chrono.JulianChronology julianChronology7 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField8 = julianChronology7.year();
        org.joda.time.DateTimeField dateTimeField9 = julianChronology7.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = gJChronology12.getZone();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone13.getName((long) 36000000, locale15);
        int int18 = dateTimeZone13.getOffset((long) ' ');
        org.joda.time.Chronology chronology19 = julianChronology7.withZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime20 = instant3.toMutableDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        java.lang.String str24 = dateTimeZone22.getNameKey(35L);
        int int26 = dateTimeZone22.getOffset((long) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = gJChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = gJChronology29.getZone();
        int int37 = dateTimeZone35.getStandardOffset((long) (byte) 0);
        java.lang.String str39 = dateTimeZone35.getShortName((long) (short) -1);
        long long41 = dateTimeZone22.getMillisKeepLocal(dateTimeZone35, (long) 1969);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone22.getShortName((-6211224791991830L), locale43);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime20.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime20.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime45", (instant1.compareTo(mutableDateTime45) == 0) == instant1.equals(mutableDateTime45));
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3447");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.Instant instant9 = gJChronology5.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant9.minus(readableDuration10);
        org.joda.time.Instant instant14 = instant11.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant16 = instant11.plus(readableDuration15);
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = instant16.isAfter(readableInstant18);
        org.joda.time.Instant instant21 = instant16.withMillis(35999999L);
        org.joda.time.Instant instant23 = instant21.withMillis((-12219364800000L));
        boolean boolean25 = instant23.isAfter((-35999899L));
        org.joda.time.MutableDateTime mutableDateTime26 = instant23.toMutableDateTimeISO();
        org.joda.time.Instant instant28 = instant23.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone29, readableInstant30);
        java.lang.String str32 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology31.dayOfYear();
        java.lang.String str34 = gJChronology31.toString();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology31.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology31.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology31.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology31.yearOfEra();
        boolean boolean44 = instant23.equals((java.lang.Object) gJChronology31);
        org.joda.time.DateTimeField dateTimeField45 = gJChronology31.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and mutableDateTime26", (instant23.compareTo(mutableDateTime26) == 0) == instant23.equals(mutableDateTime26));
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3448");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology2 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = julianChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone4 = julianChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone5, readableInstant6);
        org.joda.time.Chronology chronology8 = gJChronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfWeek();
        org.joda.time.Chronology chronology10 = gJChronology7.withUTC();
        org.joda.time.DurationField durationField11 = gJChronology7.halfdays();
        org.joda.time.DateTimeZone dateTimeZone12 = gJChronology7.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.Chronology chronology16 = gJChronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.dayOfWeek();
        org.joda.time.Chronology chronology18 = gJChronology15.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.Chronology chronology21 = chronology18.withZone(dateTimeZone20);
        java.lang.String str22 = dateTimeZone20.getID();
        org.joda.time.Chronology chronology23 = gJChronology7.withZone(dateTimeZone20);
        long long25 = dateTimeZone20.convertUTCToLocal((-107999990L));
        org.joda.time.Chronology chronology26 = julianChronology2.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField27 = julianChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = julianChronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology2.minuteOfHour();
        org.joda.time.DurationField durationField31 = julianChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology2.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField11 and durationField31", (durationField11.compareTo(durationField31) == 0) == durationField11.equals(durationField31));
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3449");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.monthOfYear();
        org.joda.time.DurationField durationField11 = gJChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology2.getZone();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14);
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant18 = instant16.plus(readableDuration17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        java.lang.String str29 = instant27.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = gJChronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.dayOfYear();
        org.joda.time.Instant instant36 = gJChronology32.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Instant instant38 = instant36.minus(readableDuration37);
        org.joda.time.Instant instant41 = instant38.withDurationAdded((-12219292800000L), 0);
        int int42 = instant27.compareTo((org.joda.time.ReadableInstant) instant38);
        long long43 = instant27.getMillis();
        org.joda.time.Instant instant44 = instant27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = instant27.getZone();
        int int46 = instant18.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant48 = instant18.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant18.plus(readableDuration49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long55 = dateTimeZone53.previousTransition(0L);
        int int57 = dateTimeZone53.getStandardOffset(170401582L);
        org.joda.time.DateTime dateTime58 = instant18.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology59 = gJChronology15.withZone(dateTimeZone53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime58", (instant16.compareTo(dateTime58) == 0) == instant16.equals(dateTime58));
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3450");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant9 = instant1.withDurationAdded(0L, 1582);
        long long10 = instant9.getMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.dayOfWeek();
        org.joda.time.DurationField durationField16 = gJChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.halfdayOfDay();
        int int18 = instant9.get(dateTimeField17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.Chronology chronology22 = gJChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.millisOfDay();
        org.joda.time.DurationField durationField25 = gJChronology21.halfdays();
        org.joda.time.DurationField durationField26 = gJChronology21.millis();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology29 = gJChronology21.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField30 = gJChronology21.minutes();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology21.halfdayOfDay();
        org.joda.time.DurationField durationField32 = gJChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology21.secondOfDay();
        long long37 = gJChronology21.add((long) 9, 0L, 0);
        org.joda.time.Instant instant38 = gJChronology21.getGregorianCutover();
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        boolean boolean40 = instant9.isEqual((org.joda.time.ReadableInstant) instant38);
        boolean boolean41 = instant9.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant38 and dateTime39", (instant38.compareTo(dateTime39) == 0) == instant38.equals(dateTime39));
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3451");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.dayOfWeek();
        org.joda.time.Instant instant8 = gJChronology2.getGregorianCutover();
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Instant instant10 = instant8.toInstant();
        long long11 = instant8.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.Instant instant18 = gJChronology14.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        boolean boolean25 = julianChronology23.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology28 = julianChronology23.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField29 = julianChronology23.days();
        org.joda.time.DateTimeField dateTimeField30 = julianChronology23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str33 = dateTimeZone32.getID();
        boolean boolean34 = dateTimeZone32.isFixed();
        long long36 = dateTimeZone32.previousTransition(100L);
        java.util.TimeZone timeZone37 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.Chronology chronology39 = julianChronology23.withZone(dateTimeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone38.toTimeZone();
        boolean boolean41 = instant18.equals((java.lang.Object) dateTimeZone38);
        long long42 = instant18.getMillis();
        boolean boolean43 = instant8.isEqual((org.joda.time.ReadableInstant) instant18);
        org.joda.time.MutableDateTime mutableDateTime44 = instant18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone51, (org.joda.time.ReadableInstant) instant53);
        java.lang.String str55 = instant53.toString();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.Instant instant62 = gJChronology58.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Instant instant64 = instant62.minus(readableDuration63);
        org.joda.time.Instant instant67 = instant64.withDurationAdded((-12219292800000L), 0);
        int int68 = instant53.compareTo((org.joda.time.ReadableInstant) instant64);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Instant instant70 = instant53.minus(readableDuration69);
        java.util.Date date71 = instant53.toDate();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73);
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.dayOfYear();
        org.joda.time.Instant instant78 = gJChronology74.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Instant instant80 = instant78.minus(readableDuration79);
        org.joda.time.Instant instant83 = instant80.withDurationAdded((-12219292800000L), 0);
        boolean boolean84 = instant53.isEqual((org.joda.time.ReadableInstant) instant80);
        org.joda.time.DateTimeZone dateTimeZone85 = instant80.getZone();
        boolean boolean86 = mutableDateTime44.isAfter((org.joda.time.ReadableInstant) instant80);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Instant instant88 = instant80.minus(readableDuration87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant88 and mutableDateTime44", (instant88.compareTo(mutableDateTime44) == 0) == instant88.equals(mutableDateTime44));
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3452");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long10 = dateTimeZone8.previousTransition(0L);
        long long12 = dateTimeZone8.previousTransition(110L);
        org.joda.time.Chronology chronology13 = gJChronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant22.plus(readableDuration26);
        java.util.Date date28 = instant27.toDate();
        org.joda.time.Instant instant30 = instant27.plus(35L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.chrono.GJChronology gJChronology33 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology33.dayOfYear();
        org.joda.time.Instant instant37 = gJChronology33.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Instant instant39 = instant37.minus(readableDuration38);
        org.joda.time.Instant instant42 = instant39.withDurationAdded((-12219292800000L), 0);
        boolean boolean44 = instant39.isEqual(35L);
        org.joda.time.Instant instant45 = instant39.toInstant();
        boolean boolean47 = instant45.isBefore((long) ' ');
        boolean boolean48 = instant30.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone49 = instant30.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology52.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime55 = instant30.toMutableDateTime((org.joda.time.Chronology) gJChronology52);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.DateTimeField dateTimeField57 = gJChronology56.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime55", (instant30.compareTo(mutableDateTime55) == 0) == instant30.equals(mutableDateTime55));
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3453");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfYear();
        java.lang.String str5 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = gJChronology2.getZone();
        int int9 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = gJChronology2.halfdays();
        org.joda.time.Instant instant11 = gJChronology2.getGregorianCutover();
        boolean boolean12 = instant11.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = instant11.toMutableDateTime(dateTimeZone13);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant16.withDurationAdded(readableDuration17, 0);
        org.joda.time.Instant instant21 = instant19.minus((long) (short) -1);
        boolean boolean23 = instant19.isEqual((long) (short) 1);
        java.lang.String str24 = instant19.toString();
        org.joda.time.Instant instant27 = instant19.withDurationAdded((-1L), 5);
        boolean boolean28 = instant27.isEqualNow();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant31 = instant27.withDurationAdded(readableDuration29, 32400000);
        int int32 = instant11.compareTo((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone33, readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = gJChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = gJChronology35.getZone();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology42 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, (org.joda.time.ReadableInstant) instant41);
        java.lang.String str43 = instant41.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone44, readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = gJChronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology46.dayOfYear();
        org.joda.time.Instant instant50 = gJChronology46.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.minus(readableDuration51);
        org.joda.time.Instant instant55 = instant52.withDurationAdded((-12219292800000L), 0);
        int int56 = instant41.compareTo((org.joda.time.ReadableInstant) instant52);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Instant instant58 = instant41.minus(readableDuration57);
        java.util.Date date59 = instant41.toDate();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.chrono.GJChronology gJChronology62 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone60, readableInstant61);
        org.joda.time.DateTimeZone dateTimeZone63 = gJChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology62.dayOfYear();
        org.joda.time.Instant instant66 = gJChronology62.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Instant instant68 = instant66.minus(readableDuration67);
        org.joda.time.Instant instant71 = instant68.withDurationAdded((-12219292800000L), 0);
        boolean boolean72 = instant41.isEqual((org.joda.time.ReadableInstant) instant68);
        org.joda.time.DateTimeZone dateTimeZone73 = instant68.getZone();
        boolean boolean74 = instant68.isBeforeNow();
        int int75 = instant11.compareTo((org.joda.time.ReadableInstant) instant68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and instant11", (mutableDateTime14.compareTo(instant11) == 0) == mutableDateTime14.equals(instant11));
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3454");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        boolean boolean12 = instant6.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime13 = instant6.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        java.lang.String str17 = gJChronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfYear();
        int int19 = instant6.get(dateTimeField18);
        boolean boolean21 = instant6.isBefore((-1L));
        long long22 = instant6.getMillis();
        java.lang.String str23 = instant6.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = instant6.getZone();
        boolean boolean25 = instant6.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone26 = instant6.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.chrono.JulianChronology julianChronology30 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone28);
        boolean boolean32 = julianChronology30.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology33 = julianChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = julianChronology30.era();
        org.joda.time.DateTimeField dateTimeField35 = julianChronology30.minuteOfHour();
        long long39 = julianChronology30.add(1L, (-421199991L), 0);
        org.joda.time.Chronology chronology40 = julianChronology30.withUTC();
        org.joda.time.DurationField durationField41 = chronology40.weeks();
        org.joda.time.DateTime dateTime42 = instant6.toDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = dateTime42.isAfter(readableInstant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3455");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant6.minus(readableDuration7);
        org.joda.time.Instant instant11 = instant8.withDurationAdded((-12219292800000L), 0);
        boolean boolean13 = instant8.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.Chronology chronology17 = gJChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology16.monthOfYear();
        boolean boolean24 = instant8.equals((java.lang.Object) dateTimeField23);
        org.joda.time.Instant instant26 = instant8.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = instant26.isSupported(dateTimeFieldType27);
        org.joda.time.Instant instant30 = instant26.withMillis(36000001L);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) instant26);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField36 = julianChronology35.year();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology35.millisOfDay();
        org.joda.time.DurationField durationField38 = julianChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.clockhourOfDay();
        org.joda.time.DurationField durationField40 = julianChronology35.months();
        org.joda.time.DateTimeField dateTimeField41 = julianChronology35.secondOfMinute();
        org.joda.time.DateTime dateTime42 = instant31.toDateTime((org.joda.time.Chronology) julianChronology35);
        org.joda.time.DurationField durationField43 = julianChronology35.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and dateTime42", (instant26.compareTo(dateTime42) == 0) == instant26.equals(dateTime42));
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3456");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.Chronology chronology5 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField6 = gJChronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.era();
        int int8 = gJChronology2.getMinimumDaysInFirstWeek();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = instant9.isBefore(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Chronology chronology19 = gJChronology14.withZone(dateTimeZone17);
        java.lang.String str21 = dateTimeZone17.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology22 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone17);
        org.joda.time.Chronology chronology23 = julianChronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) (-1));
        long long31 = dateTimeZone25.convertLocalToUTC((long) 4, true, (long) (short) -1);
        long long33 = dateTimeZone25.convertUTCToLocal((-35999900L));
        org.joda.time.Chronology chronology34 = julianChronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology37.getZone();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, (org.joda.time.ReadableInstant) instant43);
        java.lang.String str45 = instant43.toString();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant48 = instant43.withDurationAdded(readableDuration46, (int) (byte) -1);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((-35997494L));
        org.joda.time.MutableDateTime mutableDateTime52 = instant51.toMutableDateTimeISO();
        boolean boolean53 = instant43.isAfter((org.joda.time.ReadableInstant) mutableDateTime52);
        boolean boolean54 = instant9.isAfter((org.joda.time.ReadableInstant) instant43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant51 and mutableDateTime52", (instant51.compareTo(mutableDateTime52) == 0) == instant51.equals(mutableDateTime52));
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3457");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = gJChronology2.halfdays();
        org.joda.time.DurationField durationField7 = gJChronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.Chronology chronology10 = gJChronology2.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField11 = gJChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField13 = gJChronology2.centuries();
        org.joda.time.DurationField durationField14 = gJChronology2.days();
        org.joda.time.Instant instant15 = gJChronology2.getGregorianCutover();
        org.joda.time.Instant instant16 = instant15.toInstant();
        boolean boolean18 = instant16.isAfter((long) 1970);
        org.joda.time.Instant instant20 = instant16.minus(25200L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.DurationField durationField25 = julianChronology24.centuries();
        org.joda.time.DurationField durationField26 = julianChronology24.weeks();
        org.joda.time.DurationField durationField27 = julianChronology24.days();
        java.lang.String str28 = julianChronology24.toString();
        org.joda.time.DateTimeField dateTimeField29 = julianChronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = julianChronology24.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = julianChronology24.yearOfEra();
        java.lang.String str32 = julianChronology24.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = instant20.toMutableDateTime((org.joda.time.Chronology) julianChronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField27", (durationField14.compareTo(durationField27) == 0) == durationField14.equals(durationField27));
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3458");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.Chronology chronology30 = gJChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology29.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology29.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = instant8.toMutableDateTime((org.joda.time.Chronology) gJChronology29);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology40 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = julianChronology40.minuteOfDay();
        org.joda.time.DurationField durationField42 = julianChronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = julianChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = julianChronology40.year();
        org.joda.time.DurationField durationField45 = julianChronology40.seconds();
        org.joda.time.DateTimeField dateTimeField46 = julianChronology40.year();
        org.joda.time.DateTime dateTime47 = mutableDateTime37.toDateTime((org.joda.time.Chronology) julianChronology40);
        org.joda.time.DateTimeField dateTimeField48 = julianChronology40.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime37", (instant8.compareTo(mutableDateTime37) == 0) == instant8.equals(mutableDateTime37));
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3459");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField4 = gJChronology2.millis();
        long long8 = gJChronology2.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField9 = gJChronology2.millis();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology2.clockhourOfHalfday();
        org.joda.time.Instant instant12 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Chronology chronology20 = gJChronology15.withZone(dateTimeZone18);
        java.lang.String str22 = dateTimeZone18.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField24 = julianChronology23.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = julianChronology23.getZone();
        org.joda.time.MutableDateTime mutableDateTime26 = instant12.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone27, readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = gJChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology29.dayOfYear();
        org.joda.time.Instant instant33 = gJChronology29.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime36 = instant33.toMutableDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime36.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone38, readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = gJChronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology40.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology40.dayOfYear();
        org.joda.time.Instant instant44 = gJChronology40.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Instant instant46 = instant44.minus(readableDuration45);
        org.joda.time.Instant instant49 = instant46.withDurationAdded((-12219292800000L), 0);
        boolean boolean51 = instant46.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.chrono.GJChronology gJChronology54 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone52, readableInstant53);
        org.joda.time.Chronology chronology55 = gJChronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology54.millisOfDay();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = gJChronology54.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology54.monthOfYear();
        boolean boolean62 = instant46.equals((java.lang.Object) dateTimeField61);
        org.joda.time.Instant instant64 = instant46.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = instant64.isSupported(dateTimeFieldType65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = instant64.isSupported(dateTimeFieldType67);
        org.joda.time.Instant instant71 = instant64.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.chrono.GJChronology gJChronology74 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone72, readableInstant73);
        org.joda.time.DateTimeZone dateTimeZone75 = gJChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gJChronology74.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = gJChronology74.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone78 = gJChronology74.getZone();
        java.lang.String str79 = dateTimeZone78.getID();
        long long81 = dateTimeZone78.nextTransition((long) 10);
        long long83 = dateTimeZone78.nextTransition((-35999900L));
        java.lang.String str85 = dateTimeZone78.getNameKey((long) 1582);
        org.joda.time.MutableDateTime mutableDateTime86 = instant71.toMutableDateTime(dateTimeZone78);
        boolean boolean87 = mutableDateTime36.isAfter((org.joda.time.ReadableInstant) instant71);
        int int88 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant71 and mutableDateTime86", (instant71.compareTo(mutableDateTime86) == 0) == instant71.equals(mutableDateTime86));
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3460");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        java.lang.String str29 = instant26.toString();
        org.joda.time.Instant instant31 = instant26.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.chrono.GJChronology gJChronology34 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone32, readableInstant33);
        org.joda.time.Chronology chronology35 = gJChronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology34.millisOfDay();
        org.joda.time.DurationField durationField38 = gJChronology34.halfdays();
        org.joda.time.DurationField durationField39 = gJChronology34.millis();
        org.joda.time.DateTime dateTime40 = instant31.toDateTime((org.joda.time.Chronology) gJChronology34);
        boolean boolean41 = instant31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone42 = instant31.getZone();
        boolean boolean43 = instant31.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone44 = instant31.getZone();
        org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone8, (org.joda.time.ReadableInstant) instant31, 1);
        boolean boolean47 = dateTimeZone8.isFixed();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime40", (instant31.compareTo(dateTime40) == 0) == instant31.equals(dateTime40));
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3461");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.millisOfDay();
        java.lang.String str6 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.year();
        org.joda.time.Chronology chronology8 = gJChronology2.withUTC();
        java.lang.String str9 = gJChronology2.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.parse("1970-01-01T09:59:59.999+10:00");
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.Chronology chronology15 = gJChronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.millisOfDay();
        java.lang.String str18 = gJChronology14.toString();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology14.year();
        org.joda.time.DurationField durationField20 = gJChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology14.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology14.getZone();
        boolean boolean23 = instant11.equals((java.lang.Object) dateTimeZone22);
        boolean boolean25 = instant11.isEqual((-35999968L));
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = gJChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = gJChronology28.getZone();
        int int36 = dateTimeZone34.getStandardOffset((long) (byte) 0);
        java.lang.String str38 = dateTimeZone34.getShortName((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology41 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        org.joda.time.Instant instant53 = instant50.withDurationAdded((-12219292800000L), 0);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Instant instant55 = instant50.plus(readableDuration54);
        org.joda.time.chrono.GJChronology gJChronology56 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone40, (org.joda.time.ReadableInstant) instant55);
        int int58 = dateTimeZone40.getOffset(151200000L);
        long long62 = dateTimeZone40.convertLocalToUTC(36000001L, false, (-62112218399999L));
        long long64 = dateTimeZone34.getMillisKeepLocal(dateTimeZone40, 4L);
        java.lang.String str65 = dateTimeZone40.toString();
        java.util.TimeZone timeZone66 = dateTimeZone40.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime67 = instant11.toMutableDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology68 = gJChronology2.withZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime67", (instant11.compareTo(mutableDateTime67) == 0) == instant11.equals(mutableDateTime67));
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3462");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = instant6.toDateTime();
        java.util.Date date11 = instant6.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant6.withDurationAdded(readableDuration12, 19);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone15, readableInstant16);
        org.joda.time.Chronology chronology18 = gJChronology17.withUTC();
        org.joda.time.DurationField durationField19 = gJChronology17.millis();
        long long23 = gJChronology17.add((long) '4', 0L, (int) (byte) -1);
        org.joda.time.DurationField durationField24 = gJChronology17.millis();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = gJChronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology27 = gJChronology17.withUTC();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = gJChronology17.add(readablePeriod28, (-484113670992585L), 24);
        org.joda.time.DurationField durationField32 = gJChronology17.centuries();
        boolean boolean33 = instant6.equals((java.lang.Object) gJChronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant6", (mutableDateTime9.compareTo(instant6) == 0) == mutableDateTime9.equals(instant6));
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3463");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(100);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = gJChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = gJChronology6.getZone();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, (org.joda.time.ReadableInstant) instant12);
        java.lang.String str14 = instant12.toString();
        int int15 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) instant12);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((java.lang.Object) instant16);
        org.joda.time.Instant instant19 = instant17.minus(5201L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant23 = instant21.plus(110L);
        boolean boolean25 = instant23.isAfter((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.Chronology chronology29 = gJChronology28.withUTC();
        java.lang.String str30 = gJChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology28.dayOfWeek();
        org.joda.time.Instant instant34 = gJChronology28.getGregorianCutover();
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        boolean boolean36 = instant23.isAfter((org.joda.time.ReadableInstant) instant34);
        boolean boolean37 = instant17.isEqual((org.joda.time.ReadableInstant) instant23);
        boolean boolean38 = dateTimeZone1.equals((java.lang.Object) instant17);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.Chronology chronology42 = gJChronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology41.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology41.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology41.clockhourOfHalfday();
        org.joda.time.DurationField durationField48 = gJChronology41.months();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology41.dayOfMonth();
        org.joda.time.DurationField durationField51 = gJChronology41.millis();
        org.joda.time.DateTimeField dateTimeField52 = gJChronology41.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime53 = instant17.toMutableDateTime((org.joda.time.Chronology) gJChronology41);
        org.joda.time.DateTimeField dateTimeField54 = gJChronology41.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and mutableDateTime53", (instant12.compareTo(mutableDateTime53) == 0) == instant12.equals(mutableDateTime53));
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3464");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        long long4 = instant1.getMillis();
        java.lang.String str5 = instant1.toString();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = instant7.toString(dateTimeFormatter11);
        org.joda.time.Instant instant15 = instant7.withDurationAdded(0L, 1582);
        long long16 = instant15.getMillis();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Instant instant19 = instant15.withDurationAdded(readableDuration17, (int) (short) 100);
        int int20 = instant1.compareTo((org.joda.time.ReadableInstant) instant19);
        java.lang.String str21 = instant19.toString();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant24 = instant19.withDurationAdded(readableDuration22, 24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone26);
        org.joda.time.DurationField durationField29 = julianChronology28.centuries();
        java.lang.String str30 = julianChronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = julianChronology28.getZone();
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant41.minus(readableDuration42);
        org.joda.time.Instant instant46 = instant43.withDurationAdded((-12219292800000L), 0);
        boolean boolean48 = instant43.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.chrono.GJChronology gJChronology51 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone49, readableInstant50);
        org.joda.time.Chronology chronology52 = gJChronology51.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = gJChronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField54 = gJChronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = gJChronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = gJChronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = gJChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = gJChronology51.monthOfYear();
        boolean boolean59 = instant43.equals((java.lang.Object) dateTimeField58);
        org.joda.time.Instant instant61 = instant43.withMillis(1L);
        boolean boolean62 = instant32.equals((java.lang.Object) 1L);
        org.joda.time.chrono.GJChronology gJChronology63 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone31, (org.joda.time.ReadableInstant) instant32);
        long long67 = dateTimeZone31.convertLocalToUTC((long) 24, true, 36009730L);
        org.joda.time.MutableDateTime mutableDateTime68 = instant24.toMutableDateTime(dateTimeZone31);
        java.lang.String str69 = instant24.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime68", (instant24.compareTo(mutableDateTime68) == 0) == instant24.equals(mutableDateTime68));
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3465");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2, readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = gJChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology4.dayOfYear();
        org.joda.time.Instant instant8 = gJChronology4.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = instant8.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = instant8.toDateTime();
        org.joda.time.Instant instant14 = instant8.withMillis(100L);
        boolean boolean15 = instant1.isAfter((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        java.lang.String str27 = instant25.toString();
        int int28 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((java.lang.Object) instant25);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((java.lang.Object) instant29);
        java.util.Date date31 = instant30.toDate();
        org.joda.time.Instant instant33 = instant30.withMillis((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.chrono.GJChronology gJChronology36 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone34, readableInstant35);
        org.joda.time.Chronology chronology37 = gJChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = gJChronology36.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Chronology chronology49 = gJChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = gJChronology44.getZone();
        long long52 = dateTimeZone50.nextTransition((-12219292800000L));
        org.joda.time.Chronology chronology53 = gJChronology36.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.chrono.JulianChronology julianChronology61 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone59);
        boolean boolean63 = julianChronology61.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology64 = julianChronology61.withUTC();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology66 = julianChronology61.withZone(dateTimeZone65);
        long long68 = dateTimeZone55.getMillisKeepLocal(dateTimeZone65, 10L);
        org.joda.time.Chronology chronology69 = gJChronology36.withZone(dateTimeZone65);
        long long71 = dateTimeZone65.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime72 = instant30.toMutableDateTime(dateTimeZone65);
        int int73 = instant8.compareTo((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant74 = instant8.toInstant();
        java.lang.String str75 = instant74.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant74 and mutableDateTime11", (instant74.compareTo(mutableDateTime11) == 0) == instant74.equals(mutableDateTime11));
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3466");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long6 = dateTimeZone2.convertLocalToUTC((-35999991L), true, 288097310L);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime7);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone2);
        org.joda.time.DurationField durationField10 = gJChronology9.eras();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = instant12.toString(dateTimeFormatter16);
        org.joda.time.Instant instant20 = instant12.withDurationAdded(0L, 1582);
        org.joda.time.Chronology chronology21 = instant12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology24 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = julianChronology24.minuteOfDay();
        org.joda.time.DurationField durationField26 = julianChronology24.weekyears();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str29 = dateTimeZone28.getID();
        boolean boolean30 = dateTimeZone28.isFixed();
        long long32 = dateTimeZone28.previousTransition(100L);
        java.util.TimeZone timeZone33 = dateTimeZone28.toTimeZone();
        long long35 = dateTimeZone28.previousTransition(5201L);
        org.joda.time.Chronology chronology36 = julianChronology24.withZone(dateTimeZone28);
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField38 = gJChronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.year();
        org.joda.time.DateTime dateTime40 = instant12.toDateTime((org.joda.time.Chronology) gJChronology37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forID("+10:00");
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = dateTime40.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology45 = gJChronology9.withZone(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField26", Math.signum(durationField10.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField10)));
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3467");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant32 = instant2.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant32.plus(readableDuration33);
        long long35 = instant32.getMillis();
        org.joda.time.Instant instant37 = instant32.plus((-71999990L));
        org.joda.time.Instant instant38 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = gJChronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = gJChronology41.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField44 = gJChronology41.dayOfYear();
        org.joda.time.Instant instant45 = gJChronology41.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Instant instant47 = instant45.minus(readableDuration46);
        org.joda.time.Instant instant50 = instant47.withDurationAdded((-12219292800000L), 0);
        boolean boolean52 = instant47.isEqual(35L);
        boolean boolean53 = instant38.isEqual((org.joda.time.ReadableInstant) instant47);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        boolean boolean55 = instant38.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone56, readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = gJChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField60 = gJChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = gJChronology58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = gJChronology58.getZone();
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone62, (org.joda.time.ReadableInstant) instant64);
        java.lang.String str66 = instant64.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.chrono.GJChronology gJChronology69 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone67, readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = gJChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField71 = gJChronology69.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = gJChronology69.dayOfYear();
        org.joda.time.Instant instant73 = gJChronology69.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Instant instant75 = instant73.minus(readableDuration74);
        org.joda.time.Instant instant78 = instant75.withDurationAdded((-12219292800000L), 0);
        int int79 = instant64.compareTo((org.joda.time.ReadableInstant) instant75);
        long long80 = instant64.getMillis();
        long long81 = instant64.getMillis();
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Instant instant84 = instant64.withDurationAdded(readableDuration82, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant64.plus(readableDuration85);
        int int87 = instant38.compareTo((org.joda.time.ReadableInstant) instant86);
        org.joda.time.DateTimeZone dateTimeZone88 = instant86.getZone();
        boolean boolean89 = instant86.isEqualNow();
        int int90 = instant32.compareTo((org.joda.time.ReadableInstant) instant86);
        long long91 = instant86.getMillis();
        org.joda.time.DateTime dateTime92 = instant86.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone93 = instant86.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime92", (instant11.compareTo(dateTime92) == 0) == instant11.equals(dateTime92));
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3468");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Chronology chronology4 = instant1.getChronology();
        org.joda.time.Instant instant5 = instant1.toInstant();
        org.joda.time.Instant instant7 = instant1.withMillis((-60514215257783L));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant1.withDurationAdded(readableDuration8, 100);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant15 = instant12.withDurationAdded(readableDuration13, 0);
        java.util.Date date16 = instant12.toDate();
        org.joda.time.Instant instant18 = instant12.plus((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = instant18.isSupported(dateTimeFieldType19);
        org.joda.time.Instant instant22 = instant18.withMillis(223199999L);
        boolean boolean24 = instant22.isEqual(296L);
        boolean boolean25 = instant10.isBefore((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone26, readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = gJChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology28.dayOfYear();
        org.joda.time.Instant instant32 = gJChronology28.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        long long34 = instant32.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.Chronology chronology42 = gJChronology37.withZone(dateTimeZone40);
        long long45 = dateTimeZone40.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone46 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.Instant instant50 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Instant instant52 = instant50.plus(readableDuration51);
        org.joda.time.Instant instant54 = instant52.withMillis((long) (byte) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = instant54.isSupported(dateTimeFieldType56);
        int int58 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) instant54);
        java.lang.String str59 = instant54.toString();
        java.util.Date date60 = instant54.toDate();
        boolean boolean61 = instant32.isEqual((org.joda.time.ReadableInstant) instant54);
        int int62 = instant22.compareTo((org.joda.time.ReadableInstant) instant32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant54 and dateTime55", (instant54.compareTo(dateTime55) == 0) == instant54.equals(dateTime55));
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3469");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology10 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = julianChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology10.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology15.dayOfYear();
        org.joda.time.Instant instant19 = gJChronology15.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        long long30 = dateTimeZone25.convertLocalToUTC((-35999990L), true);
        long long33 = dateTimeZone25.convertLocalToUTC((long) 9, true);
        int int35 = dateTimeZone25.getOffset((long) (-1));
        boolean boolean37 = dateTimeZone25.isStandardOffset((long) 3600000);
        org.joda.time.DateTime dateTime38 = mutableDateTime22.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology39 = julianChronology10.withZone(dateTimeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime22", (instant19.compareTo(mutableDateTime22) == 0) == instant19.equals(mutableDateTime22));
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3470");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        java.lang.String str3 = gJChronology2.toString();
        org.joda.time.Chronology chronology4 = gJChronology2.withUTC();
        org.joda.time.DurationField durationField5 = gJChronology2.months();
        org.joda.time.DurationField durationField6 = gJChronology2.weeks();
        org.joda.time.Instant instant7 = gJChronology2.getGregorianCutover();
        long long8 = instant7.getMillis();
        java.lang.String str9 = instant7.toString();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = mutableDateTime10.isSupported(dateTimeFieldType11);
        boolean boolean14 = mutableDateTime10.isEqual((-178395627617646960L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.chrono.JulianChronology julianChronology18 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone16);
        boolean boolean20 = julianChronology18.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField21 = julianChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = julianChronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = julianChronology18.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = julianChronology18.getZone();
        org.joda.time.DurationField durationField25 = julianChronology18.hours();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = julianChronology18.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone28 = julianChronology18.getZone();
        java.lang.String str29 = julianChronology18.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime10.toMutableDateTime((org.joda.time.Chronology) julianChronology18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField23", (durationField6.compareTo(durationField23) == 0) == durationField6.equals(durationField23));
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3471");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.Chronology chronology14 = gJChronology13.withUTC();
        java.lang.String str15 = gJChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology13.dayOfWeek();
        org.joda.time.Instant instant19 = gJChronology13.getGregorianCutover();
        boolean boolean20 = instant8.equals((java.lang.Object) gJChronology13);
        org.joda.time.DurationField durationField21 = gJChronology13.eras();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology13.millisOfSecond();
        org.joda.time.DurationField durationField23 = gJChronology13.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField21, durationField23, and durationField21", !(durationField21.compareTo(durationField23) == 0) || (Math.signum(durationField21.compareTo(durationField21)) == Math.signum(durationField23.compareTo(durationField21))));
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3472");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology3.era();
        org.joda.time.DateTimeField dateTimeField8 = julianChronology3.minuteOfHour();
        org.joda.time.DurationField durationField9 = julianChronology3.weeks();
        org.joda.time.DurationField durationField10 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.dayOfMonth();
        org.joda.time.DurationField durationField12 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField13 = julianChronology3.clockhourOfDay();
        org.joda.time.DurationField durationField14 = julianChronology3.weekyears();
        org.joda.time.DurationField durationField15 = julianChronology3.years();
        org.joda.time.DateTimeField dateTimeField16 = julianChronology3.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField14 and durationField15", (durationField14.compareTo(durationField15) == 0) == durationField14.equals(durationField15));
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3473");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        java.util.Date date7 = instant6.toDate();
        org.joda.time.Instant instant9 = instant6.withMillis((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) (-1));
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11);
        org.joda.time.DurationField durationField15 = gJChronology14.weeks();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DurationField durationField17 = gJChronology14.seconds();
        org.joda.time.DateTime dateTime18 = instant9.toDateTime((org.joda.time.Chronology) gJChronology14);
        org.joda.time.MutableDateTime mutableDateTime19 = instant9.toMutableDateTimeISO();
        boolean boolean20 = instant9.isEqualNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime19", (dateTime18.compareTo(mutableDateTime19) == 0) == dateTime18.equals(mutableDateTime19));
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3474");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant27 = instant8.withDurationAdded((long) '#', 278);
        org.joda.time.Instant instant30 = instant27.withDurationAdded((long) 4, (int) (short) -1);
        org.joda.time.Chronology chronology31 = instant27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField38 = julianChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = julianChronology35.secondOfDay();
        long long43 = julianChronology35.add((long) (short) 1, (long) 1, 36000000);
        org.joda.time.DateTimeField dateTimeField44 = julianChronology35.year();
        org.joda.time.DateTimeField dateTimeField45 = julianChronology35.monthOfYear();
        org.joda.time.Chronology chronology46 = julianChronology35.withUTC();
        org.joda.time.Chronology chronology47 = julianChronology35.withUTC();
        org.joda.time.DurationField durationField48 = julianChronology35.seconds();
        org.joda.time.DateTime dateTime49 = instant27.toDateTime((org.joda.time.Chronology) julianChronology35);
        org.joda.time.DurationField durationField50 = julianChronology35.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime49", (instant27.compareTo(dateTime49) == 0) == instant27.equals(dateTime49));
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3475");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        org.joda.time.Instant instant25 = instant8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.chrono.JulianChronology julianChronology29 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        boolean boolean31 = julianChronology29.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology32 = julianChronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = julianChronology29.hourOfHalfday();
        java.lang.String str34 = julianChronology29.toString();
        org.joda.time.MutableDateTime mutableDateTime35 = instant25.toMutableDateTime((org.joda.time.Chronology) julianChronology29);
        boolean boolean36 = instant25.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and mutableDateTime35", (instant25.compareTo(mutableDateTime35) == 0) == instant25.equals(mutableDateTime35));
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3476");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) 10);
        boolean boolean3 = instant1.isBefore(72320035L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant1.getZone();
        org.joda.time.DateTime dateTime5 = instant1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant1.minus(readableDuration6);
        org.joda.time.Instant instant8 = instant1.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant8", (dateTime5.compareTo(instant8) == 0) == dateTime5.equals(instant8));
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3477");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(36000001L);
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        org.joda.time.Instant instant7 = instant3.withDurationAdded((-35999105L), 85517911);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.JulianChronology julianChronology12 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone10);
        boolean boolean14 = julianChronology12.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology15 = julianChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = julianChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = julianChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = julianChronology12.secondOfMinute();
        boolean boolean22 = instant7.equals((java.lang.Object) julianChronology12);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology25 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = julianChronology25.secondOfMinute();
        long long30 = julianChronology25.add((-35999900L), 0L, (int) (byte) 10);
        org.joda.time.DateTimeField dateTimeField31 = julianChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology25.hourOfDay();
        org.joda.time.DateTime dateTime33 = instant7.toDateTime((org.joda.time.Chronology) julianChronology25);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant36 = instant7.withDurationAdded(readableDuration34, 19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant36 and dateTime33", (instant36.compareTo(dateTime33) == 0) == instant36.equals(dateTime33));
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3478");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant25 = instant19.withMillis((-12219292800000L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology28 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = julianChronology28.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone30 = julianChronology28.getZone();
        org.joda.time.Chronology chronology31 = julianChronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology28.weekyearOfCentury();
        org.joda.time.DateTime dateTime33 = instant25.toDateTime((org.joda.time.Chronology) julianChronology28);
        long long34 = instant25.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant25 and dateTime33", (instant25.compareTo(dateTime33) == 0) == instant25.equals(dateTime33));
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3479");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-59011667999903L));
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, (int) (short) 0);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant6.withDurationAdded(readableDuration7, 0);
        java.util.Date date10 = instant6.toDate();
        long long11 = instant6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone12, readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology14.getZone();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = gJChronology14.getZone();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone18, (org.joda.time.ReadableInstant) instant20);
        java.lang.String str22 = instant20.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = gJChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField27 = gJChronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = gJChronology25.dayOfYear();
        org.joda.time.Instant instant29 = gJChronology25.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant29.minus(readableDuration30);
        org.joda.time.Instant instant34 = instant31.withDurationAdded((-12219292800000L), 0);
        int int35 = instant20.compareTo((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.chrono.GJChronology gJChronology38 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone36, readableInstant37);
        org.joda.time.Chronology chronology39 = gJChronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology38.dayOfWeek();
        org.joda.time.DurationField durationField41 = gJChronology38.years();
        org.joda.time.DateTimeField dateTimeField42 = gJChronology38.weekyear();
        boolean boolean43 = instant20.equals((java.lang.Object) dateTimeField42);
        org.joda.time.Instant instant45 = instant20.withMillis(32L);
        boolean boolean46 = instant6.isEqual((org.joda.time.ReadableInstant) instant45);
        boolean boolean47 = instant1.isBefore((org.joda.time.ReadableInstant) instant45);
        long long48 = instant45.getMillis();
        org.joda.time.DateTime dateTime49 = instant45.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = instant45.isAfter(readableInstant50);
        org.joda.time.Instant instant53 = instant45.withMillis(1836000731L);
        org.joda.time.DateTime dateTime54 = instant45.toDateTimeISO();
        org.joda.time.Instant instant56 = instant45.plus(0L);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.chrono.JulianChronology julianChronology60 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone58);
        boolean boolean62 = julianChronology60.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeField dateTimeField63 = julianChronology60.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField64 = julianChronology60.weekOfWeekyear();
        org.joda.time.DurationField durationField65 = julianChronology60.weeks();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology60.yearOfEra();
        org.joda.time.DurationField durationField67 = julianChronology60.weeks();
        org.joda.time.DateTimeField dateTimeField68 = julianChronology60.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.chrono.JulianChronology julianChronology72 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone70);
        boolean boolean74 = julianChronology72.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology75 = julianChronology72.withUTC();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology77 = julianChronology72.withZone(dateTimeZone76);
        org.joda.time.DurationField durationField78 = julianChronology72.days();
        int int79 = julianChronology72.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone80 = julianChronology72.getZone();
        int int82 = dateTimeZone80.getOffsetFromLocal((-7433151155985290L));
        long long84 = dateTimeZone80.previousTransition(5201L);
        org.joda.time.Chronology chronology85 = julianChronology60.withZone(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField86 = julianChronology60.dayOfMonth();
        int int87 = instant56.get(dateTimeField86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant56 and dateTime49", (instant56.compareTo(dateTime49) == 0) == instant56.equals(dateTime49));
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3480");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.Instant instant6 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        boolean boolean24 = instant19.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.chrono.GJChronology gJChronology27 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, readableInstant26);
        org.joda.time.Chronology chronology28 = gJChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = gJChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = gJChronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = gJChronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = gJChronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = gJChronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology27.monthOfYear();
        boolean boolean35 = instant19.equals((java.lang.Object) dateTimeField34);
        org.joda.time.Instant instant37 = instant19.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = instant37.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = instant37.isSupported(dateTimeFieldType40);
        org.joda.time.Instant instant44 = instant37.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = gJChronology47.getZone();
        java.lang.String str52 = dateTimeZone51.getID();
        long long54 = dateTimeZone51.nextTransition((long) 10);
        long long56 = dateTimeZone51.nextTransition((-35999900L));
        java.lang.String str58 = dateTimeZone51.getNameKey((long) 1582);
        org.joda.time.MutableDateTime mutableDateTime59 = instant44.toMutableDateTime(dateTimeZone51);
        boolean boolean60 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Instant instant62 = instant44.plus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime9", (instant6.compareTo(mutableDateTime9) == 0) == instant6.equals(mutableDateTime9));
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3481");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.Chronology chronology7 = gJChronology2.withZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.getName((long) (byte) 10);
        java.util.TimeZone timeZone10 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone11.getName(36000001L, locale13);
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstanceUTC();
        org.joda.time.Instant instant16 = gJChronology15.getGregorianCutover();
        int int17 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        java.lang.String str29 = instant27.toString();
        int int30 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((java.lang.Object) instant27);
        org.joda.time.DateTimeZone dateTimeZone32 = instant27.getZone();
        long long34 = dateTimeZone11.getMillisKeepLocal(dateTimeZone32, (-35999968L));
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone35, readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone38 = gJChronology37.getZone();
        org.joda.time.DateTimeField dateTimeField39 = gJChronology37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = gJChronology37.dayOfYear();
        org.joda.time.Instant instant41 = gJChronology37.getGregorianCutover();
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant41.minus(readableDuration43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone45, readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = gJChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField49 = gJChronology47.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = gJChronology47.dayOfYear();
        org.joda.time.Instant instant51 = gJChronology47.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Instant instant53 = instant51.minus(readableDuration52);
        org.joda.time.Instant instant56 = instant53.withDurationAdded((-12219292800000L), 0);
        boolean boolean58 = instant53.isEqual(35L);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.chrono.GJChronology gJChronology61 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone59, readableInstant60);
        org.joda.time.Chronology chronology62 = gJChronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = gJChronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = gJChronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = gJChronology61.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField66 = gJChronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField67 = gJChronology61.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = gJChronology61.monthOfYear();
        boolean boolean69 = instant53.equals((java.lang.Object) dateTimeField68);
        org.joda.time.Instant instant71 = instant53.withMillis(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        boolean boolean73 = instant71.isSupported(dateTimeFieldType72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = instant71.isSupported(dateTimeFieldType74);
        org.joda.time.Instant instant78 = instant71.withDurationAdded(151199999L, (int) (short) 100);
        org.joda.time.Instant instant80 = instant78.withMillis(187199999L);
        int int81 = instant44.compareTo((org.joda.time.ReadableInstant) instant80);
        org.joda.time.DateTime dateTime82 = instant80.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime83 = instant80.toMutableDateTime();
        int int84 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant80);
        org.joda.time.DateTimeZone dateTimeZone85 = instant80.getZone();
        long long88 = dateTimeZone85.adjustOffset((-59003769599996L), true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant80 and dateTime82", (instant80.compareTo(dateTime82) == 0) == instant80.equals(dateTime82));
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3482");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DurationField durationField5 = julianChronology3.millis();
        org.joda.time.DurationField durationField6 = julianChronology3.years();
        org.joda.time.DurationField durationField7 = julianChronology3.hours();
        org.joda.time.Chronology chronology8 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.JulianChronology julianChronology16 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone14);
        boolean boolean18 = julianChronology16.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology19 = julianChronology16.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology21 = julianChronology16.withZone(dateTimeZone20);
        long long23 = dateTimeZone10.getMillisKeepLocal(dateTimeZone20, 10L);
        int int25 = dateTimeZone20.getStandardOffset(11L);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone20.isLocalDateTimeGap(localDateTime26);
        org.joda.time.Chronology chronology28 = julianChronology3.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        boolean boolean34 = julianChronology32.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField35 = julianChronology32.months();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone37.getName((-1L), locale40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone37.isLocalDateTimeGap(localDateTime42);
        boolean boolean45 = dateTimeZone37.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology46 = julianChronology32.withZone(dateTimeZone37);
        java.lang.String str48 = dateTimeZone37.getNameKey((long) (short) 100);
        org.joda.time.chrono.GJChronology gJChronology49 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.chrono.GJChronology gJChronology52 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone50, readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = gJChronology52.getZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str56 = dateTimeZone55.getID();
        org.joda.time.Chronology chronology57 = gJChronology52.withZone(dateTimeZone55);
        java.lang.String str59 = dateTimeZone55.getName((long) (byte) 10);
        long long62 = dateTimeZone55.convertLocalToUTC((-35999900L), false);
        long long65 = dateTimeZone55.adjustOffset((long) '#', false);
        int int67 = dateTimeZone55.getOffset((long) (byte) 10);
        long long70 = dateTimeZone55.adjustOffset((long) (byte) 1, false);
        org.joda.time.chrono.JulianChronology julianChronology71 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone55);
        int int72 = julianChronology71.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField73 = julianChronology71.year();
        org.joda.time.DateTimeField dateTimeField74 = julianChronology71.hourOfHalfday();
        boolean boolean75 = dateTimeZone37.equals((java.lang.Object) dateTimeField74);
        boolean boolean76 = dateTimeZone37.isFixed();
        org.joda.time.Chronology chronology77 = julianChronology3.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.chrono.GJChronology gJChronology80 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone78, readableInstant79);
        org.joda.time.DateTimeZone dateTimeZone81 = gJChronology80.getZone();
        org.joda.time.DateTimeField dateTimeField82 = gJChronology80.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = gJChronology80.dayOfYear();
        org.joda.time.Instant instant84 = gJChronology80.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.Instant instant86 = instant84.minus(readableDuration85);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Instant instant88 = instant86.plus(readableDuration87);
        long long89 = instant88.getMillis();
        org.joda.time.DateTimeZone dateTimeZone90 = null;
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.chrono.GJChronology gJChronology92 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone90, readableInstant91);
        org.joda.time.Chronology chronology93 = gJChronology92.withUTC();
        org.joda.time.DurationField durationField94 = gJChronology92.millis();
        org.joda.time.Chronology chronology95 = gJChronology92.withUTC();
        org.joda.time.DurationField durationField96 = gJChronology92.seconds();
        boolean boolean97 = instant88.equals((java.lang.Object) durationField96);
        boolean boolean98 = julianChronology3.equals((java.lang.Object) instant88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField94", (durationField5.compareTo(durationField94) == 0) == durationField5.equals(durationField94));
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3483");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.Instant instant6 = instant4.minus((long) (short) -1);
        boolean boolean7 = instant4.isBeforeNow();
        org.joda.time.Chronology chronology8 = instant4.getChronology();
        boolean boolean9 = instant4.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        java.lang.String str14 = gJChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology12.yearOfEra();
        org.joda.time.DurationField durationField16 = gJChronology12.minutes();
        org.joda.time.DateTime dateTime17 = instant4.toDateTime((org.joda.time.Chronology) gJChronology12);
        boolean boolean19 = instant4.isBefore((-60514215249476L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime17", (instant4.compareTo(dateTime17) == 0) == instant4.equals(dateTime17));
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3484");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.seconds();
        org.joda.time.DurationField durationField10 = julianChronology3.eras();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField10", Math.signum(durationField9.compareTo(durationField10)) == -Math.signum(durationField10.compareTo(durationField9)));
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3485");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant24 = instant19.toInstant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded((-36000000L), 0);
        org.joda.time.MutableDateTime mutableDateTime28 = instant24.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime29 = instant24.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and mutableDateTime28", (instant24.compareTo(mutableDateTime28) == 0) == instant24.equals(mutableDateTime28));
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant8.minus(readableDuration24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = instant8.toString(dateTimeFormatter26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone28, readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = gJChronology30.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Chronology chronology35 = gJChronology30.withZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getName((long) (byte) 10);
        org.joda.time.chrono.JulianChronology julianChronology38 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField39 = julianChronology38.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = julianChronology38.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        java.lang.String str47 = dateTimeZone46.getID();
        org.joda.time.Chronology chronology48 = gJChronology43.withZone(dateTimeZone46);
        java.lang.String str50 = dateTimeZone46.getName((long) (byte) 10);
        long long53 = dateTimeZone46.convertLocalToUTC((-35999900L), false);
        int int55 = dateTimeZone46.getOffsetFromLocal((long) 278);
        boolean boolean57 = dateTimeZone46.isStandardOffset((long) 4);
        org.joda.time.Chronology chronology58 = julianChronology38.withZone(dateTimeZone46);
        long long62 = dateTimeZone46.convertLocalToUTC((long) (short) 1, false, 151200000L);
        org.joda.time.MutableDateTime mutableDateTime63 = instant8.toMutableDateTime(dateTimeZone46);
        java.lang.String str65 = dateTimeZone46.getNameKey(254368512115440000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime63", (instant8.compareTo(mutableDateTime63) == 0) == instant8.equals(mutableDateTime63));
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3487");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant4 = instant1.withDurationAdded(readableDuration2, 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = instant1.toString(dateTimeFormatter5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(0L);
        long long9 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Instant instant11 = instant8.minus(readableDuration10);
        boolean boolean12 = instant1.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        java.lang.String str16 = gJChronology15.toString();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.dayOfYear();
        java.lang.String str18 = gJChronology15.toString();
        org.joda.time.DurationField durationField19 = gJChronology15.minutes();
        org.joda.time.DateTimeField dateTimeField20 = gJChronology15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        int int25 = dateTimeZone22.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology26 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone22);
        org.joda.time.Instant instant28 = new org.joda.time.Instant(1L);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        long long34 = dateTimeZone22.getMillisKeepLocal(dateTimeZone29, 35999999L);
        org.joda.time.Chronology chronology35 = gJChronology15.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime36 = instant8.toDateTime((org.joda.time.Chronology) gJChronology15);
        org.joda.time.DateTimeField dateTimeField37 = gJChronology15.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime36", (instant8.compareTo(dateTime36) == 0) == instant8.equals(dateTime36));
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3488");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1L);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1L);
        boolean boolean6 = instant1.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant8 = new org.joda.time.Instant(100L);
        boolean boolean9 = instant5.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant11 = instant8.withMillis((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone13);
        java.lang.String str17 = dateTimeZone13.getNameKey(10L);
        long long19 = dateTimeZone13.convertUTCToLocal((-12219328800000L));
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.chrono.JulianChronology julianChronology23 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone21);
        boolean boolean25 = julianChronology23.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology26 = julianChronology23.withUTC();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology28 = julianChronology23.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField29 = julianChronology23.days();
        int int30 = julianChronology23.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField31 = julianChronology23.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = julianChronology23.millisOfDay();
        boolean boolean33 = dateTimeZone13.equals((java.lang.Object) dateTimeField32);
        java.util.TimeZone timeZone34 = dateTimeZone13.toTimeZone();
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone13.getShortName((long) (-1), locale36);
        org.joda.time.MutableDateTime mutableDateTime38 = instant8.toMutableDateTime(dateTimeZone13);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant43 = instant40.withDurationAdded(readableDuration41, 0);
        boolean boolean45 = instant43.isEqual((long) 1);
        org.joda.time.Instant instant47 = instant43.withMillis(25200L);
        boolean boolean48 = mutableDateTime38.isAfter((org.joda.time.ReadableInstant) instant43);
        boolean boolean50 = instant43.isBefore((-35039992L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime38", (instant8.compareTo(mutableDateTime38) == 0) == instant8.equals(mutableDateTime38));
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3489");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField4 = julianChronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = julianChronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.chrono.GJChronology gJChronology8 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology8.dayOfYear();
        org.joda.time.Instant instant12 = gJChronology8.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime15 = instant12.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        boolean boolean17 = julianChronology3.equals((java.lang.Object) mutableDateTime15);
        boolean boolean18 = mutableDateTime15.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.chrono.GJChronology gJChronology21 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone19, readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField23 = gJChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = gJChronology21.getZone();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology28 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone25, (org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTime dateTime29 = instant27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.chrono.GJChronology gJChronology32 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone30, readableInstant31);
        org.joda.time.Chronology chronology33 = gJChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = gJChronology32.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = gJChronology32.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = gJChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = gJChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = gJChronology32.dayOfYear();
        boolean boolean39 = instant27.equals((java.lang.Object) dateTimeField38);
        org.joda.time.Chronology chronology40 = instant27.getChronology();
        boolean boolean41 = mutableDateTime15.isEqual((org.joda.time.ReadableInstant) instant27);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = gJChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = gJChronology44.dayOfYear();
        org.joda.time.Instant instant48 = gJChronology44.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Instant instant50 = instant48.minus(readableDuration49);
        java.lang.String str51 = instant48.toString();
        org.joda.time.Instant instant53 = instant48.minus((long) 36000000);
        org.joda.time.DateTimeZone dateTimeZone54 = instant48.getZone();
        org.joda.time.DateTimeZone dateTimeZone55 = instant48.getZone();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Instant instant58 = instant48.withDurationAdded(readableDuration56, 1200);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        boolean boolean61 = instant58.isBefore((long) 40);
        org.joda.time.Instant instant64 = instant58.withDurationAdded(0L, 15);
        boolean boolean65 = mutableDateTime15.isBefore((org.joda.time.ReadableInstant) instant64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and dateTime29", (instant27.compareTo(dateTime29) == 0) == instant27.equals(dateTime29));
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3490");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.Instant instant3 = instant1.plus(110L);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 0);
        org.joda.time.Instant instant10 = instant8.minus((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        boolean boolean15 = dateTimeZone12.isStandardOffset((long) 4);
        org.joda.time.DateTime dateTime16 = instant8.toDateTime(dateTimeZone12);
        boolean boolean17 = instant3.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Instant instant19 = instant3.minus(1601L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime16", (instant1.compareTo(dateTime16) == 0) == instant1.equals(dateTime16));
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3491");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        boolean boolean25 = instant8.isBefore((long) 'a');
        org.joda.time.Instant instant26 = instant8.toInstant();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((-36000001L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.chrono.JulianChronology julianChronology32 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone30);
        boolean boolean34 = julianChronology32.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology35 = julianChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = julianChronology32.era();
        org.joda.time.DateTimeField dateTimeField37 = julianChronology32.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime38 = instant28.toMutableDateTime((org.joda.time.Chronology) julianChronology32);
        int int39 = instant26.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        java.lang.Object obj40 = null;
        boolean boolean41 = instant26.equals(obj40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime38", (instant28.compareTo(mutableDateTime38) == 0) == instant28.equals(mutableDateTime38));
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3492");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone3 = gJChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField4 = gJChronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology2.getZone();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology9 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone6, (org.joda.time.ReadableInstant) instant8);
        java.lang.String str10 = instant8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone14 = gJChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField15 = gJChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = gJChronology13.dayOfYear();
        org.joda.time.Instant instant17 = gJChronology13.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.minus(readableDuration18);
        org.joda.time.Instant instant22 = instant19.withDurationAdded((-12219292800000L), 0);
        int int23 = instant8.compareTo((org.joda.time.ReadableInstant) instant19);
        long long24 = instant8.getMillis();
        long long25 = instant8.getMillis();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant8.withDurationAdded(readableDuration26, (int) (short) -1);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Instant instant30 = instant8.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = instant8.isSupported(dateTimeFieldType31);
        org.joda.time.Instant instant34 = instant8.minus((long) 4200000);
        org.joda.time.Instant instant36 = instant8.minus((-6211220191199799L));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        org.joda.time.chrono.JulianChronology julianChronology39 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = julianChronology39.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.chrono.GJChronology gJChronology43 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone41, readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = gJChronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gJChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = gJChronology43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology43.getZone();
        org.joda.time.Chronology chronology48 = julianChronology39.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = julianChronology39.era();
        org.joda.time.DurationField durationField50 = julianChronology39.halfdays();
        org.joda.time.DurationField durationField51 = julianChronology39.minutes();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone53.getName((-1L), locale56);
        long long59 = dateTimeZone53.previousTransition((long) '#');
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.chrono.JulianChronology julianChronology63 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField64 = julianChronology63.weeks();
        org.joda.time.DurationField durationField65 = julianChronology63.millis();
        org.joda.time.DateTimeField dateTimeField66 = julianChronology63.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        long long70 = julianChronology63.add(readablePeriod67, (long) 36000000, 4);
        boolean boolean71 = dateTimeZone53.equals((java.lang.Object) 36000000);
        boolean boolean72 = dateTimeZone53.isFixed();
        org.joda.time.Chronology chronology73 = julianChronology39.withZone(dateTimeZone53);
        org.joda.time.DurationField durationField74 = julianChronology39.weeks();
        org.joda.time.MutableDateTime mutableDateTime75 = instant8.toMutableDateTime((org.joda.time.Chronology) julianChronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField64 and durationField74", (durationField64.compareTo(durationField74) == 0) == durationField64.equals(durationField74));
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3493");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getOffsetFromLocal((long) ' ');
        org.joda.time.chrono.JulianChronology julianChronology5 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField6 = julianChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = julianChronology5.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = julianChronology5.getZone();
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone10, readableInstant11);
        org.joda.time.Chronology chronology13 = gJChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology12.dayOfWeek();
        org.joda.time.Chronology chronology15 = gJChronology12.withUTC();
        org.joda.time.DurationField durationField16 = gJChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone17, readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = gJChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField21 = gJChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = gJChronology19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology19.getZone();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone23, (org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = gJChronology12.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.monthOfYear();
        boolean boolean29 = dateTimeZone8.equals((java.lang.Object) chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField16", (durationField6.compareTo(durationField16) == 0) == durationField6.equals(durationField16));
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3494");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.convertLocalToUTC((-35999990L), true);
        org.joda.time.chrono.GJChronology gJChronology7 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField8 = gJChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology7.dayOfMonth();
        org.joda.time.DurationField durationField10 = gJChronology7.weeks();
        org.joda.time.DurationField durationField11 = gJChronology7.hours();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology7.hourOfHalfday();
        org.joda.time.DurationField durationField13 = gJChronology7.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField13, durationField8, and durationField10", !(durationField13.compareTo(durationField8) == 0) || (Math.signum(durationField13.compareTo(durationField10)) == Math.signum(durationField8.compareTo(durationField10))));
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3495");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.chrono.GJChronology gJChronology3 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = gJChronology3.getZone();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology3.dayOfYear();
        org.joda.time.Instant instant7 = gJChronology3.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = instant7.toDateTime();
        java.util.Date date12 = instant7.toDate();
        boolean boolean13 = instant7.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime14 = instant7.toMutableDateTimeISO();
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, (org.joda.time.ReadableInstant) instant7);
        boolean boolean17 = instant7.isAfter((-36000000L));
        long long18 = instant7.getMillis();
        org.joda.time.DateTime dateTime19 = instant7.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone20, readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = gJChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField24 = gJChronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = gJChronology22.dayOfYear();
        org.joda.time.Instant instant26 = gJChronology22.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.minus(readableDuration27);
        boolean boolean29 = instant28.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime30 = instant28.toMutableDateTime();
        java.lang.String str31 = mutableDateTime30.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone33);
        boolean boolean37 = julianChronology35.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology38 = julianChronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = julianChronology35.getZone();
        org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = gJChronology40.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = gJChronology40.add(readablePeriod42, (-12219292800000L), (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField46 = gJChronology40.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = gJChronology40.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime30.toMutableDateTime(dateTimeZone47);
        int int50 = dateTime19.compareTo((org.joda.time.ReadableInstant) mutableDateTime49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime10", (instant7.compareTo(mutableDateTime10) == 0) == instant7.equals(mutableDateTime10));
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3496");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField6 = julianChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone8.getName((-1L), locale11);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone8.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone8.isStandardOffset(36000000L);
        org.joda.time.Chronology chronology17 = julianChronology3.withZone(dateTimeZone8);
        int int19 = dateTimeZone8.getOffset((-35999900L));
        org.joda.time.chrono.JulianChronology julianChronology20 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone8);
        org.joda.time.DurationField durationField21 = julianChronology20.months();
        org.joda.time.DurationField durationField22 = julianChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField23 = julianChronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = julianChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = julianChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = julianChronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = julianChronology20.getZone();
        org.joda.time.DurationField durationField28 = julianChronology20.weekyears();
        org.joda.time.DurationField durationField29 = julianChronology20.years();
        org.joda.time.DurationField durationField30 = julianChronology20.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField28 and durationField29", (durationField28.compareTo(durationField29) == 0) == durationField28.equals(durationField29));
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3497");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.chrono.JulianChronology julianChronology3 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone1);
        boolean boolean5 = julianChronology3.equals((java.lang.Object) 1.0f);
        org.joda.time.Chronology chronology6 = julianChronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology8 = julianChronology3.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = julianChronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = julianChronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = julianChronology3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = julianChronology3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone13, readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = gJChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField17 = gJChronology15.secondOfMinute();
        org.joda.time.DurationField durationField18 = gJChronology15.days();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology15.monthOfYear();
        org.joda.time.DurationField durationField20 = gJChronology15.millis();
        org.joda.time.DurationField durationField21 = gJChronology15.weekyears();
        org.joda.time.DateTimeZone dateTimeZone22 = gJChronology15.getZone();
        org.joda.time.Chronology chronology23 = julianChronology3.withZone(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField9 and durationField18", (durationField9.compareTo(durationField18) == 0) == durationField9.equals(durationField18));
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3498");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1582-10-15T00:00:00.035Z");
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        java.lang.String str6 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.dayOfYear();
        java.lang.String str8 = gJChronology5.toString();
        org.joda.time.DateTimeField dateTimeField9 = gJChronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = gJChronology5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = gJChronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = gJChronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = gJChronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = gJChronology5.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = gJChronology5.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = instant1.toMutableDateTime(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant18 = mutableDateTime17.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3499");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone0, readableInstant1);
        org.joda.time.Chronology chronology3 = gJChronology2.withUTC();
        java.lang.String str4 = gJChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = gJChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = gJChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology2.weekyear();
        org.joda.time.Instant instant9 = gJChronology2.getGregorianCutover();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.JulianChronology julianChronology13 = org.joda.time.chrono.JulianChronology.getInstance(dateTimeZone11);
        boolean boolean15 = julianChronology13.equals((java.lang.Object) 1.0f);
        org.joda.time.DurationField durationField16 = julianChronology13.days();
        org.joda.time.DateTimeField dateTimeField17 = julianChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = julianChronology13.year();
        org.joda.time.DateTimeField dateTimeField19 = julianChronology13.halfdayOfDay();
        org.joda.time.Chronology chronology20 = julianChronology13.withUTC();
        org.joda.time.DateTime dateTime21 = instant9.toDateTime(chronology20);
        org.joda.time.Instant instant22 = instant9.toInstant();
        org.joda.time.Instant instant23 = instant9.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant23", (dateTime21.compareTo(instant23) == 0) == dateTime21.equals(instant23));
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest6.test3500");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.plus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone3, readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = gJChronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = gJChronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = gJChronology5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = gJChronology5.getZone();
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 36000000);
        org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone9, (org.joda.time.ReadableInstant) instant11);
        java.lang.String str13 = instant11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone14, readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = gJChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gJChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = gJChronology16.dayOfYear();
        org.joda.time.Instant instant20 = gJChronology16.getGregorianCutover();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.Instant instant25 = instant22.withDurationAdded((-12219292800000L), 0);
        int int26 = instant11.compareTo((org.joda.time.ReadableInstant) instant22);
        long long27 = instant11.getMillis();
        org.joda.time.Instant instant28 = instant11.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = instant11.getZone();
        int int30 = instant2.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant32 = instant2.plus((-62158787999900L));
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant35 = instant32.withDurationAdded(readableDuration33, 16);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) 10);
        boolean boolean38 = instant32.isBefore((org.joda.time.ReadableInstant) instant37);
        org.joda.time.MutableDateTime mutableDateTime39 = instant32.toMutableDateTimeISO();
        org.joda.time.Instant instant41 = instant32.withMillis((long) 28800000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant32 and mutableDateTime39", (instant32.compareTo(mutableDateTime39) == 0) == instant32.equals(mutableDateTime39));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(3176397, 2899837, 3129051, 2977538, 2995493, 2895528);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2977538 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField21 = zonedChronology12.halfdays();
        java.lang.String str22 = durationField21.getName();
        long long25 = durationField21.getMillis((long) 2979490, 2811086L);
        int int28 = durationField21.getDifference(4495734395L, (long) 3198826);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "halfdays" + "'", str22, "halfdays");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 128713968000000L + "'", long25 == 128713968000000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DurationField durationField25 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.year();
        int int29 = dateTimeField27.get((long) 630);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English", 0.0d);
        java.lang.String str3 = languageRange2.getRange();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.Object[] objArray8 = charSet7.toArray();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = charSet7.retainAll((java.util.Collection<java.lang.Character>) charSet10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        int int16 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime13.toDateTime(readableInstant17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusWeeks((int) (short) 1);
        boolean boolean21 = charSet7.remove((java.lang.Object) localDateTime20);
        java.lang.Object[] objArray22 = charSet7.toArray();
        boolean boolean23 = languageRange2.equals((java.lang.Object) objArray22);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "english" + "'", str3, "english");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType25.getField(chronology32);
        java.lang.String str34 = dateTimeField33.getName();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Country();
        java.lang.String str44 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 2, locale41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plus(readableDuration47);
        int int49 = localDateTime48.getYear();
        int[] intArray51 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime48, (long) 0);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology12.clockhourOfHalfday();
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder54.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale57 = builder56.build();
        java.util.Locale.Builder builder58 = builder56.clear();
        java.util.Locale locale59 = builder56.build();
        java.util.Locale.Builder builder61 = builder56.setLanguage("days");
        java.util.Locale.Builder builder62 = builder61.clear();
        java.util.Locale.Builder builder63 = builder61.clearExtensions();
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale.Builder builder65 = builder64.clear();
        boolean boolean66 = zonedChronology12.equals((java.lang.Object) builder65);
        java.util.Locale.Builder builder67 = builder65.clear();
        java.util.Locale.Builder builder68 = builder65.clear();
        java.util.Locale.Builder builder70 = builder68.addUnicodeLocaleAttribute("Tuesday");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder72 = builder70.setScript("2022-02-22T00:51:57.743");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T00:51:57.743 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japanese" + "'", str42, "Japanese");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 36000000]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology33.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology39 = zonedChronology33.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology33.year();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = dateTimeFieldType43.isSupported(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType43.getField(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        java.lang.String str57 = dateTimeZone54.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.chrono.ZonedChronology zonedChronology59 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone54);
        java.lang.String str61 = dateTimeZone54.getShortName(4459589293L);
        org.joda.time.Chronology chronology62 = zonedChronology33.withZone(dateTimeZone54);
        org.joda.time.Chronology chronology63 = zonedChronology12.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology12.minuteOfDay();
        int int68 = dateTimeField66.getMinimumValue((-21771348443999883L));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime5.minusYears(2);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime5.minusHours(920);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        int int45 = property44.getMinimumValue();
        java.lang.String str46 = property44.getAsText();
        org.joda.time.LocalDateTime localDateTime47 = property44.withMaximumValue();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category50, locale51);
        org.joda.time.LocalDateTime localDateTime53 = property48.setCopy("886", locale51);
        org.joda.time.LocalDateTime localDateTime54 = property48.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfEra();
        int int58 = property57.getMinimumValue();
        java.lang.String str59 = property57.getAsText();
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = property57.getAsText(locale60);
        boolean boolean62 = localDateTime54.equals((java.lang.Object) property57);
        boolean boolean63 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusWeeks(0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.days();
        org.joda.time.DurationField durationField74 = chronology72.minutes();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str79 = dateTimeZone77.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology80 = org.joda.time.chrono.ZonedChronology.getInstance(chronology72, dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology80.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean85 = dateTimeZone83.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology86 = zonedChronology80.withZone(dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology80.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology80.weekOfWeekyear();
        org.joda.time.Chronology chronology89 = zonedChronology80.withUTC();
        org.joda.time.DurationField durationField90 = zonedChronology80.seconds();
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime67, (org.joda.time.Chronology) zonedChronology80);
        int int92 = localDateTime67.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime67.withYear(2811086);
        boolean boolean95 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property96 = localDateTime67.centuryOfEra();
        org.joda.time.LocalDateTime.Property property97 = localDateTime67.minuteOfHour();
        int int98 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496029211L + "'", long3 == 4496029211L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanese" + "'", str23, "Japanese");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:53:49 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022" + "'", str61, "2022");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+10:00" + "'", str79, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 211 + "'", int92 == 211);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        int int26 = property25.getMinimumValue();
        java.lang.String str27 = property25.getAsText();
        org.joda.time.LocalDateTime localDateTime28 = property25.withMaximumValue();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.centuryOfEra();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category31, locale32);
        org.joda.time.LocalDateTime localDateTime34 = property29.setCopy("886", locale32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DurationField durationField41 = chronology39.minutes();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str46 = dateTimeZone44.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology47 = org.joda.time.chrono.ZonedChronology.getInstance(chronology39, dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology47.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology53 = zonedChronology47.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology47.year();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology47.year();
        org.joda.time.DurationField durationField57 = zonedChronology47.hours();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.yearOfEra();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.era();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays(2795574);
        int[] intArray66 = zonedChronology47.get((org.joda.time.ReadablePartial) localDateTime64, (long) 305);
        zonedChronology12.validate((org.joda.time.ReadablePartial) localDateTime34, intArray66);
        int int68 = localDateTime34.getEra();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime34.plusMonths(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 1, 36000305]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.millis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DurationField durationField23 = chronology21.minutes();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str28 = dateTimeZone26.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology21, dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology29.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean34 = dateTimeZone32.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology35 = zonedChronology29.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology29.weekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = zonedChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology29.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology42 = null;
        boolean boolean43 = dateTimeFieldType41.isSupported(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks(0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType41.getField(chronology48);
        java.lang.String str50 = dateTimeField49.getName();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.lang.String str59 = locale57.getISO3Country();
        java.lang.String str60 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, 2, locale57);
        org.joda.time.LocalDateTime.Property property61 = localDateTime54.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        int int66 = localDateTime63.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime63.toDateTime(readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.yearOfEra();
        int int72 = property71.getMinimumValue();
        boolean boolean73 = dateTime68.equals((java.lang.Object) int72);
        long long74 = property61.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime68);
        java.lang.String str75 = dateTime68.toString();
        boolean boolean76 = zonedChronology29.equals((java.lang.Object) str75);
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology29.hourOfDay();
        org.joda.time.DurationField durationField78 = zonedChronology29.halfdays();
        boolean boolean79 = zonedChronology12.equals((java.lang.Object) durationField78);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfSecond" + "'", str50, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Japanese" + "'", str58, "Japanese");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2" + "'", str60, "2");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-22T00:53:49.352+10:00" + "'", str75, "2022-02-22T00:53:49.352+10:00");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology25 = zonedChronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = zonedChronology19.add(readablePeriod28, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DurationField durationField32 = zonedChronology19.centuries();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(789, 512, 517, 791, 148, 2720, 3200000, (org.joda.time.Chronology) zonedChronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 791 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean39 = dateTimeZone37.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology40 = zonedChronology34.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology34.weekOfWeekyear();
        org.joda.time.Chronology chronology43 = zonedChronology34.withUTC();
        org.joda.time.DurationField durationField44 = zonedChronology34.seconds();
        org.joda.time.DateTimeZone dateTimeZone45 = zonedChronology34.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = dateTimeFieldType46.isSupported(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType46.getField(chronology53);
        java.lang.String str55 = dateTimeField54.getName();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.lang.String str64 = locale62.getISO3Country();
        java.lang.String str65 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, 2, locale62);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology69 = null;
        boolean boolean70 = dateTimeFieldType68.isSupported(chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusWeeks(0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType68.getField(chronology75);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str81 = dateTimeZone79.getShortName((long) 10);
        java.lang.String str82 = dateTimeZone79.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.chrono.ZonedChronology zonedChronology84 = org.joda.time.chrono.ZonedChronology.getInstance(chronology75, dateTimeZone79);
        java.lang.String str86 = dateTimeZone79.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime59, dateTimeZone79);
        org.joda.time.Chronology chronology88 = localDateTime59.getChronology();
        boolean boolean89 = dateTimeZone45.isLocalDateTimeGap(localDateTime59);
        int int90 = localDateTime59.getWeekyear();
        long long92 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime59, 1641600008010L);
        org.joda.time.LocalDateTime.Property property93 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime94 = property93.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime95 = property93.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "millisOfSecond" + "'", str55, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japanese" + "'", str63, "Japanese");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2" + "'", str65, "2");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+10:00" + "'", str81, "+10:00");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:00" + "'", str82, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+10:00" + "'", str86, "+10:00");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1645455229437L + "'", long92 == 1645455229437L);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField14 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField16 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationFieldType durationFieldType18 = durationField17.getType();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology37 = zonedChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology31.year();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology31);
        boolean boolean43 = zonedChronology31.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology31.secondOfDay();
        long long48 = zonedChronology31.add(4495618583L, 0L, 2801202);
        org.joda.time.DurationField durationField49 = zonedChronology31.seconds();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology31.dayOfMonth();
        org.joda.time.DurationField durationField52 = durationFieldType18.getField((org.joda.time.Chronology) zonedChronology31);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 4495618583L + "'", long48 == 4495618583L);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = zonedChronology12.add(readablePeriod27, 1645454961730L, 2803852);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645454961730L + "'", long30 == 1645454961730L);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(70001L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        int int8 = localDateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        int int14 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime11.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        int int28 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime11.millisOfSecond();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = property30.getAsText(locale31);
        boolean boolean35 = property9.equals((java.lang.Object) locale31);
        org.joda.time.LocalDateTime localDateTime36 = property9.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusMillis((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str47 = dateTimeFieldType46.getName();
        int int48 = localDateTime40.indexOf(dateTimeFieldType46);
        boolean boolean49 = localDateTime36.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime2.property(dateTimeFieldType46);
        java.lang.String str51 = dateTimeFieldType46.toString();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uce90\ub098\ub2e4" + "'", str33, "\uce90\ub098\ub2e4");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "683" + "'", str34, "683");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "millisOfSecond" + "'", str47, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfSecond" + "'", str51, "millisOfSecond");
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray14 = new java.lang.String[] { "886", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-21T14:46:27.523", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap19);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.parse("days");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap25);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str33 = locale29.getExtension('u');
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category35, locale36);
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale36.getDisplayLanguage(locale40);
        java.lang.String str44 = locale40.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(locale45);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category47, locale48);
        java.lang.String str50 = locale48.toLanguageTag();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.US;
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale62 = builder61.build();
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale67 = locale64.stripExtensions();
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder69.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale72 = builder71.build();
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.lang.String str77 = locale75.getDisplayCountry(locale76);
        java.util.Locale locale78 = locale75.stripExtensions();
        java.lang.String str79 = locale75.getDisplayCountry();
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale27, locale29, locale34, locale40, locale45, locale48, locale51, locale53, locale54, locale57, locale62, locale67, locale68, locale72, locale73, locale75 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale locale83 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList81, filteringMode84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale86 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Japanese" + "'", str30, "Japanese");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en-CA" + "'", str38, "en-CA");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en-CA" + "'", str42, "en-CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English" + "'", str43, "English");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Canada" + "'", str44, "Canada");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en-CA" + "'", str50, "en-CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str55, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode84.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList85);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = zonedChronology12.get(readablePeriod22, 1645454956480L, 1645455142077L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.lang.String str5 = dateTimeZone2.getName((-35999999L), locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        boolean boolean30 = dateTimeZone2.isLocalDateTimeGap(localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        int int37 = localDateTime35.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.weekOfWeekyear();
        int int46 = property45.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime48 = property45.setCopy(4);
        int int49 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks(0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.days();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str61 = dateTimeZone59.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology62 = org.joda.time.chrono.ZonedChronology.getInstance(chronology54, dateTimeZone59);
        boolean boolean64 = zonedChronology62.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField65 = zonedChronology62.centuries();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology62.yearOfEra();
        int int69 = dateTimeField67.get(36000012L);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.lang.String str72 = locale70.getDisplayCountry(locale71);
        java.util.Locale locale73 = locale70.stripExtensions();
        java.lang.String str74 = locale70.getDisplayCountry();
        java.util.Locale locale75 = locale70.stripExtensions();
        int int76 = dateTimeField67.getMaximumTextLength(locale70);
        java.lang.String str77 = dateTimeField40.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, locale70);
        java.lang.String str78 = locale70.toLanguageTag();
        java.lang.String str79 = dateTimeZone2.getShortName(1645455025884L, locale70);
        java.util.Set<java.lang.String> strSet80 = locale70.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str23, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "25" + "'", str77, "25");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "de" + "'", str78, "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+10:00" + "'", str79, "+10:00");
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DurationFieldType durationFieldType7 = durationField6.getType();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.Object[] objArray10 = charSet9.toArray();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        boolean boolean13 = charSet9.retainAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        boolean boolean17 = locale14.hasExtensions();
        boolean boolean18 = charSet12.remove((java.lang.Object) boolean17);
        boolean boolean19 = charSet12.isEmpty();
        boolean boolean21 = charSet12.contains((java.lang.Object) "2");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        org.joda.time.DurationField durationField35 = zonedChronology34.weeks();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology34.dayOfWeek();
        org.joda.time.DurationField durationField38 = zonedChronology34.years();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology34.clockhourOfHalfday();
        boolean boolean40 = charSet12.contains((java.lang.Object) zonedChronology34);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology34.hourOfDay();
        boolean boolean42 = durationFieldType7.isSupported((org.joda.time.Chronology) zonedChronology34);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology34.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology34.weekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        java.lang.String str52 = dateTimeZone49.getID();
        java.lang.String str53 = dateTimeZone49.getID();
        java.lang.String str55 = dateTimeZone49.getName((long) 2);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfMonth();
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = new java.util.Locale("462", "", "");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category58, locale62);
        java.util.Locale locale65 = java.util.Locale.getDefault(category58);
        java.lang.String str66 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, locale65);
        java.lang.String str67 = locale65.getCountry();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale62.toString(), "462");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "462");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        boolean boolean13 = charSet4.contains((java.lang.Object) "2");
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        org.joda.time.DurationField durationField27 = zonedChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology26.dayOfWeek();
        org.joda.time.DurationField durationField30 = zonedChronology26.years();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology26.clockhourOfHalfday();
        boolean boolean32 = charSet4.contains((java.lang.Object) zonedChronology26);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology26.millisOfDay();
        long long36 = dateTimeField34.remainder(1645454911058L);
        long long38 = dateTimeField34.roundHalfCeiling(2928178000L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2928178000L + "'", long38 == 2928178000L);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        boolean boolean10 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        int int11 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withYear(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology20 = zonedChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = dateTimeField22.getLeapDurationField();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = locale24.stripExtensions();
        int int28 = dateTimeField22.getMaximumShortTextLength(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(locale29);
        java.lang.String str31 = locale27.getDisplayVariant(locale29);
        boolean boolean32 = locale29.hasExtensions();
        java.lang.String str33 = locale29.getScript();
        java.util.Locale.setDefault(category0, locale29);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType16.getField(chronology23);
        java.lang.String str25 = dateTimeField24.getName();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.lang.String str34 = locale32.getISO3Country();
        java.lang.String str35 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, 2, locale32);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        boolean boolean40 = dateTimeFieldType38.isSupported(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType38.getField(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        java.lang.String str52 = dateTimeZone49.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance(chronology45, dateTimeZone49);
        java.lang.String str56 = dateTimeZone49.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minus(readableDuration59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.minusMillis(549);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withSecondOfMinute(2951649);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2951649 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str33, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2" + "'", str35, "2");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int22 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        int int23 = localDateTime19.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minusYears(2833899);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.withYearOfEra(2841383);
        java.util.Locale locale31 = new java.util.Locale("und", "324");
        java.lang.String str32 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 214, locale31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime19.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertEquals(locale31.toString(), "und_324");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "214" + "'", str32, "214");
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.year();
        java.lang.String str22 = zonedChronology13.toString();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology37.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        java.lang.String str51 = dateTimeZone48.getID();
        long long54 = dateTimeZone48.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.Chronology chronology55 = zonedChronology37.withZone(dateTimeZone48);
        org.joda.time.chrono.ZonedChronology zonedChronology56 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology13, dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) 2964697000L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str22, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-35999999L) + "'", long54 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(zonedChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime61.getZone();
        long long66 = dateTimeZone63.adjustOffset((long) 3225462, false);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str39, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645368830051L + "'", long62 == 1645368830051L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3225462L + "'", long66 == 3225462L);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int2 = timeZone0.getRawOffset();
        java.util.TimeZone.setDefault(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeZone6.getName((-35999999L), locale8);
        java.util.TimeZone timeZone10 = dateTimeZone6.toTimeZone();
        boolean boolean11 = timeZone0.hasSameRules(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        int int5 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(52);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDateTime3.toDateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minus(readableDuration12);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays(2795574);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.era();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DurationField durationField23 = durationFieldType9.getField((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        int int28 = property27.getMinimumValue();
        java.lang.String str29 = property27.getAsText();
        org.joda.time.LocalDateTime localDateTime30 = property27.withMaximumValue();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category33, locale34);
        org.joda.time.LocalDateTime localDateTime36 = property31.setCopy("886", locale34);
        org.joda.time.LocalDateTime localDateTime37 = property31.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        int int41 = property40.getMinimumValue();
        java.lang.String str42 = property40.getAsText();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = property40.getAsText(locale43);
        boolean boolean45 = localDateTime37.equals((java.lang.Object) property40);
        int[] intArray47 = zonedChronology22.get((org.joda.time.ReadablePartial) localDateTime37, 1641600008010L);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType48.getField(chronology55);
        java.lang.String str57 = dateTimeField56.getName();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusWeeks(0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.lang.String str66 = locale64.getISO3Country();
        java.lang.String str67 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 2, locale64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime61.yearOfEra();
        org.joda.time.Chronology chronology69 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property70 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = localDateTime71.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022" + "'", str44, "2022");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2022, 1, 8, 36008010]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "millisOfSecond" + "'", str57, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str65, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2" + "'", str67, "2");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        int int31 = localDateTime25.getDayOfYear();
        int int32 = localDateTime25.size();
        int[] intArray34 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime25, 4495608823L);
        org.joda.time.LocalDateTime.Property property35 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime25.dayOfYear();
        java.util.Locale locale37 = null;
        int int38 = property36.getMaximumShortTextLength(locale37);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 2, 22, 38808823]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField14 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DurationField durationField19 = zonedChronology12.months();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = dateTimeFieldType16.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType16.getField(chronology23);
        java.lang.String str25 = dateTimeField24.getName();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.lang.String str34 = locale32.getISO3Country();
        java.lang.String str35 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, 2, locale32);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        boolean boolean40 = dateTimeFieldType38.isSupported(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType38.getField(chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        java.lang.String str52 = dateTimeZone49.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance(chronology45, dateTimeZone49);
        java.lang.String str56 = dateTimeZone49.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minus(readableDuration59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks(0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        long long71 = property70.remainder();
        int int72 = property70.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime73 = property70.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime74 = property70.roundHalfFloorCopy();
        int int75 = dateTimeField67.getMinimumValue((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withPeriodAdded(readablePeriod76, 14);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusMillis(2877142);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime84 = property82.addToCopy((long) (short) 0);
        int int85 = property82.get();
        org.joda.time.LocalDateTime localDateTime86 = property82.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = null;
        java.lang.String str88 = localDateTime86.toString(dateTimeFormatter87);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = localDateTime86.getFieldType(3);
        boolean boolean91 = localDateTime80.isSupported(dateTimeFieldType90);
        org.joda.time.LocalDateTime.Property property92 = localDateTime60.property(dateTimeFieldType90);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType90.getRangeDurationType();
        java.lang.String str94 = durationFieldType93.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "millisOfSecond" + "'", str25, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str33, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2" + "'", str35, "2");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(property70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 4496030373L + "'", long71 == 4496030373L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 373 + "'", int85 == 373);
        org.junit.Assert.assertNotNull(localDateTime86);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022-02-22T00:53:50.373" + "'", str88, "2022-02-22T00:53:50.373");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "days" + "'", str94, "days");
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField16 = zonedChronology12.hours();
        org.joda.time.DurationField durationField17 = zonedChronology12.years();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = zonedChronology12.add(readablePeriod18, (long) (short) 0, (int) '4');
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.era();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMillis((int) (byte) -1);
        java.util.Date date34 = localDateTime33.toDate();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.Object[] objArray37 = charSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        boolean boolean40 = charSet36.retainAll((java.util.Collection<java.lang.Character>) charSet39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusWeeks((int) (short) 1);
        boolean boolean50 = charSet36.remove((java.lang.Object) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusMillis(2795574);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withSecondOfMinute(22);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.plus(readablePeriod55);
        int int57 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime33.year();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale60.getDisplayCountry(locale61);
        java.lang.String str63 = locale60.getDisplayName();
        boolean boolean64 = locale60.hasExtensions();
        java.lang.String str65 = property58.getAsShortText(locale60);
        java.lang.String str66 = dateTimeField23.getAsText((long) 2854783, locale60);
        java.util.Locale locale67 = locale60.stripExtensions();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:53:50 GMT 2022");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str63, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022" + "'", str65, "2022");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "n. Chr." + "'", str66, "n. Chr.");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology33.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology39 = zonedChronology33.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology33.year();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology33.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = dateTimeFieldType43.isSupported(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType43.getField(chronology50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        java.lang.String str57 = dateTimeZone54.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.chrono.ZonedChronology zonedChronology59 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone54);
        java.lang.String str61 = dateTimeZone54.getShortName(4459589293L);
        org.joda.time.Chronology chronology62 = zonedChronology33.withZone(dateTimeZone54);
        org.joda.time.Chronology chronology63 = zonedChronology12.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField67 = zonedChronology12.days();
        long long70 = durationField67.add(1817680435200000L, 4495822823L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 390256772342400000L + "'", long70 == 390256772342400000L);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        long long27 = dateTimeField25.remainder((long) 2960975);
        int int29 = dateTimeField25.getMaximumValue(4495842949L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 38960975L + "'", long27 == 38960975L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(25);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 1970);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        int int8 = property7.getMinimumValue();
        java.lang.String str9 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale13.getScript();
        java.lang.String str18 = nameProvider12.getName(locale13, "8", "2022");
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        boolean boolean22 = locale19.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.lang.String str30 = locale23.getDisplayCountry(locale27);
        java.lang.String str31 = locale19.getDisplayVariant(locale27);
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.lang.String str35 = locale33.getScript();
        java.lang.String str38 = nameProvider32.getName(locale33, "8", "2022");
        java.util.Locale locale40 = new java.util.Locale("");
        java.lang.String str43 = nameProvider32.getName(locale40, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str44 = locale27.getDisplayName(locale40);
        java.lang.String str47 = nameProvider12.getShortName(locale40, "centuries", "716");
        java.lang.String str48 = property7.getAsText(locale40);
        org.joda.time.LocalDateTime localDateTime50 = property7.addWrapFieldToCopy(2812558);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(858);
        java.lang.String str53 = localDateTime50.toString();
        boolean boolean54 = dateTimeZone1.isLocalDateTimeGap(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1995L + "'", long3 == 1995L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2814580-02-22T00:53:50.635" + "'", str53, "2814580-02-22T00:53:50.635");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-25T18:48:00.790", (double) 1645455123874L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645455123874E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology37 = zonedChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology31.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology31.era();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology31.yearOfEra();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.minusMonths(2950128);
        int int48 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localDateTime43);
        int int49 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds(36000000);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = localDateTime9.getField(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.Interval interval2 = property1.toInterval();
        org.joda.time.LocalDateTime localDateTime3 = property1.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readableDuration4);
        int int6 = localDateTime5.getDayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfDay();
        boolean boolean26 = dateTimeField25.isLenient();
        long long28 = dateTimeField25.roundHalfCeiling((long) 790);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1000L + "'", long28 == 1000L);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField18 = zonedChronology12.halfdays();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        int int20 = localDateTime19.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        int int26 = localDateTime24.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfYear();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withDurationAdded(readableDuration28, 42);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMinimumValue();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.era();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minus(readablePeriod34);
        boolean boolean36 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime19.withYear(2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DurationField durationField26 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.Object[] objArray14 = charSet13.toArray();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        boolean boolean17 = charSet13.retainAll((java.util.Collection<java.lang.Character>) charSet16);
        charSet13.clear();
        boolean boolean19 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.Object[] objArray22 = charSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        boolean boolean25 = charSet21.retainAll((java.util.Collection<java.lang.Character>) charSet24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(readableInstant31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusWeeks((int) (short) 1);
        boolean boolean35 = charSet21.remove((java.lang.Object) localDateTime34);
        java.util.stream.Stream<java.lang.Character> charStream36 = charSet21.stream();
        boolean boolean37 = charSet13.removeAll((java.util.Collection<java.lang.Character>) charSet21);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.lang.Object[] objArray40 = charSet39.toArray();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        boolean boolean43 = charSet39.retainAll((java.util.Collection<java.lang.Character>) charSet42);
        charSet39.clear();
        java.util.stream.Stream<java.lang.Character> charStream45 = charSet39.parallelStream();
        org.joda.time.base.AbstractPartial[][] abstractPartialArray46 = new org.joda.time.base.AbstractPartial[][] {};
        org.joda.time.base.AbstractPartial[][] abstractPartialArray47 = charSet39.toArray(abstractPartialArray46);
        java.lang.Cloneable[] cloneableArray48 = charSet13.toArray((java.lang.Cloneable[]) abstractPartialArray46);
        int int49 = charSet13.size();
        java.util.Iterator<java.lang.Character> charItor50 = charSet13.iterator();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DurationField durationField57 = chronology55.minutes();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str62 = dateTimeZone60.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology63 = org.joda.time.chrono.ZonedChronology.getInstance(chronology55, dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology63.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean68 = dateTimeZone66.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology69 = zonedChronology63.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology63.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology63.year();
        java.lang.String str72 = zonedChronology63.toString();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology63.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology63.millisOfDay();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology63.dayOfYear();
        boolean boolean76 = charSet13.contains((java.lang.Object) dateTimeField75);
        int int77 = charSet13.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charStream45);
        org.junit.Assert.assertNotNull(abstractPartialArray46);
        org.junit.Assert.assertNotNull(abstractPartialArray47);
        org.junit.Assert.assertNotNull(cloneableArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(charItor50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str72, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField25.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField25.getType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        int int33 = property32.getMinimumValue();
        java.lang.String str34 = property32.getAsText();
        org.joda.time.LocalDateTime localDateTime35 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.plusMonths((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = localDateTime39.getFields();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = localDateTime39.toDateTime(dateTimeZone41);
        long long44 = dateTimeZone27.getMillisKeepLocal(dateTimeZone41, (long) 140);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone41);
        org.joda.time.DurationField durationField46 = zonedChronology45.centuries();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:00" + "'", str29, "+100:00");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 324000140L + "'", long44 == 324000140L);
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType25.getField(chronology32);
        java.lang.String str34 = dateTimeField33.getName();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Country();
        java.lang.String str44 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 2, locale41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plus(readableDuration47);
        int int49 = localDateTime48.getYear();
        int[] intArray51 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime48, (long) 0);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology12.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str42, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 36000000]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField17 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField19 = zonedChronology12.days();
        long long21 = durationField19.getMillis(2023);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 174787200000L + "'", long21 == 174787200000L);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) 100);
        org.joda.time.Chronology chronology30 = zonedChronology12.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.minuteOfHour();
        long long34 = dateTimeField31.set(4495600391L, 0);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        org.joda.time.LocalDateTime localDateTime41 = property38.addToCopy((long) (byte) 0);
        int int42 = localDateTime41.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.millisOfSecond();
        org.joda.time.Interval interval46 = property45.toInterval();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.lang.String str48 = property45.getAsText(locale47);
        java.lang.String str49 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime41, 2818079, locale47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        int int51 = localDateTime50.getYear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfEra();
        long long57 = property56.remainder();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        boolean boolean62 = locale60.hasExtensions();
        int int63 = property56.getMaximumTextLength(locale60);
        java.lang.String str64 = locale60.getDisplayScript();
        java.lang.String str65 = locale60.getDisplayName();
        int int66 = property52.getMaximumTextLength(locale60);
        java.lang.String str67 = locale47.getDisplayName(locale60);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4492840391L + "'", long34 == 4492840391L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "990" + "'", str48, "990");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2818079" + "'", str49, "2818079");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4496030990L + "'", long57 == 4496030990L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uce90\ub098\ub2e4" + "'", str61, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str65, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str67, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("292278993-02-22T00:50:56.055", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=292278993-02-22t00:50:56.055");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField16 = zonedChronology12.hours();
        org.joda.time.DurationField durationField17 = zonedChronology12.years();
        org.joda.time.DurationField durationField18 = zonedChronology12.weeks();
        java.lang.String str19 = durationField18.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weeks" + "'", str19, "weeks");
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.halfdayOfDay();
        boolean boolean18 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField19.getType();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getID();
        java.lang.String str8 = dateTimeZone2.getName((long) 2);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        timeZone9.setRawOffset(52);
        boolean boolean13 = timeZone9.observesDaylightTime();
        java.time.ZoneId zoneId14 = timeZone9.toZoneId();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone(zoneId14);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale locale23 = builder20.build();
        java.util.Locale.Builder builder25 = builder20.setLanguage("days");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder28 = builder20.setLocale(locale27);
        java.lang.String str29 = locale27.getLanguage();
        java.lang.String str30 = locale16.getDisplayCountry(locale27);
        java.lang.String str31 = locale16.toLanguageTag();
        java.lang.String str32 = locale16.getDisplayVariant();
        java.lang.String str33 = timeZone15.getDisplayName(locale16);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Canada" + "'", str30, "Canada");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fr-CA" + "'", str31, "fr-CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GMT+10:00" + "'", str33, "GMT+10:00");
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.dayOfWeek();
        java.lang.String str14 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = zonedChronology12.get(readablePeriod17, (long) 281, 1645454989930L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str14, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField14 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(2019);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) 4492840391L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds(6517278);
        int int6 = localDateTime3.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField16 = zonedChronology12.hours();
        org.joda.time.DurationField durationField17 = zonedChronology12.years();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = zonedChronology12.add(readablePeriod18, (long) (short) 0, (int) '4');
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.era();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMillis((int) (byte) -1);
        java.util.Date date34 = localDateTime33.toDate();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.Object[] objArray37 = charSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        boolean boolean40 = charSet36.retainAll((java.util.Collection<java.lang.Character>) charSet39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusWeeks((int) (short) 1);
        boolean boolean50 = charSet36.remove((java.lang.Object) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusMillis(2795574);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withSecondOfMinute(22);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.plus(readablePeriod55);
        int int57 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime33.year();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale60.getDisplayCountry(locale61);
        java.lang.String str63 = locale60.getDisplayName();
        boolean boolean64 = locale60.hasExtensions();
        java.lang.String str65 = property58.getAsShortText(locale60);
        java.lang.String str66 = dateTimeField23.getAsText((long) 2854783, locale60);
        long long68 = dateTimeField23.roundFloor(4495863558L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:53:51 GMT 2022");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str63, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022" + "'", str65, "2022");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "n. Chr." + "'", str66, "n. Chr.");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-62135632800000L) + "'", long68 == (-62135632800000L));
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField24 = zonedChronology12.weekyears();
        int int27 = durationField24.getDifference(1645455155528L, 0L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.yearOfEra();
        long long30 = dateTimeField28.roundFloor(1645455221507L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1640959200000L + "'", long30 == 1640959200000L);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(317);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField25 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.Chronology chronology27 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology12.getZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 0, 3192300, 3085358, 2986725);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3085358 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        boolean boolean13 = charSet4.contains((java.lang.Object) "2");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.lang.Object[] objArray16 = charSet15.toArray();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        boolean boolean19 = charSet15.retainAll((java.util.Collection<java.lang.Character>) charSet18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        boolean boolean23 = locale20.hasExtensions();
        boolean boolean24 = charSet18.remove((java.lang.Object) boolean23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor27 = charSet26.iterator();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.Object[] objArray30 = charSet29.toArray();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        boolean boolean33 = charSet29.retainAll((java.util.Collection<java.lang.Character>) charSet32);
        boolean boolean34 = charSet26.containsAll((java.util.Collection<java.lang.Character>) charSet29);
        java.util.stream.Stream<java.lang.Character> charStream35 = charSet29.stream();
        java.util.stream.Stream<java.lang.Character> charStream36 = charSet29.stream();
        boolean boolean37 = charSet18.containsAll((java.util.Collection<java.lang.Character>) charSet29);
        boolean boolean38 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet29);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor41 = charSet40.iterator();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.lang.Object[] objArray44 = charSet43.toArray();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        boolean boolean47 = charSet43.retainAll((java.util.Collection<java.lang.Character>) charSet46);
        boolean boolean48 = charSet40.containsAll((java.util.Collection<java.lang.Character>) charSet43);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean50 = charSet40.equals((java.lang.Object) dateTimeFieldType49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor53 = charSet52.iterator();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.lang.Object[] objArray56 = charSet55.toArray();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        boolean boolean59 = charSet55.retainAll((java.util.Collection<java.lang.Character>) charSet58);
        boolean boolean60 = charSet52.containsAll((java.util.Collection<java.lang.Character>) charSet55);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor63 = charSet62.iterator();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.lang.Object[] objArray66 = charSet65.toArray();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet68 = locale67.getExtensionKeys();
        boolean boolean69 = charSet65.retainAll((java.util.Collection<java.lang.Character>) charSet68);
        boolean boolean70 = charSet62.containsAll((java.util.Collection<java.lang.Character>) charSet65);
        java.util.stream.Stream<java.lang.Character> charStream71 = charSet65.stream();
        java.util.stream.Stream<java.lang.Character> charStream72 = charSet65.stream();
        boolean boolean73 = charSet52.retainAll((java.util.Collection<java.lang.Character>) charSet65);
        boolean boolean74 = charSet40.containsAll((java.util.Collection<java.lang.Character>) charSet52);
        boolean boolean75 = charSet29.addAll((java.util.Collection<java.lang.Character>) charSet40);
        java.lang.Object[] objArray76 = charSet40.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(charItor27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charStream35);
        org.junit.Assert.assertNotNull(charStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(charItor41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(charItor53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(charItor63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(charStream71);
        org.junit.Assert.assertNotNull(charStream72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(2811632);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks(0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        int int18 = localDateTime16.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds(36000000);
        boolean boolean23 = dateTimeZone11.isLocalDateTimeGap(localDateTime22);
        boolean boolean24 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9667, 12, 27, 35999999]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology30 = null;
        boolean boolean31 = dateTimeFieldType29.isSupported(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType29.getField(chronology36);
        java.lang.String str38 = dateTimeField37.getName();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.lang.String str47 = locale45.getISO3Country();
        java.lang.String str48 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, 2, locale45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plus(readableDuration51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.monthOfYear();
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = locale56.getISO3Country();
        java.lang.String str60 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, locale56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime62 = localDateTime50.withSecondOfMinute(3191596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3191596 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str46, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2" + "'", str48, "2");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uce90\ub098\ub2e4" + "'", str57, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "625" + "'", str60, "625");
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        java.lang.String str19 = dateTimeZone15.toString();
        long long22 = dateTimeZone15.adjustOffset((long) (-359999), false);
        int int24 = dateTimeZone15.getOffsetFromLocal((long) 2835204);
        boolean boolean25 = dateTimeZone15.isFixed();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.100" + "'", str19, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-359999L) + "'", long22 == (-359999L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        int int23 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime20.toDateTime(readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        int int37 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property39 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfCeilingCopy();
        int[] intArray42 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime40, (long) 2814846);
        org.joda.time.DurationField durationField43 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField45 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        long long49 = property48.remainder();
        int int50 = property48.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime51 = property48.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime53 = property48.setCopy(2859817);
        int[] intArray55 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime53, (-86399868L));
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology12.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 38814846]");
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4496031684L + "'", long49 == 4496031684L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1969, 12, 31, 36000132]");
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.Object[] objArray14 = charSet13.toArray();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        boolean boolean17 = charSet13.retainAll((java.util.Collection<java.lang.Character>) charSet16);
        charSet13.clear();
        boolean boolean19 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.Object[] objArray22 = charSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        boolean boolean25 = charSet21.retainAll((java.util.Collection<java.lang.Character>) charSet24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(readableInstant31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusWeeks((int) (short) 1);
        boolean boolean35 = charSet21.remove((java.lang.Object) localDateTime34);
        java.util.stream.Stream<java.lang.Character> charStream36 = charSet21.stream();
        boolean boolean37 = charSet13.removeAll((java.util.Collection<java.lang.Character>) charSet21);
        boolean boolean39 = charSet13.contains((java.lang.Object) (-2001L));
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology52.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology58 = zonedChronology52.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology52.weekOfWeekyear();
        org.joda.time.Chronology chronology61 = zonedChronology52.withUTC();
        org.joda.time.DurationField durationField62 = zonedChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology52.dayOfYear();
        org.joda.time.DurationField durationField64 = zonedChronology52.seconds();
        org.joda.time.DateTimeZone dateTimeZone65 = zonedChronology52.getZone();
        boolean boolean66 = charSet13.contains((java.lang.Object) dateTimeZone65);
        charSet13.clear();
        charSet13.clear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(49);
        boolean boolean71 = charSet13.contains((java.lang.Object) dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str76 = dateTimeZone74.getShortName((long) 10);
        java.lang.String str77 = dateTimeZone74.getID();
        java.lang.String str78 = dateTimeZone74.getID();
        java.lang.String str80 = dateTimeZone74.getName((long) 2);
        java.util.TimeZone timeZone81 = dateTimeZone74.toTimeZone();
        long long84 = dateTimeZone74.adjustOffset(1645454816920L, true);
        java.lang.String str85 = dateTimeZone74.getID();
        long long89 = dateTimeZone74.convertLocalToUTC(221323619155L, false, (-3599866101L));
        long long91 = dateTimeZone70.getMillisKeepLocal(dateTimeZone74, 15298745711L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+10:00" + "'", str76, "+10:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+10:00" + "'", str80, "+10:00");
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1645454816920L + "'", long84 == 1645454816920L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+10:00" + "'", str85, "+10:00");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 221287619155L + "'", long89 == 221287619155L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 15262745760L + "'", long91 == 15262745760L);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DurationField durationField23 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.monthOfYear();
        int int35 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        long long37 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology12.year();
        org.joda.time.DurationField durationField39 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        int int44 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime41.toDateTime(readableInstant45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime41.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.withFieldAdded(durationFieldType50, (int) (byte) 1);
        int[] intArray55 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime53, 4495612897L);
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology12.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = zonedChronology12.add(readablePeriod57, (-2001L), (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks(0);
        int int65 = localDateTime64.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = localDateTime64.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.yearOfEra();
        int int70 = property69.getMinimumValue();
        java.lang.String str71 = property69.getAsText();
        org.joda.time.LocalDateTime localDateTime72 = property69.withMaximumValue();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.centuryOfEra();
        java.util.Locale.Category category75 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category75, locale76);
        org.joda.time.LocalDateTime localDateTime78 = property73.setCopy("886", locale76);
        org.joda.time.LocalDateTime localDateTime79 = property73.roundFloorCopy();
        int int80 = localDateTime64.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        long long82 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime64, (long) 2808304);
        org.joda.time.DateTimeField dateTimeField83 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField84 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.Chronology chronology86 = zonedChronology12.withZone(dateTimeZone85);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455231808L + "'", long37 == 1645455231808L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "centuries" + "'", str51, "centuries");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 2, 22, 38812897]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-2001L) + "'", long60 == (-2001L));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022" + "'", str71, "2022");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.FORMAT + "'", category75.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645455231808L + "'", long82 == 1645455231808L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean11 = charSet1.equals((java.lang.Object) dateTimeFieldType10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor14 = charSet13.iterator();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.Object[] objArray17 = charSet16.toArray();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = charSet16.retainAll((java.util.Collection<java.lang.Character>) charSet19);
        boolean boolean21 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor24 = charSet23.iterator();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.Object[] objArray27 = charSet26.toArray();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        boolean boolean30 = charSet26.retainAll((java.util.Collection<java.lang.Character>) charSet29);
        boolean boolean31 = charSet23.containsAll((java.util.Collection<java.lang.Character>) charSet26);
        java.util.stream.Stream<java.lang.Character> charStream32 = charSet26.stream();
        java.util.stream.Stream<java.lang.Character> charStream33 = charSet26.stream();
        boolean boolean34 = charSet13.retainAll((java.util.Collection<java.lang.Character>) charSet26);
        boolean boolean35 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet13);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.days();
        org.joda.time.DurationField durationField42 = chronology40.minutes();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str47 = dateTimeZone45.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone45);
        boolean boolean50 = zonedChronology48.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology48.era();
        org.joda.time.DurationField durationField54 = zonedChronology48.weeks();
        boolean boolean55 = charSet13.remove((java.lang.Object) durationField54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int58 = localDateTime57.getEra();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.monthOfYear();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMinimumValue();
        boolean boolean61 = charSet13.equals((java.lang.Object) property59);
        long long62 = property59.remainder();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charItor14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charItor24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charStream32);
        org.junit.Assert.assertNotNull(charStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 35999999L + "'", long62 == 35999999L);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        boolean boolean13 = charSet4.contains((java.lang.Object) "2");
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        org.joda.time.DurationField durationField27 = zonedChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology26.dayOfWeek();
        org.joda.time.DurationField durationField30 = zonedChronology26.years();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology26.clockhourOfHalfday();
        boolean boolean32 = charSet4.contains((java.lang.Object) zonedChronology26);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology26.weekyearOfCentury();
        int int36 = dateTimeField35.getMinimumValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy((long) (byte) 0);
        int int7 = property3.get();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        java.util.Locale locale1 = new java.util.Locale("2022-02-22T00:51:48.013");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-22t00:51:48.013");
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField42 = zonedChronology12.millis();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = zonedChronology12.add(readablePeriod43, (long) 12, 10);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 12L + "'", long46 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("839");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime1.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear(2984915);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusSeconds(305);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds(121734782);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.year();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DurationField durationField37 = chronology35.minutes();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str42 = dateTimeZone40.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean48 = dateTimeZone46.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology49 = zonedChronology43.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology43.year();
        java.lang.String str52 = zonedChronology43.toString();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology43.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology43.dayOfYear();
        org.joda.time.DurationField durationField56 = zonedChronology43.weekyears();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str58 = durationFieldType57.toString();
        boolean boolean59 = zonedChronology43.equals((java.lang.Object) durationFieldType57);
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology43.dayOfMonth();
        boolean boolean61 = localDateTime26.equals((java.lang.Object) zonedChronology43);
        org.joda.time.DurationField durationField62 = zonedChronology43.weekyears();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        int int64 = localDateTime63.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localDateTime63.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plusMillis(366);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.minusSeconds(2851929);
        int[] intArray74 = zonedChronology43.get((org.joda.time.ReadablePartial) localDateTime72, (long) 2881170);
        org.joda.time.DurationField durationField75 = zonedChronology43.millis();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology43.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 00:53:52 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str52, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "seconds" + "'", str58, "seconds");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1970, 1, 1, 38881170]");
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        java.util.Date date7 = localDateTime6.toDate();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sat Jan 01 00:00:00 GMT 2022");
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("946");
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfSecond();
        org.joda.time.Interval interval16 = property15.toInterval();
        java.lang.String str17 = property15.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.monthOfYear();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = locale29.stripExtensions();
        java.lang.String str33 = locale29.getDisplayCountry();
        java.lang.String str34 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale29);
        org.joda.time.LocalDateTime localDateTime35 = property15.setCopy("307", locale29);
        java.util.Locale.Builder builder36 = builder13.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder13.setVariant("halfdayOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: halfdayOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "181" + "'", str17, "181");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "53" + "'", str34, "53");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.minusMinutes(0);
        int int33 = localDateTime32.getCenturyOfEra();
        int[] intArray35 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime32, 0L);
        org.joda.time.DurationField durationField36 = zonedChronology12.weekyears();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 36000000]");
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        timeZone1.setID("2022-02-21T00:47:34.976");
        java.lang.String str4 = timeZone1.getID();
        java.lang.String str5 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T00:47:34.976" + "'", str4, "2022-02-21T00:47:34.976");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21T00:47:34.976" + "'", str5, "2022-02-21T00:47:34.976");
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getDisplayVariant();
        java.lang.String str26 = dateTimeField20.getAsText((long) 687, locale23);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "687" + "'", str26, "687");
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2798838");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        boolean boolean8 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime9 = property6.getLocalDateTime();
        java.util.Locale locale13 = new java.util.Locale("", "", "kor");
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet15 = locale13.getExtensionKeys();
        java.lang.String str16 = property6.getAsText(locale13);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2922789" + "'", str16, "2922789");
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        long long24 = property23.remainder();
        int int25 = property23.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = property23.withMaximumValue();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale30 = locale27.stripExtensions();
        java.lang.String str31 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale27);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        java.lang.String str33 = property32.getAsText();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4496032412L + "'", long24 == 4496032412L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "8" + "'", str31, "8");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "292278993" + "'", str33, "292278993");
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        long long6 = property5.remainder();
        int int7 = property5.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        boolean boolean12 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDateTime13.toString("Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4496032435L + "'", long6 == 4496032435L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.addUnicodeLocaleAttribute("245");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder7.setScript("346");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 346 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        int int43 = dateTimeZone33.getStandardOffset(1645454812204L);
        long long47 = dateTimeZone33.convertLocalToUTC((long) 67290935, false, 0L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DurationField durationField54 = chronology52.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology52, dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology60.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean65 = dateTimeZone63.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology66 = zonedChronology60.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology60.weekOfWeekyear();
        org.joda.time.Chronology chronology69 = zonedChronology60.withUTC();
        org.joda.time.DurationField durationField70 = zonedChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology60.dayOfYear();
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology60.hourOfDay();
        org.joda.time.DurationField durationField73 = zonedChronology60.centuries();
        boolean boolean74 = dateTimeZone33.equals((java.lang.Object) zonedChronology60);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 31290935L + "'", long47 == 31290935L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        java.lang.String str9 = durationField8.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "weekyears" + "'", str9, "weekyears");
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField26 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField27 = zonedChronology12.months();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField18 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField19 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        int int25 = localDateTime23.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getScript();
        java.lang.String str36 = nameProvider30.getName(locale31, "8", "2022");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        java.util.Locale locale39 = new java.util.Locale("millisOfSecond");
        java.lang.String str42 = nameProvider30.getShortName(locale39, "hi!", "2022-02-22T00:46:57.550");
        java.lang.String str43 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime27, (int) (byte) 1, locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime27.withWeekOfWeekyear(209);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 209 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals(locale39.toString(), "millisofsecond");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AD" + "'", str43, "AD");
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("27955");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime5.minusYears(2);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime5.plusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear(2834567);
        int int40 = localDateTime37.getMillisOfDay();
        int[] intArray41 = localDateTime37.getValues();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496032613L + "'", long3 == 4496032613L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str23, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:53:52 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6832613 + "'", int40 == 6832613);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[292278993, 2, 26, 6832613]");
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMillis(2795574);
        int int18 = localDateTime14.getDayOfMonth();
        int int19 = localDateTime14.size();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.hourOfDay();
        int int21 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withYearOfEra(3101355);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology12.add(readablePeriod26, 4495661067L, 214);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4495661067L + "'", long29 == 4495661067L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.era();
        org.joda.time.DurationField durationField29 = zonedChronology12.days();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = zonedChronology12.getDateTimeMillis(3155379, 0, (int) (short) -1, 209, 2937855, 291, 292278991);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 209 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology12.add(readablePeriod24, 1645455012325L, 3054983);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645455012325L + "'", long27 == 1645455012325L);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        int int9 = property7.getMaximumShortTextLength(locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy(4495984593L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 4495984593");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int25 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = property30.getMinimumValue();
        boolean boolean32 = dateTime27.equals((java.lang.Object) int31);
        long long33 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        int int34 = property20.getMinimumValueOverall();
        int int35 = property20.get();
        java.lang.String str36 = property20.toString();
        int int37 = property20.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[yearOfEra]" + "'", str36, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField16 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField18 = zonedChronology13.centuries();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(1645454828186L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str31 = dateTimeZone29.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology38 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology32.dayOfMonth();
        org.joda.time.Chronology chronology40 = zonedChronology32.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology44 = zonedChronology32.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.DurationField durationField51 = chronology49.minutes();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology57 = org.joda.time.chrono.ZonedChronology.getInstance(chronology49, dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology57.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean62 = dateTimeZone60.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology63 = zonedChronology57.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology57.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str70 = dateTimeZone68.getShortName((long) 10);
        java.lang.String str71 = dateTimeZone68.getID();
        long long74 = dateTimeZone68.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.Chronology chronology75 = zonedChronology57.withZone(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone76 = zonedChronology57.getZone();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean80 = dateTimeZone78.isStandardOffset((long) (short) 10);
        long long83 = dateTimeZone78.convertLocalToUTC((long) 1439, true);
        long long85 = dateTimeZone76.getMillisKeepLocal(dateTimeZone78, (-1184727463199900L));
        org.joda.time.Chronology chronology86 = zonedChronology32.withZone(dateTimeZone76);
        java.lang.String str88 = dateTimeZone76.getShortName((long) (byte) 10);
        java.lang.String str90 = dateTimeZone76.getShortName(4495663889L);
        org.joda.time.DateTime dateTime91 = localDateTime19.toDateTime(dateTimeZone76);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-35999999L) + "'", long74 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1339L + "'", long83 == 1339L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1184727427200000L) + "'", long85 == (-1184727427200000L));
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+10:00" + "'", str88, "+10:00");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+10:00" + "'", str90, "+10:00");
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime8.toString(dateTimeFormatter13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.withDayOfYear(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.minusMonths(345);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury(3210279);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3210279 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T00:53:52.920" + "'", str14, "2022-02-22T00:53:52.920");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(292278991, (-82275290), 590, 2918671, 2925967, 3035251);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2918671 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime9.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        int int16 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime13.toDateTime(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        int int22 = property21.getMinimumValue();
        boolean boolean23 = dateTime18.equals((java.lang.Object) int22);
        org.joda.time.Chronology chronology24 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime25 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        boolean boolean31 = property27.equals((java.lang.Object) durationFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DurationField durationField33 = durationFieldType30.getField(chronology32);
        java.lang.String str34 = durationFieldType30.toString();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime9.withFieldAdded(durationFieldType30, 20);
        boolean boolean37 = localDateTime3.isSupported(durationFieldType30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str49 = dateTimeZone47.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology50 = org.joda.time.chrono.ZonedChronology.getInstance(chronology42, dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology50.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology56 = zonedChronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str61 = dateTimeZone59.getShortName((long) 10);
        java.lang.String str62 = dateTimeZone59.getID();
        org.joda.time.Chronology chronology63 = zonedChronology50.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology50.secondOfDay();
        org.joda.time.Chronology chronology66 = zonedChronology50.withUTC();
        boolean boolean67 = durationFieldType30.isSupported((org.joda.time.Chronology) zonedChronology50);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology50.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "centuries" + "'", str34, "centuries");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:00" + "'", str49, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-1));
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale4.getScript();
        java.lang.String str7 = dateTimeZone1.getShortName(1645454832822L, locale4);
        long long9 = dateTimeZone1.convertUTCToLocal((long) 907);
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(locale13);
        java.lang.String str17 = nameProvider11.getShortName(locale13, "2022-02-22T00:47:00.745", "en-CA");
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DurationField durationField24 = chronology22.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str29 = dateTimeZone27.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology22, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology36 = zonedChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology30.year();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology30.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.weekOfWeekyear();
        org.joda.time.Chronology chronology48 = localDateTime45.getChronology();
        int int49 = localDateTime45.getMillisOfDay();
        boolean boolean50 = dateTimeZone44.isLocalDateTimeGap(localDateTime45);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = dateTimeZone44.getShortName(242247369600000L, locale52);
        int int54 = dateTimeField41.getMaximumShortTextLength(locale52);
        java.lang.String str57 = nameProvider11.getShortName(locale52, "929", "2022-02-21T00:47:10.116+10:00");
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        boolean boolean61 = locale58.hasExtensions();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.util.Locale locale65 = locale62.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = locale66.getDisplayCountry(locale67);
        java.lang.String str69 = locale62.getDisplayCountry(locale66);
        java.lang.String str70 = locale58.getDisplayVariant(locale66);
        java.lang.String str71 = locale58.toLanguageTag();
        java.lang.String str74 = nameProvider11.getShortName(locale58, "763", "2022-02-22T00:47:10.533");
        java.lang.String str75 = locale58.getDisplayLanguage();
        java.lang.String str76 = dateTimeZone1.getShortName(2697162667080390354L, locale58);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-00:00:00.001" + "'", str7, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 906L + "'", long9 == 906L);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3232998 + "'", int49 == 3232998);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+100:00" + "'", str53, "+100:00");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "de" + "'", str71, "de");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str75, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-00:00:00.001" + "'", str76, "-00:00:00.001");
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.millisOfDay();
        org.joda.time.Chronology chronology23 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfDay();
        java.lang.String str27 = dateTimeField25.getAsText(4495618300L);
        boolean boolean29 = dateTimeField25.isLeap((-328275054L));
        int int30 = dateTimeField25.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "646" + "'", str27, "646");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.property(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(80);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfEra(12);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(3216927);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        java.lang.String str23 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekyearOfCentury();
        long long30 = zonedChronology12.add(1645368543843L, (long) 2840330, 9685);
        org.joda.time.DurationField durationField31 = zonedChronology12.months();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str23, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1672877139893L + "'", long30 == 1672877139893L);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField24 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField26 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField27 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.dayOfWeek();
        boolean boolean29 = dateTimeField28.isLenient();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.hourOfHalfday();
        java.lang.String str21 = dateTimeField19.getAsText((long) 358);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(0L, locale21);
        java.util.Locale.setDefault(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        java.lang.String str34 = locale30.getDisplayScript();
        java.lang.String str35 = locale21.getDisplayCountry(locale30);
        java.lang.String str36 = locale30.getISO3Language();
        java.lang.String str37 = locale30.getISO3Country();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japanisch" + "'", str31, "Japanisch");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "jpn" + "'", str36, "jpn");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        java.lang.String str15 = zonedChronology12.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str15, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField22 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField25 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = dateTimeFieldType27.isSupported(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType27.getField(chronology34);
        java.lang.String str36 = dateTimeField35.getName();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.lang.String str45 = locale43.getISO3Country();
        java.lang.String str46 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, 2, locale43);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withMinuteOfHour((int) '#');
        java.util.Date date51 = localDateTime48.toDate();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.minusSeconds(305);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusSeconds(121734782);
        java.util.Date date57 = localDateTime56.toDate();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.fromDateFields(date57);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.fromDateFields(date57);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.fromDateFields(date57);
        int int61 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfSecond" + "'", str36, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Japanisch" + "'", str44, "Japanisch");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2" + "'", str46, "2");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Mon Feb 21 00:53:53 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Wed Dec 31 00:01:50 GMT 2025");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 11 + "'", int61 == 11);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds(883);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DurationField durationField21 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField24 = zonedChronology12.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        int int44 = dateTimeField31.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.getISO3Country();
        java.lang.String str64 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 2, locale61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readableDuration67);
        int[] intArray73 = new int[] { 0, 292278993, 10, 'a' };
        int int74 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int int79 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime76.toDateTime(readableInstant80);
        boolean boolean83 = dateTime81.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime84 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        int int85 = localDateTime68.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime88 = localDateTime68.withDurationAdded(readableDuration86, 67657531);
        long long90 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime88, 1645455079001L);
        org.joda.time.DurationField durationField91 = zonedChronology12.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanisch" + "'", str40, "Japanisch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanisch" + "'", str62, "Japanisch");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(localDateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1645368833515L + "'", long90 == 1645368833515L);
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(2811632);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(33);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        java.lang.String str11 = property10.getAsText();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "59" + "'", str11, "59");
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        boolean boolean4 = property2.isLeap();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str16 = dateTimeZone14.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology9, dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology23 = zonedChronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology17.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology17.add(readablePeriod26, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DurationField durationField30 = zonedChronology17.centuries();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str43 = dateTimeZone41.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology36, dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean49 = dateTimeZone47.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology50 = zonedChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology44.secondOfDay();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = localDateTime54.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusSeconds((-1));
        org.joda.time.DateTime dateTime59 = localDateTime58.toDateTime();
        org.joda.time.Chronology chronology60 = localDateTime58.getChronology();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.plus(readableDuration61);
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale65.getDisplayName();
        java.lang.String str68 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, 2821337, locale65);
        int int69 = dateTimeField31.getMaximumTextLength(locale65);
        java.lang.String str70 = property2.getAsText(locale65);
        java.lang.String str71 = locale65.getISO3Language();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Italienisch (Italien)" + "'", str67, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2821337" + "'", str68, "2821337");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022" + "'", str70, "2022");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ita" + "'", str71, "ita");
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        int int25 = localDateTime23.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getScript();
        java.lang.String str36 = nameProvider30.getName(locale31, "8", "2022");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        java.util.Locale locale39 = new java.util.Locale("millisOfSecond");
        java.lang.String str42 = nameProvider30.getShortName(locale39, "hi!", "2022-02-22T00:46:57.550");
        java.lang.String str43 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime27, (int) (byte) 1, locale39);
        int int44 = dateTimeField19.getMaximumValue();
        int int46 = dateTimeField19.getLeapAmount(252525600000000L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals(locale39.toString(), "millisofsecond");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AD" + "'", str43, "AD");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology26 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.hourOfDay();
        org.joda.time.Chronology chronology30 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getScript();
        java.lang.String str13 = nameProvider7.getName(locale8, "8", "2022");
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        boolean boolean17 = locale14.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale18.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale18.getDisplayCountry(locale22);
        java.lang.String str26 = locale14.getDisplayVariant(locale22);
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.lang.String str33 = nameProvider27.getName(locale28, "8", "2022");
        java.util.Locale locale35 = new java.util.Locale("");
        java.lang.String str38 = nameProvider27.getName(locale35, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str39 = locale22.getDisplayName(locale35);
        java.lang.String str42 = nameProvider7.getShortName(locale35, "centuries", "716");
        java.lang.String str43 = property2.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime45 = property2.addWrapFieldToCopy(2812558);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks(858);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        int int49 = property48.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "German" + "'", str39, "German");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2814580 + "'", int49 == 2814580);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        int int26 = dateTimeZone24.getOffset(1645455028113L);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        org.joda.time.DurationField durationField17 = zonedChronology16.months();
        org.joda.time.DurationField durationField18 = zonedChronology16.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField20 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField23 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfDay();
        java.util.Locale locale29 = new java.util.Locale("2022-02-25T18:48:16.750", "2022-02-15T00:47:47.402");
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str32 = locale29.getExtension('a');
        java.lang.String str33 = dateTimeField25.getAsShortText(67, locale29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "2022-02-25t18:48:16.750_2022-02-15T00:47:47.402");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-25t18:48:16.750" + "'", str30, "2022-02-25t18:48:16.750");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "67" + "'", str33, "67");
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str16 = dateTimeZone14.getShortName((long) 10);
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone14);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("days");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("days");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray42 = new java.lang.String[] { "886", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-21T14:46:27.523", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags(languageRangeList32, (java.util.Collection<java.lang.String>) strList43);
        java.lang.String str46 = java.util.Locale.lookupTag(languageRangeList30, (java.util.Collection<java.lang.String>) strList43);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList43, filteringMode47);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList25, (java.util.Collection<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList43);
        boolean boolean51 = dateTimeZone14.equals((java.lang.Object) strList43);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.lang.String str58 = dateTimeZone55.getName((-35999999L), locale57);
        java.lang.String str59 = dateTimeZone14.getShortName(4495614758L, locale57);
        long long62 = dateTimeZone14.convertLocalToUTC((long) (-292275054), false);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:00" + "'", str58, "+10:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-328275054L) + "'", long62 == (-328275054L));
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        long long25 = durationField22.getValueAsLong(2843220L, 1645454954015L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology26 = zonedChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology20.dayOfMonth();
        org.joda.time.Chronology chronology28 = zonedChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology32 = zonedChronology20.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDateTime7.toDateTime(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime7.withDayOfWeek(3152997);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3152997 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField25 = zonedChronology12.weekyears();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str27 = durationFieldType26.toString();
        boolean boolean28 = zonedChronology12.equals((java.lang.Object) durationFieldType26);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "seconds" + "'", str27, "seconds");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getID();
        java.lang.String str8 = dateTimeZone2.getName((long) 2);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean12 = timeZone10.observesDaylightTime();
        boolean boolean13 = timeZone9.hasSameRules(timeZone10);
        java.lang.String str14 = timeZone10.getID();
        java.lang.String str15 = timeZone10.getID();
        java.lang.String str16 = timeZone10.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GMT" + "'", str14, "GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GMT" + "'", str15, "GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT" + "'", str16, "GMT");
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField25 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone27 = zonedChronology12.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = zonedChronology12.getDateTimeMillis(850, 3102641, 658, 195);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3102641 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.Object[] objArray13 = charSet12.toArray();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        boolean boolean16 = charSet12.retainAll((java.util.Collection<java.lang.Character>) charSet15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        boolean boolean20 = locale17.hasExtensions();
        boolean boolean21 = charSet15.remove((java.lang.Object) boolean20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor24 = charSet23.iterator();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.Object[] objArray27 = charSet26.toArray();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        boolean boolean30 = charSet26.retainAll((java.util.Collection<java.lang.Character>) charSet29);
        boolean boolean31 = charSet23.containsAll((java.util.Collection<java.lang.Character>) charSet26);
        java.util.stream.Stream<java.lang.Character> charStream32 = charSet26.stream();
        java.util.stream.Stream<java.lang.Character> charStream33 = charSet26.stream();
        boolean boolean34 = charSet15.containsAll((java.util.Collection<java.lang.Character>) charSet26);
        boolean boolean35 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet15);
        int int36 = charSet4.size();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor39 = charSet38.iterator();
        boolean boolean40 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet38);
        java.util.stream.Stream<java.lang.Character> charStream41 = charSet4.stream();
        java.util.HashSet[] hashSetArray43 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.Character>[] charSetArray44 = (java.util.HashSet<java.lang.Character>[]) hashSetArray43;
        java.util.HashSet<java.lang.Character>[] charSetArray45 = charSet4.toArray(charSetArray44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charItor24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charStream32);
        org.junit.Assert.assertNotNull(charStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(charItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charStream41);
        org.junit.Assert.assertNotNull(hashSetArray43);
        org.junit.Assert.assertNotNull(charSetArray44);
        org.junit.Assert.assertNotNull(charSetArray45);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType25.getField(chronology32);
        java.lang.String str34 = dateTimeField33.getName();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Country();
        java.lang.String str44 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 2, locale41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plus(readableDuration47);
        int int49 = localDateTime48.getYear();
        int[] intArray51 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime48, (long) 0);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology12.clockhourOfHalfday();
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder54.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale57 = builder56.build();
        java.util.Locale.Builder builder58 = builder56.clear();
        java.util.Locale locale59 = builder56.build();
        java.util.Locale.Builder builder61 = builder56.setLanguage("days");
        java.util.Locale.Builder builder62 = builder61.clear();
        java.util.Locale.Builder builder63 = builder61.clearExtensions();
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale.Builder builder65 = builder64.clear();
        boolean boolean66 = zonedChronology12.equals((java.lang.Object) builder65);
        java.util.Locale.Builder builder67 = builder65.clearExtensions();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("59");
        java.util.Locale.Builder builder70 = builder65.setLocale(locale69);
        java.util.Locale.Builder builder71 = builder65.clearExtensions();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japanisch" + "'", str42, "Japanisch");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 36000000]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        int int17 = dateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("886", locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.roundFloorCopy();
        java.lang.String str13 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime15 = property6.setCopy(2812558);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2922789" + "'", str13, "2922789");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        long long45 = dateTimeZone33.convertLocalToUTC(4495594354L, true, 4495596112L);
        long long48 = dateTimeZone33.adjustOffset((long) 2795574, true);
        java.util.TimeZone timeZone49 = dateTimeZone33.toTimeZone();
        boolean boolean50 = timeZone49.observesDaylightTime();
        java.lang.String str51 = timeZone49.getID();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        timeZone49.setRawOffset(214);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4459594354L + "'", long45 == 4459594354L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2795574L + "'", long48 == 2795574L);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GMT+10:00" + "'", str51, "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        java.lang.String str5 = localDateTime3.toString();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        int int7 = property6.getLeapAmount();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T00:53:54.239" + "'", str5, "2022-02-22T00:53:54.239");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology12.add(readablePeriod21, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology44 = zonedChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.year();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology38.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology38);
        boolean boolean50 = zonedChronology38.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology38.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        int int55 = property54.getMinimumValue();
        java.lang.String str56 = property54.getAsText();
        org.joda.time.LocalDateTime localDateTime57 = property54.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusWeeks(0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DurationField durationField66 = chronology64.minutes();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str71 = dateTimeZone69.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology72 = org.joda.time.chrono.ZonedChronology.getInstance(chronology64, dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology72.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean77 = dateTimeZone75.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology78 = zonedChronology72.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology72.dayOfMonth();
        org.joda.time.Chronology chronology80 = zonedChronology72.withUTC();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology84 = zonedChronology72.withZone(dateTimeZone83);
        org.joda.time.DateTime dateTime85 = localDateTime59.toDateTime(dateTimeZone83);
        org.joda.time.Chronology chronology86 = zonedChronology38.withZone(dateTimeZone83);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone83);
        org.joda.time.Chronology chronology88 = zonedChronology12.withZone(dateTimeZone83);
        boolean boolean89 = dateTimeZone83.isFixed();
        long long91 = dateTimeZone83.nextTransition((long) 146);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 146L + "'", long91 == 146L);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        int int9 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(0);
        int int16 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime10);
        int int18 = localDateTime17.getDayOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        int int20 = property19.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime22 = property19.addWrapFieldToCopy(163);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 56 + "'", int18 == 56);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        int int35 = localDateTime32.getMillisOfDay();
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4820034405L + "'", long3 == 4820034405L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanisch" + "'", str23, "Japanisch");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Thu Feb 24 18:53:54 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 68034711 + "'", int35 == 68034711);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setRegion("846");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("2022-02-22T00:47:37.210");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T00:47:37.210 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.year();
        org.joda.time.DurationField durationField23 = zonedChronology13.hours();
        org.joda.time.DurationField durationField24 = zonedChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.monthOfYear();
        int int36 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        long long38 = zonedChronology13.set((org.joda.time.ReadablePartial) localDateTime28, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology13.year();
        org.joda.time.DurationField durationField40 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime42.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime42.withFieldAdded(durationFieldType51, (int) (byte) 1);
        int[] intArray56 = zonedChronology13.get((org.joda.time.ReadablePartial) localDateTime54, 4495612897L);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.minuteOfHour();
        java.util.Locale.Category category58 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category58, locale59);
        java.util.Locale locale61 = java.util.Locale.getDefault(category58);
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category62, locale63);
        java.util.Locale locale65 = java.util.Locale.getDefault(category62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusWeeks(0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.days();
        org.joda.time.DurationField durationField72 = chronology70.minutes();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str77 = dateTimeZone75.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology78 = org.joda.time.chrono.ZonedChronology.getInstance(chronology70, dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology78.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean83 = dateTimeZone81.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology84 = zonedChronology78.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField85 = zonedChronology78.dayOfMonth();
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.lang.String str89 = locale87.getDisplayCountry(locale88);
        java.lang.String str90 = dateTimeField85.getAsText(0L, locale87);
        java.util.Locale.setDefault(category62, locale87);
        java.util.Locale locale92 = java.util.Locale.getDefault(category62);
        java.lang.String str93 = locale61.getDisplayName(locale92);
        int int94 = property57.getMaximumShortTextLength(locale61);
        java.util.Set<java.lang.String> strSet95 = locale61.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645779234459L + "'", long38 == 1645779234459L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "centuries" + "'", str52, "centuries");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 2, 22, 38812897]");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.FORMAT + "'", category58.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1" + "'", str90, "1");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Englisch (Kanada)" + "'", str93, "Englisch (Kanada)");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays((int) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.centuryOfEra();
        org.joda.time.DurationField durationField7 = property6.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundFloorCopy();
        int int9 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder2.addUnicodeLocaleAttribute("389");
        java.util.Locale.Builder builder14 = builder2.setRegion("344");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset(2795574);
        timeZone0.setRawOffset(2842207);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("2022-02-22T00:46:40.745");
        int int8 = timeZone6.getOffset((long) 2842207);
        java.util.TimeZone.setDefault(timeZone6);
        boolean boolean10 = timeZone0.hasSameRules(timeZone6);
        java.util.Locale locale12 = new java.util.Locale("2022-02-22T00:47:33.075");
        java.lang.String str13 = locale12.getScript();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.String str15 = timeZone6.getDisplayName(locale12);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "2022-02-22t00:47:33.075");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Greenwich Mean Time" + "'", str15, "Greenwich Mean Time");
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        java.util.Locale locale3 = new java.util.Locale("886", "949", "+00:00:02.019");
        org.junit.Assert.assertEquals(locale3.toString(), "886_949_+00:00:02.019");
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime5.minusYears(2);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime5.plusHours((int) 'a');
        org.joda.time.Chronology chronology38 = localDateTime5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = chronology38.get(readablePeriod39, 2719031335171200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4820034683L + "'", long3 == 4820034683L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanisch" + "'", str23, "Japanisch");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Thu Feb 24 18:53:54 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DurationField durationField23 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.monthOfYear();
        int int35 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        long long37 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) 10);
        org.joda.time.LocalDateTime.Property property38 = localDateTime27.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = property38.getLocalDateTime();
        int int40 = property38.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645779234707L + "'", long37 == 1645779234707L);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        int int23 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime20.toDateTime(readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        int int37 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property39 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfCeilingCopy();
        int[] intArray42 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime40, (long) 2814846);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField46 = zonedChronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks(0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.days();
        org.joda.time.DurationField durationField53 = chronology51.minutes();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str58 = dateTimeZone56.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology59 = org.joda.time.chrono.ZonedChronology.getInstance(chronology51, dateTimeZone56);
        boolean boolean61 = zonedChronology59.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology59.hourOfDay();
        org.joda.time.DurationField durationField63 = zonedChronology59.years();
        boolean boolean64 = zonedChronology12.equals((java.lang.Object) zonedChronology59);
        org.joda.time.DurationField durationField65 = zonedChronology12.days();
        int int67 = durationField65.getValue(4495684870L);
        java.lang.String str68 = durationField65.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 38814846]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:00" + "'", str58, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "days" + "'", str68, "days");
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMillis(2795574);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withSecondOfMinute(22);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plus(readablePeriod20);
        int int22 = localDateTime21.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        boolean boolean28 = property24.equals((java.lang.Object) durationFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DurationField durationField30 = durationFieldType27.getField(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withFieldAdded(durationFieldType27, 42);
        int int33 = localDateTime21.getMonthOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 18 + "'", int22 == 18);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getScript();
        java.lang.String str6 = nameProvider0.getName(locale1, "8", "2022");
        java.util.Locale locale8 = new java.util.Locale("");
        java.lang.String str11 = nameProvider0.getName(locale8, "en-CA", "2022-02-22T00:46:43.953");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getScript();
        java.lang.String str19 = nameProvider13.getName(locale14, "8", "2022");
        java.util.Locale locale21 = new java.util.Locale("");
        java.lang.String str24 = nameProvider13.getName(locale21, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str25 = locale21.getDisplayName();
        java.lang.String str28 = nameProvider0.getName(locale21, "446", "2");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.toLanguageTag();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale35 = builder34.build();
        java.util.Locale.Builder builder36 = builder34.clear();
        java.util.Locale locale37 = builder34.build();
        java.lang.String str38 = locale30.getDisplayLanguage(locale37);
        java.lang.String str41 = nameProvider0.getShortName(locale30, "it", "2022-02-22T00:46:43.953");
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str46 = locale42.getExtension('u');
        java.util.Set<java.lang.Character> charSet47 = locale42.getExtensionKeys();
        java.lang.String str50 = nameProvider0.getShortName(locale42, "2022-02-22T00:47:20.262+10:00", "86399");
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        boolean boolean54 = locale51.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.util.Locale locale58 = locale55.stripExtensions();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = locale55.getDisplayCountry(locale59);
        java.lang.String str63 = locale51.getDisplayVariant(locale59);
        java.util.Locale locale64 = java.util.Locale.US;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.lang.String str68 = locale64.getDisplayCountry(locale66);
        java.util.Set<java.lang.Character> charSet69 = locale64.getExtensionKeys();
        java.util.Locale locale70 = locale64.stripExtensions();
        java.lang.String str71 = locale51.getDisplayName(locale64);
        java.lang.String str74 = nameProvider0.getName(locale51, "Canada", "");
        java.util.Locale locale78 = new java.util.Locale("zh_CN", "und", "2022-02-22T00:46:53.821");
        java.lang.String str81 = nameProvider0.getName(locale78, "dopo Cristo", "2022-02-22T00:47:59.811");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ja" + "'", str31, "ja");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Japanese" + "'", str38, "Japanese");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japanisch" + "'", str43, "Japanisch");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uce90\ub098\ub2e4" + "'", str67, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ubbf8\uad6d" + "'", str68, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "German" + "'", str71, "German");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_cn_UND_2022-02-22T00:46:53.821");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology20 = zonedChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology14.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology14.year();
        org.joda.time.DurationField durationField24 = zonedChronology14.weekyears();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 8, (org.joda.time.Chronology) zonedChronology14);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(1645454857210L, (org.joda.time.Chronology) zonedChronology14);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("minutes");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        int int6 = localDateTime5.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime5.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withDurationAdded(readableDuration8, 86399);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(2803852);
        boolean boolean13 = languageRange1.equals((java.lang.Object) localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str14 = dateTimeZone12.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology21 = zonedChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology15.year();
        java.lang.String str24 = zonedChronology15.toString();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology15.dayOfMonth();
        boolean boolean26 = property2.equals((java.lang.Object) dateTimeField25);
        java.lang.String str27 = property2.getName();
        int int28 = property2.get();
        org.joda.time.Interval interval29 = property2.toInterval();
        int int30 = property2.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property2.setCopy(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str24, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "millisOfDay" + "'", str27, "millisOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3234978 + "'", int28 == 3234978);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        java.lang.String str25 = dateTimeField24.getName();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(30);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        boolean boolean44 = zonedChronology42.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField45 = zonedChronology42.centuries();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology42.yearOfEra();
        int int49 = dateTimeField47.get(36000012L);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = dateTimeField47.getAsText(86399, locale51);
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        int int56 = dateTimeField47.getMaximumTextLength(locale53);
        java.util.Set<java.lang.Character> charSet57 = locale53.getExtensionKeys();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        boolean boolean61 = locale58.hasExtensions();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.util.Locale locale65 = locale62.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = locale66.getDisplayCountry(locale67);
        java.lang.String str69 = locale62.getDisplayCountry(locale66);
        java.lang.String str70 = locale58.getDisplayVariant(locale66);
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.util.Locale locale73 = locale72.stripExtensions();
        java.lang.String str74 = locale72.getScript();
        java.lang.String str77 = nameProvider71.getName(locale72, "8", "2022");
        java.util.Locale locale79 = new java.util.Locale("");
        java.lang.String str82 = nameProvider71.getName(locale79, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str83 = locale66.getDisplayName(locale79);
        java.lang.String str84 = locale53.getDisplayScript(locale79);
        java.lang.String str85 = dateTimeZone28.getShortName(95052063980160000L, locale79);
        java.lang.String str86 = dateTimeField24.getAsShortText((long) 999, locale79);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "clockhourOfHalfday" + "'", str25, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "86399" + "'", str52, "86399");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uce90\ub098\ub2e4" + "'", str55, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "German" + "'", str83, "German");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.030" + "'", str85, "+00:00:00.030");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "10" + "'", str86, "10");
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int2 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        int int10 = property6.getMaximumShortTextLength(locale7);
        java.lang.String str11 = locale7.getLanguage();
        java.lang.String str12 = timeZone0.getDisplayName(locale7);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uce90\ub098\ub2e4" + "'", str9, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Greenwich Mean Time" + "'", str12, "Greenwich Mean Time");
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        long long24 = property23.remainder();
        int int25 = property23.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = property23.withMaximumValue();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale30 = locale27.stripExtensions();
        java.lang.String str31 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale27);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = property33.getLocalDateTime();
        java.lang.String str35 = property33.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4496035101L + "'", long24 == 4496035101L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "8" + "'", str31, "8");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfDay" + "'", str35, "millisOfDay");
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusSeconds(305);
        int int27 = localDateTime26.size();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.dayOfWeek();
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property29.addWrapFieldToCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime32 = property29.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        boolean boolean47 = zonedChronology45.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField48 = zonedChronology45.centuries();
        org.joda.time.DurationField durationField49 = zonedChronology45.months();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        int int54 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime51.toDateTime(readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        int int61 = localDateTime58.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime58.isEqual((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(0);
        int int68 = localDateTime62.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime62);
        int[] intArray71 = zonedChronology45.get((org.joda.time.ReadablePartial) localDateTime69, 70001L);
        int int72 = localDateTime69.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property73 = localDateTime69.yearOfEra();
        boolean boolean74 = property73.isLeap();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.util.Locale locale80 = locale79.stripExtensions();
        java.lang.String str81 = locale79.getScript();
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = locale79.getDisplayScript(locale82);
        java.lang.String str84 = locale79.getISO3Language();
        java.lang.String str85 = locale79.getDisplayCountry();
        java.lang.String str86 = dateTimeZone77.getName((long) 42, locale79);
        java.lang.String str87 = locale79.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime88 = property73.setCopy("908", locale79);
        java.lang.String str89 = locale79.getScript();
        java.lang.String str90 = property29.getAsText(locale79);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 00:53:55 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20 + "'", int72 == 20);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ita" + "'", str84, "ita");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Italien" + "'", str85, "Italien");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-01:00" + "'", str86, "-01:00");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "155" + "'", str90, "155");
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology27 = zonedChronology21.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField31 = zonedChronology21.seconds();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, (org.joda.time.Chronology) zonedChronology21);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears(2841383);
        boolean boolean35 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond(3227660);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3227660 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        int int4 = property1.get();
        org.joda.time.LocalDateTime localDateTime5 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = property1.addWrapFieldToCopy(52);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.centuryOfEra();
        int int10 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 269 + "'", int4 == 269);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2922789 + "'", int10 == 2922789);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int20 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        int int25 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.secondOfMinute();
        int int27 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.plus(readablePeriod28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withField(dateTimeFieldType30, 18);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology51 = zonedChronology45.withZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        java.lang.String str57 = dateTimeZone54.getID();
        org.joda.time.Chronology chronology58 = zonedChronology45.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType30.getField((org.joda.time.Chronology) zonedChronology45);
        java.lang.String str61 = dateTimeFieldType30.getName();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 55 + "'", int20 == 55);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3235287 + "'", int25 == 3235287);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "centuryOfEra" + "'", str61, "centuryOfEra");
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("296");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        boolean boolean16 = zonedChronology14.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology14.hourOfDay();
        org.joda.time.DurationField durationField18 = zonedChronology14.years();
        org.joda.time.DateTimeZone dateTimeZone19 = zonedChronology14.getZone();
        org.joda.time.DurationField durationField20 = zonedChronology14.halfdays();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology14);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.year();
        boolean boolean24 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfFloorCopy();
        java.lang.String str29 = property27.getName();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int35 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime32.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        int int42 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime39.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.minus(readablePeriod46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withDayOfYear(10);
        boolean boolean50 = localDateTime30.equals((java.lang.Object) localDateTime39);
        int int51 = localDateTime30.getMonthOfYear();
        boolean boolean52 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "yearOfEra" + "'", str29, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T00:53:55.323" + "'", str45, "2022-02-22T00:53:55.323");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime1.millisOfSecond();
        int int21 = property20.get();
        java.lang.String str22 = property20.getAsShortText();
        int int23 = property20.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 371 + "'", int21 == 371);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "371" + "'", str22, "371");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis(2801202);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.weekOfWeekyear();
        int int16 = property15.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.setCopy(4);
        java.lang.String str19 = property15.getAsText();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder26.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale29 = builder28.build();
        java.lang.String str30 = locale29.getDisplayName();
        int int31 = dateTimeField25.getMaximumTextLength(locale29);
        java.lang.String str32 = property15.getAsText(locale29);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.lang.String str34 = localDateTime10.toString("462", locale29);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.year();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundCeilingCopy();
        java.lang.String str46 = property44.getName();
        java.lang.String str47 = property44.getName();
        int int48 = property44.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime49 = property44.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime50 = property44.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        int int55 = localDateTime54.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.minusDays(2989877);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime59);
        boolean boolean61 = localDateTime10.equals((java.lang.Object) localDateTime50);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime10.plusHours(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8" + "'", str19, "8");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "8" + "'", str32, "8");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "462" + "'", str34, "462");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "year" + "'", str46, "year");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "year" + "'", str47, "year");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.dayOfWeek();
        java.lang.String str14 = zonedChronology12.toString();
        org.joda.time.DurationField durationField15 = zonedChronology12.days();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str14, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withDurationAdded(readableDuration7, 42);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        java.lang.String str11 = property10.getName();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology24 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology30 = zonedChronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.Chronology chronology39 = zonedChronology24.withZone(dateTimeZone37);
        boolean boolean40 = property10.equals((java.lang.Object) zonedChronology24);
        long long41 = property10.remainder();
        org.joda.time.Interval interval42 = property10.toInterval();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3235517L + "'", long41 == 3235517L);
        org.junit.Assert.assertNotNull(interval42);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField16 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField18 = zonedChronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        boolean boolean33 = zonedChronology31.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        boolean boolean37 = dateTimeFieldType35.isSupported(chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType35.getField(chronology42);
        java.lang.String str44 = dateTimeField43.getName();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale51.getISO3Country();
        java.lang.String str54 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, 2, locale51);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime48.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        boolean boolean59 = dateTimeFieldType57.isSupported(chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusWeeks(0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType57.getField(chronology64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str70 = dateTimeZone68.getShortName((long) 10);
        java.lang.String str71 = dateTimeZone68.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.chrono.ZonedChronology zonedChronology73 = org.joda.time.chrono.ZonedChronology.getInstance(chronology64, dateTimeZone68);
        java.lang.String str75 = dateTimeZone68.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime48, dateTimeZone68);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int81 = dateTimeZone79.getOffsetFromLocal((long) 100);
        org.joda.time.DateTime dateTime82 = localDateTime77.toDateTime(dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str87 = dateTimeZone85.getShortName((long) (short) 0);
        long long89 = dateTimeZone79.getMillisKeepLocal(dateTimeZone85, 4495595149L);
        org.joda.time.Chronology chronology90 = zonedChronology13.withZone(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(0L, dateTimeZone79);
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "millisOfSecond" + "'", str44, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Japanisch" + "'", str52, "Japanisch");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2" + "'", str54, "2");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+10:00" + "'", str75, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+100:00" + "'", str87, "+100:00");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 4135595249L + "'", long89 == 4135595249L);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        int int4 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withSecondOfMinute(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3235611 + "'", int4 == 3235611);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusHours((-4495775));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone16 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField17 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        long long23 = zonedChronology12.add((long) 57, 1645454901789L, 2798838);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4605361706413321239L + "'", long23 == 4605361706413321239L);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = zonedChronology12.get(readablePeriod25, 202L, 168498240069L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getID();
        java.lang.String str8 = dateTimeZone2.getName((long) 2);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        timeZone9.setRawOffset(52);
        boolean boolean13 = timeZone9.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.secondOfDay();
        org.joda.time.Chronology chronology28 = zonedChronology12.withUTC();
        java.lang.String str29 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = zonedChronology12.get(readablePeriod31, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str29, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        int int5 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusYears(2833899);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.minusSeconds(2811632);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(493);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T00:47:37.210");
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        java.lang.String str27 = dateTimeZone24.getID();
        long long30 = dateTimeZone24.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale locale36 = locale33.stripExtensions();
        java.lang.String str37 = locale36.getDisplayVariant();
        java.lang.String str38 = dateTimeZone24.getShortName((long) (short) 0, locale36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        boolean boolean41 = zonedChronology12.equals((java.lang.Object) locale39);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999999L) + "'", long30 == (-35999999L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.millisOfSecond();
        java.lang.String str18 = zonedChronology12.toString();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra(2833328);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond(734);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str18, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = dateTimeFieldType7.isSupported(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType7.getField(chronology14);
        java.lang.String str16 = dateTimeField15.getName();
        int int17 = dateTimeField15.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.year();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale29);
        int int31 = property3.getMaximumShortTextLength(locale29);
        java.lang.String str32 = property3.getAsString();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = dateTimeZone35.getName((-35999999L), locale37);
        java.util.Locale locale40 = new java.util.Locale("");
        java.lang.String str41 = locale40.getVariant();
        java.lang.String str42 = locale37.getDisplayCountry(locale40);
        java.lang.String str43 = property3.getAsShortText(locale37);
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category44, locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category48, locale49);
        java.lang.String str51 = locale49.toLanguageTag();
        java.lang.String str52 = locale45.getDisplayLanguage(locale49);
        java.lang.String str53 = locale49.getDisplayCountry();
        java.lang.String str54 = locale37.getDisplayVariant(locale49);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfSecond" + "'", str16, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 999 + "'", int17 == 999);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "959" + "'", str30, "959");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2" + "'", str32, "2");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "China" + "'", str42, "China");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e8c\u6708" + "'", str43, "\u4e8c\u6708");
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en-CA" + "'", str47, "en-CA");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en-CA" + "'", str51, "en-CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English" + "'", str52, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Canada" + "'", str53, "Canada");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int10 = localDateTime9.getEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusDays((int) (byte) -1);
        int int13 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.hourOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("886");
        boolean boolean5 = timeZone0.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str17 = dateTimeZone15.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology18.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology24 = zonedChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology18.year();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology18.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType28.getField(chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        java.lang.String str42 = dateTimeZone39.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone39);
        java.lang.String str46 = dateTimeZone39.getShortName(4459589293L);
        org.joda.time.Chronology chronology47 = zonedChronology18.withZone(dateTimeZone39);
        long long51 = dateTimeZone39.convertLocalToUTC(4495594354L, true, 4495596112L);
        long long54 = dateTimeZone39.adjustOffset((long) 2795574, true);
        java.util.TimeZone timeZone55 = dateTimeZone39.toTimeZone();
        boolean boolean56 = timeZone55.observesDaylightTime();
        java.time.ZoneId zoneId57 = timeZone55.toZoneId();
        boolean boolean58 = timeZone0.hasSameRules(timeZone55);
        int int60 = timeZone55.getOffset(4459589293L);
        timeZone55.setRawOffset(2826200);
        java.time.ZoneId zoneId63 = timeZone55.toZoneId();
        java.lang.String str64 = timeZone55.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4459594354L + "'", long51 == 4459594354L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2795574L + "'", long54 == 2795574L);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zoneId57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 36000000 + "'", int60 == 36000000);
        org.junit.Assert.assertNotNull(zoneId63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GMT+10:00" + "'", str64, "GMT+10:00");
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.String str3 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        org.joda.time.DurationField durationField35 = zonedChronology34.weeks();
        org.joda.time.DurationField durationField36 = zonedChronology34.months();
        org.joda.time.DateTimeZone dateTimeZone37 = zonedChronology34.getZone();
        boolean boolean38 = localDateTime13.equals((java.lang.Object) zonedChronology34);
        org.joda.time.DurationField durationField39 = zonedChronology34.millis();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology34.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readableDuration8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        long long9 = dateTimeField6.add(2326524822293L, 0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2326524822293L + "'", long9 == 2326524822293L);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays(2795574);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusDays(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        java.lang.String str10 = property9.getName();
        org.joda.time.DurationField durationField11 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "minuteOfHour" + "'", str10, "minuteOfHour");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        int int7 = localDateTime3.getMillisOfDay();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int11 = localDateTime10.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        boolean boolean13 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withYearOfEra(860);
        int int16 = localDateTime15.size();
        int int17 = localDateTime15.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3236221 + "'", int7 == 3236221);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3236221 + "'", int17 == 3236221);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        long long7 = property6.remainder();
        org.joda.time.DurationField durationField8 = property6.getDurationField();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        boolean boolean12 = locale10.hasExtensions();
        int int13 = property6.getMaximumTextLength(locale10);
        int int14 = property2.getMaximumTextLength(locale10);
        int int15 = property2.get();
        org.joda.time.LocalDateTime localDateTime16 = property2.roundHalfCeilingCopy();
        java.lang.String str17 = property2.getAsString();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfSecond();
        org.joda.time.Interval interval20 = property19.toInterval();
        java.lang.String str21 = property19.getAsShortText();
        org.joda.time.LocalDateTime localDateTime22 = property19.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int27 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime24.toDateTime(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        int int33 = property32.getMinimumValue();
        boolean boolean34 = dateTime29.equals((java.lang.Object) int33);
        org.joda.time.Chronology chronology35 = dateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) -1);
        boolean boolean38 = dateTime29.equals((java.lang.Object) localDateTime37);
        org.joda.time.DateTime dateTime39 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int int40 = property2.getDifference((org.joda.time.ReadableInstant) dateTime29);
        java.lang.String str41 = dateTime29.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4496036239L + "'", long7 == 4496036239L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uce90\ub098\ub2e4" + "'", str11, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "53" + "'", str17, "53");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "239" + "'", str21, "239");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T00:53:56.239+10:00" + "'", str41, "2022-02-22T00:53:56.239+10:00");
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2951843);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.era();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays(2795574);
        int[] intArray31 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime29, (long) 305);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField33 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.Chronology chronology36 = zonedChronology12.withUTC();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = zonedChronology12.add(readablePeriod37, 1645454894183L, 2861621);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField42 = zonedChronology12.minutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 36000305]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645454894183L + "'", long40 == 1645454894183L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean2 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone0.getOffset(3140899, 28, 3152997, 2799082, 2803789, 787);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        int int25 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        int[] intArray28 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime26, 69999L);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField30 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField31 = zonedChronology12.halfdays();
        long long33 = durationField31.getMillis(3046060);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 36069999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 131589792000000L + "'", long33 == 131589792000000L);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("minuteOfHour");
        int int2 = timeZone1.getRawOffset();
        java.util.TimeZone.setDefault(timeZone1);
        int int5 = timeZone1.getOffset((long) 2906164);
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField14 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField16 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField17 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.yearOfEra();
        java.lang.String str20 = dateTimeField18.getAsShortText(4495682503L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970" + "'", str20, "1970");
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("886", locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        int int17 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime14.toDateTime(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfEra();
        int int23 = property22.getMinimumValue();
        boolean boolean24 = dateTime19.equals((java.lang.Object) int23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = dateTimeFieldType26.isSupported(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType26.getField(chronology33);
        org.joda.time.DurationField durationField35 = durationFieldType25.getField(chronology33);
        boolean boolean36 = dateTime19.equals((java.lang.Object) chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime19.getZone();
        org.joda.time.DateTime dateTime38 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime12.minusSeconds(2995583);
        int int41 = localDateTime40.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 28417000 + "'", int41 == 28417000);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds(43);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        java.lang.String str12 = property11.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property11.getFieldType();
        boolean boolean14 = localDateTime8.isSupported(dateTimeFieldType13);
        int int15 = localDateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology12.add(readablePeriod21, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        boolean boolean40 = zonedChronology38.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField41 = zonedChronology38.centuries();
        org.joda.time.DurationField durationField42 = zonedChronology38.months();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        int int47 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime44.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        int int54 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime51.isEqual((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks(0);
        int int61 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime55);
        int[] intArray64 = zonedChronology38.get((org.joda.time.ReadablePartial) localDateTime62, 70001L);
        int int65 = localDateTime62.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.yearOfEra();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property69 = localDateTime62.yearOfCentury();
        java.util.Locale locale73 = new java.util.Locale("462", "", "");
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        java.lang.String str75 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, locale73);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime62.withPeriodAdded(readablePeriod76, 41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = localDateTime78.toString(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20 + "'", int65 == 20);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals(locale73.toString(), "462");
        org.junit.Assert.assertNotNull(strSet74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "12" + "'", str75, "12");
        org.junit.Assert.assertNotNull(localDateTime78);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-22T00:53:56.469" + "'", str80, "2022-02-22T00:53:56.469");
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str15 = dateTimeZone13.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology22 = zonedChronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology16.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = dateTimeField23.getAsText(0L, locale25);
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category30);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category34, locale35);
        java.util.Locale locale37 = java.util.Locale.getDefault(category34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str49 = dateTimeZone47.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology50 = org.joda.time.chrono.ZonedChronology.getInstance(chronology42, dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology50.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology56 = zonedChronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology50.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = dateTimeField57.getAsText(0L, locale59);
        java.util.Locale.setDefault(category34, locale59);
        java.util.Locale locale64 = java.util.Locale.getDefault(category34);
        java.lang.String str65 = locale33.getDisplayName(locale64);
        java.util.Locale.setDefault(category0, locale33);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale67.getDisplayCountry(locale68);
        java.util.Locale locale70 = locale67.stripExtensions();
        java.lang.String str71 = locale67.getDisplayCountry();
        java.util.Locale locale72 = locale67.stripExtensions();
        java.util.Locale.setDefault(category0, locale72);
        java.util.Locale locale74 = locale72.stripExtensions();
        java.lang.String str75 = locale74.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:00" + "'", str49, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Englisch (Kanada)" + "'", str65, "Englisch (Kanada)");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "de" + "'", str75, "de");
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(2971848, 2863188, 888, 561, 3129051);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 561 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        long long54 = dateTimeField8.getDifferenceAsLong(70001L, (long) 2);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = dateTimeField8.set((long) 2971848, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanese" + "'", str39, "Japanese");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 69999L + "'", long54 == 69999L);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField22.getType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = dateTimeField25.set(1645454891815L, 2795575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2795575 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField24 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.era();
        org.joda.time.DurationField durationField26 = zonedChronology12.years();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L);
        int int29 = localDateTime28.getSecondOfMinute();
        int[] intArray36 = new int[] { 15, 2984003, 633, 193, 496, 689952 };
        // The following exception was thrown during execution in test generation
        try {
            zonedChronology12.validate((org.joda.time.ReadablePartial) localDateTime28, intArray36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2984003 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[15, 2984003, 633, 193, 496, 689952]");
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        java.lang.String str23 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField25 = zonedChronology12.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = durationField25.add((long) 594, 2698123913416734L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 2698123913416734 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str23, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withYear(22);
        org.joda.time.DateTime dateTime11 = localDateTime3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        long long15 = property14.remainder();
        int int16 = property14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = property14.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        boolean boolean20 = dateTimeFieldType18.isSupported(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType18.getField(chronology25);
        java.lang.String str27 = dateTimeField26.getName();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = locale34.getISO3Country();
        java.lang.String str37 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, 2, locale34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour((int) '#');
        java.util.Date date42 = localDateTime39.toDate();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMillis(305);
        boolean boolean45 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime17.minusYears(2);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        int int53 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime50.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = localDateTime47.toDateTime(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        int int59 = localDateTime58.getYear();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        int int64 = localDateTime61.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime61.toDateTime(readableInstant65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.yearOfEra();
        int int70 = property69.getMinimumValue();
        boolean boolean71 = dateTime66.equals((java.lang.Object) int70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int73 = dateTime66.get(dateTimeFieldType72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusWeeks(0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.days();
        org.joda.time.DurationField durationField80 = chronology78.minutes();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str85 = dateTimeZone83.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology86 = org.joda.time.chrono.ZonedChronology.getInstance(chronology78, dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology86.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean91 = dateTimeZone89.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology92 = zonedChronology86.withZone(dateTimeZone89);
        org.joda.time.DateTimeField dateTimeField93 = zonedChronology86.minuteOfHour();
        org.joda.time.DurationField durationField94 = zonedChronology86.seconds();
        org.joda.time.DateTimeField dateTimeField95 = zonedChronology86.millisOfDay();
        boolean boolean96 = dateTimeFieldType72.isSupported((org.joda.time.Chronology) zonedChronology86);
        int int97 = localDateTime58.get(dateTimeFieldType72);
        boolean boolean98 = dateTime56.isSupported(dateTimeFieldType72);
        boolean boolean99 = dateTime11.isSupported(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4496036727L + "'", long15 == 4496036727L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "millisOfSecond" + "'", str27, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Japanese" + "'", str35, "Japanese");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2" + "'", str37, "2");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Mon Feb 21 00:53:56 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+10:00" + "'", str85, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getScript();
        java.lang.String str6 = nameProvider0.getName(locale1, "8", "2022");
        java.util.Locale locale8 = new java.util.Locale("");
        java.lang.String str11 = nameProvider0.getName(locale8, "en-CA", "2022-02-22T00:46:43.953");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        boolean boolean16 = locale13.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = locale17.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale17.getDisplayCountry(locale21);
        java.lang.String str25 = locale13.getDisplayVariant(locale21);
        java.lang.String str26 = locale13.toLanguageTag();
        java.lang.String str29 = nameProvider0.getName(locale13, "100", "DateTimeField[millisOfSecond]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "de" + "'", str26, "de");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("95");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField15 = zonedChronology12.hours();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField17.set(1645454927155L, "2022-02-22T00:52:53.235+10:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T00:52:53.235+10:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DurationField durationField16 = zonedChronology12.minutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        int int9 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(36000000);
        boolean boolean14 = dateTimeZone2.isLocalDateTimeGap(localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        boolean boolean29 = zonedChronology27.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology27.hourOfDay();
        org.joda.time.DurationField durationField31 = zonedChronology27.years();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology27.getZone();
        org.joda.time.Chronology chronology33 = zonedChronology27.withUTC();
        org.joda.time.DurationField durationField34 = zonedChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology27.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        int int40 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime37.toDateTime(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        int int47 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        boolean boolean49 = localDateTime44.isEqual((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks(0);
        int int54 = localDateTime48.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime48);
        int int56 = localDateTime55.getSecondOfMinute();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.centuries();
        boolean boolean58 = localDateTime55.isSupported(durationFieldType57);
        int int59 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.minus(readableDuration60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.secondOfMinute();
        boolean boolean63 = localDateTime13.equals((java.lang.Object) property62);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 56 + "'", int56 == 56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        boolean boolean22 = dateTimeFieldType20.isSupported(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType20.getField(chronology27);
        java.lang.String str29 = dateTimeField28.getName();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.getISO3Country();
        java.lang.String str39 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, 2, locale36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime33.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMinuteOfHour((int) '#');
        java.util.Date date44 = localDateTime41.toDate();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.fromDateFields(date44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DurationField durationField52 = chronology50.minutes();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str57 = dateTimeZone55.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology58 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology58.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean63 = dateTimeZone61.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology64 = zonedChronology58.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology58.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology58.weekOfWeekyear();
        java.lang.String str67 = zonedChronology58.toString();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        int int71 = property70.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime72 = property70.getLocalDateTime();
        int[] intArray74 = zonedChronology58.get((org.joda.time.ReadablePartial) localDateTime72, 69999L);
        zonedChronology12.validate((org.joda.time.ReadablePartial) localDateTime45, intArray74);
        java.lang.String str76 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology12.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "millisOfSecond" + "'", str29, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japanese" + "'", str37, "Japanese");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Mon Feb 21 00:53:56 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str67, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1970, 1, 1, 36069999]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str76, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        int int28 = property27.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property27.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        int int34 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime31.toDateTime(readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        int int40 = property39.getMinimumValue();
        boolean boolean41 = dateTime36.equals((java.lang.Object) int40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int43 = dateTime36.get(dateTimeFieldType42);
        long long44 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime36.getZone();
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.Chronology chronology47 = zonedChronology12.withZone(dateTimeZone45);
        java.util.TimeZone timeZone48 = dateTimeZone45.toTimeZone();
        timeZone48.setID("\uc911\uad6d\uc5b4");
        int int51 = timeZone48.getRawOffset();
        timeZone48.setID("");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField20 = zonedChronology13.centuries();
        boolean boolean21 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField22 = zonedChronology13.weeks();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMonths((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDateTime9.getFields();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset(1645454816920L, false);
        java.lang.String str17 = dateTimeZone11.getShortName(1645454832545L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readablePeriod19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusMinutes(3023092);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645454816920L + "'", long15 == 1645454816920L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology26 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DE" + "'", str1, "DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime4 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plus(readableDuration6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int12 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        boolean boolean29 = zonedChronology27.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField30 = zonedChronology27.centuries();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology27.dayOfMonth();
        boolean boolean33 = dateTime14.equals((java.lang.Object) dateTimeField32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        boolean boolean36 = dateTime14.isSupported(dateTimeFieldType34);
        int int37 = localDateTime4.get(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        int int7 = property6.getMinimumValue();
        java.lang.String str8 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category12, locale13);
        org.joda.time.LocalDateTime localDateTime15 = property10.setCopy("886", locale13);
        org.joda.time.LocalDateTime localDateTime16 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        int int20 = property19.getMinimumValue();
        java.lang.String str21 = property19.getAsText();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = property19.getAsText(locale22);
        boolean boolean24 = localDateTime16.equals((java.lang.Object) property19);
        boolean boolean25 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean47 = dateTimeZone45.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology48 = zonedChronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology42.weekOfWeekyear();
        org.joda.time.Chronology chronology51 = zonedChronology42.withUTC();
        org.joda.time.DurationField durationField52 = zonedChronology42.seconds();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, (org.joda.time.Chronology) zonedChronology42);
        int int54 = localDateTime29.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime29.withYear(2811086);
        boolean boolean57 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = localDateTime16.toString(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 199 + "'", int54 == 199);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "292278900-01-01T00:00:00.000" + "'", str59, "292278900-01-01T00:00:00.000");
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime4 = property2.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        int int9 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime6.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        int int15 = property14.getMinimumValue();
        boolean boolean16 = dateTime11.equals((java.lang.Object) int15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int18 = dateTime11.get(dateTimeFieldType17);
        long long19 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime11.getZone();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = property22.setCopy(2928737);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2928737 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 1641600008L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.setCopy(2);
        java.lang.String str6 = property2.getAsText();
        org.joda.time.DateTimeField dateTimeField7 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970" + "'", str6, "1970");
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime23.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(readableInstant31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        int int36 = property35.getMinimumValue();
        boolean boolean37 = dateTime32.equals((java.lang.Object) int36);
        org.joda.time.Chronology chronology38 = dateTime32.getChronology();
        org.joda.time.DateTime dateTime39 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = property41.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.centuries();
        boolean boolean45 = property41.equals((java.lang.Object) durationFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DurationField durationField47 = durationFieldType44.getField(chronology46);
        java.lang.String str48 = durationFieldType44.toString();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime23.withFieldAdded(durationFieldType44, 20);
        int[] intArray52 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime50, (long) 53237862);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone54 = zonedChronology12.getZone();
        long long57 = dateTimeZone54.adjustOffset((long) 2850900, true);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "centuries" + "'", str48, "centuries");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 2, 2837862]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2850900L + "'", long57 == 2850900L);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str27 = dateTimeZone25.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology34 = zonedChronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        java.lang.String str42 = dateTimeZone39.getID();
        long long45 = dateTimeZone39.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.Chronology chronology46 = zonedChronology28.withZone(dateTimeZone39);
        boolean boolean47 = localDateTime15.equals((java.lang.Object) chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-35999999L) + "'", long45 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        int int8 = property7.getMinimumValue();
        java.lang.String str9 = property7.getAsText();
        org.joda.time.LocalDateTime localDateTime10 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMonths((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime14.getFields();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = localDateTime14.toDateTime(dateTimeZone16);
        long long19 = dateTimeZone2.getMillisKeepLocal(dateTimeZone16, (long) 140);
        int int21 = dateTimeZone16.getOffset(1645455022369L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 324000140L + "'", long19 == 324000140L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.property(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(80);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType11.getField(chronology18);
        java.lang.String str20 = dateTimeField19.getName();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.lang.String str29 = locale27.getISO3Country();
        java.lang.String str30 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, 2, locale27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMinuteOfHour((int) '#');
        int int35 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime8.withMonthOfYear(15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfSecond" + "'", str20, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanese" + "'", str28, "Japanese");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2" + "'", str30, "2");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology12.add(readablePeriod21, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DurationField durationField25 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        int int31 = localDateTime29.getYear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology51 = zonedChronology45.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology45.year();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology45.year();
        org.joda.time.DurationField durationField55 = zonedChronology45.hours();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.era();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays(2795574);
        int[] intArray64 = zonedChronology45.get((org.joda.time.ReadablePartial) localDateTime62, (long) 305);
        zonedChronology12.validate((org.joda.time.ReadablePartial) localDateTime29, intArray64);
        org.joda.time.DurationField durationField66 = zonedChronology12.seconds();
        boolean boolean67 = durationField66.isSupported();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 36000305]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField23 = zonedChronology12.weekyears();
        int int26 = durationField23.getDifference(1645454943262L, (long) 2814846);
        int int29 = durationField23.getDifference(299L, 45840000L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(976);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        int int25 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        int[] intArray28 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime26, 69999L);
        int int29 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withWeekyear((-359999));
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfEra(2851852);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.eras();
        java.lang.String str35 = durationFieldType34.toString();
        java.lang.String str36 = durationFieldType34.toString();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DurationField durationField43 = chronology41.minutes();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str48 = dateTimeZone46.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology41, dateTimeZone46);
        org.joda.time.DurationField durationField50 = zonedChronology49.weeks();
        boolean boolean51 = durationFieldType34.isSupported((org.joda.time.Chronology) zonedChronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.days();
        org.joda.time.DurationField durationField59 = chronology57.minutes();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str64 = dateTimeZone62.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology65 = org.joda.time.chrono.ZonedChronology.getInstance(chronology57, dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology65.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean70 = dateTimeZone68.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology71 = zonedChronology65.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology65.dayOfMonth();
        org.joda.time.Chronology chronology73 = zonedChronology65.withUTC();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology77 = zonedChronology65.withZone(dateTimeZone76);
        boolean boolean78 = dateTimeFieldType52.isSupported((org.joda.time.Chronology) zonedChronology65);
        boolean boolean79 = durationFieldType34.isSupported((org.joda.time.Chronology) zonedChronology65);
        boolean boolean80 = localDateTime33.isSupported(durationFieldType34);
        int int81 = localDateTime33.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime33.minusMillis(998);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 36069999]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eras" + "'", str35, "eras");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eras" + "'", str36, "eras");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+10:00" + "'", str64, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 51 + "'", int81 == 51);
        org.junit.Assert.assertNotNull(localDateTime83);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getScript();
        java.lang.String str13 = nameProvider7.getName(locale8, "8", "2022");
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        boolean boolean17 = locale14.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale18.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale18.getDisplayCountry(locale22);
        java.lang.String str26 = locale14.getDisplayVariant(locale22);
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.lang.String str33 = nameProvider27.getName(locale28, "8", "2022");
        java.util.Locale locale35 = new java.util.Locale("");
        java.lang.String str38 = nameProvider27.getName(locale35, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str39 = locale22.getDisplayName(locale35);
        java.lang.String str42 = nameProvider7.getShortName(locale35, "centuries", "716");
        java.lang.String str43 = property2.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime45 = property2.addWrapFieldToCopy(2812558);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks(858);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DurationField durationField54 = chronology52.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology52, dateTimeZone57);
        boolean boolean62 = zonedChronology60.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField63 = zonedChronology60.centuries();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology60.dayOfYear();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet66 = locale65.getExtensionKeys();
        java.lang.Object[] objArray67 = charSet66.toArray();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        boolean boolean70 = charSet66.retainAll((java.util.Collection<java.lang.Character>) charSet69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(dateTimeZone73);
        int int75 = localDateTime72.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDateTime72.toDateTime(readableInstant76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.minusWeeks((int) (short) 1);
        boolean boolean80 = charSet66.remove((java.lang.Object) localDateTime79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusMillis(2795574);
        java.util.Locale locale83 = java.util.Locale.CANADA;
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = locale83.getDisplayCountry(locale84);
        java.lang.String str86 = dateTimeField64.getAsText((org.joda.time.ReadablePartial) localDateTime79, locale83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime47.withYearOfEra(980);
        int int90 = localDateTime47.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "German" + "'", str39, "German");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\uce90\ub098\ub2e4" + "'", str85, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "46" + "'", str86, "46");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField22 = zonedChronology12.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = durationField22.getMillis(3028891, (long) 3063135);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 302891070 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology37 = zonedChronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str42 = dateTimeZone40.getShortName((long) 10);
        java.lang.String str43 = dateTimeZone40.getID();
        org.joda.time.Chronology chronology44 = zonedChronology31.withZone(dateTimeZone40);
        long long48 = zonedChronology31.add((long) (byte) -1, (-35998661L), 100);
        org.joda.time.DateTimeZone dateTimeZone49 = zonedChronology31.getZone();
        org.joda.time.Chronology chronology50 = chronology18.withZone(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = localDateTime51.getValue(3145256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3145256");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3599866101L) + "'", long48 == (-3599866101L));
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime18.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int[] intArray38 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime36, 70001L);
        java.lang.Class<?> wildcardClass39 = zonedChronology12.getClass();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        long long10 = property9.remainder();
        int int11 = property9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfFloorCopy();
        int int14 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withPeriodAdded(readablePeriod15, 14);
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusHours(641);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int22 = localDateTime20.indexOf(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4496037993L + "'", long10 == 4496037993L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        int int16 = dateTimeField14.get((long) 22);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.parse("2022-02-22T00:46:43.953");
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, 53);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusWeeks(360000000);
        int int27 = localDateTime18.size();
        int int28 = localDateTime18.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.plusMonths(19043);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis(2811086);
        int int33 = localDateTime30.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 953 + "'", int28 == 953);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-22T00:47:15.991");
        int int2 = localDateTime1.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.weekyearOfCentury();
        java.lang.String str29 = zonedChronology12.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str29, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfDay();
        java.lang.String str26 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = zonedChronology12.getZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str26, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.Chronology chronology21 = zonedChronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology25 = zonedChronology13.withZone(dateTimeZone24);
        boolean boolean26 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology45 = zonedChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.year();
        java.lang.String str48 = zonedChronology39.toString();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology39.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        int int55 = property54.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime56 = property54.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        int int61 = localDateTime58.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime58.toDateTime(readableInstant62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.yearOfEra();
        int int67 = property66.getMinimumValue();
        boolean boolean68 = dateTime63.equals((java.lang.Object) int67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int70 = dateTime63.get(dateTimeFieldType69);
        long long71 = property54.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime63.getZone();
        org.joda.time.Chronology chronology73 = zonedChronology39.withZone(dateTimeZone72);
        org.joda.time.Chronology chronology74 = zonedChronology13.withZone(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str48, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField18 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str31 = dateTimeZone29.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology38 = zonedChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology32.weekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = zonedChronology32.getZone();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        int int47 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime44.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfEra();
        int int53 = property52.getMinimumValue();
        boolean boolean54 = dateTime49.equals((java.lang.Object) int53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology57 = null;
        boolean boolean58 = dateTimeFieldType56.isSupported(chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks(0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType56.getField(chronology63);
        org.joda.time.DurationField durationField65 = durationFieldType55.getField(chronology63);
        boolean boolean66 = dateTime49.equals((java.lang.Object) chronology63);
        int int67 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology68 = zonedChronology12.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField70 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology12.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        long long29 = zonedChronology12.add((long) (byte) -1, (-35998661L), 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean47 = dateTimeZone45.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology48 = zonedChronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str53 = dateTimeZone51.getShortName((long) 10);
        java.lang.String str54 = dateTimeZone51.getID();
        org.joda.time.Chronology chronology55 = zonedChronology42.withZone(dateTimeZone51);
        org.joda.time.chrono.ZonedChronology zonedChronology56 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology56.halfdayOfDay();
        org.joda.time.DurationField durationField58 = zonedChronology56.weekyears();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-3599866101L) + "'", long29 == (-3599866101L));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(zonedChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        int int2 = localDateTime0.getYearOfCentury();
        int int3 = localDateTime0.getHourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        java.lang.String[] strArray23 = java.util.TimeZone.getAvailableIDs((int) (byte) 100);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) strArray23);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.year();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = dateTimeFieldType46.isSupported(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType46.getField(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        java.lang.String str60 = dateTimeZone57.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.chrono.ZonedChronology zonedChronology62 = org.joda.time.chrono.ZonedChronology.getInstance(chronology53, dateTimeZone57);
        java.lang.String str64 = dateTimeZone57.getShortName(4459589293L);
        org.joda.time.Chronology chronology65 = zonedChronology36.withZone(dateTimeZone57);
        int int67 = dateTimeZone57.getStandardOffset(1645454812204L);
        boolean boolean69 = dateTimeZone57.isStandardOffset((long) 43);
        boolean boolean70 = zonedChronology12.equals((java.lang.Object) dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+10:00" + "'", str64, "+10:00");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology44 = zonedChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology38.dayOfMonth();
        org.joda.time.Chronology chronology48 = zonedChronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.days();
        org.joda.time.DurationField durationField55 = chronology53.minutes();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str60 = dateTimeZone58.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology61 = org.joda.time.chrono.ZonedChronology.getInstance(chronology53, dateTimeZone58);
        boolean boolean63 = zonedChronology61.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField64 = zonedChronology61.centuries();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology61.dayOfYear();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        java.lang.Object[] objArray68 = charSet67.toArray();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        boolean boolean71 = charSet67.retainAll((java.util.Collection<java.lang.Character>) charSet70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        int int76 = localDateTime73.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime73.toDateTime(readableInstant77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime73.minusWeeks((int) (short) 1);
        boolean boolean81 = charSet67.remove((java.lang.Object) localDateTime80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusMillis(2795574);
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayCountry(locale85);
        java.lang.String str87 = dateTimeField65.getAsText((org.joda.time.ReadablePartial) localDateTime80, locale84);
        int[] intArray89 = zonedChronology38.get((org.joda.time.ReadablePartial) localDateTime80, (long) 2811632);
        int[] intArray91 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime80, 0L);
        int int92 = localDateTime80.size();
        int int93 = localDateTime80.getWeekyear();
        int int94 = localDateTime80.getDayOfMonth();
        int int95 = localDateTime80.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\uce90\ub098\ub2e4" + "'", str86, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "46" + "'", str87, "46");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 1, 38811632]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1970, 1, 1, 36000000]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2022 + "'", int93 == 2022);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 15 + "'", int94 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 53 + "'", int95 == 53);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("886", locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.roundFloorCopy();
        org.joda.time.DurationField durationField13 = property6.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        int int19 = localDateTime18.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime18.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.property(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(80);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = dateTimeFieldType26.isSupported(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType26.getField(chronology33);
        java.lang.String str35 = dateTimeField34.getName();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.lang.String str44 = locale42.getISO3Country();
        java.lang.String str45 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 2, locale42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMinuteOfHour((int) '#');
        int int50 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime23.yearOfCentury();
        int int52 = localDateTime23.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.DurationField durationField60 = chronology58.minutes();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str65 = dateTimeZone63.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology66 = org.joda.time.chrono.ZonedChronology.getInstance(chronology58, dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology66.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean71 = dateTimeZone69.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology72 = zonedChronology66.withZone(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str77 = dateTimeZone75.getShortName((long) 10);
        java.lang.String str78 = dateTimeZone75.getID();
        org.joda.time.Chronology chronology79 = zonedChronology66.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology66.yearOfEra();
        org.joda.time.DurationField durationField81 = zonedChronology66.seconds();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology66.dayOfMonth();
        long long86 = zonedChronology66.add(241819603200542L, (long) (byte) 0, 36000000);
        org.joda.time.DurationField durationField87 = zonedChronology66.weekyears();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology66.weekOfWeekyear();
        org.joda.time.DurationField durationField89 = zonedChronology66.months();
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.parse("59");
        int[] intArray93 = zonedChronology66.get((org.joda.time.ReadablePartial) localDateTime91, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = dateTimeField14.set((org.joda.time.ReadablePartial) localDateTime23, (int) (short) 10, intArray93, 3169800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3169800 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfSecond" + "'", str35, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japanese" + "'", str43, "Japanese");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2" + "'", str45, "2");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 434 + "'", int52 == 434);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+10:00" + "'", str65, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 241819603200542L + "'", long86 == 241819603200542L);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1970, 1, 1, 36000000]");
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        java.lang.String str6 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekyear((-18));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        int int13 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis((int) (byte) -1);
        int int25 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        java.lang.String str29 = property28.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property28.getFieldType();
        boolean boolean31 = localDateTime19.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime19.dayOfWeek();
        boolean boolean33 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        int int38 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        int int42 = localDateTime40.get(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getDurationType();
        boolean boolean44 = localDateTime3.isSupported(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T00:53:58.497" + "'", str6, "2022-02-22T00:53:58.497");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0052-12-12T01:52:00.022", (double) 4495668429L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4.495668429E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusSeconds(305);
        int int27 = localDateTime26.size();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDateTime26.getValue(438);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 438");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 00:53:58 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4459590955L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.millisOfDay();
        org.joda.time.DurationField durationField24 = zonedChronology13.months();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology13.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = zonedChronology13.get(readablePeriod29, (long) 874);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean47 = dateTimeZone45.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology48 = zonedChronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology42.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology42.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology42.era();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology42);
        long long57 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime55, 1641600008010000L);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology12.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = zonedChronology12.add(readablePeriod59, 1641600008010000L, (-3600000));
        org.joda.time.Chronology chronology63 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645455238581L + "'", long57 == 1645455238581L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1641600008010000L + "'", long62 == 1641600008010000L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.Chronology chronology25 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField26 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        long long14 = chronology7.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DurationField durationField15 = chronology7.minutes();
        long long17 = durationField15.getValueAsLong(1645368405871L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 70001L + "'", long14 == 70001L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 27422806L + "'", long17 == 27422806L);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusDays((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DurationField durationField20 = zonedChronology19.centuries();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime6.withFieldAdded(durationFieldType21, 54);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfSecond();
        java.util.Locale locale26 = new java.util.Locale("ja");
        int int27 = property24.getMaximumTextLength(locale26);
        org.joda.time.DurationField durationField28 = property24.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) -1);
        java.util.Date date9 = localDateTime8.toDate();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.Object[] objArray12 = charSet11.toArray();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        boolean boolean15 = charSet11.retainAll((java.util.Collection<java.lang.Character>) charSet14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        int int20 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime(readableInstant21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusWeeks((int) (short) 1);
        boolean boolean25 = charSet11.remove((java.lang.Object) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMillis(2795574);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withSecondOfMinute(22);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.plus(readablePeriod30);
        int int32 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime8.year();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundCeilingCopy();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.lang.String str38 = locale35.getDisplayName();
        boolean boolean39 = locale35.hasExtensions();
        java.lang.String str40 = property33.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime41 = property33.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withPeriodAdded(readablePeriod42, 7369);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime48.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property56 = localDateTime48.property(dateTimeFieldType55);
        java.lang.String str57 = dateTimeFieldType55.toString();
        int int58 = localDateTime41.indexOf(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 00:53:58 GMT 2022");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "German" + "'", str38, "German");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "yearOfCentury" + "'", str57, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField18 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField20 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        java.lang.String str24 = dateTimeField22.getAsText((long) 677);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970" + "'", str24, "1970");
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField19 = zonedChronology12.years();
        long long21 = durationField19.getMillis(1970);
        long long24 = durationField19.getMillis(3560, 0L);
        int int26 = durationField19.getValue((-35999999L));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 62167195440000L + "'", long21 == 62167195440000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 112342723200000L + "'", long24 == 112342723200000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int13 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime10.toDateTime(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        int int20 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime17.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property29 = localDateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = localDateTime10.toDateTime(dateTimeZone32);
        int int34 = property6.getDifference((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime35 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = property6.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        boolean boolean12 = localDateTime1.equals((java.lang.Object) localDateTime8);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType14.getField(chronology21);
        org.joda.time.DurationField durationField23 = durationFieldType13.getField(chronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFieldAdded(durationFieldType13, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        java.util.Locale locale30 = new java.util.Locale("462", "", "");
        java.lang.String str31 = locale30.getVariant();
        java.lang.String str32 = property26.getAsShortText(locale30);
        org.joda.time.LocalDateTime localDateTime33 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        boolean boolean35 = property34.isLeap();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals(locale30.toString(), "462");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "54" + "'", str32, "54");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        long long26 = dateTimeField24.roundCeiling(3002920L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31500000000L + "'", long26 == 31500000000L);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DurationField durationField23 = durationFieldType9.getField((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.millisOfSecond();
        org.joda.time.DurationField durationField25 = zonedChronology22.halfdays();
        org.joda.time.DurationField durationField26 = zonedChronology22.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.monthOfYear();
        int int11 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = dateTimeFieldType12.isSupported(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType12.getField(chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType12.getRangeDurationType();
        boolean boolean22 = localDateTime8.isSupported(dateTimeFieldType12);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str34 = dateTimeZone32.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology27, dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology41 = zonedChronology35.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology35.year();
        java.lang.String str44 = zonedChronology35.toString();
        boolean boolean45 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) zonedChronology35);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology35.dayOfWeek();
        boolean boolean49 = zonedChronology35.equals((java.lang.Object) 20575123200000L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str44, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField25 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        int int5 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        int int11 = property10.getMinimumValue();
        boolean boolean12 = dateTime7.equals((java.lang.Object) int11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType14.getField(chronology21);
        org.joda.time.DurationField durationField23 = durationFieldType13.getField(chronology21);
        boolean boolean24 = dateTime7.equals((java.lang.Object) chronology21);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((-35998661L), chronology21);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays(4495678);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        int int26 = dateTimeField23.getDifference(1645454843220L, 2812737L);
        java.lang.String str27 = dateTimeField23.getName();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        int int32 = localDateTime31.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime31.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        int int37 = property36.getMinimumValue();
        java.lang.String str38 = property36.getAsText();
        org.joda.time.LocalDateTime localDateTime39 = property36.withMaximumValue();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.centuryOfEra();
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category42, locale43);
        org.joda.time.LocalDateTime localDateTime45 = property40.setCopy("886", locale43);
        org.joda.time.LocalDateTime localDateTime46 = property40.roundFloorCopy();
        int int47 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType48.getField(chronology55);
        java.lang.String str57 = dateTimeField56.getName();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusWeeks(0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.lang.String str66 = locale64.getISO3Country();
        java.lang.String str67 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 2, locale64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime61.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology71 = null;
        boolean boolean72 = dateTimeFieldType70.isSupported(chronology71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusWeeks(0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType70.getField(chronology77);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str83 = dateTimeZone81.getShortName((long) 10);
        java.lang.String str84 = dateTimeZone81.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone81);
        org.joda.time.chrono.ZonedChronology zonedChronology86 = org.joda.time.chrono.ZonedChronology.getInstance(chronology77, dateTimeZone81);
        java.lang.String str88 = dateTimeZone81.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime61, dateTimeZone81);
        java.util.Locale locale91 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale91);
        java.lang.String str93 = dateTimeZone81.getName(4495675703L, locale91);
        java.lang.String str94 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime46, locale91);
        java.lang.Object obj95 = locale91.clone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "year" + "'", str27, "year");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "millisOfSecond" + "'", str57, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanese" + "'", str65, "Japanese");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2" + "'", str67, "2");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+10:00" + "'", str83, "+10:00");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:00" + "'", str84, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+10:00" + "'", str88, "+10:00");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+10:00" + "'", str93, "+10:00");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "292278900" + "'", str94, "292278900");
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "ko_KR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "ko_KR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "ko_KR");
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((long) (short) 0);
        int int12 = property9.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        int int20 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime17.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.dayOfMonth();
        java.lang.String str24 = localDateTime17.toString();
        int int25 = localDateTime17.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology44 = zonedChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology38.weekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = zonedChronology38.getZone();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        int int53 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime50.toDateTime(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        int int59 = property58.getMinimumValue();
        boolean boolean60 = dateTime55.equals((java.lang.Object) int59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusWeeks(0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType62.getField(chronology69);
        org.joda.time.DurationField durationField71 = durationFieldType61.getField(chronology69);
        boolean boolean72 = dateTime55.equals((java.lang.Object) chronology69);
        int int73 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime74 = localDateTime17.toDateTime(dateTimeZone48);
        int int75 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime74);
        int int76 = property7.compareTo((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.LocalDateTime localDateTime77 = property7.roundCeilingCopy();
        int int78 = localDateTime77.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:53:59.235" + "'", str24, "2022-02-22T00:53:59.235");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 36000000 + "'", int73 == 36000000);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2023 + "'", int78 == 2023);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology26 = zonedChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology20.dayOfMonth();
        org.joda.time.Chronology chronology28 = zonedChronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology32 = zonedChronology20.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDateTime7.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property34 = localDateTime7.year();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("703");
        int int37 = property34.getMaximumShortTextLength(locale36);
        org.joda.time.LocalDateTime localDateTime38 = property34.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DurationField durationField45 = chronology43.minutes();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology43, dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology51.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean56 = dateTimeZone54.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology57 = zonedChronology51.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology51.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology51.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = zonedChronology51.weeks();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology51.yearOfCentury();
        boolean boolean64 = property34.equals((java.lang.Object) zonedChronology51);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology51.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField65.getType();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks(0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.days();
        org.joda.time.DurationField durationField73 = chronology71.minutes();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str78 = dateTimeZone76.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology79 = org.joda.time.chrono.ZonedChronology.getInstance(chronology71, dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology79.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean84 = dateTimeZone82.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology85 = zonedChronology79.withZone(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology79.dayOfMonth();
        org.joda.time.Chronology chronology87 = zonedChronology79.withUTC();
        org.joda.time.DurationField durationField88 = zonedChronology79.seconds();
        org.joda.time.DateTimeField dateTimeField89 = zonedChronology79.hourOfDay();
        org.joda.time.DurationField durationField90 = zonedChronology79.seconds();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType66.getField((org.joda.time.Chronology) zonedChronology79);
        org.joda.time.DurationField durationField92 = dateTimeField91.getLeapDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNull(durationField92);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField42 = zonedChronology12.millis();
        org.joda.time.DurationField durationField43 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology12.dayOfYear();
        long long46 = dateTimeField44.roundFloor((long) 50);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-36000000L) + "'", long46 == (-36000000L));
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(30);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(1645368574781L, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMinuteOfHour(3123783);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3123783 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.Interval interval2 = property1.toInterval();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = property1.getAsText(locale3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str16 = dateTimeZone14.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology9, dateTimeZone14);
        org.joda.time.DurationField durationField18 = zonedChronology17.weeks();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology17.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusMinutes(292278993);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMonths(0);
        int int34 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime22.minus(readableDuration35);
        org.joda.time.Chronology chronology37 = localDateTime22.getChronology();
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale39.getScript();
        java.lang.String str44 = nameProvider38.getName(locale39, "8", "2022");
        java.util.Locale locale46 = new java.util.Locale("");
        java.lang.String str49 = nameProvider38.getName(locale46, "en-CA", "2022-02-22T00:46:43.953");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        boolean boolean54 = locale51.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.util.Locale locale58 = locale55.stripExtensions();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = locale55.getDisplayCountry(locale59);
        java.lang.String str63 = locale51.getDisplayVariant(locale59);
        java.lang.String str64 = locale51.toLanguageTag();
        java.lang.String str67 = nameProvider38.getName(locale51, "100", "DateTimeField[millisOfSecond]");
        java.util.Locale locale68 = locale51.stripExtensions();
        java.lang.String str69 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale51);
        java.lang.String str70 = locale3.getDisplayCountry(locale51);
        boolean boolean71 = locale3.hasExtensions();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "409" + "'", str4, "409");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "de" + "'", str64, "de");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Feb" + "'", str69, "Feb");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Taiwan" + "'", str70, "Taiwan");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime36 = property34.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury(2815037);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2815037 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496039447L + "'", long3 == 4496039447L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str23, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:53:59 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime45.dayOfMonth();
        java.lang.String str63 = property62.toString();
        org.joda.time.Interval interval64 = property62.toInterval();
        java.util.Locale locale68 = new java.util.Locale("2022-02-22T00:48:53.616", "1970-01-01T00:00:00.000", "2022-02-22T00:49:26.456");
        int int69 = property62.getMaximumShortTextLength(locale68);
        org.joda.time.LocalDateTime localDateTime71 = property62.addWrapFieldToCopy((-52));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str39, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[dayOfMonth]" + "'", str63, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertEquals(locale68.toString(), "2022-02-22t00:48:53.616_1970-01-01T00:00:00.000_2022-02-22T00:49:26.456");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField14 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField18 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str7 = nameProvider1.getName(locale2, "8", "2022");
        java.util.Locale locale9 = new java.util.Locale("");
        java.lang.String str12 = nameProvider1.getName(locale9, "en-CA", "2022-02-22T00:46:43.953");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider1);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        boolean boolean17 = locale14.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale18.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale18.getDisplayCountry(locale22);
        java.lang.String str26 = locale14.getDisplayVariant(locale22);
        java.lang.String str27 = locale14.toLanguageTag();
        java.lang.String str30 = nameProvider1.getName(locale14, "100", "DateTimeField[millisOfSecond]");
        java.util.Locale locale34 = new java.util.Locale("462", "", "");
        java.lang.String str35 = locale34.getVariant();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str39 = nameProvider1.getName(locale34, "halfdayOfDay", "113");
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str44 = nameProvider1.getName(locale40, "ITA", "2890513");
        java.util.Locale locale47 = new java.util.Locale("70", "\uc601\uc5b4");
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale51 = java.util.Locale.getDefault(category48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DurationField durationField58 = chronology56.minutes();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str63 = dateTimeZone61.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance(chronology56, dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean69 = dateTimeZone67.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology70 = zonedChronology64.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology64.dayOfMonth();
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.lang.String str75 = locale73.getDisplayCountry(locale74);
        java.lang.String str76 = dateTimeField71.getAsText(0L, locale73);
        java.util.Locale.setDefault(category48, locale73);
        java.lang.String str78 = locale47.getDisplayCountry(locale73);
        java.lang.String str81 = nameProvider1.getShortName(locale73, "2922789", "AM");
        java.lang.String str82 = locale0.getDisplayName(locale73);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals(locale34.toString(), "462");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str44);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\uc601\uc5b4" + "'", str78, "\uc601\uc5b4");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Franz\366sisch (Kanada)" + "'", str82, "Franz\366sisch (Kanada)");
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        charSet1.clear();
        int int7 = charSet1.size();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.Object[] objArray10 = charSet9.toArray();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        boolean boolean13 = charSet9.retainAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        boolean boolean17 = locale14.hasExtensions();
        boolean boolean18 = charSet12.remove((java.lang.Object) boolean17);
        boolean boolean19 = charSet12.isEmpty();
        boolean boolean21 = charSet12.contains((java.lang.Object) "2");
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        org.joda.time.DurationField durationField35 = zonedChronology34.weeks();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology34.dayOfWeek();
        org.joda.time.DurationField durationField38 = zonedChronology34.years();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology34.clockhourOfHalfday();
        boolean boolean40 = charSet12.contains((java.lang.Object) zonedChronology34);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.util.Spliterator<java.lang.Character> charSpliterator43 = charSet42.spliterator();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        int int48 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime45.toDateTime(readableInstant49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime45.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime45.withFieldAdded(durationFieldType54, (int) (byte) 1);
        boolean boolean58 = charSet42.contains((java.lang.Object) (byte) 1);
        boolean boolean59 = charSet12.addAll((java.util.Collection<java.lang.Character>) charSet42);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor62 = charSet61.iterator();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        java.lang.Object[] objArray65 = charSet64.toArray();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        boolean boolean68 = charSet64.retainAll((java.util.Collection<java.lang.Character>) charSet67);
        boolean boolean69 = charSet61.containsAll((java.util.Collection<java.lang.Character>) charSet64);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean71 = charSet61.equals((java.lang.Object) dateTimeFieldType70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor74 = charSet73.iterator();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet76 = locale75.getExtensionKeys();
        java.lang.Object[] objArray77 = charSet76.toArray();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet79 = locale78.getExtensionKeys();
        boolean boolean80 = charSet76.retainAll((java.util.Collection<java.lang.Character>) charSet79);
        boolean boolean81 = charSet73.containsAll((java.util.Collection<java.lang.Character>) charSet76);
        java.util.Spliterator<java.lang.Character> charSpliterator82 = charSet76.spliterator();
        boolean boolean83 = charSet61.retainAll((java.util.Collection<java.lang.Character>) charSet76);
        int int84 = charSet61.size();
        boolean boolean85 = charSet12.containsAll((java.util.Collection<java.lang.Character>) charSet61);
        java.util.Iterator<java.lang.Character> charItor86 = charSet12.iterator();
        boolean boolean87 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(charSpliterator43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "centuries" + "'", str55, "centuries");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(charItor62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(charItor74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(charSpliterator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(charItor86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        java.lang.String str23 = zonedChronology12.toString();
        org.joda.time.DurationField durationField24 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str23, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.minuteOfHour();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DurationField durationField22 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField25 = zonedChronology13.days();
        long long28 = durationField25.add((long) 3115196, 3216927);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 277942495915196L + "'", long28 == 277942495915196L);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField26 = zonedChronology12.centuries();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.halfdayOfDay();
        boolean boolean7 = dateTimeField6.isSupported();
        int int9 = dateTimeField6.getMaximumValue(9223369052310893889L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4495644667L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        java.lang.String str3 = localDateTime1.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-02-22T10:47:24.667" + "'", str3, "1970-02-22T10:47:24.667");
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime5 = property2.setCopy(4);
        java.lang.String str6 = property2.getAsText();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        boolean boolean21 = zonedChronology19.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField22 = zonedChronology19.centuries();
        org.joda.time.DurationField durationField23 = zonedChronology19.months();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime25.toDateTime(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int35 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime32.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        int int42 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime36);
        int[] intArray45 = zonedChronology19.get((org.joda.time.ReadablePartial) localDateTime43, 70001L);
        int int46 = localDateTime43.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfMonth();
        int int51 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusHours(3007196);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.minusDays(37);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8" + "'", str6, "8");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField24 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        java.util.Locale locale3 = new java.util.Locale("-292275047-11-20T10:24:25.077", "2022-02-22T00:50:38.651", "US");
        org.junit.Assert.assertEquals(locale3.toString(), "-292275047-11-20t10:24:25.077_2022-02-22T00:50:38.651_US");
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology12.getZone();
        long long27 = dateTimeZone25.nextTransition(1645454853392L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = localDateTime29.getMillisOfDay();
        boolean boolean32 = dateTimeZone25.isLocalDateTimeGap(localDateTime29);
        java.util.TimeZone timeZone33 = dateTimeZone25.toTimeZone();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645454853392L + "'", long27 == 1645454853392L);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3239896 + "'", int31 == 3239896);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(579, 325, (-1645452192), 3191596, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3191596 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        int int4 = property1.get();
        org.joda.time.LocalDateTime localDateTime5 = property1.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDateTime5.getFieldType(3);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        java.lang.String str11 = dateTimeFieldType9.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 939 + "'", int4 == 939);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T00:53:59.939" + "'", str7, "2022-02-22T00:53:59.939");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean11 = charSet1.equals((java.lang.Object) dateTimeFieldType10);
        java.util.Iterator<java.lang.Character> charItor12 = charSet1.iterator();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.lang.Object[] objArray15 = charSet14.toArray();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        boolean boolean18 = charSet14.retainAll((java.util.Collection<java.lang.Character>) charSet17);
        charSet14.clear();
        java.util.stream.Stream<java.lang.Character> charStream20 = charSet14.parallelStream();
        boolean boolean21 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet14);
        java.util.stream.Stream<java.lang.Character> charStream22 = charSet1.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charItor12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charStream22);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology12.hours();
        org.joda.time.DurationField durationField26 = zonedChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone27 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField28 = zonedChronology12.halfdays();
        long long31 = durationField28.getValueAsLong((-1510269006661L), 1645454996429L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-34959L) + "'", long31 == (-34959L));
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-22T00:51:32.409", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.millisOfSecond();
        java.lang.String str23 = zonedChronology12.toString();
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        boolean boolean25 = durationField24.isPrecise();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str23, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getID();
        java.lang.String str8 = dateTimeZone2.getName((long) 2);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone9);
        timeZone9.setRawOffset(2841156);
        timeZone9.setID("DateTimeField[hourOfDay]");
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str27 = dateTimeZone25.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone25);
        org.joda.time.DurationField durationField29 = zonedChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfWeek();
        org.joda.time.DurationField durationField32 = zonedChronology28.years();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.minuteOfHour();
        org.joda.time.DurationField durationField34 = zonedChronology28.weeks();
        org.joda.time.DurationField durationField35 = zonedChronology28.months();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.days();
        org.joda.time.DurationField durationField42 = chronology40.minutes();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str47 = dateTimeZone45.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology48.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology54 = zonedChronology48.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology48.year();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology48.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology59 = null;
        boolean boolean60 = dateTimeFieldType58.isSupported(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks(0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType58.getField(chronology65);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str71 = dateTimeZone69.getShortName((long) 10);
        java.lang.String str72 = dateTimeZone69.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        org.joda.time.chrono.ZonedChronology zonedChronology74 = org.joda.time.chrono.ZonedChronology.getInstance(chronology65, dateTimeZone69);
        java.lang.String str76 = dateTimeZone69.getShortName(4459589293L);
        org.joda.time.Chronology chronology77 = zonedChronology48.withZone(dateTimeZone69);
        int int79 = dateTimeZone69.getStandardOffset(1645454812204L);
        int int81 = dateTimeZone69.getOffset(4495595149L);
        org.joda.time.Chronology chronology82 = zonedChronology28.withZone(dateTimeZone69);
        java.util.TimeZone timeZone83 = dateTimeZone69.toTimeZone();
        boolean boolean84 = timeZone9.hasSameRules(timeZone83);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:47");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+10:00" + "'", str76, "+10:00");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 36000000 + "'", int79 == 36000000);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 36000000 + "'", int81 == 36000000);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology25 = zonedChronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        java.lang.String str31 = dateTimeZone28.getID();
        org.joda.time.Chronology chronology32 = zonedChronology19.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int36 = dateTimeZone34.getOffsetFromLocal((long) 100);
        org.joda.time.Chronology chronology37 = zonedChronology19.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology19.minuteOfHour();
        boolean boolean39 = localDateTime6.equals((java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minusMillis(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime43.yearOfEra();
        int[] intArray51 = zonedChronology19.get((org.joda.time.ReadablePartial) localDateTime43, 4495661888L);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology53 = null;
        boolean boolean54 = dateTimeFieldType52.isSupported(chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType52.getField(chronology59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.days();
        org.joda.time.DurationField durationField68 = chronology66.minutes();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str73 = dateTimeZone71.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology74 = org.joda.time.chrono.ZonedChronology.getInstance(chronology66, dateTimeZone71);
        org.joda.time.DurationField durationField75 = durationFieldType61.getField((org.joda.time.Chronology) zonedChronology74);
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology74.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str81 = dateTimeZone79.getShortName((long) (short) 0);
        org.joda.time.Chronology chronology82 = zonedChronology74.withZone(dateTimeZone79);
        long long84 = dateTimeZone79.nextTransition(18300000L);
        long long88 = dateTimeZone79.convertLocalToUTC(4495594354L, true, (long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.Chronology chronology90 = zonedChronology19.withZone(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField91 = zonedChronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField92 = zonedChronology19.secondOfDay();
        long long94 = dateTimeField92.roundCeiling(4495852818L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 2, 22, 38861888]");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+10:00" + "'", str73, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+100:00" + "'", str81, "+100:00");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 18300000L + "'", long84 == 18300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 4135594354L + "'", long88 == 4135594354L);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 4495853000L + "'", long94 == 4495853000L);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T00:48:19.415", (double) 292278961);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.92278961E8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis((int) (byte) -1);
        int int30 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withDayOfYear(7);
        int int33 = localDateTime32.getEra();
        org.joda.time.Chronology chronology34 = localDateTime32.getChronology();
        int[] intArray36 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime32, (long) 2803852);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 38803852]");
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property4.addWrapFieldToCopy(360000000);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(576);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(69);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        long long15 = dateTimeZone11.convertLocalToUTC(9735552087327L, true);
        int int17 = dateTimeZone11.getOffset(457070L);
        org.joda.time.DateTime dateTime18 = localDateTime7.toDateTime(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9735552087258L + "'", long15 == 9735552087258L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 69 + "'", int17 == 69);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Spliterator<java.lang.Character> charSpliterator10 = charSet4.spliterator();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DurationField durationField17 = chronology15.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str22 = dateTimeZone20.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology29 = zonedChronology23.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology23.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology23.year();
        org.joda.time.DurationField durationField33 = zonedChronology23.hours();
        org.joda.time.DurationField durationField34 = zonedChronology23.centuries();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.monthOfYear();
        int int46 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        long long48 = zonedChronology23.set((org.joda.time.ReadablePartial) localDateTime38, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology23.year();
        org.joda.time.DurationField durationField50 = zonedChronology23.years();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        int int55 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime52.toDateTime(readableInstant56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime52.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str62 = durationFieldType61.toString();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime52.withFieldAdded(durationFieldType61, (int) (byte) 1);
        int[] intArray66 = zonedChronology23.get((org.joda.time.ReadablePartial) localDateTime64, 4495612897L);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.minuteOfHour();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.lang.Object[] objArray70 = charSet69.toArray();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        boolean boolean73 = charSet69.retainAll((java.util.Collection<java.lang.Character>) charSet72);
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale74.getDisplayCountry(locale75);
        boolean boolean77 = locale74.hasExtensions();
        boolean boolean78 = charSet72.remove((java.lang.Object) boolean77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet80 = locale79.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor81 = charSet80.iterator();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet83 = locale82.getExtensionKeys();
        java.lang.Object[] objArray84 = charSet83.toArray();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet86 = locale85.getExtensionKeys();
        boolean boolean87 = charSet83.retainAll((java.util.Collection<java.lang.Character>) charSet86);
        boolean boolean88 = charSet80.containsAll((java.util.Collection<java.lang.Character>) charSet83);
        java.util.stream.Stream<java.lang.Character> charStream89 = charSet83.stream();
        java.util.stream.Stream<java.lang.Character> charStream90 = charSet83.stream();
        boolean boolean91 = charSet72.containsAll((java.util.Collection<java.lang.Character>) charSet83);
        charSet83.clear();
        charSet83.clear();
        boolean boolean94 = property67.equals((java.lang.Object) charSet83);
        boolean boolean95 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet83);
        java.util.Iterator<java.lang.Character> charItor96 = charSet4.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSpliterator10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645779240229L + "'", long48 == 1645779240229L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "centuries" + "'", str62, "centuries");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 2, 22, 38812897]");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertNotNull(charItor81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(charStream89);
        org.junit.Assert.assertNotNull(charStream90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(charItor96);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis(0);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withYear(22);
        int int21 = localDateTime20.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime8.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime8.withDate(3075631, 3063578, 373);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3063578 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 18 + "'", int9 == 18);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        int int10 = property9.getMinimumValue();
        boolean boolean11 = dateTime6.equals((java.lang.Object) int10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int13 = dateTime6.get(dateTimeFieldType12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology32 = zonedChronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology26.minuteOfHour();
        org.joda.time.DurationField durationField34 = zonedChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology26.millisOfDay();
        boolean boolean36 = dateTimeFieldType12.isSupported((org.joda.time.Chronology) zonedChronology26);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology26.weekyear();
        boolean boolean40 = zonedChronology26.equals((java.lang.Object) 1645454810092L);
        org.joda.time.DurationField durationField41 = zonedChronology26.centuries();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology26.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = zonedChronology26.getDateTimeMillis((int) ' ', 929, 3045717, 3167016);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 929 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField42 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology12.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-CA");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-ca" + "'", str2, "en-ca");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime45.dayOfMonth();
        int int63 = property62.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str39, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        long long23 = durationField20.add(1645454954154L, 3087682);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1648542636154L + "'", long23 == 1648542636154L);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfFloorCopy();
        org.joda.time.DurationField durationField6 = property3.getLeapDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNull(durationField6);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime18.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int[] intArray38 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime36, 70001L);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField40 = zonedChronology12.millis();
        org.joda.time.DurationField durationField41 = zonedChronology12.weekyears();
        org.joda.time.DurationField durationField42 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology12.era();
        long long46 = dateTimeField44.roundFloor(1645454844702L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-62135632800000L) + "'", long46 == (-62135632800000L));
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.Object[] objArray19 = charSet18.toArray();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        boolean boolean22 = charSet18.retainAll((java.util.Collection<java.lang.Character>) charSet21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int27 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime24.toDateTime(readableInstant28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.minusWeeks((int) (short) 1);
        boolean boolean32 = charSet18.remove((java.lang.Object) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusMillis(2795574);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.lang.String str38 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime31, locale35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime31.yearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime31.plusHours(764);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = localDateTime41.getFields();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime43.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        int int50 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime47.toDateTime(readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.yearOfEra();
        int int56 = property55.getMinimumValue();
        boolean boolean57 = dateTime52.equals((java.lang.Object) int56);
        org.joda.time.Chronology chronology58 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime59 = localDateTime43.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime.Property property60 = localDateTime43.weekyear();
        boolean boolean61 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uce90\ub098\ub2e4" + "'", str37, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "46" + "'", str38, "46");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        int int7 = localDateTime6.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withWeekOfWeekyear(9685);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9685 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField21 = zonedChronology12.minutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DurationField durationField16 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = zonedChronology12.add(readablePeriod18, 4459618583L, 2830355);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField23 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4459618583L + "'", long21 == 4459618583L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfSecond();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.weekOfWeekyear();
        org.joda.time.Chronology chronology41 = localDateTime38.getChronology();
        int int42 = localDateTime38.getMillisOfDay();
        boolean boolean43 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        long long46 = dateTimeZone37.adjustOffset(0L, false);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 504, dateTimeZone37);
        boolean boolean48 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496040749L + "'", long3 == 4496040749L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str23, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:54:01 GMT+00:47 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3240750 + "'", int42 == 3240750);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 1641600008L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = property2.setCopy(2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withEra(2885307);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2885307 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale4.getDisplayCountry(locale8);
        java.lang.String str12 = locale0.getDisplayVariant(locale8);
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getScript();
        java.lang.String str19 = nameProvider13.getName(locale14, "8", "2022");
        java.util.Locale locale21 = new java.util.Locale("");
        java.lang.String str24 = nameProvider13.getName(locale21, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str25 = locale8.getDisplayName(locale21);
        java.util.Set<java.lang.Character> charSet26 = locale8.getExtensionKeys();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.lang.Object[] objArray29 = charSet28.toArray();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        boolean boolean32 = charSet28.retainAll((java.util.Collection<java.lang.Character>) charSet31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.lang.Object[] objArray35 = charSet34.toArray();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        boolean boolean38 = charSet34.retainAll((java.util.Collection<java.lang.Character>) charSet37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        boolean boolean42 = locale39.hasExtensions();
        boolean boolean43 = charSet37.remove((java.lang.Object) boolean42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor46 = charSet45.iterator();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.lang.Object[] objArray49 = charSet48.toArray();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        boolean boolean52 = charSet48.retainAll((java.util.Collection<java.lang.Character>) charSet51);
        boolean boolean53 = charSet45.containsAll((java.util.Collection<java.lang.Character>) charSet48);
        java.util.stream.Stream<java.lang.Character> charStream54 = charSet48.stream();
        java.util.stream.Stream<java.lang.Character> charStream55 = charSet48.stream();
        boolean boolean56 = charSet37.containsAll((java.util.Collection<java.lang.Character>) charSet48);
        boolean boolean57 = charSet28.equals((java.lang.Object) boolean56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.Object[] objArray60 = charSet59.toArray();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        boolean boolean63 = charSet59.retainAll((java.util.Collection<java.lang.Character>) charSet62);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        boolean boolean67 = locale64.hasExtensions();
        boolean boolean68 = charSet62.remove((java.lang.Object) boolean67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor71 = charSet70.iterator();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.lang.Object[] objArray74 = charSet73.toArray();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet76 = locale75.getExtensionKeys();
        boolean boolean77 = charSet73.retainAll((java.util.Collection<java.lang.Character>) charSet76);
        boolean boolean78 = charSet70.containsAll((java.util.Collection<java.lang.Character>) charSet73);
        java.util.stream.Stream<java.lang.Character> charStream79 = charSet73.stream();
        java.util.stream.Stream<java.lang.Character> charStream80 = charSet73.stream();
        boolean boolean81 = charSet62.containsAll((java.util.Collection<java.lang.Character>) charSet73);
        boolean boolean82 = charSet28.containsAll((java.util.Collection<java.lang.Character>) charSet73);
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet84 = locale83.getExtensionKeys();
        java.lang.Object[] objArray85 = charSet84.toArray();
        java.util.stream.Stream<java.lang.Character> charStream86 = charSet84.stream();
        boolean boolean87 = charSet73.retainAll((java.util.Collection<java.lang.Character>) charSet84);
        boolean boolean88 = charSet26.containsAll((java.util.Collection<java.lang.Character>) charSet73);
        boolean boolean89 = charSet73.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "German" + "'", str25, "German");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(charItor46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(charStream54);
        org.junit.Assert.assertNotNull(charStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(charItor71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(charStream79);
        org.junit.Assert.assertNotNull(charStream80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertNotNull(charStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        java.util.Locale locale3 = new java.util.Locale("946", "2022-02-22T00:52:24.211", "947");
        org.junit.Assert.assertEquals(locale3.toString(), "946_2022-02-22T00:52:24.211_947");
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime4 = property2.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        int int9 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime6.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        int int15 = property14.getMinimumValue();
        boolean boolean16 = dateTime11.equals((java.lang.Object) int15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int18 = dateTime11.get(dateTimeFieldType17);
        long long19 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime11.getZone();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withMillisOfDay(100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMillis((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str17 = dateTimeFieldType16.getName();
        int int18 = localDateTime10.indexOf(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        boolean boolean21 = dateTimeFieldType19.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType19.getField(chronology26);
        java.lang.String str28 = dateTimeField27.getName();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.lang.String str37 = locale35.getISO3Country();
        java.lang.String str38 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 2, locale35);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withMinuteOfHour((int) '#');
        java.util.Date date43 = localDateTime40.toDate();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minusSeconds(305);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusHours(907);
        boolean boolean50 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minus(readablePeriod51);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfSecond" + "'", str17, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfSecond" + "'", str28, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str36, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2" + "'", str38, "2");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Feb 21 00:54:01 GMT+00:47 2022");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        int int7 = localDateTime3.getMillisOfDay();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int11 = localDateTime10.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        boolean boolean13 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3241007 + "'", int7 == 3241007);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.year();
        org.joda.time.DurationField durationField23 = zonedChronology13.weekyears();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 8, (org.joda.time.Chronology) zonedChronology13);
        int int25 = localDateTime24.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromDateFields(date24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromDateFields(date24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int31 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        int int38 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        int int45 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime28.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime28.withWeekyear(2815878);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 00:54:01 GMT+00:47 2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        boolean boolean13 = charSet4.contains((java.lang.Object) "2");
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        org.joda.time.DurationField durationField27 = zonedChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology26.dayOfWeek();
        org.joda.time.DurationField durationField30 = zonedChronology26.years();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology26.clockhourOfHalfday();
        boolean boolean32 = charSet4.contains((java.lang.Object) zonedChronology26);
        org.joda.time.DurationField durationField33 = zonedChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology26.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        int int45 = property44.getMinimumValue();
        java.lang.String str46 = property44.getAsText();
        org.joda.time.LocalDateTime localDateTime47 = property44.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusMonths((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray52 = localDateTime51.getFields();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = localDateTime51.toDateTime(dateTimeZone53);
        long long56 = dateTimeZone39.getMillisKeepLocal(dateTimeZone53, (long) 140);
        java.util.Locale locale61 = new java.util.Locale("", "", "kor");
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.days();
        org.joda.time.DurationField durationField68 = chronology66.minutes();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str73 = dateTimeZone71.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology74 = org.joda.time.chrono.ZonedChronology.getInstance(chronology66, dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology74.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean79 = dateTimeZone77.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology80 = zonedChronology74.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology74.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField83 = zonedChronology74.weekyear();
        org.joda.time.DateTimeField dateTimeField84 = zonedChronology74.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = zonedChronology74.clockhourOfDay();
        int int86 = dateTimeField85.getMaximumValue();
        int int88 = dateTimeField85.getLeapAmount((long) 80);
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("2022-02-22T00:47:37.210");
        int int91 = dateTimeField85.getMaximumTextLength(locale90);
        java.lang.String str92 = locale61.getDisplayName(locale90);
        java.lang.String str93 = dateTimeZone53.getName(1778400000L, locale90);
        java.lang.String str94 = dateTimeField35.getAsShortText(842, locale90);
        java.lang.String str95 = locale90.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:00" + "'", str41, "+100:00");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldArray52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 324000140L + "'", long56 == 324000140L);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+10:00" + "'", str73, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 24 + "'", int86 == 24);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "kor" + "'", str92, "kor");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+10:00" + "'", str93, "+10:00");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "842" + "'", str94, "842");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField25 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 0);
        java.lang.String str6 = dateTimeZone2.getName(4495682329L);
        java.lang.String str7 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.era();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        int int21 = property20.getMinimumValue();
        java.lang.String str22 = property20.getAsText();
        org.joda.time.LocalDateTime localDateTime23 = property20.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime23.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMillis((int) (byte) -1);
        java.util.Date date34 = localDateTime33.toDate();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.Object[] objArray37 = charSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        boolean boolean40 = charSet36.retainAll((java.util.Collection<java.lang.Character>) charSet39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusWeeks((int) (short) 1);
        boolean boolean50 = charSet36.remove((java.lang.Object) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusMillis(2795574);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withSecondOfMinute(22);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.plus(readablePeriod55);
        int int57 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime33.plus(readableDuration58);
        int[] intArray60 = localDateTime59.getValues();
        zonedChronology12.validate((org.joda.time.ReadablePartial) localDateTime23, intArray60);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:54:02 GMT+00:47 2022");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2022, 2, 22, 3241213]");
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setScript("2022-02-22T00:53:07.047");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T00:53:07.047 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        int int5 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.era();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        int int11 = property10.getMinimumValue();
        java.lang.String str12 = property10.getAsText();
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType14.getField(chronology21);
        java.lang.String str23 = dateTimeField22.getName();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.getISO3Country();
        java.lang.String str33 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, 2, locale30);
        int int35 = dateTimeField22.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType36.getField(chronology43);
        java.lang.String str45 = dateTimeField44.getName();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale52.getDisplayLanguage();
        java.lang.String str54 = locale52.getISO3Country();
        java.lang.String str55 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, 2, locale52);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plus(readableDuration58);
        int[] intArray64 = new int[] { 0, 292278993, 10, 'a' };
        int int65 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59, intArray64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks(0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.days();
        org.joda.time.DurationField durationField73 = chronology71.minutes();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str78 = dateTimeZone76.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology79 = org.joda.time.chrono.ZonedChronology.getInstance(chronology71, dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology79.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean84 = dateTimeZone82.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology85 = zonedChronology79.withZone(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology79.dayOfMonth();
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.lang.String str90 = locale88.getDisplayCountry(locale89);
        java.lang.String str91 = dateTimeField86.getAsText(0L, locale88);
        java.lang.String str92 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, (int) (short) -1, locale88);
        java.util.Locale locale94 = java.util.Locale.forLanguageTag("millisOfSecond");
        java.lang.String str95 = locale88.getDisplayVariant(locale94);
        int int96 = property7.getMaximumShortTextLength(locale88);
        java.lang.String str97 = locale0.getDisplayName(locale88);
        java.util.Locale.setDefault(locale88);
        java.lang.String str99 = locale88.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3241294 + "'", int5 == 3241294);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "millisOfSecond" + "'", str23, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str31, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2" + "'", str33, "2");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 999 + "'", int35 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "millisOfSecond" + "'", str45, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str53, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2" + "'", str55, "2");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1" + "'", str91, "1");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "-1" + "'", str92, "-1");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str4 = locale0.getExtension('u');
        boolean boolean5 = locale0.hasExtensions();
        java.lang.String str6 = locale0.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology25 = zonedChronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = dateTimeField27.getLeapDurationField();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.util.Locale locale32 = locale29.stripExtensions();
        int int33 = dateTimeField27.getMaximumShortTextLength(locale32);
        java.lang.String str34 = locale0.getDisplayCountry(locale32);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int37 = localDateTime36.getEra();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str43 = dateTimeZone41.getShortName((long) 10);
        java.lang.String str44 = dateTimeZone41.getID();
        java.lang.String str45 = dateTimeZone41.getID();
        java.lang.String str47 = dateTimeZone41.getName((long) 2);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone41);
        boolean boolean49 = property38.equals((java.lang.Object) localDateTime48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property38.getFieldType();
        int int51 = property38.getLeapAmount();
        java.util.Locale locale53 = new java.util.Locale("2022-02-22T00:47:33.075");
        java.lang.String str54 = locale53.getScript();
        int int55 = property38.getMaximumShortTextLength(locale53);
        java.lang.String str56 = locale0.getDisplayCountry(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = locale0.getUnicodeLocaleType("DurationField[minutes]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: DurationField[minutes]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanisch" + "'", str1, "Japanisch");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale53.toString(), "2022-02-22t00:47:33.075");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 4495681284L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology20 = zonedChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = zonedChronology14.withUTC();
        org.joda.time.DurationField durationField24 = zonedChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = localDateTime27.getDayOfYear();
        int int34 = localDateTime27.size();
        int[] intArray36 = zonedChronology14.get((org.joda.time.ReadablePartial) localDateTime27, 4495608823L);
        org.joda.time.LocalDateTime.Property property37 = localDateTime27.millisOfDay();
        int int38 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property39 = localDateTime1.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 2, 22, 38808823]");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        int int23 = dateTimeField21.getMaximumValue((-292278L));
        long long26 = dateTimeField21.add(0L, 0L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int29 = localDateTime28.getEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusDays((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str45 = dateTimeZone43.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone43);
        org.joda.time.DurationField durationField47 = zonedChronology46.centuries();
        org.joda.time.DurationFieldType durationFieldType48 = durationField47.getType();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime33.withFieldAdded(durationFieldType48, 54);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime53 = property51.addWrapFieldToCopy(51);
        java.util.Locale.Category category54 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category54, locale55);
        java.lang.String str57 = locale55.toLanguageTag();
        java.util.Locale.Category category58 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category58, locale59);
        java.lang.String str61 = locale59.toLanguageTag();
        java.lang.String str62 = locale55.getDisplayLanguage(locale59);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale59.getDisplayLanguage(locale63);
        java.lang.String str66 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale59);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime53.minus(readablePeriod67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusMonths(81);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.FORMAT + "'", category54.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en-CA" + "'", str57, "en-CA");
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.FORMAT + "'", category58.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "en-CA" + "'", str61, "en-CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English" + "'", str62, "English");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "inglese" + "'", str65, "inglese");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "59" + "'", str66, "59");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        boolean boolean6 = property2.isLeap();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime9 = property2.setCopy("902");
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(2884327);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496041490L + "'", long3 == 4496041490L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology34.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean39 = dateTimeZone37.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology40 = zonedChronology34.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology34.weekOfWeekyear();
        org.joda.time.Chronology chronology43 = zonedChronology34.withUTC();
        org.joda.time.DurationField durationField44 = zonedChronology34.seconds();
        org.joda.time.DateTimeZone dateTimeZone45 = zonedChronology34.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = dateTimeFieldType46.isSupported(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType46.getField(chronology53);
        java.lang.String str55 = dateTimeField54.getName();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.lang.String str64 = locale62.getISO3Country();
        java.lang.String str65 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, 2, locale62);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology69 = null;
        boolean boolean70 = dateTimeFieldType68.isSupported(chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusWeeks(0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType68.getField(chronology75);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str81 = dateTimeZone79.getShortName((long) 10);
        java.lang.String str82 = dateTimeZone79.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.chrono.ZonedChronology zonedChronology84 = org.joda.time.chrono.ZonedChronology.getInstance(chronology75, dateTimeZone79);
        java.lang.String str86 = dateTimeZone79.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime59, dateTimeZone79);
        org.joda.time.Chronology chronology88 = localDateTime59.getChronology();
        boolean boolean89 = dateTimeZone45.isLocalDateTimeGap(localDateTime59);
        int int90 = localDateTime59.getWeekyear();
        long long92 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime59, 1641600008010L);
        org.joda.time.DateTimeField dateTimeField93 = zonedChronology12.yearOfEra();
        int int96 = dateTimeField93.getDifference((long) 2872220, 4495608823L);
        long long98 = dateTimeField93.roundHalfEven(4495891669L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "millisOfSecond" + "'", str55, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japanisch" + "'", str63, "Japanisch");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2" + "'", str65, "2");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+10:00" + "'", str81, "+10:00");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:00" + "'", str82, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+10:00" + "'", str86, "+10:00");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1645455241536L + "'", long92 == 1645455241536L);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-36000000L) + "'", long98 == (-36000000L));
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(2995583, 2964499, 0, 35999999, 2905071, (-2820567), 2997290);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35999999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet4.stream();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        boolean boolean14 = charSet4.remove((java.lang.Object) boolean13);
        boolean boolean15 = charSet4.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:47");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:47");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        charSet1.clear();
        java.util.stream.Stream<java.lang.Character> charStream7 = charSet1.parallelStream();
        org.joda.time.base.AbstractPartial[][] abstractPartialArray8 = new org.joda.time.base.AbstractPartial[][] {};
        org.joda.time.base.AbstractPartial[][] abstractPartialArray9 = charSet1.toArray(abstractPartialArray8);
        int int10 = charSet1.size();
        charSet1.clear();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor14 = charSet13.iterator();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.Object[] objArray17 = charSet16.toArray();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = charSet16.retainAll((java.util.Collection<java.lang.Character>) charSet19);
        boolean boolean21 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        java.util.Spliterator<java.lang.Character> charSpliterator22 = charSet16.spliterator();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor25 = charSet24.iterator();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.lang.Object[] objArray28 = charSet27.toArray();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = charSet27.retainAll((java.util.Collection<java.lang.Character>) charSet30);
        boolean boolean32 = charSet24.containsAll((java.util.Collection<java.lang.Character>) charSet27);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = charSet24.equals((java.lang.Object) dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        boolean boolean37 = dateTimeFieldType35.isSupported(chronology36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType35.getField(chronology42);
        java.lang.String str44 = dateTimeField43.getName();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.lang.String str53 = locale51.getISO3Country();
        java.lang.String str54 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, 2, locale51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime48.yearOfEra();
        org.joda.time.Chronology chronology56 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime.Property property57 = localDateTime48.millisOfSecond();
        boolean boolean58 = charSet24.contains((java.lang.Object) localDateTime48);
        java.util.Iterator<java.lang.Character> charItor59 = charSet24.iterator();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusWeeks(0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DurationField durationField66 = chronology64.minutes();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str71 = dateTimeZone69.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology72 = org.joda.time.chrono.ZonedChronology.getInstance(chronology64, dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology72.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean77 = dateTimeZone75.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology78 = zonedChronology72.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField79 = zonedChronology72.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology72.dayOfMonth();
        org.joda.time.DurationField durationField81 = zonedChronology72.years();
        boolean boolean82 = charSet24.contains((java.lang.Object) durationField81);
        boolean boolean83 = charSet16.removeAll((java.util.Collection<java.lang.Character>) charSet24);
        boolean boolean84 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        charSet16.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charStream7);
        org.junit.Assert.assertNotNull(abstractPartialArray8);
        org.junit.Assert.assertNotNull(abstractPartialArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charItor14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charSpliterator22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(charItor25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "millisOfSecond" + "'", str44, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Japanisch" + "'", str52, "Japanisch");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2" + "'", str54, "2");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charItor59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology25 = zonedChronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType6.getField((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.secondOfMinute();
        org.joda.time.DurationField durationField33 = zonedChronology19.weeks();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.minuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        java.lang.String str14 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        int int20 = dateTimeZone18.getStandardOffset(4495610781L);
        int int22 = dateTimeZone18.getOffsetFromLocal(4495800758L);
        org.joda.time.Chronology chronology23 = zonedChronology12.withZone(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str14, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        java.lang.String str26 = dateTimeZone23.getID();
        long long29 = dateTimeZone23.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.Chronology chronology30 = zonedChronology12.withZone(dateTimeZone23);
        long long34 = zonedChronology12.add(1645454822095L, (-256275054L), 2720);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField36 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField38 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology12.weekOfWeekyear();
        boolean boolean40 = dateTimeField39.isSupported();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999999L) + "'", long29 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 948386675215L + "'", long34 == 948386675215L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfCentury();
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale26.getScript();
        java.lang.String str31 = nameProvider25.getName(locale26, "8", "2022");
        java.util.Locale locale33 = new java.util.Locale("");
        java.lang.String str36 = nameProvider25.getName(locale33, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str37 = dateTimeField23.getAsText((-33180845L), locale33);
        int int39 = dateTimeField23.get(4171595249L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.Chronology chronology17 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField19 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean11 = charSet1.equals((java.lang.Object) dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = dateTimeFieldType12.isSupported(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType12.getField(chronology19);
        java.lang.String str21 = dateTimeField20.getName();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.getISO3Country();
        java.lang.String str31 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 2, locale28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime25.yearOfEra();
        org.joda.time.Chronology chronology33 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime25.millisOfSecond();
        boolean boolean35 = charSet1.contains((java.lang.Object) localDateTime25);
        java.util.Iterator<java.lang.Character> charItor36 = charSet1.iterator();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor39 = charSet38.iterator();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.lang.Object[] objArray42 = charSet41.toArray();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        boolean boolean45 = charSet41.retainAll((java.util.Collection<java.lang.Character>) charSet44);
        boolean boolean46 = charSet38.containsAll((java.util.Collection<java.lang.Character>) charSet41);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale50 = builder49.build();
        boolean boolean51 = charSet38.contains((java.lang.Object) locale50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DurationField durationField58 = chronology56.minutes();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str63 = dateTimeZone61.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance(chronology56, dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField65 = chronology56.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField65.getType();
        org.joda.time.DurationField durationField67 = dateTimeField65.getDurationField();
        boolean boolean68 = charSet38.remove((java.lang.Object) durationField67);
        boolean boolean69 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet38);
        int int70 = charSet1.size();
        java.lang.String[] strArray72 = java.util.TimeZone.getAvailableIDs((-36000001));
        java.lang.String[] strArray73 = charSet1.toArray(strArray72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanisch" + "'", str29, "Japanisch");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2" + "'", str31, "2");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charItor36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(charItor39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField21 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.property(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int12 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.dayOfMonth();
        java.lang.String str16 = localDateTime9.toString();
        int int17 = localDateTime9.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DurationField durationField24 = chronology22.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str29 = dateTimeZone27.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology22, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology36 = zonedChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology30.weekyear();
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology30.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        int int51 = property50.getMinimumValue();
        boolean boolean52 = dateTime47.equals((java.lang.Object) int51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology55 = null;
        boolean boolean56 = dateTimeFieldType54.isSupported(chronology55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks(0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType54.getField(chronology61);
        org.joda.time.DurationField durationField63 = durationFieldType53.getField(chronology61);
        boolean boolean64 = dateTime47.equals((java.lang.Object) chronology61);
        int int65 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime66 = localDateTime9.toDateTime(dateTimeZone40);
        int int67 = property7.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationField durationField68 = property7.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T00:54:02.045" + "'", str16, "2022-02-22T00:54:02.045");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.weekyear();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        java.lang.String str8 = property5.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 90 + "'", int4 == 90);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "weekyear" + "'", str8, "weekyear");
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDurationAdded(readableDuration6, 86399);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(2803852);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(2811086);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfDay(929);
        int int15 = localDateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.Interval interval2 = property1.toInterval();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = property1.getAsText(locale3);
        org.joda.time.LocalDateTime localDateTime5 = property1.withMinimumValue();
        org.joda.time.DurationField durationField6 = property1.getDurationField();
        long long9 = durationField6.subtract(1645455197875L, (long) 492);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "128" + "'", str4, "128");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645455197383L + "'", long9 == 1645455197383L);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int20 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        int int25 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.secondOfMinute();
        int int27 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.plus(readablePeriod28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.withField(dateTimeFieldType30, 18);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology51 = zonedChronology45.withZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        java.lang.String str57 = dateTimeZone54.getID();
        org.joda.time.Chronology chronology58 = zonedChronology45.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType30.getField((org.joda.time.Chronology) zonedChronology45);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology45.weekyearOfCentury();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3242147 + "'", int25 == 3242147);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        int int10 = property9.getMinimumValue();
        boolean boolean11 = dateTime6.equals((java.lang.Object) int10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int13 = dateTime6.get(dateTimeFieldType12);
        java.lang.String str14 = dateTime6.toString();
        org.joda.time.Instant instant15 = dateTime6.toInstant();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T00:54:02.184+10:00" + "'", str14, "2022-02-22T00:54:02.184+10:00");
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = zonedChronology12.getDateTimeMillis(163, 12, 880, 266);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 880 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        long long22 = durationField20.getValueAsLong((-292278993L));
        boolean boolean23 = durationField20.isSupported();
        boolean boolean24 = durationField20.isPrecise();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-292278L) + "'", long22 == (-292278L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4495700737L);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(4495645089L);
        int int4 = localDateTime3.getMinuteOfHour();
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTime dateTime7 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears(100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        int int19 = localDateTime17.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMillis(2801202);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.weekOfWeekyear();
        int int30 = property29.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.setCopy(4);
        java.lang.String str33 = property29.getAsText();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfDay();
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder40.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale43.getDisplayName();
        int int45 = dateTimeField39.getMaximumTextLength(locale43);
        java.lang.String str46 = property29.getAsText(locale43);
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = localDateTime24.toString("462", locale43);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime52.year();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundCeilingCopy();
        java.lang.String str60 = property58.getName();
        java.lang.String str61 = property58.getName();
        int int62 = property58.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime63 = property58.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime64 = property58.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusWeeks(0);
        int int69 = localDateTime68.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.minusDays(2989877);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime64.withFields((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean75 = localDateTime24.equals((java.lang.Object) localDateTime64);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime64);
        boolean boolean77 = localDateTime1.equals((java.lang.Object) localDateTime64);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "8" + "'", str33, "8");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8" + "'", str46, "8");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "462" + "'", str48, "462");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "year" + "'", str60, "year");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "year" + "'", str61, "year");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 22 + "'", int69 == 22);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfDay();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale23.getDisplayCountry(locale25);
        java.util.Set<java.lang.Character> charSet28 = locale23.getExtensionKeys();
        java.util.Locale locale29 = locale23.stripExtensions();
        java.lang.String str30 = dateTimeField21.getAsText(0, locale23);
        java.lang.String str31 = locale23.getLanguage();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uce90\ub098\ub2e4" + "'", str26, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ubbf8\uad6d" + "'", str27, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime4 = property2.roundHalfEvenCopy();
        org.joda.time.DurationField durationField5 = property2.getDurationField();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds(36000000);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField13 = localDateTime9.getField(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusMillis(581);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMonths(874);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        long long45 = dateTimeZone33.convertLocalToUTC(4495594354L, true, 4495596112L);
        long long48 = dateTimeZone33.adjustOffset((long) 2795574, true);
        java.util.TimeZone timeZone49 = dateTimeZone33.toTimeZone();
        boolean boolean50 = timeZone49.observesDaylightTime();
        java.time.ZoneId zoneId51 = timeZone49.toZoneId();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone(zoneId51);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("zh_CN");
        timeZone54.setRawOffset(15);
        boolean boolean57 = timeZone52.hasSameRules(timeZone54);
        java.lang.Object obj58 = timeZone52.clone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4459594354L + "'", long45 == 4459594354L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2795574L + "'", long48 == 2795574L);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getScript();
        java.lang.String str17 = nameProvider11.getName(locale12, "8", "2022");
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        boolean boolean21 = locale18.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = locale22.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale26.getDisplayCountry(locale27);
        java.lang.String str29 = locale22.getDisplayCountry(locale26);
        java.lang.String str30 = locale18.getDisplayVariant(locale26);
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale32.getScript();
        java.lang.String str37 = nameProvider31.getName(locale32, "8", "2022");
        java.util.Locale locale39 = new java.util.Locale("");
        java.lang.String str42 = nameProvider31.getName(locale39, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str43 = locale26.getDisplayName(locale39);
        java.lang.String str46 = nameProvider11.getShortName(locale39, "centuries", "716");
        java.lang.String str49 = nameProvider10.getName(locale39, "\ubbf8\uad6d", "millisOfSecond");
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale50.getDisplayCountry(locale51);
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str56 = locale50.getDisplayCountry(locale53);
        java.lang.String str57 = locale53.toLanguageTag();
        java.lang.String str60 = nameProvider10.getShortName(locale53, "0052-12-12T01:52:00.022", "yearOfCentury");
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks(0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.days();
        org.joda.time.DurationField durationField67 = chronology65.minutes();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str72 = dateTimeZone70.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology73 = org.joda.time.chrono.ZonedChronology.getInstance(chronology65, dateTimeZone70);
        boolean boolean75 = zonedChronology73.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField76 = zonedChronology73.centuries();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology73.yearOfEra();
        int int80 = dateTimeField78.get(36000012L);
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = dateTimeField78.getAsText(86399, locale82);
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale84.getDisplayCountry(locale85);
        int int87 = dateTimeField78.getMaximumTextLength(locale84);
        java.util.Set<java.lang.Character> charSet88 = locale84.getExtensionKeys();
        java.lang.String str89 = locale53.getDisplayCountry(locale84);
        java.lang.String str90 = dateTimeField8.getAsText(4495674581L, locale53);
        java.lang.String str91 = locale53.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = locale53.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German" + "'", str43, "German");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanisch" + "'", str54, "Japanisch");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ja" + "'", str57, "ja");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "86399" + "'", str83, "86399");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\uce90\ub098\ub2e4" + "'", str86, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "581" + "'", str90, "581");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(2811632);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((java.lang.Object) 1641600008L);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        int int18 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime15.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        int int24 = property23.getMinimumValue();
        boolean boolean25 = dateTime20.equals((java.lang.Object) int24);
        org.joda.time.Chronology chronology26 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime27 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        boolean boolean33 = property29.equals((java.lang.Object) durationFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DurationField durationField35 = durationFieldType32.getField(chronology34);
        java.lang.String str36 = durationFieldType32.toString();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime11.withFieldAdded(durationFieldType32, 20);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime9.withFieldAdded(durationFieldType32, 3);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime9.plusMonths(2808304);
        int int43 = localDateTime9.getCenturyOfEra();
        boolean boolean44 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime9.minusHours(492);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks(2991900);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date49 = localDateTime46.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -148 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "centuries" + "'", str36, "centuries");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime5.minusYears(2);
        int int36 = localDateTime5.getSecondOfMinute();
        java.util.Date date37 = localDateTime5.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime5.plusMinutes(292275048);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371990089642531 + 17536502880000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496042531L + "'", long3 == 4496042531L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanisch" + "'", str23, "Japanisch");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:54:03 GMT+00:47 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Fri Feb 22 00:54:03 GMT+00:47 292278993");
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.clockhourOfDay();
        int int24 = dateTimeField23.getMaximumValue();
        long long26 = dateTimeField23.roundHalfEven(1645454980985L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology45 = zonedChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.year();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology39.year();
        org.joda.time.DurationField durationField49 = zonedChronology39.hours();
        org.joda.time.DurationField durationField50 = zonedChronology39.centuries();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.yearOfEra();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.monthOfYear();
        int int62 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        long long64 = zonedChronology39.set((org.joda.time.ReadablePartial) localDateTime54, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology39.year();
        org.joda.time.DurationField durationField66 = zonedChronology39.years();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone69);
        int int71 = localDateTime68.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDateTime68.toDateTime(readableInstant72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property76 = localDateTime68.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str78 = durationFieldType77.toString();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime68.withFieldAdded(durationFieldType77, (int) (byte) 1);
        int[] intArray82 = zonedChronology39.get((org.joda.time.ReadablePartial) localDateTime80, 4495612897L);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.minuteOfHour();
        int int84 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DurationField durationField85 = dateTimeField23.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 24 + "'", int24 == 24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645455600000L + "'", long26 == 1645455600000L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645455242584L + "'", long64 == 1645455242584L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "centuries" + "'", str78, "centuries");
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1970, 2, 22, 38812897]");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(durationField85);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) filteringMode23);
        org.joda.time.DurationField durationField25 = zonedChronology12.millis();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = durationField25.getValue(1645455156205L, 2808677L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455156205");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1781190354L);
        int int5 = dateTimeZone1.getStandardOffset((long) 140);
        long long8 = dateTimeZone1.adjustOffset((long) 888, false);
        java.lang.String str10 = dateTimeZone1.getShortName((long) 439);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 888L + "'", long8 == 888L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.100" + "'", str10, "+00:00:00.100");
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        java.lang.String str3 = property2.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        int int5 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property2.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        boolean boolean22 = zonedChronology20.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField23 = zonedChronology20.centuries();
        org.joda.time.DurationField durationField24 = zonedChronology20.months();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        int int29 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime26.toDateTime(readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        int int36 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime33.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        int int43 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime37);
        int[] intArray46 = zonedChronology20.get((org.joda.time.ReadablePartial) localDateTime44, 70001L);
        int int47 = localDateTime44.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        int int56 = localDateTime54.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusMillis(2801202);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime.Property property61 = localDateTime54.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime54.withWeekyear(2815878);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(0);
        int int68 = localDateTime67.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime67.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.withDurationAdded(readableDuration70, 86399);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusMillis(2803852);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusHours(2811086);
        int int77 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        int int78 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022" + "'", str3, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-1));
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int3 = timeZone2.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setScript("2022-02-22T00:51:57.116+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T00:51:57.116+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField27 = zonedChronology12.minutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        java.lang.String str6 = property2.getName();
        org.joda.time.DateTimeField dateTimeField7 = property2.getField();
        org.joda.time.LocalDateTime localDateTime8 = property2.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((-292275047));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yearOfEra" + "'", str6, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        boolean boolean18 = dateTimeZone11.isStandardOffset(160L);
        long long21 = dateTimeZone11.convertLocalToUTC(4495629082L, false);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4459629082L + "'", long21 == 4459629082L);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.minuteOfDay();
        org.joda.time.Chronology chronology25 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        int int8 = durationField5.getValue(1L, (long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DurationFieldType durationFieldType16 = durationField15.getType();
        int int17 = durationField5.compareTo(durationField15);
        long long19 = durationField15.getMillis((long) 999);
        java.lang.String str20 = durationField15.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 59940000L + "'", long19 == 59940000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minutes" + "'", str20, "minutes");
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology12.add(readablePeriod24, 0L, 292278993);
        org.joda.time.DurationField durationField28 = zonedChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone29 = zonedChronology12.getZone();
        int int31 = dateTimeZone29.getOffsetFromLocal((long) 2795574);
        java.lang.String str32 = dateTimeZone29.getID();
        long long36 = dateTimeZone29.convertLocalToUTC(1645455176848L, false, 1645058945984L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645419176848L + "'", long36 == 1645419176848L);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = zonedChronology12.get(readablePeriod32, 1645455203795L, 194224727361600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        boolean boolean8 = locale5.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.util.Locale locale12 = locale9.stripExtensions();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.lang.String str16 = locale9.getDisplayCountry(locale13);
        java.lang.String str17 = locale5.getDisplayVariant(locale13);
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale19.getScript();
        java.lang.String str24 = nameProvider18.getName(locale19, "8", "2022");
        java.util.Locale locale26 = new java.util.Locale("");
        java.lang.String str29 = nameProvider18.getName(locale26, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str30 = locale13.getDisplayName(locale26);
        java.util.Locale.Builder builder31 = builder2.setLocale(locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder2.setExtension('4', "2022-02-22T00:49:31.496");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "German" + "'", str30, "German");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        boolean boolean12 = localDateTime1.equals((java.lang.Object) localDateTime8);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType14.getField(chronology21);
        org.joda.time.DurationField durationField23 = durationFieldType13.getField(chronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFieldAdded(durationFieldType13, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology45 = zonedChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.year();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology39.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = dateTimeFieldType49.isSupported(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType49.getField(chronology56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str62 = dateTimeZone60.getShortName((long) 10);
        java.lang.String str63 = dateTimeZone60.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.chrono.ZonedChronology zonedChronology65 = org.joda.time.chrono.ZonedChronology.getInstance(chronology56, dateTimeZone60);
        java.lang.String str67 = dateTimeZone60.getShortName(4459589293L);
        org.joda.time.Chronology chronology68 = zonedChronology39.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology39.minuteOfDay();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.lang.String str72 = locale70.getDisplayCountry(locale71);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet75 = locale73.getUnicodeLocaleKeys();
        java.lang.String str76 = locale70.getDisplayCountry(locale73);
        int int77 = dateTimeField69.getMaximumShortTextLength(locale70);
        int int78 = property26.getMaximumShortTextLength(locale70);
        java.lang.Class<?> wildcardClass79 = locale70.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Japanisch" + "'", str74, "Japanisch");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField18 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = zonedChronology12.getZone();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfMonth(575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 575 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology15 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField16 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str10 = dateTimeFieldType9.getName();
        int int11 = localDateTime3.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = dateTimeFieldType12.isSupported(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType12.getField(chronology19);
        java.lang.String str21 = dateTimeField20.getName();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.getISO3Country();
        java.lang.String str31 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 2, locale28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime25.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMinuteOfHour((int) '#');
        java.util.Date date36 = localDateTime33.toDate();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.minusSeconds(305);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusHours(907);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = dateTimeFieldType43.isSupported(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType43.getField(chronology50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy((long) (short) 0);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category57, locale58);
        java.lang.String str60 = locale58.toLanguageTag();
        java.util.Locale.Category category61 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category61, locale62);
        java.lang.String str64 = locale62.toLanguageTag();
        java.lang.String str65 = locale58.getDisplayLanguage(locale62);
        java.lang.String str66 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, 20, locale62);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime55.minusYears(40113);
        boolean boolean69 = localDateTime40.equals((java.lang.Object) localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfSecond" + "'", str10, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanisch" + "'", str29, "Japanisch");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2" + "'", str31, "2");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 21 00:54:03 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "en-CA" + "'", str60, "en-CA");
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.FORMAT + "'", category61.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "en-CA" + "'", str64, "en-CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English" + "'", str65, "English");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "20" + "'", str66, "20");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.weekOfWeekyear();
        java.lang.String str22 = zonedChronology13.toString();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((-35999999L), (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str22, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        long long19 = dateTimeField17.roundCeiling((long) 2808304);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfEra();
        int int23 = property22.getMinimumValue();
        java.lang.String str24 = property22.getAsText();
        org.joda.time.LocalDateTime localDateTime25 = property22.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusMonths((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withField(dateTimeFieldType30, 999);
        java.lang.String str33 = localDateTime32.toString();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear(64);
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.lang.String str41 = locale37.getDisplayCountry(locale39);
        java.util.Set<java.lang.Character> charSet42 = locale37.getExtensionKeys();
        java.util.Locale locale43 = locale37.stripExtensions();
        java.lang.String str44 = locale43.getDisplayCountry();
        org.joda.time.tz.NameProvider nameProvider45 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(locale47);
        java.lang.String str51 = nameProvider45.getShortName(locale47, "2022-02-22T00:47:00.745", "en-CA");
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.days();
        org.joda.time.DurationField durationField58 = chronology56.minutes();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str63 = dateTimeZone61.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance(chronology56, dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology64.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean69 = dateTimeZone67.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology70 = zonedChronology64.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology64.year();
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology64.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology64.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.millisOfSecond();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.weekOfWeekyear();
        org.joda.time.Chronology chronology82 = localDateTime79.getChronology();
        int int83 = localDateTime79.getMillisOfDay();
        boolean boolean84 = dateTimeZone78.isLocalDateTimeGap(localDateTime79);
        java.util.Locale locale86 = java.util.Locale.JAPAN;
        java.lang.String str87 = dateTimeZone78.getShortName(242247369600000L, locale86);
        int int88 = dateTimeField75.getMaximumShortTextLength(locale86);
        java.lang.String str91 = nameProvider45.getShortName(locale86, "929", "2022-02-21T00:47:10.116+10:00");
        java.lang.String str92 = locale43.getDisplayVariant(locale86);
        java.lang.String str93 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime35, 2989716, locale86);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3600000L + "'", long19 == 3600000L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "292278993-02-22T00:00:00.999" + "'", str33, "292278993-02-22T00:00:00.999");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uce90\ub098\ub2e4" + "'", str40, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ubbf8\uad6d" + "'", str41, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Vereinigte Staaten von Amerika" + "'", str44, "Vereinigte Staaten von Amerika");
        org.junit.Assert.assertNotNull(nameProvider45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(chronology82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3243272 + "'", int83 == 3243272);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+100:00" + "'", str87, "+100:00");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2989716" + "'", str93, "2989716");
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean11 = charSet1.equals((java.lang.Object) dateTimeFieldType10);
        java.lang.String str12 = dateTimeFieldType10.toString();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType10.getDurationType();
        java.lang.String str14 = dateTimeFieldType10.getName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfYear" + "'", str12, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfYear" + "'", str14, "dayOfYear");
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale locale10 = builder7.build();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        boolean boolean14 = locale11.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = locale15.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.lang.String str22 = locale15.getDisplayCountry(locale19);
        java.lang.String str23 = locale11.getDisplayVariant(locale19);
        java.util.Locale locale24 = java.util.Locale.US;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale24.getDisplayCountry(locale26);
        java.util.Set<java.lang.Character> charSet29 = locale24.getExtensionKeys();
        java.util.Locale locale30 = locale24.stripExtensions();
        java.lang.String str31 = locale11.getDisplayName(locale24);
        java.util.Locale locale35 = new java.util.Locale("zh_CN", "und", "2022-02-22T00:46:53.821");
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = locale35.getDisplayScript(locale36);
        java.lang.String str38 = locale36.getDisplayScript();
        java.lang.String str39 = locale11.getDisplayScript(locale36);
        java.util.Locale.Builder builder40 = builder7.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder7.setLanguage("+00:00:00.012");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: +00:00:00.012 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "days");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uce90\ub098\ub2e4" + "'", str27, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ubbf8\uad6d" + "'", str28, "\ubbf8\uad6d");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertEquals(locale35.toString(), "zh_cn_UND_2022-02-22T00:46:53.821");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = zonedChronology12.getDateTimeMillis(0, 2995314, 2976823, 1969, 2995650, 917, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str15 = dateTimeZone13.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology22 = zonedChronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology16.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = dateTimeField23.getAsText(0L, locale25);
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder33 = builder31.setLocale(locale32);
        java.util.Locale.setDefault(category0, locale32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        long long41 = dateTimeZone37.adjustOffset((-295200000L), true);
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.lang.String str46 = dateTimeZone37.getShortName(0L, locale44);
        java.util.Locale.setDefault(category0, locale44);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime48.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusSeconds((-1));
        org.joda.time.DateTime dateTime53 = localDateTime52.toDateTime();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.dayOfWeek();
        java.util.Locale locale58 = new java.util.Locale("927", "year", "80");
        int int59 = property54.getMaximumShortTextLength(locale58);
        java.util.Locale.setDefault(category0, locale58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks(0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.yearOfEra();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.monthOfYear();
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale71.getDisplayCountry(locale72);
        java.util.Locale locale74 = locale71.stripExtensions();
        java.lang.String str75 = locale71.getDisplayCountry();
        java.lang.String str76 = dateTimeField66.getAsText((org.joda.time.ReadablePartial) localDateTime68, locale71);
        org.joda.time.LocalDateTime.Property property77 = localDateTime68.dayOfMonth();
        java.lang.String str78 = property77.toString();
        org.joda.time.DurationField durationField79 = property77.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime80 = property77.roundHalfEvenCopy();
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.lang.String str83 = locale81.getDisplayCountry(locale82);
        java.util.Locale locale84 = locale81.stripExtensions();
        java.lang.String str85 = locale84.getCountry();
        int int86 = property77.getMaximumTextLength(locale84);
        java.util.Locale.setDefault(category0, locale84);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-295200000L) + "'", long41 == (-295200000L));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals(locale58.toString(), "927_YEAR_80");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "54" + "'", str76, "54");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Property[dayOfMonth]" + "'", str78, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4459589293L);
        long long22 = dateTimeZone11.convertLocalToUTC((long) (byte) 0, true, (long) (byte) 10);
        java.lang.String str24 = dateTimeZone11.getNameKey(1645454833656L);
        int int26 = dateTimeZone11.getOffset((long) 19043);
        java.lang.String str28 = dateTimeZone11.getName((long) (-38091));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-36000000L) + "'", long22 == (-36000000L));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("445");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("DateTimeField[dayOfMonth]");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("Greenwich Zeit");
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("hours");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimeZone11);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime1.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.withWeekyear(2815878);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours(240);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusHours(960);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology37.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        java.lang.String str51 = dateTimeZone48.getID();
        long long54 = dateTimeZone48.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.Chronology chronology55 = zonedChronology37.withZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone56 = zonedChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) (short) 10);
        long long63 = dateTimeZone58.convertLocalToUTC((long) 1439, true);
        long long65 = dateTimeZone56.getMillisKeepLocal(dateTimeZone58, (-1184727463199900L));
        org.joda.time.Chronology chronology66 = zonedChronology12.withZone(dateTimeZone56);
        java.lang.String str68 = dateTimeZone56.getNameKey(1666622848718L);
        boolean boolean69 = dateTimeZone56.isFixed();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone56);
        int int71 = localDateTime70.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-35999999L) + "'", long54 == (-35999999L));
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1339L + "'", long63 == 1339L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1184727427200000L) + "'", long65 == (-1184727427200000L));
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 54 + "'", int71 == 54);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromDateFields(date24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.fromDateFields(date24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int31 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        int int38 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        int int45 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime28.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime28.withWeekyear(2815878);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property52 = localDateTime26.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 00:54:03 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        java.lang.String str27 = dateTimeZone24.getID();
        long long30 = dateTimeZone24.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale locale36 = locale33.stripExtensions();
        java.lang.String str37 = locale36.getDisplayVariant();
        java.lang.String str38 = dateTimeZone24.getShortName((long) (short) 0, locale36);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        boolean boolean41 = zonedChronology12.equals((java.lang.Object) locale39);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField43 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology12.hourOfHalfday();
        boolean boolean46 = dateTimeField44.isLeap(86400000L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999999L) + "'", long30 == (-35999999L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getID();
        java.lang.String str8 = dateTimeZone2.getName((long) 2);
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean12 = timeZone10.observesDaylightTime();
        boolean boolean13 = timeZone9.hasSameRules(timeZone10);
        timeZone9.setID("1970");
        int int16 = timeZone9.getRawOffset();
        boolean boolean17 = timeZone9.observesDaylightTime();
        java.lang.String str18 = timeZone9.getID();
        int int19 = timeZone9.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean2 = timeZone0.observesDaylightTime();
        java.time.ZoneId zoneId3 = null; // flaky: timeZone0.toZoneId();
        java.time.ZoneId zoneId4 = null; // flaky: timeZone0.toZoneId();
        java.util.TimeZone timeZone5 = null; // flaky: java.util.TimeZone.getTimeZone(zoneId4);
// flaky:         timeZone5.setRawOffset(22);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertNotNull(zoneId3);
// flaky:         org.junit.Assert.assertNotNull(zoneId4);
// flaky:         org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withWeekyear(69);
        java.lang.String str3 = localDateTime0.toString();
        int int4 = localDateTime0.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T00:54:03.693" + "'", str3, "2022-02-22T00:54:03.693");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology20 = zonedChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = zonedChronology14.withUTC();
        org.joda.time.DurationField durationField24 = zonedChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology14);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology14.minuteOfDay();
        long long31 = dateTimeField29.roundHalfFloor((long) 2946329);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2940000L + "'", long31 == 2940000L);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField24 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.dayOfWeek();
        long long27 = dateTimeField25.remainder((long) 2846017);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 38846017L + "'", long27 == 38846017L);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology12.add(readablePeriod21, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = zonedChronology12.getZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField24 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField17 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        int int23 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        int int30 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.minusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology51 = zonedChronology45.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology45.weekOfWeekyear();
        org.joda.time.Chronology chronology54 = zonedChronology45.withUTC();
        org.joda.time.DurationField durationField55 = zonedChronology45.seconds();
        org.joda.time.DateTimeZone dateTimeZone56 = zonedChronology45.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.monthOfYear();
        long long62 = zonedChronology45.set((org.joda.time.ReadablePartial) localDateTime58, (long) 2022);
        org.joda.time.LocalDateTime.Property property63 = localDateTime58.weekOfWeekyear();
        org.joda.time.DateTime dateTime64 = localDateTime58.toDateTime();
        org.joda.time.DateTime dateTime65 = localDateTime32.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        int int66 = localDateTime32.getDayOfMonth();
        int int67 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property68 = localDateTime32.millisOfSecond();
        int int69 = localDateTime32.getMillisOfDay();
        int int70 = localDateTime32.getYearOfEra();
        int int71 = localDateTime32.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645455243820L + "'", long62 == 1645455243820L);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3243820 + "'", int69 == 3243820);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2019 + "'", int70 == 2019);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 173 + "'", int71 == 173);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDurationAdded(readableDuration6, 86399);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(2803852);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) 'a');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMonths(21);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        boolean boolean29 = zonedChronology27.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        boolean boolean33 = dateTimeFieldType31.isSupported(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType31.getField(chronology38);
        java.lang.String str40 = dateTimeField39.getName();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = locale47.getISO3Country();
        java.lang.String str50 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, 2, locale47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        boolean boolean55 = dateTimeFieldType53.isSupported(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType53.getField(chronology60);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str66 = dateTimeZone64.getShortName((long) 10);
        java.lang.String str67 = dateTimeZone64.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.chrono.ZonedChronology zonedChronology69 = org.joda.time.chrono.ZonedChronology.getInstance(chronology60, dateTimeZone64);
        java.lang.String str71 = dateTimeZone64.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime44, dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.minus(readableDuration74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.withMillisOfDay(764);
        int int78 = localDateTime77.getWeekOfWeekyear();
        int int79 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.plusMinutes(2905071);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plusSeconds(2994070);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.minus(readablePeriod85);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "millisOfSecond" + "'", str40, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str48, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2" + "'", str50, "2");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+10:00" + "'", str66, "+10:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8 + "'", int78 == 8);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.minuteOfHour();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DurationField durationField22 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int29 = dateTimeZone27.getOffsetFromLocal((long) 100);
        org.joda.time.Chronology chronology30 = zonedChronology12.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.hourOfDay();
        long long35 = dateTimeField33.remainder(4495695223L);
        long long38 = dateTimeField33.addWrapField((long) 5941440, 2885976);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2895223L + "'", long35 == 2895223L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 5941440L + "'", long38 == 5941440L);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology12.add(readablePeriod26, 52L, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        java.lang.String str31 = localDateTime30.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T00:54:03.971" + "'", str31, "2022-02-22T00:54:03.971");
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.yearOfCentury();
        java.lang.String str25 = dateTimeField24.getName();
        long long27 = dateTimeField24.remainder(4495680639L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "yearOfCentury" + "'", str25, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4531680639L + "'", long27 == 4531680639L);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        long long54 = dateTimeField8.getDifferenceAsLong(70001L, (long) 2);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        int int56 = dateTimeField8.getMaximumTextLength(locale55);
        java.lang.String str58 = dateTimeField8.getAsText(69999L);
        boolean boolean59 = dateTimeField8.isLenient();
        int int61 = dateTimeField8.get((long) 36000000);
        java.lang.String str62 = dateTimeField8.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str39, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 69999L + "'", long54 == 69999L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "999" + "'", str58, "999");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str62, "DateTimeField[millisOfSecond]");
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology26 = zonedChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str31 = dateTimeZone29.getShortName((long) 10);
        java.lang.String str32 = dateTimeZone29.getID();
        org.joda.time.Chronology chronology33 = zonedChronology20.withZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int37 = dateTimeZone35.getOffsetFromLocal((long) 100);
        org.joda.time.Chronology chronology38 = zonedChronology20.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology20.minuteOfHour();
        boolean boolean40 = localDateTime7.equals((java.lang.Object) zonedChronology20);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.minusMillis(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime44.yearOfEra();
        int[] intArray52 = zonedChronology20.get((org.joda.time.ReadablePartial) localDateTime44, 4495661888L);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        boolean boolean55 = dateTimeFieldType53.isSupported(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType53.getField(chronology60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusWeeks(0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.days();
        org.joda.time.DurationField durationField69 = chronology67.minutes();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str74 = dateTimeZone72.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology75 = org.joda.time.chrono.ZonedChronology.getInstance(chronology67, dateTimeZone72);
        org.joda.time.DurationField durationField76 = durationFieldType62.getField((org.joda.time.Chronology) zonedChronology75);
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology75.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        java.lang.String str82 = dateTimeZone80.getShortName((long) (short) 0);
        org.joda.time.Chronology chronology83 = zonedChronology75.withZone(dateTimeZone80);
        long long85 = dateTimeZone80.nextTransition(18300000L);
        long long89 = dateTimeZone80.convertLocalToUTC(4495594354L, true, (long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone80);
        org.joda.time.Chronology chronology91 = zonedChronology20.withZone(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField92 = zonedChronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField93 = zonedChronology20.secondOfDay();
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime(1645455113953L, (org.joda.time.Chronology) zonedChronology20);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 2, 22, 38861888]");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+10:00" + "'", str74, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+100:00" + "'", str82, "+100:00");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 18300000L + "'", long85 == 18300000L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 4135594354L + "'", long89 == 4135594354L);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.minuteOfHour();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DurationField durationField22 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime28.year();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundCeilingCopy();
        java.lang.String str36 = property34.getName();
        java.lang.String str37 = property34.getName();
        org.joda.time.LocalDateTime localDateTime38 = property34.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType39.isSupported(chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType39.getField(chronology46);
        java.lang.String str48 = dateTimeField47.getName();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.getISO3Country();
        java.lang.String str58 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, 2, locale55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withMinuteOfHour((int) '#');
        java.util.Date date63 = localDateTime60.toDate();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.minusSeconds(305);
        int[] intArray66 = localDateTime65.getValues();
        zonedChronology13.validate((org.joda.time.ReadablePartial) localDateTime38, intArray66);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology13.yearOfCentury();
        org.joda.time.DurationField durationField70 = zonedChronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "year" + "'", str36, "year");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "year" + "'", str37, "year");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "millisOfSecond" + "'", str48, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str56, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2" + "'", str58, "2");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Thu Feb 24 18:54:04 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 24, 67739118]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField14 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int22 = localDateTime21.getEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property23.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(2811632);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusSeconds(2939673);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfYear(268);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        boolean boolean36 = locale33.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.util.Locale locale40 = locale37.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale37.getDisplayCountry(locale41);
        java.lang.String str45 = locale33.getDisplayVariant(locale41);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale47.getScript();
        java.lang.String str52 = nameProvider46.getName(locale47, "8", "2022");
        java.util.Locale locale54 = new java.util.Locale("");
        java.lang.String str57 = nameProvider46.getName(locale54, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str58 = locale41.getDisplayName(locale54);
        java.util.Set<java.lang.Character> charSet59 = locale41.getExtensionKeys();
        java.lang.String str60 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, 776, locale41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime62 = localDateTime31.withDayOfMonth(2987572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2987572 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "German" + "'", str58, "German");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "776" + "'", str60, "776");
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        java.util.Locale locale3 = new java.util.Locale("Saturday", "875", "2022-02-22T00:51:57.932");
        org.junit.Assert.assertEquals(locale3.toString(), "saturday_875_2022-02-22T00:51:57.932");
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField18 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField19 = zonedChronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str31 = dateTimeZone29.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone29);
        boolean boolean34 = zonedChronology32.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField35 = zonedChronology32.centuries();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        int int43 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime40.toDateTime(readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        int int50 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime47.isEqual((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(0);
        int int57 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property59 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundHalfCeilingCopy();
        int[] intArray62 = zonedChronology32.get((org.joda.time.ReadablePartial) localDateTime60, (long) 2814846);
        long long64 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime60, (long) 9);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology12.year();
        org.joda.time.DurationField durationField69 = dateTimeField68.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1, 38814846]");
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645779244209L + "'", long64 == 1645779244209L);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime18.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int[] intArray38 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime36, 70001L);
        java.lang.String str39 = zonedChronology12.toString();
        org.joda.time.DurationField durationField40 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField42 = zonedChronology12.halfdays();
        int int45 = durationField42.getValue(4495939030L, 0L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str39, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 104 + "'", int45 == 104);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        boolean boolean22 = dateTimeFieldType20.isSupported(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType20.getField(chronology27);
        java.lang.String str29 = dateTimeField28.getName();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.getISO3Country();
        java.lang.String str39 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, 2, locale36);
        int int41 = dateTimeField28.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        boolean boolean44 = dateTimeFieldType42.isSupported(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType42.getField(chronology49);
        java.lang.String str51 = dateTimeField50.getName();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.lang.String str60 = locale58.getISO3Country();
        java.lang.String str61 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, 2, locale58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime55.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plus(readableDuration64);
        int[] intArray70 = new int[] { 0, 292278993, 10, 'a' };
        int int71 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime65, intArray70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        int int76 = localDateTime73.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime73.toDateTime(readableInstant77);
        boolean boolean80 = dateTime78.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime81 = localDateTime65.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime82 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Instant instant83 = dateTime82.toInstant();
        long long84 = instant83.getMillis();
        long long85 = instant83.getMillis();
        org.joda.time.Instant instant86 = instant83.toInstant();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "millisOfSecond" + "'", str29, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str37, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfSecond" + "'", str51, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str59, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2" + "'", str61, "2");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(instant83);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1645455244287L + "'", long84 == 1645455244287L);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645455244287L + "'", long85 == 1645455244287L);
        org.junit.Assert.assertNotNull(instant86);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setLanguage("eras");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguage("2022-02-21T00:47:39.652+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-21T00:47:39.652+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "days");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "days");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.era();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        int int28 = localDateTime25.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMinutes(2946329);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plus(readableDuration31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField34 = localDateTime25.getField(572);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 572");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property2.addToCopy((int) '4');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYearOfEra(3025478);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMinuteOfHour(27424848);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27424848 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(2811632);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(33);
        java.util.Date date10 = localDateTime9.toDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Jan 05 03:59:33 GMT 1970");
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray13 = new java.lang.String[] { "886", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-21T14:46:27.523", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList14);
        java.lang.String str17 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList21, strMap22);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DurationField durationField23 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.monthOfYear();
        int int35 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        long long37 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology12.year();
        org.joda.time.DurationField durationField39 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        int int44 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime41.toDateTime(readableInstant45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime41.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.withFieldAdded(durationFieldType50, (int) (byte) 1);
        int[] intArray55 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime53, 4495612897L);
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone57 = zonedChronology12.getZone();
        org.joda.time.Chronology chronology58 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = chronology58.get(readablePeriod60, 1645455129264L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455244525L + "'", long37 == 1645455244525L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "centuries" + "'", str51, "centuries");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 2, 22, 38812897]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str15 = dateTimeZone13.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology22 = zonedChronology16.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology16.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = zonedChronology16.withUTC();
        org.joda.time.DurationField durationField26 = zonedChronology16.seconds();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime3, (org.joda.time.Chronology) zonedChronology16);
        int int28 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property29 = localDateTime3.hourOfDay();
        int int30 = property29.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 553 + "'", int28 == 553);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        long long18 = dateTimeField16.roundCeiling(15298745711L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 15300000000L + "'", long18 == 15300000000L);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.lang.Object[] objArray16 = charSet15.toArray();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        boolean boolean19 = charSet15.retainAll((java.util.Collection<java.lang.Character>) charSet18);
        boolean boolean20 = charSet12.containsAll((java.util.Collection<java.lang.Character>) charSet15);
        java.util.stream.Stream<java.lang.Character> charStream21 = charSet15.stream();
        java.util.stream.Stream<java.lang.Character> charStream22 = charSet15.stream();
        boolean boolean23 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet15);
        java.lang.Object[] objArray24 = charSet4.toArray();
        java.util.Iterator<java.lang.Character> charItor25 = charSet4.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charStream21);
        org.junit.Assert.assertNotNull(charStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(charItor25);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.weekOfWeekyear();
        org.joda.time.Chronology chronology45 = zonedChronology36.withUTC();
        org.joda.time.DurationField durationField46 = zonedChronology36.months();
        org.joda.time.DurationField durationField47 = zonedChronology36.centuries();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology36.minuteOfHour();
        org.joda.time.DurationField durationField49 = zonedChronology36.centuries();
        org.joda.time.DurationFieldType durationFieldType50 = durationField49.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = localDateTime23.withFieldAdded(durationFieldType50, 3029076);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 302909622 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str17, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationFieldType50);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology12.hours();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        int int32 = property31.getMinimumValue();
        java.lang.String str33 = property31.getAsText();
        org.joda.time.LocalDateTime localDateTime34 = property31.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusMonths((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = localDateTime38.getFields();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        int int44 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime41.toDateTime(readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        int int51 = localDateTime48.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime48.isEqual((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(0);
        int int58 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property60 = localDateTime41.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime64 = localDateTime41.toDateTime(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        int int66 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime64.getZone();
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.Chronology chronology69 = zonedChronology12.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology12.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000000 + "'", int66 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+10:00" + "'", str68, "+10:00");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        long long8 = dateTimeZone2.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long11 = dateTimeZone2.nextTransition(2073600000L);
        long long14 = dateTimeZone2.adjustOffset(18300000L, false);
        java.lang.String str15 = dateTimeZone2.getID();
        int int17 = dateTimeZone2.getStandardOffset((long) 687);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-35999999L) + "'", long8 == (-35999999L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2073600000L + "'", long11 == 2073600000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 18300000L + "'", long14 == 18300000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology12.getZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        java.lang.String str15 = dateTimeField14.getName();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.getISO3Country();
        java.lang.String str25 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 2, locale22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMinuteOfHour((int) '#');
        java.util.Date date30 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(305);
        boolean boolean33 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4496044749L + "'", long3 == 4496044749L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millisOfSecond" + "'", str15, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str23, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 21 00:54:04 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("eras");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        boolean boolean23 = locale20.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = locale24.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale24.getDisplayCountry(locale28);
        java.lang.String str32 = locale20.getDisplayVariant(locale28);
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale34.getScript();
        java.lang.String str39 = nameProvider33.getName(locale34, "8", "2022");
        java.util.Locale locale41 = new java.util.Locale("");
        java.lang.String str44 = nameProvider33.getName(locale41, "en-CA", "2022-02-22T00:46:43.953");
        java.lang.String str45 = locale28.getDisplayName(locale41);
        java.util.Set<java.lang.Character> charSet46 = locale28.getExtensionKeys();
        java.lang.String str47 = dateTimeZone17.getName(1672518456000L, locale28);
        java.util.Locale.Builder builder48 = builder12.setLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder12.removeUnicodeLocaleAttribute("2022-02-22T00:47:56.638");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T00:47:56.638 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "German" + "'", str45, "German");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        int int4 = property1.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        int int9 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime6.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        int int16 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        int int23 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType25.getField(chronology32);
        java.lang.String str34 = dateTimeField33.getName();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Country();
        java.lang.String str44 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 2, locale41);
        int int46 = dateTimeField33.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        boolean boolean49 = dateTimeFieldType47.isSupported(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks(0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType47.getField(chronology54);
        java.lang.String str56 = dateTimeField55.getName();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks(0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = locale63.getISO3Country();
        java.lang.String str66 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, 2, locale63);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime60.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plus(readableDuration69);
        int[] intArray75 = new int[] { 0, 292278993, 10, 'a' };
        int int76 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime70, intArray75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(dateTimeZone79);
        int int81 = localDateTime78.compareTo((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = localDateTime78.toDateTime(readableInstant82);
        boolean boolean85 = dateTime83.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime86 = localDateTime70.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Chronology chronology88 = dateTime86.getChronology();
        long long89 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int92 = localDateTime91.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray93 = localDateTime91.getFieldTypes();
        boolean boolean94 = dateTime86.equals((java.lang.Object) localDateTime91);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime91.plusDays(2816989);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime91.minusSeconds(2801202);
        org.joda.time.LocalDateTime.Property property99 = localDateTime98.centuryOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str42, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfSecond" + "'", str56, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str64, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2" + "'", str66, "2");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 122400000L + "'", long89 == 122400000L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(localDateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        int int25 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property24.getLocalDateTime();
        int[] intArray28 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime26, 69999L);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField30 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField31 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.clockhourOfHalfday();
        java.lang.String str33 = dateTimeField32.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 36069999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "clockhourOfHalfday" + "'", str33, "clockhourOfHalfday");
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        int int16 = dateTimeField15.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime18.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int int37 = localDateTime36.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusWeeks(310);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str53 = dateTimeZone51.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance(chronology46, dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology54.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean59 = dateTimeZone57.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology60 = zonedChronology54.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology54.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        long long66 = zonedChronology54.add(readablePeriod63, (long) (byte) 10, (int) (short) -1);
        org.joda.time.DurationField durationField67 = zonedChronology54.centuries();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((-292031999990L));
        int[] intArray75 = zonedChronology54.get((org.joda.time.ReadablePartial) localDateTime73, (long) (-6897504));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = dateTimeField15.set((org.joda.time.ReadablePartial) localDateTime40, 355, intArray75, 2927813);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2927813 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 29102496]");
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        java.lang.String str6 = property2.getName();
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = property2.getDifference(readableInstant7);
        org.joda.time.LocalDateTime localDateTime9 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(2910341);
        int[] intArray12 = localDateTime9.getValues();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yearOfEra" + "'", str6, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 1, 1, 0]");
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology32 = zonedChronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology26.weekOfWeekyear();
        org.joda.time.Chronology chronology35 = zonedChronology26.withUTC();
        org.joda.time.DurationField durationField36 = zonedChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology26.hourOfDay();
        org.joda.time.DurationField durationField39 = zonedChronology26.centuries();
        boolean boolean40 = localDateTime8.equals((java.lang.Object) zonedChronology26);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology26.hourOfHalfday();
        org.joda.time.DurationField durationField43 = zonedChronology26.centuries();
        org.joda.time.DurationField durationField44 = zonedChronology26.hours();
        java.lang.String str45 = durationField44.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DurationField[hours]" + "'", str45, "DurationField[hours]");
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        timeZone1.setID("2022-02-21T00:47:34.976");
        boolean boolean4 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T00:46:40.745");
        int int3 = timeZone1.getOffset((long) 2842207);
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setID("21");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("2022-02-22T00:46:40.745");
        int int10 = timeZone8.getOffset(1645454801625L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean12 = timeZone1.hasSameRules(timeZone8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T00:48:00.377", "27955");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t00:48:00.377_27955");
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.era();
        java.util.Locale locale29 = new java.util.Locale("zh_CN", "und", "2022-02-22T00:46:53.821");
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getDisplayScript();
        java.lang.String str33 = locale30.getScript();
        java.lang.String str34 = locale30.getISO3Language();
        int int35 = dateTimeField25.getMaximumTextLength(locale30);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_cn_UND_2022-02-22T00:46:53.821");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        int int8 = property7.getMaximumValueOverall();
        int int9 = property7.get();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("year");
        java.util.Locale.Builder builder11 = builder7.setVariant("");
        java.util.Locale.Builder builder12 = builder7.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.setLanguageTag("weekyear");
        java.util.Locale.Builder builder16 = builder14.setRegion("");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("291");
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.removeUnicodeLocaleAttribute("und-u-eras");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: und-u-eras [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property2.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology25 = zonedChronology19.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology19.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType6.getField((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.halfdayOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology19.weeks();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        int int38 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        int int45 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = localDateTime42.toString(dateTimeFormatter47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.minus(readablePeriod49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime54 = property52.addToCopy((long) (short) 0);
        boolean boolean55 = localDateTime42.isEqual((org.joda.time.ReadablePartial) localDateTime54);
        long long57 = zonedChronology19.set((org.joda.time.ReadablePartial) localDateTime42, 1645454905791L);
        int int58 = localDateTime42.getWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T00:54:05.269" + "'", str48, "2022-02-22T00:54:05.269");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645455245269L + "'", long57 == 1645455245269L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField20 = zonedChronology12.millis();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField26 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField21 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str10 = dateTimeFieldType9.getName();
        int int11 = localDateTime3.indexOf(dateTimeFieldType9);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        boolean boolean16 = locale14.hasExtensions();
        java.util.Locale locale17 = locale14.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localDateTime3.toString("", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfSecond" + "'", str10, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uce90\ub098\ub2e4" + "'", str15, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        java.lang.String str6 = dateTimeZone2.getID();
        java.lang.String str8 = dateTimeZone2.getName((long) 2);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy(2834567);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        java.lang.String str19 = dateTimeZone16.getID();
        long long22 = dateTimeZone16.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale28.getDisplayVariant();
        java.lang.String str30 = dateTimeZone16.getShortName((long) (short) 0, locale28);
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getScript();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = locale31.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getISO3Language();
        java.lang.String str37 = locale28.getDisplayCountry(locale31);
        int int38 = property10.getMaximumShortTextLength(locale28);
        java.lang.String str39 = locale28.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = locale28.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-35999999L) + "'", long22 == (-35999999L));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ita" + "'", str36, "ita");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = dateTimeFieldType17.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType17.getField(chronology24);
        java.lang.String str26 = dateTimeField25.getName();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 2, locale33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime30.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType39.isSupported(chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType39.getField(chronology46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str52 = dateTimeZone50.getShortName((long) 10);
        java.lang.String str53 = dateTimeZone50.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.chrono.ZonedChronology zonedChronology55 = org.joda.time.chrono.ZonedChronology.getInstance(chronology46, dateTimeZone50);
        java.lang.String str57 = dateTimeZone50.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime30, dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int63 = dateTimeZone61.getOffsetFromLocal((long) 100);
        org.joda.time.DateTime dateTime64 = localDateTime59.toDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(2883892L, dateTimeZone61);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withDurationAdded(readableDuration66, 28158);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfSecond" + "'", str26, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanese" + "'", str34, "Japanese");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-15T00:53:27.484");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-15t00:53:27.484");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.minuteOfHour();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DurationField durationField22 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.weekyear();
        long long26 = dateTimeField24.roundHalfFloor((long) 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-295200000L) + "'", long26 == (-295200000L));
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime13, dateTimeZone33);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        org.joda.time.DurationField durationField43 = property42.getRangeDurationField();
        int int44 = property42.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = property42.roundHalfCeilingCopy();
        int int46 = property42.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\ubbf8\uad6d");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone33);
        java.lang.String str40 = dateTimeZone33.getShortName(4459589293L);
        org.joda.time.Chronology chronology41 = zonedChronology12.withZone(dateTimeZone33);
        long long45 = dateTimeZone33.convertLocalToUTC(4495594354L, true, 4495596112L);
        long long48 = dateTimeZone33.adjustOffset((long) 2795574, true);
        java.util.TimeZone timeZone49 = dateTimeZone33.toTimeZone();
        boolean boolean50 = timeZone49.observesDaylightTime();
        java.time.ZoneId zoneId51 = timeZone49.toZoneId();
        timeZone49.setID("487");
        int int54 = timeZone49.getDSTSavings();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 4459594354L + "'", long45 == 4459594354L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2795574L + "'", long48 == 2795574L);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DurationField durationField23 = durationFieldType9.getField((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        int int28 = property27.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        int[] intArray33 = zonedChronology22.get((org.joda.time.ReadablePartial) localDateTime29, 1645368563145L);
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology22.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 21, 2963145]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology20 = zonedChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology23 = zonedChronology14.withUTC();
        org.joda.time.DurationField durationField24 = zonedChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology14.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology14);
        org.joda.time.DurationField durationField27 = zonedChronology14.millis();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = durationField27.getValue(4496035101L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 4496035101");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField16 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime18.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int[] intArray38 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime36, 70001L);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField40 = zonedChronology12.millis();
        org.joda.time.DurationField durationField41 = zonedChronology12.millis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusMillis(366);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType8.getField(chronology15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.withFieldAdded(durationFieldType17, 2798838);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.plusHours(99);
        int int22 = localDateTime21.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plus(readableDuration23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withCenturyOfEra(3115196);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3115196 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField15 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.yearOfEra();
        int int19 = dateTimeField17.get(36000012L);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = dateTimeField17.getAsText(86399, locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        int int26 = dateTimeField17.getMaximumTextLength(locale23);
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        int int28 = charSet27.size();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy((long) (short) 0);
        int int33 = property30.get();
        org.joda.time.LocalDateTime localDateTime34 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = property30.addWrapFieldToCopy(52);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusDays(2911271);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.plusYears(10);
        boolean boolean44 = charSet27.remove((java.lang.Object) localDateTime36);
        org.joda.time.Chronology chronology45 = localDateTime36.getChronology();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "86399" + "'", str22, "86399");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uce90\ub098\ub2e4" + "'", str25, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 671 + "'", int33 == 671);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField25 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.Chronology chronology27 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.minuteOfDay();
        org.joda.time.Chronology chronology29 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField24 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DurationField durationField37 = chronology35.minutes();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str42 = dateTimeZone40.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean48 = dateTimeZone46.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology49 = zonedChronology43.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology43.year();
        java.lang.String str52 = zonedChronology43.toString();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology43.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology43.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        java.lang.String str60 = dateTimeZone57.getID();
        java.lang.String str61 = dateTimeZone57.getID();
        java.lang.String str63 = dateTimeZone57.getName((long) 2);
        java.util.TimeZone timeZone64 = dateTimeZone57.toTimeZone();
        long long67 = dateTimeZone57.adjustOffset(1645454816920L, true);
        org.joda.time.Chronology chronology68 = zonedChronology43.withZone(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone57);
        int int71 = dateTimeZone57.getOffset((long) 5725962);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(4495612896L, dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfSecond();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.weekOfWeekyear();
        int int77 = property76.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime79 = property76.setCopy(4);
        java.lang.String str80 = property76.getAsText();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(dateTimeZone81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusWeeks(0);
        org.joda.time.Chronology chronology85 = localDateTime84.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.minuteOfDay();
        java.util.Locale.Builder builder87 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder89 = builder87.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale90 = builder89.build();
        java.lang.String str91 = locale90.getDisplayName();
        int int92 = dateTimeField86.getMaximumTextLength(locale90);
        java.lang.String str93 = property76.getAsText(locale90);
        java.util.Locale locale94 = locale90.stripExtensions();
        java.lang.String str95 = dateTimeZone57.getName((long) 659, locale90);
        java.lang.String str96 = dateTimeField28.getAsText(4495820885L, locale90);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str52, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+10:00" + "'", str63, "+10:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645454816920L + "'", long67 == 1645454816920L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 36000000 + "'", int71 == 36000000);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 53 + "'", int77 == 53);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "8" + "'", str80, "8");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "8" + "'", str93, "8");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+10:00" + "'", str95, "+10:00");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "AM" + "'", str96, "AM");
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField20 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.millisOfSecond();
        long long24 = dateTimeField21.add(0L, (long) 179);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 179L + "'", long24 == 179L);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T00:46:40.745");
        timeZone1.setID("centuries");
        timeZone1.setRawOffset(2834965);
        timeZone1.setRawOffset(2850900);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone1.getOffset(2936214, (-82275290), 3171120, 361, 840, 5778833);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:47");
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        int int18 = dateTimeField16.getLeapAmount(1645455112768L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withDurationAdded(readableDuration7, 42);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDurationAdded(readableDuration12, 432);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime11.getValue(3106493);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3106493");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromDateFields(date24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 00:54:05 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField16 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.yearOfCentury();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor21 = charSet20.iterator();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.Object[] objArray24 = charSet23.toArray();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        boolean boolean27 = charSet23.retainAll((java.util.Collection<java.lang.Character>) charSet26);
        boolean boolean28 = charSet20.containsAll((java.util.Collection<java.lang.Character>) charSet23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean30 = charSet20.equals((java.lang.Object) dateTimeFieldType29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        java.lang.Object[] objArray36 = charSet35.toArray();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        boolean boolean39 = charSet35.retainAll((java.util.Collection<java.lang.Character>) charSet38);
        boolean boolean40 = charSet32.containsAll((java.util.Collection<java.lang.Character>) charSet35);
        java.util.Spliterator<java.lang.Character> charSpliterator41 = charSet35.spliterator();
        boolean boolean42 = charSet20.retainAll((java.util.Collection<java.lang.Character>) charSet35);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks(0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.days();
        org.joda.time.DurationField durationField49 = chronology47.minutes();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str54 = dateTimeZone52.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology55 = org.joda.time.chrono.ZonedChronology.getInstance(chronology47, dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology55.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology61 = zonedChronology55.withZone(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology55.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology55.secondOfDay();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology55.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusWeeks(0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfEra();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.monthOfYear();
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        java.util.Locale locale79 = locale76.stripExtensions();
        java.lang.String str80 = locale76.getDisplayCountry();
        java.lang.String str81 = dateTimeField71.getAsText((org.joda.time.ReadablePartial) localDateTime73, locale76);
        int int82 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean83 = charSet35.remove((java.lang.Object) localDateTime73);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime73.plusYears(2852342);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withDayOfYear(111);
        int int88 = localDateTime85.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime85.minusDays((-1));
        int int91 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime85);
        int int92 = localDateTime85.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(charItor21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charSpliterator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "54" + "'", str81, "54");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22 + "'", int88 == 22);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 99 + "'", int91 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5 + "'", int92 == 5);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.monthOfYear();
        int int11 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = dateTimeFieldType12.isSupported(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType12.getField(chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType12.getRangeDurationType();
        boolean boolean22 = localDateTime8.isSupported(dateTimeFieldType12);
        int[] intArray23 = localDateTime8.getValues();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime24.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int31 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        int int37 = property36.getMinimumValue();
        boolean boolean38 = dateTime33.equals((java.lang.Object) int37);
        org.joda.time.Chronology chronology39 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime40 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        boolean boolean46 = property42.equals((java.lang.Object) durationFieldType45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DurationField durationField48 = durationFieldType45.getField(chronology47);
        java.lang.String str49 = durationFieldType45.toString();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime24.withFieldAdded(durationFieldType45, 20);
        org.joda.time.LocalDateTime.Property property52 = localDateTime24.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime24.plus(readablePeriod53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(225);
        int int57 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 22, 3245990]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "centuries" + "'", str49, "centuries");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readableDuration2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withMillisOfDay(2834965);
        int int6 = localDateTime5.getMillisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 28 + "'", int1 == 28);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 965 + "'", int6 == 965);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDurationAdded(readableDuration6, 86399);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis(2803852);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(2811086);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfDay(929);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(3152106);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3152106 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        boolean boolean24 = zonedChronology12.equals((java.lang.Object) "2022-02-22T00:46:43.291+10:00");
        org.joda.time.Chronology chronology25 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField26 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.minuteOfDay();
        long long32 = zonedChronology12.add((-11596148000L), 4495730208L, (-48));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-227391197984L) + "'", long32 == (-227391197984L));
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DurationField durationField23 = zonedChronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.monthOfYear();
        int int35 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        long long37 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology12.year();
        org.joda.time.DurationField durationField39 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        int int44 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime41.toDateTime(readableInstant45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime41.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.withFieldAdded(durationFieldType50, (int) (byte) 1);
        int[] intArray55 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime53, 4495612897L);
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField58 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology12.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455246088L + "'", long37 == 1645455246088L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "centuries" + "'", str51, "centuries");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 2, 22, 38812897]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("year");
        java.util.Locale.Builder builder11 = builder7.setVariant("");
        java.util.Locale.Builder builder12 = builder7.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder15 = builder13.setLanguage("year");
        java.util.Locale.Builder builder17 = builder15.setScript("");
        java.util.Locale.Builder builder18 = builder17.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder17.setUnicodeLocaleKeyword("2022-02-22T00:51:48.013", "409");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T00:51:48.013 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        int int7 = property6.getMinimumValue();
        java.lang.String str8 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category12, locale13);
        org.joda.time.LocalDateTime localDateTime15 = property10.setCopy("886", locale13);
        org.joda.time.LocalDateTime localDateTime16 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        int int20 = property19.getMinimumValue();
        java.lang.String str21 = property19.getAsText();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.lang.String str23 = property19.getAsText(locale22);
        boolean boolean24 = localDateTime16.equals((java.lang.Object) property19);
        boolean boolean25 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.plusMinutes(950);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy((long) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int12 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        int int18 = property17.getMinimumValue();
        boolean boolean19 = dateTime14.equals((java.lang.Object) int18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int21 = dateTime14.get(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        java.lang.String str27 = dateTimeZone24.getID();
        java.lang.String str28 = dateTimeZone24.getID();
        java.lang.String str30 = dateTimeZone24.getName((long) 2);
        java.util.TimeZone timeZone31 = dateTimeZone24.toTimeZone();
        boolean boolean32 = timeZone31.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.weekOfWeekyear();
        int int38 = property37.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime40 = property37.setCopy(4);
        java.lang.String str41 = property37.getAsText();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.minuteOfDay();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder48.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale51 = builder50.build();
        java.lang.String str52 = locale51.getDisplayName();
        int int53 = dateTimeField47.getMaximumTextLength(locale51);
        java.lang.String str54 = property37.getAsText(locale51);
        java.lang.String str55 = dateTimeZone33.getName(360000000L, locale51);
        boolean boolean56 = dateTime14.equals((java.lang.Object) locale51);
        int int57 = property7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime59 = property7.setCopy(2819155);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMonths(3031692);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53 + "'", int38 == 53);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "8" + "'", str41, "8");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "8" + "'", str54, "8");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.dayOfMonth();
        java.lang.String str8 = localDateTime1.toString();
        int int9 = localDateTime1.getCenturyOfEra();
        int int10 = localDateTime1.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str12 = dateTimeFieldType11.getName();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType11.getRangeDurationType();
        boolean boolean14 = localDateTime1.isSupported(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        boolean boolean29 = zonedChronology27.equals((java.lang.Object) "292278993-02-21T14:46:29.866");
        org.joda.time.DurationField durationField30 = zonedChronology27.centuries();
        org.joda.time.DurationField durationField31 = zonedChronology27.months();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        int int36 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime33.toDateTime(readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        int int43 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        boolean boolean45 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        int int50 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime44);
        int[] intArray53 = zonedChronology27.get((org.joda.time.ReadablePartial) localDateTime51, 70001L);
        int int54 = localDateTime51.getCenturyOfEra();
        int int55 = localDateTime51.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        boolean boolean59 = dateTimeFieldType57.isSupported(chronology58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusWeeks(0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType57.getField(chronology64);
        long long71 = chronology64.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DurationField durationField72 = chronology64.minutes();
        boolean boolean73 = dateTimeFieldType56.isSupported(chronology64);
        int int74 = localDateTime51.indexOf(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType56.getRangeDurationType();
        boolean boolean76 = localDateTime1.equals((java.lang.Object) durationFieldType75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.yearOfEra();
        int int80 = property79.getMinimumValue();
        java.lang.String str81 = property79.getAsText();
        org.joda.time.LocalDateTime localDateTime82 = property79.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.plusMonths((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = localDateTime86.getFields();
        int int88 = localDateTime86.getYear();
        boolean boolean89 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime86);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:54:06.202" + "'", str8, "2022-02-22T00:54:06.202");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfCentury" + "'", str12, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 36070001]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20 + "'", int54 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3246203 + "'", int55 == 3246203);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 70001L + "'", long71 == 70001L);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022" + "'", str81, "2022");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-292275047) + "'", int88 == (-292275047));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.year();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        int int16 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int22 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        int int29 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime26.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        int int36 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property38 = localDateTime19.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.lang.String str42 = property38.getAsText(locale39);
        boolean boolean43 = property17.equals((java.lang.Object) locale39);
        int int44 = property17.getMaximumValueOverall();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.toLanguageTag();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale50 = builder49.build();
        java.util.Locale.Builder builder51 = builder49.clear();
        java.util.Locale locale52 = builder49.build();
        java.lang.String str53 = locale45.getDisplayLanguage(locale52);
        java.lang.String str54 = property17.getAsText(locale45);
        java.util.Set<java.lang.String> strSet55 = locale45.getUnicodeLocaleKeys();
        java.lang.String str56 = property9.getAsText(locale45);
        int int57 = property9.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime58 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uce90\ub098\ub2e4" + "'", str41, "\uce90\ub098\ub2e4");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "263" + "'", str42, "263");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 366 + "'", int44 == 366);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ja" + "'", str46, "ja");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japanese" + "'", str53, "Japanese");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "53" + "'", str54, "53");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        java.lang.String str14 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str14, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2872220");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en-CA");
        double double2 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str14 = dateTimeZone12.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology21 = zonedChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology15.year();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology15.secondOfMinute();
        org.joda.time.DurationField durationField25 = zonedChronology15.years();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        java.lang.String str31 = dateTimeZone28.getID();
        long long34 = dateTimeZone28.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        int int37 = dateTimeZone28.getStandardOffset(1L);
        java.lang.String str38 = dateTimeZone28.toString();
        org.joda.time.Chronology chronology39 = zonedChronology15.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        int int44 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime41.toDateTime(readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        int int50 = property49.getMinimumValue();
        boolean boolean51 = dateTime46.equals((java.lang.Object) int50);
        org.joda.time.Chronology chronology52 = dateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) -1);
        boolean boolean55 = dateTime46.equals((java.lang.Object) localDateTime54);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime46.getZone();
        org.joda.time.chrono.ZonedChronology zonedChronology57 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology15, dateTimeZone56);
        boolean boolean58 = languageRange1.equals((java.lang.Object) zonedChronology57);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-35999999L) + "'", long34 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(zonedChronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone27 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withPeriodAdded(readablePeriod2, 2922750);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str17 = dateTimeZone15.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone15);
        org.joda.time.DurationField durationField19 = zonedChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology18.year();
        org.joda.time.DurationField durationField21 = zonedChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology18.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        int int29 = localDateTime27.getYear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusSeconds(3);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(locale32);
        java.lang.String str35 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, locale32);
        java.lang.String str36 = property5.getAsShortText(locale32);
        java.lang.Object obj37 = locale32.clone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22" + "'", str35, "22");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "ko");
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("minuteOfHour");
        int int2 = timeZone1.getRawOffset();
        java.util.TimeZone.setDefault(timeZone1);
        int int4 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("756");
        boolean boolean7 = timeZone6.observesDaylightTime();
        boolean boolean8 = timeZone1.hasSameRules(timeZone6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeZone1.getDisplayName(false, 2875137);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 2875137");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.Chronology chronology25 = zonedChronology12.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField27 = zonedChronology12.seconds();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekOfWeekyear();
        long long30 = property29.remainder();
        boolean boolean31 = property29.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 89646473L + "'", long30 == 89646473L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.year();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology12.hours();
        org.joda.time.DurationField durationField28 = zonedChronology12.days();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundFloorCopy();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.LocalDateTime localDateTime7 = property4.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        int int11 = dateTimeField9.getMaximumValue(89203953L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setLanguage("days");
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder13 = builder9.setExtension('a', "981");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguageTag("2022");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        boolean boolean12 = localDateTime1.equals((java.lang.Object) localDateTime8);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType14.getField(chronology21);
        org.joda.time.DurationField durationField23 = durationFieldType13.getField(chronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFieldAdded(durationFieldType13, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        java.util.Locale locale30 = new java.util.Locale("462", "", "");
        java.lang.String str31 = locale30.getVariant();
        java.lang.String str32 = property26.getAsShortText(locale30);
        org.joda.time.LocalDateTime localDateTime33 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.era();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals(locale30.toString(), "462");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "55" + "'", str32, "55");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
    }
}

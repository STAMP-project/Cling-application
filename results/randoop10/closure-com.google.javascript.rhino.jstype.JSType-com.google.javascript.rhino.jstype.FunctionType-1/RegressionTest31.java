import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest31 {

    public static boolean debug = false;

    @Test
    public void test15501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15501");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(40, "NUMBER 1.0 97");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(47, node3, 30, (int) 'a');
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean12 = node11.isNull();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(16, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", 52, 35);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node17, 52, 100);
        boolean boolean21 = node6.hasChild(node17);
        java.lang.String str22 = node17.getSourceFileName();
        boolean boolean23 = node17.isNot();
        boolean boolean24 = node17.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15502");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(4095, node7, node20, node25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet31);
        int int34 = node7.getCharno();
        boolean boolean35 = node7.isParamList();
        boolean boolean36 = node7.isName();
        boolean boolean37 = node7.isGetProp();
        boolean boolean38 = node7.isLabel();
        boolean boolean39 = node1.isEquivalentTo(node7);
        com.google.javascript.rhino.Node node40 = node1.cloneTree();
        double double41 = node1.getDouble();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
    }

    @Test
    public void test15503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15503");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        boolean boolean18 = sideEffectFlags13.areAllFlagsSet();
        int int19 = sideEffectFlags13.valueOf();
        sideEffectFlags13.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test15504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15504");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        boolean boolean32 = node4.isParamList();
        boolean boolean33 = node4.isName();
        boolean boolean34 = node4.isGetProp();
        node4.addSuppression("STRING hi!");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        boolean boolean60 = node54.isBreak();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 1, node41, node45, node54, node64, 1, (-1));
        java.lang.String str68 = node64.getQualifiedName();
        com.google.javascript.rhino.Node node69 = node64.detachFromParent();
        int int70 = node69.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node4.clonePropsFrom(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test15505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15505");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        int int18 = sideEffectFlags2.valueOf();
        sideEffectFlags2.setReturnsTainted();
        sideEffectFlags2.setAllFlags();
        int int21 = sideEffectFlags2.valueOf();
        boolean boolean22 = sideEffectFlags2.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test15506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15506");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        jSDocInfo0.setAssociatedNode(node36);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean39 = jSDocInfo0.isOverride();
        java.lang.String str40 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo0.getBaseType();
        java.util.Collection<java.lang.String> strCollection43 = jSDocInfo0.getAuthors();
        boolean boolean44 = jSDocInfo0.isHidden();
        boolean boolean45 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNull(strCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15507");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 44);
        boolean boolean2 = node1.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15508");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("([PROTECTED])");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo23.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection30 = jSDocInfo23.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo23.getThrownTypes();
        boolean boolean32 = jSDocInfo23.isJavaDispatch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNotNull(nodeCollection30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15509");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags9.setAllFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setMutatesArguments();
        sideEffectFlags9.setThrows();
        sideEffectFlags9.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test15510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15510");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo6.getImplementedInterfaces();
        java.lang.String str8 = jSDocInfo6.getFileOverview();
        boolean boolean9 = jSDocInfo6.hasBaseType();
        boolean boolean10 = jSDocInfo6.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo6.getParameterType("true");
        boolean boolean13 = jSDocInfo6.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isNoTypeCheck();
        boolean boolean16 = jSDocInfo14.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = jSDocInfo14.getVisibility();
        java.lang.String str18 = jSDocInfo14.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo14.setVisibility(visibility19);
        jSDocInfo6.setVisibility(visibility19);
        jSDocInfo0.setVisibility(visibility19);
        java.lang.String str23 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str24 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(visibility17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test15511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15511");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean6 = node5.isGetterDef();
        boolean boolean7 = node5.isThis();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.String str18 = node12.toString();
        node12.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', node12, node24, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.children();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean80 = node79.isGetterDef();
        com.google.javascript.rhino.Node node81 = node66.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node82 = node62.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 100, node5, node30, node34, node62, (int) '4', (int) (byte) 100);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder86 = serializableBuilder0.add((java.io.Serializable) node30);
        boolean boolean87 = node30.isDefaultCase();
        boolean boolean88 = node30.isQuotedString();
        node30.addSuppression("");
        java.lang.String str91 = node30.getQualifiedName();
        org.junit.Assert.assertNotNull(serializableBuilder0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(serializableBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test15512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15512");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition0.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int11 = typePosition0.getPositionOnEndLine();
        boolean boolean12 = typePosition0.hasBrackets();
        int int13 = typePosition0.getStartLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(16484, 42, 97, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 16484?end-line: 97");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test15513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15513");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        node7.setSourceEncodedPositionForTree(31);
        boolean boolean11 = node7.isTypeOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node7.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15514");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        boolean boolean7 = jSDocInfo0.hasParameterType("SHNE");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15515");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str33 = node29.toString(false, false, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node29.getJsDocBuilderForNode();
        int int35 = node29.getSourceOffset();
        boolean boolean36 = node29.isNew();
        com.google.javascript.rhino.Node node37 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        node23.setStaticSourceFile(staticSourceFile38);
        node23.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GETELEM Not declared as a constructor" + "'", str33, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test15516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15516");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("JSDocInfo");
        int int2 = node1.getLineno();
        boolean boolean3 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15517");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0 [directives: [, hi!]]");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.isOverride();
        boolean boolean10 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15518");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.isExterns();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.hasParameterType("NUMBER 1.0\n    OR 100\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15519");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node3.isCase();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(52, "(Unknown class name)");
        node3.addChildrenToBack(node10);
        boolean boolean12 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15520");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getPositionOnStartLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getEndLine();
        stringPosition0.setItem("BITXOR STRING hi! 97\n");
        int int13 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test15521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15521");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.containsDeclaration();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo23.getTemplateTypeNames();
        boolean boolean34 = jSDocInfo23.isExport();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection35 = jSDocInfo23.getMarkers();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo23.getAuthors();
        int int37 = jSDocInfo23.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(markerCollection35);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test15522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15522");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean4 = node3.isNull();
        node3.setString("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n");
        node3.putBooleanProp(51, true);
        boolean boolean10 = node3.isDec();
        boolean boolean11 = node3.isName();
        boolean boolean12 = node3.isString();
        boolean boolean13 = node3.isInc();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = node3.getSourceOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15523");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.hasParameter("[PROTECTED]");
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("");
        int int16 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test15524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15524");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        boolean boolean46 = jSDocInfo0.isExport();
        java.lang.String str47 = jSDocInfo0.getMeaning();
        boolean boolean48 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo0.getEnumParameterType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test15525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15525");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue5.and(ternaryValue6);
        java.lang.String str8 = ternaryValue5.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue5.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue11.xor(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue3.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue16.and(ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue20.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.and(ternaryValue25);
        java.lang.String str27 = ternaryValue24.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue29.and(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue24.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue30.xor(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue22.xor(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue18.or(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue38.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue42.and(ternaryValue43);
        java.lang.String str45 = ternaryValue42.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue47.and(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue42.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue48.xor(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue40.xor(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue55.and(ternaryValue56);
        java.lang.String str58 = ternaryValue55.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue60.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue55.or(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue61.xor(ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue67.and(ternaryValue68);
        java.lang.String str70 = ternaryValue67.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue72.and(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue67.or(ternaryValue73);
        boolean boolean77 = ternaryValue75.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue61.or(ternaryValue75);
        boolean boolean80 = ternaryValue61.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue40.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = ternaryValue36.and(ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = ternaryValue82.not();
        java.lang.String str84 = ternaryValue83.toString();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "true" + "'", str27, "true");
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "true" + "'", str45, "true");
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "true" + "'", str58, "true");
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "true" + "'", str70, "true");
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "false" + "'", str84, "false");
    }

    @Test
    public void test15526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15526");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker5.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker5.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker5.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition11 = marker5.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker13.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker13.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker20.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = marker20.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker24 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker24.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = marker24.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker24.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker28 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition29 = marker28.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition30 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition33 = marker32.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = marker32.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition35 = marker32.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker36 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition37 = marker36.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition38 = marker36.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = marker36.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = marker36.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList41 = com.google.common.collect.ImmutableList.of(marker20, marker24, marker28, marker32, marker36);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker43 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker44 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition45 = marker44.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition46 = marker44.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = marker44.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = marker44.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = marker44.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList50 = com.google.common.collect.ImmutableList.of(marker0, marker5, marker13, marker28, marker43, marker44);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition51 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition52 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(stringPosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(typePosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(nodeSourcePosition29);
        org.junit.Assert.assertNull(stringPosition30);
        org.junit.Assert.assertNull(stringPosition31);
        org.junit.Assert.assertNull(nodeSourcePosition33);
        org.junit.Assert.assertNull(stringPosition34);
        org.junit.Assert.assertNull(stringPosition35);
        org.junit.Assert.assertNull(nodeSourcePosition37);
        org.junit.Assert.assertNull(stringPosition38);
        org.junit.Assert.assertNull(stringPosition39);
        org.junit.Assert.assertNull(typePosition40);
        org.junit.Assert.assertNotNull(markerList41);
        org.junit.Assert.assertNull(stringPosition42);
        org.junit.Assert.assertNull(nodeSourcePosition45);
        org.junit.Assert.assertNull(stringPosition46);
        org.junit.Assert.assertNull(typePosition47);
        org.junit.Assert.assertNull(stringPosition48);
        org.junit.Assert.assertNull(stringPosition49);
        org.junit.Assert.assertNotNull(markerList50);
        org.junit.Assert.assertNull(stringPosition51);
        org.junit.Assert.assertNull(nodeSourcePosition52);
    }

    @Test
    public void test15527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15527");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(100.0d);
        node1.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        boolean boolean6 = node5.isFromExterns();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(16, "([PROTECTED])", 43, (int) (short) -1);
        boolean boolean13 = node11.getBooleanProp(48);
        boolean boolean14 = node11.isLabel();
        com.google.javascript.rhino.Node node15 = node5.copyInformationFromForTree(node11);
        com.google.javascript.rhino.Node node16 = node11.getLastChild();
        node1.addChildrenToFront(node11);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test15528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15528");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15529");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = node7.getLastChild();
        boolean boolean15 = node7.isDelProp();
        com.google.javascript.rhino.Node node16 = node7.cloneNode();
        boolean boolean17 = node16.isContinue();
        int int18 = node16.getLength();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        java.lang.String str42 = node36.toString();
        node36.removeProp((int) (short) 0);
        boolean boolean45 = node36.isObjectLit();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean50 = node49.isGetterDef();
        com.google.javascript.rhino.Node node51 = node36.useSourceInfoFromForTree(node49);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node49.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node49.useSourceInfoFrom(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        java.lang.String str68 = node62.toString();
        node62.removeProp((int) (short) 0);
        boolean boolean71 = node62.isObjectLit();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean76 = node75.isGetterDef();
        com.google.javascript.rhino.Node node77 = node62.useSourceInfoFromForTree(node75);
        boolean boolean78 = node77.isObjectLit();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(54, node28, node32, node56, node77);
        com.google.javascript.rhino.Node node80 = node16.useSourceInfoIfMissingFrom(node77);
        com.google.javascript.rhino.Node node81 = node77.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER 1.0" + "'", str42, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER 1.0" + "'", str68, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
    }

    @Test
    public void test15530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15530");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isDeprecated();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0\n\n\nTree2:\nSTRING STRING hi! 97 0\n\n\nSubtree1: NUMBER 0.0\n\n\nSubtree2: STRING STRING hi! 97 0\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15531");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test15532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15532");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.isExterns();
        int int7 = jSDocInfo0.getParameterCount();
        java.lang.String str8 = jSDocInfo0.getVersion();
        boolean boolean9 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test15533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15533");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node4.isSyntheticBlock();
        boolean boolean26 = node4.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        boolean boolean51 = node45.isBreak();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 1, node32, node36, node45, node55, 1, (-1));
        java.lang.String str59 = node55.getQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean64 = node63.isAnd();
        node63.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str67 = node55.checkTreeEquals(node63);
        jSDocInfo27.setAssociatedNode(node55);
        java.util.Collection<java.lang.String> strCollection69 = jSDocInfo27.getAuthors();
        boolean boolean71 = jSDocInfo27.hasParameterType("Not declared as a constructor");
        java.util.Collection<java.lang.String> strCollection72 = jSDocInfo27.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo27.getBaseType();
        com.google.javascript.rhino.Node node74 = jSDocInfo27.getAssociatedNode();
        java.lang.String str75 = node4.checkTreeEquals(node74);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean80 = node79.isAnd();
        node79.setSourceFileForTesting("[PROTECTED]");
        node79.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node90 = node79.useSourceInfoFromForTree(node89);
        java.lang.Object obj92 = node79.getProp((int) (byte) 100);
        com.google.javascript.rhino.Node node93 = node4.srcrefTree(node79);
        boolean boolean94 = node4.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(strCollection69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(strCollection72);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test15534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15534");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "(hi!)");
        boolean boolean3 = node2.isGetElem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        boolean boolean13 = node11.isFalse();
        int int14 = node11.getSideEffectFlags();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node11.getAncestors();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node19.children();
        java.util.Set<java.lang.String> strSet21 = node19.getDirectives();
        int int22 = node19.getLength();
        boolean boolean23 = node19.isThrow();
        node19.setType(11);
        com.google.javascript.rhino.Node node26 = node11.clonePropsFrom(node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getParameterType("hi!");
        jSDocInfo27.addSuppression("hi!");
        java.lang.String str32 = jSDocInfo27.toString();
        boolean boolean33 = jSDocInfo27.isOverride();
        boolean boolean34 = jSDocInfo27.isJavaDispatch();
        com.google.javascript.rhino.Node node35 = jSDocInfo27.getAssociatedNode();
        boolean boolean36 = jSDocInfo27.isNoCompile();
        boolean boolean37 = jSDocInfo27.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo27.getParameterType("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = jSDocInfo27.getVisibility();
        boolean boolean42 = jSDocInfo27.hasParameter("false");
        node11.setJSDocInfo(jSDocInfo27);
        node2.addChildrenToBack(node11);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNull(visibility40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test15535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15535");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        boolean boolean23 = node16.isFalse();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d);
        boolean boolean26 = node25.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node25.getJsDocBuilderForNode();
        boolean boolean28 = node16.hasChild(node25);
        com.google.javascript.rhino.Node node29 = node16.detachFromParent();
        com.google.javascript.rhino.Node node30 = node29.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node30.cloneTree();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test15536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15536");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        boolean boolean10 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test15537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15537");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test15538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15538");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        boolean boolean26 = node15.isNull();
        java.lang.String str27 = node15.getQualifiedName();
        boolean boolean28 = node15.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15539");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean8 = jSDocInfo0.isNoShadow();
        boolean boolean9 = jSDocInfo0.isInterface();
        boolean boolean10 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15540");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        boolean boolean18 = node9.isObjectLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean23 = node22.isGetterDef();
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 1, node24);
        com.google.javascript.rhino.Node node26 = node4.useSourceInfoFromForTree(node25);
        boolean boolean27 = node25.isInc();
        int int28 = node25.getSourcePosition();
        boolean boolean29 = node25.isQuotedString();
        boolean boolean30 = node25.isAssignAdd();
        boolean boolean31 = node25.isContinue();
        boolean boolean32 = node25.isDec();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean38 = node37.isVar();
        boolean boolean39 = node37.isIf();
        node37.putIntProp(42, 45);
        boolean boolean43 = node37.isOr();
        boolean boolean44 = node37.isDec();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(409652, node25, node37, 42, (int) (byte) 100);
        boolean boolean48 = node37.isTrue();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(31, "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", 52, 100);
        boolean boolean54 = node53.isDec();
        node37.addChildrenToFront(node53);
        boolean boolean56 = node53.isWith();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15541");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 47, 15);
        com.google.javascript.rhino.Node node4 = node3.getNext();
        java.lang.String str5 = node3.getQualifiedName();
        boolean boolean6 = node3.isSyntheticBlock();
        node3.setType(44);
        boolean boolean9 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15542");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("((NUMBER 1.0 0))");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test15543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15543");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(NUMBER 1.0 [source_file: OR])", 49, (int) (short) 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.Node node8 = node7.cloneNode();
        boolean boolean9 = node8.isLocalResultCall();
        boolean boolean10 = node8.isFunction();
        java.lang.String str11 = node8.toStringTree();
        com.google.javascript.rhino.Node node12 = node3.srcrefTree(node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node17 = node16.getParent();
        boolean boolean18 = node16.hasChildren();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean23 = node22.isThis();
        boolean boolean24 = node22.isVoid();
        boolean boolean25 = node22.isDebugger();
        int int26 = node22.getLineno();
        boolean boolean27 = node22.isString();
        boolean boolean28 = node22.isDec();
        com.google.javascript.rhino.Node node29 = node16.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean30 = node16.isInc();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node48.isBreak();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, node35, node39, node48, node58, 1, (-1));
        boolean boolean62 = node35.isCall();
        boolean boolean63 = node35.isAnd();
        com.google.javascript.rhino.Node node64 = node35.getLastSibling();
        boolean boolean66 = node64.getBooleanProp(100);
        com.google.javascript.rhino.Node node67 = node16.srcrefTree(node64);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        node72.setQuotedString();
        int int74 = node72.getChildCount();
        boolean boolean75 = node72.isCase();
        node72.setWasEmptyNode(true);
        node72.setType((int) ' ');
        boolean boolean80 = node72.isName();
        com.google.javascript.rhino.Node node81 = node72.getFirstChild();
        com.google.javascript.rhino.Node node82 = node72.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildBefore(node16, node72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "BITXOR 45\n" + "'", str11, "BITXOR 45\n");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test15544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15544");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        node1.setType(52);
    }

    @Test
    public void test15545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15545");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "(BITXOR 5\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15546");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        boolean boolean8 = node3.isExprResult();
        java.lang.String str9 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node10 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = node10.isTypeOf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test15547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15547");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(35);
        com.google.javascript.rhino.Node node2 = node1.getNext();
        com.google.javascript.rhino.Node node4 = node1.getChildAtIndex((int) (short) 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test15548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15548");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isThrow();
        int int5 = node3.getSourcePosition();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        node3.setLineno((-1));
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        java.lang.String str22 = node18.toString(false, false, true);
        boolean boolean23 = node18.isEmpty();
        boolean boolean24 = node18.isFromExterns();
        com.google.javascript.rhino.Node node25 = node3.srcref(node18);
        boolean boolean26 = node25.isFor();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getImplementedInterfaces();
        boolean boolean30 = jSDocInfo28.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo28.getParameterType("Not declared as a constructor");
        boolean boolean33 = jSDocInfo28.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo28.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo28.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo36.getEnumParameterType();
        java.lang.String str40 = jSDocInfo36.getDescription();
        boolean boolean41 = jSDocInfo36.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo36.getBaseType();
        boolean boolean43 = strSet35.contains((java.lang.Object) jSTypeExpression42);
        node25.setDirectives(strSet35);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 1.0" + "'", str22, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test15549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15549");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        int int27 = jSDocInfo23.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getThisType();
        boolean boolean29 = jSDocInfo23.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo23.getType();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node48.isBreak();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, node35, node39, node48, node58, 1, (-1));
        boolean boolean62 = node39.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList64 = jSDocInfo63.getImplementedInterfaces();
        java.lang.String str65 = jSDocInfo63.getFileOverview();
        boolean boolean66 = jSDocInfo63.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = jSDocInfo63.getVisibility();
        node39.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo63.getThisType();
        java.lang.String str70 = jSDocInfo63.getOriginalCommentString();
        int int71 = jSDocInfo63.getParameterCount();
        boolean boolean72 = jSDocInfo63.isNoCompile();
        boolean boolean73 = jSDocInfo63.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo63.getParameterType("hi!");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList77 = jSDocInfo76.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo76.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList80 = jSDocInfo76.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo76.getBaseType();
        boolean boolean82 = jSDocInfo76.isConstant();
        java.lang.String str83 = jSDocInfo76.getReturnDescription();
        boolean boolean84 = jSDocInfo76.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo85.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo85.getEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getDescription();
        boolean boolean90 = jSDocInfo85.isNoAlias();
        boolean boolean91 = jSDocInfo85.isDefine();
        boolean boolean92 = jSDocInfo85.hasThisType();
        java.util.Collection<java.lang.String> strCollection93 = jSDocInfo85.getAuthors();
        boolean boolean94 = jSDocInfo85.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = jSDocInfo85.getTypedefType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList96 = com.google.common.collect.ImmutableList.of(jSDocInfo23, jSDocInfo63, jSDocInfo76, jSDocInfo85);
        java.lang.String str97 = jSDocInfo76.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList98 = jSDocInfo76.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(visibility67);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNotNull(jSTypeExpressionList77);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(jSTypeExpressionList80);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(strCollection93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(jSTypeExpression95);
        org.junit.Assert.assertNotNull(jSDocInfoList96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(jSTypeExpressionList98);
    }

    @Test
    public void test15550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15550");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet0.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet7.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet11.intersection(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = booleanLiteralSet15.intersection(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList20 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet7, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet13, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet17, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet18, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet7.union(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet5.intersection(booleanLiteralSet7);
        boolean boolean25 = booleanLiteralSet23.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList20);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15551");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        jSDocInfo23.addSuppression("(JSDocInfo)");
        java.util.Set<java.lang.String> strSet29 = jSDocInfo23.getSuppressions();
        boolean boolean30 = jSDocInfo23.isInterface();
        boolean boolean31 = jSDocInfo23.containsDeclaration();
        boolean boolean32 = jSDocInfo23.hasFileOverview();
        boolean boolean33 = jSDocInfo23.isNoShadow();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo23.getModifies();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test15552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15552");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        boolean boolean61 = node37.isExprResult();
        com.google.javascript.rhino.InputId inputId62 = null;
        node37.setInputId(inputId62);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test15553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15553");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        int int12 = node8.getSourceOffset();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        boolean boolean36 = node30.isBreak();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 1, node17, node21, node30, node40, 1, (-1));
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean49 = node48.isFalse();
        java.lang.String str50 = node48.getSourceFileName();
        boolean boolean51 = node48.isLabel();
        node17.putProp(1, (java.lang.Object) node48);
        node17.detachChildren();
        node17.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node64.isDo();
        java.util.Set<java.lang.String> strSet66 = node64.getDirectives();
        boolean boolean67 = node64.isString();
        node64.setWasEmptyNode(false);
        boolean boolean70 = node64.isGetterDef();
        com.google.javascript.rhino.Node node71 = node17.useSourceInfoFrom(node64);
        boolean boolean72 = node64.isStringKey();
        node8.addChildToFront(node64);
        java.lang.String str74 = node8.toStringTree();
        boolean boolean75 = node8.isEmpty();
        boolean boolean76 = node8.isCatch();
        int int77 = node8.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 1.0\n    NUMBER 1.0\n" + "'", str74, "NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test15554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15554");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isExport();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        boolean boolean12 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15555");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node13.getJSDocInfo();
        boolean boolean15 = node13.isQualifiedName();
        com.google.javascript.rhino.Node node16 = node4.useSourceInfoFromForTree(node13);
        boolean boolean17 = node4.isVarArgs();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean41 = node40.isBreak();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(4095, node22, node35, node40);
        boolean boolean43 = node35.isFunction();
        boolean boolean44 = node35.isInstanceOf();
        boolean boolean45 = node35.isHook();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        java.lang.String str57 = node51.toString();
        int int58 = node47.getIndexOfChild(node51);
        boolean boolean59 = node47.wasEmptyNode();
        node35.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node61 = node4.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean62 = node47.isDefaultCase();
        boolean boolean63 = node47.isAssign();
        boolean boolean64 = node47.isIf();
        boolean boolean65 = node47.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 1.0" + "'", str57, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15556");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        typePosition0.setPositionInformation(12, (int) (short) 10, 30, 1);
        typePosition0.setPositionInformation(40, 39, (int) (byte) 100, 54);
        int int39 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node40 = typePosition0.getItem();
        int int41 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 54 + "'", int41 == 54);
    }

    @Test
    public void test15557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15557");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 43, 29, 41);
        boolean boolean4 = node3.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15558");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        boolean boolean9 = jSDocInfo0.isExterns();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test15559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15559");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node8 = node7.removeFirstChild();
        boolean boolean9 = node7.isIf();
        com.google.javascript.rhino.jstype.JSType jSType10 = node7.getJSType();
        java.lang.String str11 = node7.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
    }

    @Test
    public void test15560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15560");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(65589, 36, 221184);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId6 = null;
        node5.setInputId(inputId6);
        boolean boolean8 = node5.isCatch();
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFrom(node5);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test15561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15561");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        int int8 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 29 + "'", int8 == 29);
    }

    @Test
    public void test15562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15562");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(0);
        boolean boolean23 = node22.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node22.getStaticSourceFile();
        boolean boolean25 = node22.isWhile();
        int int26 = node19.getIndexOfChild(node22);
        int int27 = node22.getType();
        com.google.javascript.rhino.Node node28 = node22.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test15563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15563");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(40, "NUMBER 1.0 97");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(47, node3, 30, (int) 'a');
        com.google.javascript.rhino.Node node7 = node3.cloneNode();
        boolean boolean8 = node7.isDec();
        int int9 = node7.getChildCount();
        node7.setSourceEncodedPosition((int) (short) 1);
        node7.setType(65589);
        java.lang.String str14 = node7.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 65589");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test15564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15564");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean4 = node3.isGetterDef();
        boolean boolean5 = node3.isThis();
        java.lang.String str6 = node3.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isNull();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node27.isBreak();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, node14, node18, node27, node37, 1, (-1));
        java.lang.String str41 = node37.getQualifiedName();
        com.google.javascript.rhino.Node node42 = node37.detachFromParent();
        com.google.javascript.rhino.Node node43 = node3.srcref(node37);
        boolean boolean44 = node37.isStringKey();
        node37.removeProp(48);
        node37.setLineno(12);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags50 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags51 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags51.setThrows();
        sideEffectFlags51.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags55 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags56 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean57 = sideEffectFlags56.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags58 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags58.clearSideEffectFlags();
        sideEffectFlags58.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags62 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags62.clearAllFlags();
        sideEffectFlags62.setAllFlags();
        int int65 = sideEffectFlags62.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList66 = com.google.common.collect.ImmutableList.of(sideEffectFlags50, sideEffectFlags51, sideEffectFlags55, sideEffectFlags56, sideEffectFlags58, sideEffectFlags62);
        sideEffectFlags55.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node37.setSideEffectFlags(sideEffectFlags55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList66);
    }

    @Test
    public void test15565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15565");
        java.lang.String[] strArray11 = new java.lang.String[] { "STRING hi! 97\n", "Named type with empty name component", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n", "true", "NUMBER 1.0\n", "([PROTECTED])", "OR 100", "OR 100\n", "NUMBER 1.0 97", "([PROTECTED])", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.Object[] objArray14 = strSet12.toArray();
        java.util.Iterator<java.lang.String> strItor15 = strSet12.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo16.getParameterType("hi!");
        boolean boolean19 = jSDocInfo16.hasModifies();
        boolean boolean21 = jSDocInfo16.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo16.getThrownTypes();
        java.lang.String str23 = jSDocInfo16.getDescription();
        boolean boolean24 = jSDocInfo16.isNoShadow();
        java.lang.String str25 = jSDocInfo16.getFileOverview();
        boolean boolean26 = jSDocInfo16.hasEnumParameterType();
        boolean boolean27 = jSDocInfo16.isExterns();
        boolean boolean28 = strSet12.contains((java.lang.Object) jSDocInfo16);
        java.util.Set<java.lang.String> strSet29 = jSDocInfo16.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo16.getThrownTypes();
        boolean boolean31 = jSDocInfo16.isConstructor();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[STRING hi! 97\n, Named type with empty name component, INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n, true, NUMBER 1.0\n, ([PROTECTED]), OR 100, OR 100\n, NUMBER 1.0 97]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[STRING hi! 97\n, Named type with empty name component, INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n, true, NUMBER 1.0\n, ([PROTECTED]), OR 100, OR 100\n, NUMBER 1.0 97]");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15566");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isComma();
        boolean boolean39 = node33.isThis();
        boolean boolean40 = node33.isGetterDef();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean44 = node43.isReturn();
        boolean boolean45 = node43.hasOneChild();
        node33.addChildToFront(node43);
        boolean boolean47 = node43.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test15567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15567");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        boolean boolean45 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean46 = jSDocInfo0.isConstructor();
        boolean boolean47 = jSDocInfo0.isDefine();
        java.lang.String str48 = jSDocInfo0.getMeaning();
        boolean boolean49 = jSDocInfo0.isNoCompile();
        java.lang.String str50 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test15568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15568");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(54, nodeArray4, 31, (int) 'a');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(44, nodeArray4, (int) (short) -1, (int) (byte) 0);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '#', nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(97, nodeArray4, (int) '4', (int) (byte) -1);
        boolean boolean15 = node14.isBreak();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15569");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("true");
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.isDefine();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test15570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15570");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        boolean boolean18 = node9.isObjectLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean23 = node22.isGetterDef();
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 1, node24);
        com.google.javascript.rhino.Node node26 = node4.useSourceInfoFromForTree(node25);
        boolean boolean27 = node25.isInc();
        node25.setLineno(1);
        boolean boolean30 = node25.hasOneChild();
        boolean boolean31 = node25.isNot();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node40.isDo();
        java.util.Set<java.lang.String> strSet42 = node40.getDirectives();
        boolean boolean43 = node40.isDebugger();
        boolean boolean44 = node40.isHook();
        boolean boolean45 = node40.isNew();
        boolean boolean46 = node40.isOptionalArg();
        boolean boolean47 = node40.wasEmptyNode();
        int int48 = node25.getIndexOfChild(node40);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, 97, 54);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test15571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15571");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("([PROTECTED])");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo23.getImplementedInterfaces();
        boolean boolean31 = jSDocInfo23.hasParameterType("");
        boolean boolean32 = jSDocInfo23.isConstant();
        boolean boolean33 = jSDocInfo23.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test15572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15572");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility7);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("STRING hi! 97\n");
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n)");
        java.lang.String str15 = jSDocInfo0.getDescriptionForParameter("(STRING hi! 97)");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test15573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15573");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        boolean boolean13 = jSDocInfo0.isExpose();
        boolean boolean14 = jSDocInfo0.isExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean16 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = jSDocInfo0.getVisibility();
        boolean boolean18 = jSDocInfo0.isDefine();
        boolean boolean19 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15574");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING NUMBER 1.0 [directives: [, hi!]]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING NUMBER 1.0 [directives: [, hi!]]\n)", 54, 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15575");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean11 = node10.isGetterDef();
        boolean boolean12 = node10.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', node17, node29, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.children();
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isBreak();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node47, node60, node65);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        node71.removeProp((int) (short) 0);
        boolean boolean80 = node71.isObjectLit();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean85 = node84.isGetterDef();
        com.google.javascript.rhino.Node node86 = node71.useSourceInfoFromForTree(node84);
        com.google.javascript.rhino.Node node87 = node67.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 100, node10, node35, node39, node67, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node91 = node35.detachFromParent();
        node91.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node94 = node4.useSourceInfoIfMissingFrom(node91);
        boolean boolean95 = node91.isCall();
        java.lang.Object obj97 = node91.getProp(1);
        boolean boolean98 = node91.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test15576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15576");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable6 = node4.getAncestors();
        com.google.javascript.rhino.Node node7 = node4.removeFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        boolean boolean12 = node9.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.getJsDocBuilderForNode();
        int int15 = node9.getIntProp(37);
        boolean boolean16 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node9.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node18 = node4.useSourceInfoFromForTree(node9);
        boolean boolean19 = node4.isGetElem();
        boolean boolean20 = node4.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15577");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node3.isBreak();
        boolean boolean10 = node3.isHook();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray15, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) 'a', nodeArray15);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, nodeArray15, 53, 1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(29, nodeArray15, 0, 37);
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.jstype.JSType jSType27 = node25.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(jSType27);
    }

    @Test
    public void test15578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15578");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 10, node8);
        com.google.javascript.rhino.Node node13 = node12.getFirstChild();
        boolean boolean14 = node13.isFalse();
        boolean boolean15 = node13.isArrayLit();
        boolean boolean16 = node13.isDo();
        boolean boolean17 = node13.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test15580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15580");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = new java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList2, visibilityArray1);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor4 = visibilityList2.iterator();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        boolean boolean15 = node13.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node13.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 10, node13);
        boolean boolean18 = node17.isLabelName();
        boolean boolean19 = visibilityList2.equals((java.lang.Object) node17);
        boolean boolean20 = node17.isExprResult();
        com.google.javascript.rhino.Node node21 = node17.removeFirstChild();
        boolean boolean22 = node21.isNumber();
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(visibilityItor4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test15581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15581");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        int int27 = jSDocInfo23.getImplementedInterfaceCount();
        boolean boolean28 = jSDocInfo23.hasModifies();
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo23.getReferences();
        boolean boolean30 = jSDocInfo23.isIdGenerator();
        java.lang.String str31 = jSDocInfo23.getVersion();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test15582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15582");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.NamePosition>();
    }

    @Test
    public void test15583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15583");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags2.clearAllFlags();
        sideEffectFlags2.setReturnsTainted();
        sideEffectFlags2.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test15584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15584");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("hi!");
        stringPosition0.setPositionInformation(4, 37, 45, 100);
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(65589, 397316, (-1), 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 65589?end-line: -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15585");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition2.getPositionOnStartLine();
        stringPosition2.setItem("(hi!)");
        int int59 = stringPosition2.getEndLine();
        int int60 = stringPosition2.getStartLine();
        int int61 = stringPosition2.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 48 + "'", int56 == 48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
    }

    @Test
    public void test15586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test15587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15587");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isQuotedString();
        int int12 = node3.getChildCount();
        boolean boolean13 = node3.isAnd();
        boolean boolean14 = node3.isCall();
        boolean boolean15 = node3.isTry();
        node3.putIntProp((int) '4', 30);
        com.google.javascript.rhino.Node node19 = node3.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test15588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15588");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean4 = node3.isReturn();
        boolean boolean5 = node3.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = node3.getJSDocInfo();
        boolean boolean7 = node3.isVoid();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(7, node3, 409652, (-1));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSDocInfo6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15589");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesArguments();
    }

    @Test
    public void test15590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15590");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        jSDocInfo0.setLicense("NUMBER 1.0 [jsdoc_info: JSDocInfo]\n");
        java.lang.String str9 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test15591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15591");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("false", (int) '4', 0);
        java.lang.String str4 = node3.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "STRING false 52\n" + "'", str4, "STRING false 52\n");
    }

    @Test
    public void test15592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15592");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        int int27 = jSDocInfo23.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getThisType();
        boolean boolean29 = jSDocInfo23.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo23.getType();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node48.isBreak();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, node35, node39, node48, node58, 1, (-1));
        boolean boolean62 = node39.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList64 = jSDocInfo63.getImplementedInterfaces();
        java.lang.String str65 = jSDocInfo63.getFileOverview();
        boolean boolean66 = jSDocInfo63.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = jSDocInfo63.getVisibility();
        node39.setJSDocInfo(jSDocInfo63);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo63.getThisType();
        java.lang.String str70 = jSDocInfo63.getOriginalCommentString();
        int int71 = jSDocInfo63.getParameterCount();
        boolean boolean72 = jSDocInfo63.isNoCompile();
        boolean boolean73 = jSDocInfo63.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo63.getParameterType("hi!");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList77 = jSDocInfo76.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo76.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList80 = jSDocInfo76.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo76.getBaseType();
        boolean boolean82 = jSDocInfo76.isConstant();
        java.lang.String str83 = jSDocInfo76.getReturnDescription();
        boolean boolean84 = jSDocInfo76.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo85.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo85.getEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getDescription();
        boolean boolean90 = jSDocInfo85.isNoAlias();
        boolean boolean91 = jSDocInfo85.isDefine();
        boolean boolean92 = jSDocInfo85.hasThisType();
        java.util.Collection<java.lang.String> strCollection93 = jSDocInfo85.getAuthors();
        boolean boolean94 = jSDocInfo85.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = jSDocInfo85.getTypedefType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList96 = com.google.common.collect.ImmutableList.of(jSDocInfo23, jSDocInfo63, jSDocInfo76, jSDocInfo85);
        java.lang.String str97 = jSDocInfo76.getVersion();
        int int98 = jSDocInfo76.getParameterCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(visibility67);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNotNull(jSTypeExpressionList77);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(jSTypeExpressionList80);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(strCollection93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(jSTypeExpression95);
        org.junit.Assert.assertNotNull(jSDocInfoList96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test15593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15593");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        boolean boolean26 = node17.isInstanceOf();
        boolean boolean27 = node17.isHook();
        node17.setCharno(4095);
        boolean boolean30 = node17.isCase();
        boolean boolean31 = node17.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15594");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue2.and(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        java.lang.String str9 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue6.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue12.xor(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue4.xor(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue19.and(ternaryValue20);
        java.lang.String str22 = ternaryValue19.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue19.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue25.xor(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue31.and(ternaryValue32);
        java.lang.String str34 = ternaryValue31.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue31.or(ternaryValue37);
        boolean boolean41 = ternaryValue39.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue25.or(ternaryValue39);
        boolean boolean44 = ternaryValue25.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue4.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue0.or(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue4.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "true" + "'", str22, "true");
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true" + "'", str34, "true");
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
    }

    @Test
    public void test15595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15595");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        java.lang.String str3 = node2.getSourceFileName();
        boolean boolean4 = node2.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15596");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(2, "Node tree inequality:\nTree1:\nTHIS JSDocInfo 16 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 1.0 97\n\n\nSubtree1: THIS JSDocInfo 16 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 1.0 97\n");
        boolean boolean3 = node2.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15597");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        jSDocInfo0.addSuppression("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        boolean boolean8 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15598");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean11 = jSDocInfo0.hasParameter("OR 100\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.lang.String str13 = jSDocInfo0.getVersion();
        boolean boolean14 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15599");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        boolean boolean6 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        boolean boolean9 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15600");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test15601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15601");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        boolean boolean40 = jSDocInfo32.isDefine();
        boolean boolean41 = jSDocInfo32.isExpose();
        java.lang.String str42 = jSDocInfo32.getDescription();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test15602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15602");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        boolean boolean32 = strSet28.isEmpty();
        boolean boolean34 = strSet28.add("hi!");
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet28.spliterator();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair38 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType36, jSType37);
        com.google.javascript.rhino.jstype.JSType jSType39 = typePair38.typeA;
        boolean boolean40 = strSet28.equals((java.lang.Object) jSType39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean64 = node63.isBreak();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node45, node58, node63);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        java.lang.String str75 = node69.toString();
        node69.removeProp((int) (short) 0);
        boolean boolean78 = node69.isObjectLit();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean83 = node82.isGetterDef();
        com.google.javascript.rhino.Node node84 = node69.useSourceInfoFromForTree(node82);
        com.google.javascript.rhino.Node node85 = node65.copyInformationFromForTree(node69);
        boolean boolean86 = node65.isNull();
        com.google.javascript.rhino.Node node87 = node65.getNext();
        boolean boolean88 = strSet28.remove((java.lang.Object) node65);
        com.google.javascript.rhino.Node node89 = node65.removeChildren();
        com.google.javascript.rhino.InputId inputId90 = null;
        node89.setInputId(inputId90);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER 1.0" + "'", str75, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test15603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15603");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.containsDeclaration();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo23.getTemplateTypeNames();
        boolean boolean34 = jSDocInfo23.isExport();
        boolean boolean35 = jSDocInfo23.isNoTypeCheck();
        int int36 = jSDocInfo23.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo23.getType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(jSTypeExpression37);
    }

    @Test
    public void test15604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15604");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isFromExterns();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node4.children();
        boolean boolean35 = node4.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test15605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15605");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        boolean boolean3 = node1.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.children();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags7.setThrows();
        sideEffectFlags7.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags12 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean13 = sideEffectFlags12.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags14 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags14.clearSideEffectFlags();
        sideEffectFlags14.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags18 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags18.clearAllFlags();
        sideEffectFlags18.setAllFlags();
        int int21 = sideEffectFlags18.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList22 = com.google.common.collect.ImmutableList.of(sideEffectFlags6, sideEffectFlags7, sideEffectFlags11, sideEffectFlags12, sideEffectFlags14, sideEffectFlags18);
        sideEffectFlags11.setMutatesArguments();
        com.google.common.collect.ImmutableList<java.lang.Object> objList24 = com.google.common.collect.ImmutableList.of((java.lang.Object) nodeIterable4, (java.lang.Object) sideEffectFlags11);
        sideEffectFlags11.setMutatesThis();
        boolean boolean26 = sideEffectFlags11.areAllFlagsSet();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList22);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15606");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isContinue();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node21.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node21.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node21, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.Node node29 = node7.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean47 = node46.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) '#', node34, node46, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo53.getImplementedInterfaces();
        java.lang.String str55 = jSDocInfo53.getFileOverview();
        node52.setJSDocInfo(jSDocInfo53);
        boolean boolean58 = jSDocInfo53.hasParameterType("NUMBER 1.0");
        boolean boolean59 = jSDocInfo53.hasModifies();
        jSDocInfo53.addSuppression("([PROTECTED])");
        boolean boolean62 = jSDocInfo53.hasTypedefType();
        boolean boolean63 = jSDocInfo53.hasThisType();
        boolean boolean64 = jSDocInfo53.isExport();
        node28.setJSDocInfo(jSDocInfo53);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection66 = jSDocInfo53.getMarkers();
        boolean boolean67 = jSDocInfo53.isDeprecated();
        java.lang.String str68 = jSDocInfo53.getReturnDescription();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(markerCollection66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test15607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15607");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        node3.setSourceFileForTesting("[PROTECTED]");
        node3.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoFromForTree(node13);
        boolean boolean15 = node14.isSwitch();
        int int16 = node14.getLength();
        boolean boolean17 = node14.isExprResult();
        boolean boolean18 = node14.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15608");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        boolean boolean9 = node3.isAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str14 = node13.toString();
        com.google.javascript.rhino.Node node15 = node13.cloneTree();
        com.google.javascript.rhino.Node node16 = node13.getLastSibling();
        com.google.javascript.rhino.Node node17 = node13.removeFirstChild();
        boolean boolean18 = node13.isDelProp();
        boolean boolean19 = node3.hasChild(node13);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15609");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        java.lang.String str38 = node34.getQualifiedName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean43 = node42.isAnd();
        node42.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str46 = node34.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) ' ', node4, node42);
        node47.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId52 = null;
        node51.setInputId(inputId52);
        boolean boolean54 = node51.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node51.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId56 = null;
        node51.setInputId(inputId56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        boolean boolean67 = node65.isVar();
        double double68 = node65.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo69.getEnumParameterType();
        java.lang.String str73 = jSDocInfo69.getDescription();
        node65.setJSDocInfo(jSDocInfo69);
        node51.addChildrenToBack(node65);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = node51.getStaticSourceFile();
        com.google.javascript.rhino.Node node77 = node47.clonePropsFrom(node51);
        com.google.javascript.rhino.Node node78 = node77.getNext();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(staticSourceFile76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test15610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15610");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        node4.setSourceEncodedPosition((int) (byte) 0);
        java.util.Set<java.lang.String> strSet10 = node4.getDirectives();
        boolean boolean11 = node4.isDo();
        int int12 = node4.getLength();
        boolean boolean13 = node4.isCatch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test15612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15612");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        boolean boolean43 = node24.getBooleanProp(30);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node24.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        boolean boolean69 = node68.isDo();
        java.util.Set<java.lang.String> strSet70 = node68.getDirectives();
        boolean boolean71 = node68.isDebugger();
        boolean boolean72 = node68.isIf();
        com.google.javascript.rhino.Node node73 = node24.srcrefTree(node68);
        node24.setSourceEncodedPositionForTree((int) (short) 100);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test15613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15613");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(4095, node7, node20, node25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet31);
        int int34 = node7.getCharno();
        boolean boolean35 = node7.isParamList();
        boolean boolean36 = node7.isName();
        boolean boolean37 = node7.isGetProp();
        boolean boolean38 = node7.isLabel();
        boolean boolean39 = node1.isEquivalentTo(node7);
        com.google.javascript.rhino.Node node40 = node1.cloneTree();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node1.setStaticSourceFile(staticSourceFile41);
        node1.addSuppression("Node tree inequality:\nTree1:\nCALL\n    NUMBER 1.0\n    GETELEM Not declared as a constructor\n    STRING Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n [source_file: 1]\n\n\nTree2:\nNUMBER 1.0\n\n\nSubtree1: CALL\n    NUMBER 1.0\n    GETELEM Not declared as a constructor\n    STRING Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n [source_file: 1]\n\n\nSubtree2: NUMBER 1.0\n");
        boolean boolean45 = node1.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15614");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        boolean boolean13 = node7.isUnscopedQualifiedName();
        boolean boolean14 = node7.isOr();
        node7.setSourceEncodedPositionForTree(4095);
        boolean boolean17 = node7.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15615");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        boolean boolean45 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean46 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo0.getBaseType();
        java.util.Collection<java.lang.String> strCollection48 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(strCollection48);
    }

    @Test
    public void test15616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15616");
        com.google.common.collect.ImmutableList<java.lang.Class[]> classArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(classArrayList0);
    }

    @Test
    public void test15617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15617");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        typePosition0.setPositionInformation(12, (int) (short) 10, 30, 1);
        typePosition0.setPositionInformation(40, 39, (int) (byte) 100, 54);
        int int39 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node40 = typePosition0.getItem();
        typePosition0.setPositionInformation(0, 11, 65589, 53);
        int int46 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
    }

    @Test
    public void test15618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15618");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isOr();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean25 = node24.isThis();
        boolean boolean26 = node24.isVoid();
        node24.setLength(51);
        boolean boolean29 = node24.isCatch();
        com.google.javascript.rhino.Node node30 = node16.srcrefTree(node24);
        boolean boolean31 = node16.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15619");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean31 = node30.isBreak();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4095, node12, node25, node30);
        boolean boolean33 = node25.isFunction();
        boolean boolean34 = node25.isInstanceOf();
        boolean boolean35 = node25.isHook();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        int int48 = node37.getIndexOfChild(node41);
        boolean boolean49 = node37.wasEmptyNode();
        node25.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node51 = node3.srcref(node37);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        boolean boolean75 = node69.isBreak();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 1, node56, node60, node69, node79, 1, (-1));
        node82.setOptionalArg(true);
        int int85 = node82.getLength();
        boolean boolean86 = node82.isCall();
        boolean boolean87 = node51.isEquivalentToTyped(node82);
        boolean boolean89 = node82.getBooleanProp(39);
        boolean boolean90 = node82.isFor();
        com.google.javascript.rhino.Node node91 = node82.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test15620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15620");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        int int43 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getEnumParameterType();
        boolean boolean45 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(strCollection47);
    }

    @Test
    public void test15621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15621");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test15622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15622");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        boolean boolean4 = node1.isAssignAdd();
        boolean boolean5 = node1.isDo();
        node1.detachChildren();
        boolean boolean7 = node1.isQualifiedName();
        boolean boolean8 = node1.isNE();
        boolean boolean9 = node1.isDefaultCase();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.hasParameter("true");
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet9.spliterator();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        boolean boolean34 = node28.isBreak();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 1, node15, node19, node28, node38, 1, (-1));
        java.lang.String str42 = node38.getQualifiedName();
        com.google.javascript.rhino.Node node43 = node38.detachFromParent();
        boolean boolean44 = node38.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node38.setStaticSourceFile(staticSourceFile45);
        boolean boolean47 = node38.isQuotedString();
        boolean boolean48 = node38.isName();
        boolean boolean49 = strSet9.remove((java.lang.Object) node38);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15624");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        boolean boolean5 = jSDocInfo0.hasThisType();
        jSDocInfo0.addSuppression("false");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15625");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.InputId inputId31 = null;
        node8.setInputId(inputId31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean56 = node55.isBreak();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(4095, node37, node50, node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        java.lang.String str67 = node61.toString();
        node61.removeProp((int) (short) 0);
        boolean boolean70 = node61.isObjectLit();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean75 = node74.isGetterDef();
        com.google.javascript.rhino.Node node76 = node61.useSourceInfoFromForTree(node74);
        com.google.javascript.rhino.Node node77 = node57.copyInformationFromForTree(node61);
        node77.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node80 = node8.srcrefTree(node77);
        com.google.javascript.rhino.Node node81 = node8.getParent();
        java.lang.String str82 = node8.toStringTree();
        com.google.javascript.rhino.Node node83 = node8.removeChildren();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER 1.0" + "'", str67, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "NUMBER 1.0 97\n" + "'", str82, "NUMBER 1.0 97\n");
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test15626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15626");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.util.ListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor3 = visibilityList2.listIterator();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean8 = node7.isFalse();
        com.google.javascript.rhino.Node node9 = node7.cloneTree();
        int int10 = visibilityList2.lastIndexOf((java.lang.Object) node9);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor11 = visibilityList2.iterator();
        java.lang.Object[] objArray12 = visibilityList2.toArray();
        java.util.Spliterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilitySpliterator13 = visibilityList2.spliterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node18 = node17.getParent();
        boolean boolean19 = node17.hasChildren();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean24 = node23.isThis();
        boolean boolean25 = node23.isVoid();
        boolean boolean26 = node23.isDebugger();
        int int27 = node23.getLineno();
        boolean boolean28 = node23.isString();
        boolean boolean29 = node23.isDec();
        com.google.javascript.rhino.Node node30 = node17.useSourceInfoIfMissingFromForTree(node23);
        int int31 = visibilityList2.lastIndexOf((java.lang.Object) node23);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor32 = visibilityList2.iterator();
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(visibilityItor3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(visibilityItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilitySpliterator13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(visibilityItor32);
    }

    @Test
    public void test15627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15627");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        node3.setSourceEncodedPositionForTree(0);
        boolean boolean7 = node3.hasOneChild();
        java.lang.String str8 = node3.getQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        boolean boolean10 = node3.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15628");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node16.getJsDocBuilderForNode();
        fileLevelJsDocBuilder20.append("Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        fileLevelJsDocBuilder20.append("");
        fileLevelJsDocBuilder20.append("STRING Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
    }

    @Test
    public void test15629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15629");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo0.toString();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15630");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean44 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15631");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(42, "");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(23, node3);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15632");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(11, "THIS JSDocInfo 16");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test15633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15633");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean13 = node12.isFalse();
        java.lang.String str14 = node12.getSourceFileName();
        boolean boolean15 = node12.isLabel();
        boolean boolean16 = node12.isSetterDef();
        boolean boolean17 = node12.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node35.isBreak();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 1, node22, node26, node35, node45, 1, (-1));
        boolean boolean49 = node48.isWith();
        boolean boolean50 = node48.isNot();
        boolean boolean51 = node12.isEquivalentToTyped(node48);
        boolean boolean52 = node48.isSyntheticBlock();
        boolean boolean53 = node7.isEquivalentTo(node48);
        boolean boolean54 = node7.isQualifiedName();
        node7.setSourceEncodedPositionForTree(41);
        com.google.javascript.rhino.Node node57 = node7.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test15634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15634");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isFalse();
        java.lang.Object obj11 = node7.getProp((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = node7.getFirstChild();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node7.setJSType(jSType13);
        node7.setSourceFileForTesting("");
        boolean boolean17 = node7.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15635");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        boolean boolean7 = node4.isStringKey();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        node16.removeProp(0);
        com.google.javascript.rhino.Node node41 = node4.copyInformationFromForTree(node16);
        boolean boolean42 = node4.isStringKey();
        boolean boolean43 = node4.isGetterDef();
        boolean boolean44 = node4.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15636");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) ' ');
        boolean boolean2 = node1.isDefaultCase();
        com.google.javascript.rhino.Node node3 = node1.cloneTree();
        java.lang.Appendable appendable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15637");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isAnd();
        boolean boolean18 = node16.isBreak();
        boolean boolean19 = node16.isName();
        boolean boolean20 = node16.isRegExp();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(53, node8, node16, node22, 0, 29);
        node8.setSourceFileForTesting("STRING hi! 97\n");
        boolean boolean28 = node8.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15638");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16484, "(Node tree inequality:\nTree1:\nNEW [PROTECTED]\n\n\nTree2:\nNUMBER 1.0 0\n\n\nSubtree1: NEW [PROTECTED]\n\n\nSubtree2: NUMBER 1.0 0\n)");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test15639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15639");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        java.lang.String str22 = node16.toString();
        node16.removeProp((int) (short) 0);
        boolean boolean25 = node16.isObjectLit();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean30 = node29.isGetterDef();
        com.google.javascript.rhino.Node node31 = node16.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 1, node31);
        com.google.javascript.rhino.Node node33 = node11.useSourceInfoFromForTree(node32);
        jSDocInfo0.setAssociatedNode(node32);
        boolean boolean35 = node32.isHook();
        boolean boolean36 = node32.isDec();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 1.0" + "'", str22, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15640");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(16484, "STRING NUMBER 1.0 [directives: [, hi!]] 51", 45, 97);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15641");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean12 = jSDocInfo0.isDefine();
        boolean boolean13 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15642");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        boolean boolean26 = node24.isThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        // The following exception was thrown during execution in test generation
        try {
            node24.setSideEffectFlags(sideEffectFlags28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15643");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean45 = jSDocInfo0.hasParameterType("Not declared as a type name");
        boolean boolean47 = jSDocInfo0.hasParameterType("false");
        java.lang.String str48 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = jSDocInfo0.getVisibility();
        boolean boolean50 = jSDocInfo0.hasFileOverview();
        int int51 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean52 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(visibility49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15644");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair5 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType3, jSType4);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair8 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType6, jSType7);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair11 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType9, jSType10);
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair11.typeB;
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType13, jSType14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair18 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType16, jSType17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType19, jSType20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair24 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType22, jSType23);
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair24.typeB;
        com.google.javascript.rhino.jstype.JSType jSType26 = typePair24.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList27 = com.google.common.collect.ImmutableList.of(typePair5, typePair8, typePair11, typePair15, typePair18, typePair21, typePair24);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType28, jSType29);
        com.google.javascript.rhino.jstype.JSType jSType31 = typePair30.typeA;
        com.google.javascript.rhino.jstype.JSType jSType32 = typePair30.typeA;
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair35 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType33, jSType34);
        com.google.javascript.rhino.jstype.JSType jSType36 = typePair35.typeA;
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair39 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType37, jSType38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType40, jSType41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair45 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType43, jSType44);
        com.google.javascript.rhino.jstype.JSType jSType46 = typePair45.typeB;
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair49 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType47, jSType48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType50, jSType51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair55 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType53, jSType54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair58 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType56, jSType57);
        com.google.javascript.rhino.jstype.JSType jSType59 = typePair58.typeB;
        com.google.javascript.rhino.jstype.JSType jSType60 = typePair58.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList61 = com.google.common.collect.ImmutableList.of(typePair39, typePair42, typePair45, typePair49, typePair52, typePair55, typePair58);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType62, jSType63);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair67 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType65, jSType66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair70 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType68, jSType69);
        com.google.javascript.rhino.jstype.JSType jSType71 = typePair70.typeB;
        com.google.javascript.rhino.jstype.JSType jSType72 = null;
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair74 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType72, jSType73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair77 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType75, jSType76);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType78, jSType79);
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair83 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType81, jSType82);
        com.google.javascript.rhino.jstype.JSType jSType84 = typePair83.typeB;
        com.google.javascript.rhino.jstype.JSType jSType85 = typePair83.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList86 = com.google.common.collect.ImmutableList.of(typePair64, typePair67, typePair70, typePair74, typePair77, typePair80, typePair83);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList87 = com.google.common.collect.ImmutableList.of(typePair2, typePair18, typePair30, typePair35, typePair45, typePair74);
        com.google.javascript.rhino.jstype.JSType jSType88 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType89 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType90 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType91 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType92 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(typePairList27);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(typePairList61);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertNotNull(typePairList86);
        org.junit.Assert.assertNotNull(typePairList87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertNull(jSType90);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNull(jSType92);
    }

    @Test
    public void test15645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15645");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        node3.putBooleanProp((int) (short) 100, false);
        boolean boolean11 = node3.isCase();
        boolean boolean12 = node3.isAdd();
        boolean boolean13 = node3.isVar();
        java.lang.String str17 = node3.toString(true, false, true);
        boolean boolean18 = node3.isIn();
        com.google.javascript.rhino.Node node19 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = node19.isTry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test15646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15646");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId36 = null;
        node35.setInputId(inputId36);
        boolean boolean38 = node35.isWith();
        boolean boolean39 = node35.isExprResult();
        boolean boolean40 = node4.isEquivalentToTyped(node35);
        node35.setLineno((int) (byte) -1);
        boolean boolean43 = node35.isUnscopedQualifiedName();
        boolean boolean44 = node35.isLocalResultCall();
        com.google.javascript.rhino.Node node45 = node35.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test15647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15647");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isComma();
        node33.removeProp((int) (short) 10);
        boolean boolean41 = node33.isLabelName();
        int int42 = node33.getChildCount();
        boolean boolean43 = node33.isCatch();
        boolean boolean44 = node33.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15648");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        java.lang.String str39 = jSDocInfo32.getOriginalCommentString();
        int int40 = jSDocInfo32.getParameterCount();
        boolean boolean41 = jSDocInfo32.hasThisType();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        java.lang.String str52 = node46.toString();
        node46.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean59 = node58.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) '#', node46, node58, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList66 = jSDocInfo65.getImplementedInterfaces();
        java.lang.String str67 = jSDocInfo65.getFileOverview();
        node64.setJSDocInfo(jSDocInfo65);
        boolean boolean70 = jSDocInfo65.hasParameterType("NUMBER 1.0");
        boolean boolean71 = jSDocInfo65.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo65.getThrownTypes();
        boolean boolean73 = jSDocInfo65.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str75 = jSDocInfo74.getDescription();
        java.lang.String str76 = jSDocInfo74.getDescription();
        java.lang.String str77 = jSDocInfo74.getLendsName();
        java.lang.String str78 = jSDocInfo74.getOriginalCommentString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList79 = com.google.common.collect.ImmutableList.of(jSDocInfo32, jSDocInfo65, jSDocInfo74);
        boolean boolean80 = jSDocInfo65.shouldPreserveTry();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 1.0" + "'", str52, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jSDocInfoList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test15649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15649");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        int int9 = node3.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node3.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator11 = nodeIterable10.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
    }

    @Test
    public void test15650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15650");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        node4.setSourceEncodedPosition((int) (byte) 0);
        java.util.Set<java.lang.String> strSet10 = node4.getDirectives();
        node4.detachChildren();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        boolean boolean16 = node15.isObjectLit();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoIfMissingFrom(node15);
        boolean boolean20 = node4.isNull();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(9);
        node4.addChildToBack(node22);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15651");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean9 = booleanLiteralSet7.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList10 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet3, booleanLiteralSet5, booleanLiteralSet7);
        boolean boolean12 = booleanLiteralSet7.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList20 = com.google.common.collect.ImmutableList.of(booleanLiteralSet14, booleanLiteralSet17, booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet7.union(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet22.intersection(booleanLiteralSet25);
        boolean boolean29 = booleanLiteralSet25.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet21.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet33.intersection(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet31.intersection(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet25.intersection(booleanLiteralSet31);
        boolean boolean39 = booleanLiteralSet25.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList20);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15652");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node4.siblings();
        boolean boolean7 = node4.isWhile();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean31 = node30.isBreak();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4095, node12, node25, node30);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet36);
        int int39 = node12.getCharno();
        java.lang.String str40 = node12.getQualifiedName();
        boolean boolean41 = node12.isBreak();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId44 = null;
        node43.setInputId(inputId44);
        boolean boolean46 = node43.isWith();
        boolean boolean47 = node43.isExprResult();
        boolean boolean48 = node12.isEquivalentToTyped(node43);
        node43.setLineno((int) (byte) -1);
        boolean boolean51 = node43.isUnscopedQualifiedName();
        boolean boolean52 = node43.isLocalResultCall();
        boolean boolean53 = node43.isGetElem();
        com.google.javascript.rhino.Node node54 = node4.copyInformationFromForTree(node43);
        boolean boolean55 = node43.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15653");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node22.isIn();
        int int26 = node22.getSourceOffset();
        boolean boolean27 = node22.isQuotedString();
        boolean boolean28 = node22.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15654");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isQuotedString();
        node4.setOptionalArg(false);
        node4.removeProp(10);
        node4.setSourceFileForTesting("GT (Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n) 221184");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15655");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(35, "", 397316, 51);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15656");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        boolean boolean15 = jSDocInfo0.hasParameter("false");
        boolean boolean16 = jSDocInfo0.isNoCompile();
        boolean boolean17 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str20 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo0.getThisType();
        boolean boolean22 = jSDocInfo0.isNoShadow();
        boolean boolean24 = jSDocInfo0.hasDescriptionForParameter("GT (Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n) 221184");
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15657");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        boolean boolean21 = node20.isOr();
        com.google.javascript.rhino.Node node22 = node20.getParent();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        boolean boolean32 = node30.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node30.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node30.getStaticSourceFile();
        java.lang.String str35 = node30.getSourceFileName();
        com.google.javascript.rhino.InputId inputId36 = node30.getInputId();
        boolean boolean37 = node20.isEquivalentToTyped(node30);
        boolean boolean38 = node20.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node20.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
    }

    @Test
    public void test15658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15658");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean43 = node42.isFalse();
        java.lang.String str44 = node42.getSourceFileName();
        boolean boolean45 = node42.isLabel();
        node11.putProp(1, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoFromForTree(node11);
        boolean boolean48 = node5.isWith();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean53 = node52.isAnd();
        boolean boolean54 = node52.isDebugger();
        boolean boolean55 = node52.isWhile();
        com.google.javascript.rhino.Node node56 = node52.getLastSibling();
        boolean boolean57 = node56.isVoid();
        com.google.javascript.rhino.Node node58 = node5.srcref(node56);
        node56.putIntProp(15, (int) (byte) 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean67 = node66.isAnd();
        boolean boolean69 = node66.getBooleanProp(4);
        boolean boolean70 = node66.isThrow();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str77 = node73.toString(false, false, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder78 = node73.getJsDocBuilderForNode();
        int int79 = node73.getSourceOffset();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean84 = node83.isNull();
        node83.setString("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n");
        node83.putBooleanProp(51, true);
        boolean boolean90 = node83.isDec();
        boolean boolean91 = node83.isIn();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(37, node66, node73, node83);
        // The following exception was thrown during execution in test generation
        try {
            node56.addChildrenToBack(node66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GETELEM Not declared as a constructor" + "'", str77, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15659");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        node3.detachChildren();
        int int10 = node3.getLineno();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        boolean boolean34 = node28.isBreak();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 1, node15, node19, node28, node38, 1, (-1));
        com.google.javascript.rhino.Node node42 = node3.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node44 = node42.getAncestor(184357);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test15660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15660");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test15661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15661");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        boolean boolean7 = node3.isLocalResultCall();
        boolean boolean8 = node3.isNoSideEffectsCall();
        node3.setSourceEncodedPosition(35);
        boolean boolean11 = node3.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15662");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isInc();
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.Node node13 = node3.getLastChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node3.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
    }

    @Test
    public void test15663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15663");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        boolean boolean9 = node3.isLabelName();
        boolean boolean10 = node3.isNumber();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        boolean boolean16 = node15.isDefaultCase();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        boolean boolean27 = node25.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node25.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node25.getStaticSourceFile();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0, node25, (int) (short) 0, (int) (short) 100);
        boolean boolean33 = node25.isContinue();
        com.google.javascript.rhino.Node node34 = node15.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node35 = node3.useSourceInfoFromForTree(node34);
        boolean boolean36 = node3.isComma();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15664");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        boolean boolean12 = jSDocInfo0.hasParameterType("(hi!)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test15665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15665");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.containsDeclaration();
        boolean boolean13 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
    }

    @Test
    public void test15666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15666");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        node3.setIsSyntheticBlock(true);
        node3.setOptionalArg(false);
        int int12 = node3.getType();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(37, (int) (byte) 100, 30);
        node16.setIsSyntheticBlock(true);
        node3.addChildrenToFront(node16);
        boolean boolean20 = node16.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15667");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("false");
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0 [jsdoc_info: JSDocInfo]");
        java.lang.String str14 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test15668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15668");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15669");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test15670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15670");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test15671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15671");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        com.google.javascript.rhino.Node node33 = node4.cloneTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test15672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15672");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.intersection(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList7 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet4, booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet11.intersection(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList15 = com.google.common.collect.ImmutableList.of(booleanLiteralSet9, booleanLiteralSet12, booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet4.intersection(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet19.intersection(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet17.intersection(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean33 = booleanLiteralSet31.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList34 = com.google.common.collect.ImmutableList.of(booleanLiteralSet25, booleanLiteralSet27, booleanLiteralSet29, booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = booleanLiteralSet38.intersection(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet36, booleanLiteralSet39, booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet46.intersection(booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList50 = com.google.common.collect.ImmutableList.of(booleanLiteralSet44, booleanLiteralSet47, booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet39.intersection(booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = booleanLiteralSet51.union(booleanLiteralSet53);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet25.union(booleanLiteralSet54);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet57.intersection(booleanLiteralSet58);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet61.intersection(booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.intersection(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList70 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet57, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet63, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet67, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet68, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet69);
        boolean boolean72 = booleanLiteralSet68.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet54.intersection(booleanLiteralSet68);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = booleanLiteralSet16.intersection(booleanLiteralSet68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList7);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList15);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList34);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList50);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
    }

    @Test
    public void test15673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15673");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        java.lang.String str56 = stringPosition32.getItem();
        java.lang.String str57 = stringPosition32.getItem();
        int int58 = stringPosition32.getEndLine();
        int int59 = stringPosition32.getPositionOnEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition32.setPositionInformation(51, 40, (int) ' ', 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 51?end-line: 32");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
    }

    @Test
    public void test15674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15674");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        int int28 = node1.getSourceOffset();
        java.lang.Object obj30 = node1.getProp(44);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean36 = node35.isBreak();
        node35.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node39 = node35.cloneTree();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 52, 42, (int) (byte) 1);
        boolean boolean44 = node39.isEquivalentToTyped(node43);
        com.google.javascript.rhino.jstype.JSType jSType45 = node39.getJSType();
        boolean boolean46 = node39.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable47 = node39.getAncestors();
        node1.putProp((int) (byte) 0, (java.lang.Object) node39);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node1.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(ancestorIterable47);
    }

    @Test
    public void test15675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15675");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean45 = jSDocInfo0.hasParameterType("Not declared as a type name");
        boolean boolean47 = jSDocInfo0.hasParameterType("false");
        java.lang.String str48 = jSDocInfo0.getOriginalCommentString();
        boolean boolean49 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test15676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15676");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        boolean boolean33 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo34.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getParameterType("Not declared as a constructor");
        boolean boolean39 = jSDocInfo34.isExport();
        node8.setJSDocInfo(jSDocInfo34);
        java.util.Collection<java.lang.String> strCollection41 = jSDocInfo34.getAuthors();
        java.lang.String str42 = jSDocInfo34.getSourceName();
        java.lang.String str43 = jSDocInfo34.getLendsName();
        java.lang.String str44 = jSDocInfo34.getReturnDescription();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo34.getParameterNames();
        int int46 = jSDocInfo34.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo34.getType();
        boolean boolean48 = jSDocInfo34.isNoShadow();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strCollection41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15677");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        int int29 = typePosition0.getEndLine();
        boolean boolean30 = typePosition0.hasBrackets();
        boolean boolean31 = typePosition0.hasBrackets();
        boolean boolean32 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(0, 97, (int) (short) 10, 51);
        int int38 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 42 + "'", int29 == 42);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51 + "'", int38 == 51);
    }

    @Test
    public void test15678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15678");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.util.ListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor3 = visibilityList2.listIterator();
        java.lang.Object[] objArray4 = visibilityList2.toArray();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags6.setMutatesGlobalState();
        sideEffectFlags6.setAllFlags();
        boolean boolean9 = sideEffectFlags6.areAllFlagsSet();
        sideEffectFlags6.setReturnsTainted();
        int int11 = visibilityList2.indexOf((java.lang.Object) sideEffectFlags6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo13.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo13.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo13.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo13.getBaseType();
        boolean boolean19 = jSDocInfo13.isConstant();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getParameterType("hi!");
        jSDocInfo20.addSuppression("hi!");
        java.lang.String str25 = jSDocInfo20.toString();
        boolean boolean26 = jSDocInfo20.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getBaseType();
        java.lang.String str28 = jSDocInfo20.getFileOverview();
        java.lang.String str29 = jSDocInfo20.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo30.getImplementedInterfaces();
        java.lang.String str32 = jSDocInfo30.getFileOverview();
        boolean boolean33 = jSDocInfo30.hasBaseType();
        boolean boolean34 = jSDocInfo30.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo30.getParameterType("true");
        boolean boolean37 = jSDocInfo30.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isNoTypeCheck();
        boolean boolean40 = jSDocInfo38.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = jSDocInfo38.getVisibility();
        java.lang.String str42 = jSDocInfo38.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo38.setVisibility(visibility43);
        jSDocInfo30.setVisibility(visibility43);
        jSDocInfo20.setVisibility(visibility43);
        jSDocInfo13.setVisibility(visibility43);
        // The following exception was thrown during execution in test generation
        try {
            visibilityList2.add(23, visibility43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(visibilityItor3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[PROTECTED]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JSDocInfo" + "'", str25, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(visibility41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test15679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15679");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(4);
        boolean boolean2 = node1.isOnlyModifiesThisCall();
        node1.putBooleanProp(19, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15680");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node3.getJSDocInfo();
        boolean boolean12 = node3.isAssign();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        node16.addSuppression("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        int int33 = node22.getIndexOfChild(node26);
        boolean boolean34 = node22.wasEmptyNode();
        int int35 = node22.getCharno();
        com.google.javascript.rhino.Node node36 = node22.cloneTree();
        boolean boolean37 = node22.isInstanceOf();
        com.google.javascript.rhino.Node node38 = node16.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node39 = node3.copyInformationFromForTree(node16);
        int int40 = node3.getSourcePosition();
        boolean boolean41 = node3.isBreak();
        boolean boolean42 = node3.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test15681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15681");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair5 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType3, jSType4);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair8 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType6, jSType7);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair11 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType9, jSType10);
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair11.typeB;
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType13, jSType14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair18 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType16, jSType17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType19, jSType20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair24 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType22, jSType23);
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair24.typeB;
        com.google.javascript.rhino.jstype.JSType jSType26 = typePair24.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList27 = com.google.common.collect.ImmutableList.of(typePair5, typePair8, typePair11, typePair15, typePair18, typePair21, typePair24);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType28, jSType29);
        com.google.javascript.rhino.jstype.JSType jSType31 = typePair30.typeA;
        com.google.javascript.rhino.jstype.JSType jSType32 = typePair30.typeA;
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair35 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType33, jSType34);
        com.google.javascript.rhino.jstype.JSType jSType36 = typePair35.typeA;
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair39 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType37, jSType38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType40, jSType41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair45 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType43, jSType44);
        com.google.javascript.rhino.jstype.JSType jSType46 = typePair45.typeB;
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair49 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType47, jSType48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType50, jSType51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair55 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType53, jSType54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair58 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType56, jSType57);
        com.google.javascript.rhino.jstype.JSType jSType59 = typePair58.typeB;
        com.google.javascript.rhino.jstype.JSType jSType60 = typePair58.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList61 = com.google.common.collect.ImmutableList.of(typePair39, typePair42, typePair45, typePair49, typePair52, typePair55, typePair58);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType62, jSType63);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair67 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType65, jSType66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair70 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType68, jSType69);
        com.google.javascript.rhino.jstype.JSType jSType71 = typePair70.typeB;
        com.google.javascript.rhino.jstype.JSType jSType72 = null;
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair74 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType72, jSType73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair77 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType75, jSType76);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType78, jSType79);
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair83 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType81, jSType82);
        com.google.javascript.rhino.jstype.JSType jSType84 = typePair83.typeB;
        com.google.javascript.rhino.jstype.JSType jSType85 = typePair83.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList86 = com.google.common.collect.ImmutableList.of(typePair64, typePair67, typePair70, typePair74, typePair77, typePair80, typePair83);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList87 = com.google.common.collect.ImmutableList.of(typePair2, typePair18, typePair30, typePair35, typePair45, typePair74);
        com.google.javascript.rhino.jstype.JSType jSType88 = typePair45.typeA;
        com.google.javascript.rhino.jstype.JSType jSType89 = typePair45.typeA;
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(typePairList27);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(typePairList61);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertNotNull(typePairList86);
        org.junit.Assert.assertNotNull(typePairList87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNull(jSType89);
    }

    @Test
    public void test15682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15682");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        boolean boolean13 = node1.wasEmptyNode();
        boolean boolean14 = node1.hasMoreThanOneChild();
        boolean boolean15 = node1.isFalse();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        boolean boolean25 = node23.isVar();
        double double26 = node23.getDouble();
        int int27 = node23.getLength();
        boolean boolean28 = node23.isArrayLit();
        node23.setDouble((double) '#');
        node23.setSourceEncodedPosition((int) (short) 0);
        node23.putIntProp(13, 24);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        boolean boolean46 = node45.isDo();
        java.util.Set<java.lang.String> strSet47 = node45.getDirectives();
        boolean boolean48 = node45.isString();
        node45.setWasEmptyNode(false);
        boolean boolean51 = node45.isObjectLit();
        boolean boolean52 = node45.hasMoreThanOneChild();
        int int53 = node45.getLineno();
        com.google.javascript.rhino.Node node55 = node45.getAncestor((int) '#');
        boolean boolean56 = node45.isAssign();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(8, node45);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildBefore(node23, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15683");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean43 = node42.isFalse();
        java.lang.String str44 = node42.getSourceFileName();
        boolean boolean45 = node42.isLabel();
        node11.putProp(1, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node56.isDo();
        java.util.Set<java.lang.String> strSet58 = node56.getDirectives();
        boolean boolean59 = node56.isString();
        node56.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node56.getJSDocInfo();
        boolean boolean63 = node56.isNE();
        java.lang.String str64 = node56.getSourceFileName();
        boolean boolean65 = node56.isReturn();
        com.google.javascript.rhino.Node node66 = node11.copyInformationFrom(node56);
        boolean boolean67 = node11.isCall();
        node11.setSourceEncodedPosition(7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15684");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        node1.setLineno((int) (short) 100);
        boolean boolean4 = node1.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getParameterType("hi!");
        boolean boolean8 = jSDocInfo5.hasModifies();
        boolean boolean10 = jSDocInfo5.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo5.getThrownTypes();
        java.lang.String str12 = jSDocInfo5.getDescription();
        boolean boolean13 = jSDocInfo5.isNoShadow();
        java.lang.String str14 = jSDocInfo5.getFileOverview();
        boolean boolean15 = jSDocInfo5.hasEnumParameterType();
        boolean boolean16 = jSDocInfo5.isExterns();
        boolean boolean17 = jSDocInfo5.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo5.getThisType();
        node1.setJSDocInfo(jSDocInfo5);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
    }

    @Test
    public void test15685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15685");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15686");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo0.getParameterType("OR 100");
        java.lang.String str47 = jSDocInfo0.getDescription();
        java.lang.String str48 = jSDocInfo0.toString();
        java.lang.String str49 = jSDocInfo0.getFileOverview();
        java.lang.String str50 = jSDocInfo0.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean52 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15687");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isFalse();
        int int10 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node7.getAncestors();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getPositionOnStartLine();
        com.google.javascript.rhino.Node node14 = typePosition12.getItem();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        java.lang.String str24 = node18.toString();
        node18.removeProp((int) (short) 0);
        boolean boolean27 = node18.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean32 = node31.isGetterDef();
        com.google.javascript.rhino.Node node33 = node18.useSourceInfoFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        boolean boolean43 = node42.isDo();
        java.util.Set<java.lang.String> strSet44 = node42.getDirectives();
        com.google.javascript.rhino.Node node45 = node31.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node46 = node45.getNext();
        typePosition12.setItem(node45);
        com.google.javascript.rhino.Node node48 = typePosition12.getItem();
        boolean boolean49 = node48.hasOneChild();
        com.google.javascript.rhino.Node node50 = node7.srcrefTree(node48);
        java.lang.Object obj52 = node50.getProp(42);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test15688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15688");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("true", 52, (int) (short) 10);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node22.isBreak();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node13, node22, node32, 1, (-1));
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isGetProp();
        boolean boolean49 = node39.isReturn();
        com.google.javascript.rhino.Node node50 = node9.srcref(node39);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean55 = node54.isThis();
        node54.setSourceEncodedPositionForTree(0);
        boolean boolean58 = node54.hasOneChild();
        com.google.javascript.rhino.Node node59 = node9.useSourceInfoFrom(node54);
        boolean boolean60 = node59.isEmpty();
        com.google.javascript.rhino.Node node61 = node59.detachFromParent();
        node61.setSourceEncodedPositionForTree(97);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        java.lang.String str75 = node69.toString();
        int int76 = node65.getIndexOfChild(node69);
        boolean boolean77 = node65.wasEmptyNode();
        int int78 = node65.getCharno();
        com.google.javascript.rhino.Node node79 = node65.cloneTree();
        boolean boolean80 = node79.isQuotedString();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = node85.siblings();
        boolean boolean87 = node85.isContinue();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) ' ', node4, node61, node79, node85, (int) (short) -1, 8);
        node90.setSourceEncodedPositionForTree(36);
        node90.setSourceEncodedPositionForTree(46);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER 1.0" + "'", str75, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(nodeIterable86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test15689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15689");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isBreak();
        boolean boolean6 = node3.isObjectLit();
        node3.setDouble((double) 97);
        java.lang.String str9 = node3.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test15690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node6 = null;
        jSDocInfo0.setAssociatedNode(node6);
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("Unknown class name");
        int int12 = jSDocInfo0.getParameterCount();
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str15 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test15691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15691");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97");
        java.lang.Object obj7 = node5.getProp(4095);
        node3.addChildrenToFront(node5);
        boolean boolean9 = node5.isNull();
        boolean boolean10 = node5.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15692");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.intersection(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList7 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet4, booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean12 = booleanLiteralSet10.contains(false);
        boolean boolean14 = booleanLiteralSet10.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean30 = booleanLiteralSet28.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList31 = com.google.common.collect.ImmutableList.of(booleanLiteralSet22, booleanLiteralSet24, booleanLiteralSet26, booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean41 = booleanLiteralSet39.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet33, booleanLiteralSet35, booleanLiteralSet37, booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean52 = booleanLiteralSet50.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList53 = com.google.common.collect.ImmutableList.of(booleanLiteralSet44, booleanLiteralSet46, booleanLiteralSet48, booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet59.intersection(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList63 = com.google.common.collect.ImmutableList.of(booleanLiteralSet57, booleanLiteralSet60, booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean73 = booleanLiteralSet71.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList74 = com.google.common.collect.ImmutableList.of(booleanLiteralSet65, booleanLiteralSet67, booleanLiteralSet69, booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean84 = booleanLiteralSet82.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList85 = com.google.common.collect.ImmutableList.of(booleanLiteralSet76, booleanLiteralSet78, booleanLiteralSet80, booleanLiteralSet82);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList86 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet10, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet16, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet19, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet28, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet37, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet46, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet55, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet60, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet65, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet80);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = booleanLiteralSet8.union(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet4.intersection(booleanLiteralSet8);
        boolean boolean90 = booleanLiteralSet88.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList7);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList31);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList53);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList63);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList74);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList85);
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList86);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test15693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15693");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(50);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test15694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15694");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        java.lang.String str27 = jSDocInfo23.getSourceName();
        boolean boolean28 = jSDocInfo23.hasType();
        jSDocInfo23.setDeprecated(true);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo23.getExtendedInterfaces();
        boolean boolean32 = jSDocInfo23.hasThisType();
        boolean boolean33 = jSDocInfo23.hasBaseType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test15695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15695");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isLabelName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0);
        boolean boolean18 = node17.isRegExp();
        boolean boolean19 = node8.hasChild(node17);
        com.google.javascript.rhino.Node node20 = node8.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test15696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15696");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        boolean boolean13 = node1.wasEmptyNode();
        boolean boolean14 = node1.hasMoreThanOneChild();
        boolean boolean15 = node1.isParamList();
        boolean boolean16 = node1.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15697");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node17.getStaticSourceFile();
        com.google.javascript.rhino.Node node26 = node17.getFirstChild();
        com.google.javascript.rhino.Node node27 = node17.getParent();
        int int28 = node17.getChildCount();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean34 = node33.isFalse();
        com.google.javascript.rhino.Node node35 = node33.cloneTree();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        boolean boolean59 = node53.isBreak();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node40, node44, node53, node63, 1, (-1));
        java.lang.String str67 = node63.getQualifiedName();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean72 = node71.isAnd();
        node71.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str75 = node63.checkTreeEquals(node71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) ' ', node33, node71);
        node76.setSourceEncodedPositionForTree(51);
        com.google.javascript.rhino.Node node79 = node17.srcrefTree(node76);
        node17.setCharno(49);
        node17.setLineno(24);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test15698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15698");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node16.getJsDocBuilderForNode();
        boolean boolean21 = node16.isRegExp();
        boolean boolean22 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean46 = node45.isBreak();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node27, node40, node45);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node40.getStaticSourceFile();
        boolean boolean49 = node40.isTry();
        boolean boolean50 = node40.isQuotedString();
        com.google.javascript.rhino.Node node51 = node16.srcrefTree(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = jSDocInfo52.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection54 = jSDocInfo52.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection55 = jSDocInfo52.getMarkers();
        java.util.Collection<java.lang.String> strCollection56 = jSDocInfo52.getReferences();
        node16.setJSDocInfo(jSDocInfo52);
        boolean boolean58 = jSDocInfo52.isHidden();
        boolean boolean59 = jSDocInfo52.hasReturnType();
        boolean boolean60 = jSDocInfo52.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo52.getThisType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(nodeCollection54);
        org.junit.Assert.assertNotNull(markerCollection55);
        org.junit.Assert.assertNull(strCollection56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression61);
    }

    @Test
    public void test15699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15699");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        boolean boolean5 = node3.isFor();
        node3.setType(43);
        int int9 = node3.getIntProp(35);
        java.lang.String str10 = node3.toStringTree();
        boolean boolean11 = node3.isLabelName();
        boolean boolean12 = node3.isTry();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FALSE 100\n" + "'", str10, "FALSE 100\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15700");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isQuotedString();
        boolean boolean12 = node3.isFor();
        boolean boolean13 = node3.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15701");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) -1, 8, (int) ' ');
        com.google.javascript.rhino.InputId inputId4 = null;
        node3.setInputId(inputId4);
    }

    @Test
    public void test15702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15702");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        com.google.javascript.rhino.Node node32 = node31.cloneNode();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(44, node31, 48, 61440);
        boolean boolean36 = node31.isSetterDef();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test15703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15703");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        boolean boolean14 = node8.isGetterDef();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node8.children();
        node8.setType(47);
        node8.setDouble(1.0d);
        boolean boolean20 = node8.isFromExterns();
        boolean boolean21 = node8.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test15704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15704");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo3.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo3.getFileOverview();
        boolean boolean6 = jSDocInfo3.hasBaseType();
        boolean boolean7 = jSDocInfo3.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo3.getVisibility();
        java.lang.String str9 = jSDocInfo3.getMeaning();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo3.setVisibility(visibility10);
        jSDocInfo0.setVisibility(visibility10);
        boolean boolean13 = jSDocInfo0.isIdGenerator();
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test15705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15705");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(51, "Not declared as a constructor");
        int int3 = node2.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        com.google.javascript.rhino.Node node5 = node2.cloneNode();
        boolean boolean6 = node2.isThrow();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        java.lang.String str16 = node10.toString();
        node10.removeProp((int) (short) 0);
        boolean boolean19 = node10.isObjectLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node10.useSourceInfoFromForTree(node23);
        int int26 = node25.getSourceOffset();
        boolean boolean27 = node25.isCall();
        int int28 = node25.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean52 = node51.isBreak();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(4095, node33, node46, node51);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet57);
        int int60 = node33.getCharno();
        boolean boolean61 = node33.isParamList();
        boolean boolean62 = node33.isName();
        boolean boolean63 = node33.isOptionalArg();
        boolean boolean64 = node33.isAnd();
        java.lang.String str65 = node25.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node66 = node2.useSourceInfoFromForTree(node25);
        java.lang.String str67 = node2.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 1.0" + "'", str16, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "IN Not declared as a constructor 97" + "'", str67, "IN Not declared as a constructor 97");
    }

    @Test
    public void test15706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15706");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        java.lang.String str2 = node1.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n" + "'", str2, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
    }

    @Test
    public void test15707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15707");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(24);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test15708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15708");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
    }

    @Test
    public void test15709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15709");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo23.getReferences();
        int int33 = jSDocInfo23.getParameterCount();
        boolean boolean34 = jSDocInfo23.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo23.getEnumParameterType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
    }

    @Test
    public void test15710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15710");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray5, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) 'a', nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(16, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(43, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray5, (int) (short) -1, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node14.getJSDocInfo();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNull(jSDocInfo15);
    }

    @Test
    public void test15711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15711");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        boolean boolean4 = node3.isDefaultCase();
        boolean boolean5 = node3.isFor();
        boolean boolean6 = node3.hasChildren();
        node3.setType((int) (short) 100);
        boolean boolean9 = node3.isContinue();
        boolean boolean10 = node3.isIf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node3.getJsDocBuilderForNode();
        fileLevelJsDocBuilder11.append("(true)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder11);
    }

    @Test
    public void test15712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15712");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int5 = node4.getSideEffectFlags();
        boolean boolean6 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 10, node4);
        boolean boolean8 = node4.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15713");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        java.lang.String str44 = jSDocInfo0.toString();
        boolean boolean45 = jSDocInfo0.hasThisType();
        boolean boolean46 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JSDocInfo" + "'", str44, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
    }

    @Test
    public void test15714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15714");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        node7.putIntProp((int) (short) 100, (int) (short) 10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node29.isBreak();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 1, node16, node20, node29, node39, 1, (-1));
        boolean boolean43 = node42.isWith();
        boolean boolean44 = node42.isNot();
        boolean boolean45 = node42.isLabelName();
        com.google.javascript.rhino.Node node46 = node7.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node47 = node7.getLastSibling();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags49 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags49.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node7.setSideEffectFlags(sideEffectFlags49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test15715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15715");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean3 = node2.isVar();
        boolean boolean4 = node2.isName();
        boolean boolean5 = node2.isScript();
        boolean boolean6 = node2.isDo();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        boolean boolean11 = node10.hasOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean16 = node15.isAnd();
        node15.setSourceFileForTesting("[PROTECTED]");
        node15.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node26 = node15.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.Node node27 = node10.srcrefTree(node15);
        int int28 = node15.getType();
        boolean boolean29 = node2.isEquivalentToTyped(node15);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39 + "'", int28 == 39);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15716");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        java.lang.String str11 = jSDocInfo0.getBlockDescription();
        boolean boolean12 = jSDocInfo0.isExport();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test15717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15717");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        boolean boolean5 = node4.isDefaultCase();
        boolean boolean6 = node4.isFor();
        boolean boolean7 = node4.hasChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        node9.setCharno(12);
        boolean boolean14 = node4.hasChild(node9);
        int int15 = node4.getType();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(221184, node4, (int) 'a', 52);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test15718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15718");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node16.getNext();
        com.google.javascript.rhino.Node node27 = node16.getLastChild();
        com.google.javascript.rhino.Node node28 = node16.cloneNode();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node46.isBreak();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node37, node46, node56, 1, (-1));
        boolean boolean60 = node59.isWith();
        node59.setLineno(409652);
        node28.addChildToFront(node59);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test15719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15719");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str13 = node9.toString(false, false, true);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(61440, node9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node23.isDo();
        java.util.Set<java.lang.String> strSet25 = node23.getDirectives();
        boolean boolean26 = node23.isString();
        node23.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node23.getJSDocInfo();
        boolean boolean30 = node23.isLabelName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(0);
        boolean boolean33 = node32.isRegExp();
        boolean boolean34 = node23.hasChild(node32);
        boolean boolean35 = node23.isEmpty();
        com.google.javascript.rhino.Node node36 = node9.useSourceInfoFrom(node23);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test15720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15720");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test15721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15721");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean12 = jSDocInfo0.hasParameter("STRING true 1");
        boolean boolean13 = jSDocInfo0.isJavaDispatch();
        java.lang.String str14 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test15722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15722");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        boolean boolean26 = node17.isInstanceOf();
        boolean boolean27 = node17.isTrue();
        java.lang.Object obj29 = node17.getProp(61537);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test15723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15723");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0 100\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.lang.String str13 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test15724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15724");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isParamList();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15725");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        int int72 = typePosition3.getPositionOnEndLine();
        int int73 = typePosition3.getPositionOnStartLine();
        boolean boolean74 = typePosition3.hasBrackets();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4095 + "'", int73 == 4095);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test15726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15726");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition12 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(typePosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(nodeSourcePosition12);
    }

    @Test
    public void test15727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15727");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesArguments();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test15728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15728");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo23.getReferences();
        java.lang.String str28 = jSDocInfo23.getMeaning();
        boolean boolean30 = jSDocInfo23.hasParameter("STRING hi!\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15729");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        boolean boolean14 = node13.isDo();
        java.util.Set<java.lang.String> strSet15 = node13.getDirectives();
        boolean boolean16 = node13.isAssignAdd();
        int int17 = node3.getIndexOfChild(node13);
        boolean boolean18 = node13.isSwitch();
        boolean boolean19 = node13.isComma();
        int int20 = node13.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        java.lang.String str30 = node24.toString();
        node24.removeProp((int) (short) 0);
        boolean boolean33 = node24.isObjectLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node24.useSourceInfoFromForTree(node37);
        boolean boolean40 = node37.isAdd();
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node42 = node37.getLastSibling();
        node37.setCharno(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        boolean boolean68 = node62.isBreak();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 1, node49, node53, node62, node72, 1, (-1));
        node53.removeProp(0);
        boolean boolean78 = node37.isEquivalentTo(node53);
        com.google.javascript.rhino.Node node79 = node13.copyInformationFromForTree(node53);
        boolean boolean80 = node53.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test15730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15730");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        boolean boolean27 = node22.isTrue();
        boolean boolean28 = node22.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node22.getAncestors();
        boolean boolean30 = node22.isSyntheticBlock();
        node22.setSourceFileForTesting("STRING hi! 97\n");
        boolean boolean33 = node22.hasOneChild();
        boolean boolean34 = node22.isLabelName();
        boolean boolean35 = node22.isCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ancestorIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test15731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15731");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        boolean boolean30 = jSDocInfo23.isExpose();
        boolean boolean31 = jSDocInfo23.isDeprecated();
        java.lang.String str32 = jSDocInfo23.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection33 = jSDocInfo23.getTypeNodes();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(nodeCollection33);
    }

    @Test
    public void test15732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15732");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean6 = node5.isAssign();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        boolean boolean16 = node14.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node14.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        java.lang.String str19 = node14.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node14.getJSDocInfo();
        java.lang.String str21 = node14.getQualifiedName();
        com.google.javascript.rhino.InputId inputId22 = null;
        node14.setInputId(inputId22);
        node14.setLineno(44);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(4, node2, node5, node14);
        node2.setDouble((double) 10.0f);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test15733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15733");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        boolean boolean10 = node3.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15734");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test15735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15735");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isAssignAdd();
        boolean boolean12 = node8.isStringKey();
        int int13 = node8.getLineno();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        java.lang.String str28 = node22.toString();
        node22.removeProp((int) (short) 0);
        boolean boolean31 = node22.isObjectLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean36 = node35.isGetterDef();
        com.google.javascript.rhino.Node node37 = node22.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node37);
        com.google.javascript.rhino.Node node39 = node17.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        boolean boolean49 = node48.isDo();
        java.util.Set<java.lang.String> strSet50 = node48.getDirectives();
        boolean boolean51 = node48.isString();
        node48.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node48.getAncestors();
        com.google.javascript.rhino.Node node55 = node38.srcrefTree(node48);
        node48.setWasEmptyNode(false);
        node48.addSuppression("([PROTECTED])");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = node64.srcref(node68);
        java.lang.String str70 = node64.toString();
        node64.removeProp((int) (short) 0);
        boolean boolean73 = node64.isObjectLit();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean78 = node77.isGetterDef();
        com.google.javascript.rhino.Node node79 = node64.useSourceInfoFromForTree(node77);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 1, node79);
        node80.setSourceFileForTesting("Not declared as a constructor");
        node80.setLineno((int) (short) 0);
        boolean boolean85 = node80.isNumber();
        node48.addChildrenToBack(node80);
        com.google.javascript.rhino.InputId inputId87 = node80.getInputId();
        com.google.javascript.rhino.Node node88 = node80.getLastSibling();
        boolean boolean89 = node80.hasMoreThanOneChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile90 = node80.getStaticSourceFile();
        node8.setStaticSourceFile(staticSourceFile90);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER 1.0" + "'", str28, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NUMBER 1.0" + "'", str70, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(inputId87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(staticSourceFile90);
    }

    @Test
    public void test15736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15736");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.hasParameterType("GT Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n 52");
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(markerCollection10);
    }

    @Test
    public void test15737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15737");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(0);
        boolean boolean23 = node22.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = node22.getStaticSourceFile();
        boolean boolean25 = node22.isWhile();
        int int26 = node19.getIndexOfChild(node22);
        java.lang.String str27 = node19.toString();
        boolean boolean28 = node19.isScript();
        node19.setDouble((double) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0 97" + "'", str27, "NUMBER 1.0 97");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15738");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isExport();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test15739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15739");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        java.lang.String str26 = node23.toString();
        boolean boolean27 = node23.isNumber();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        java.lang.String str37 = node31.toString();
        node31.removeProp((int) (short) 0);
        boolean boolean40 = node31.isObjectLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean45 = node44.isGetterDef();
        com.google.javascript.rhino.Node node46 = node31.useSourceInfoFromForTree(node44);
        boolean boolean47 = node44.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder48 = node44.getJsDocBuilderForNode();
        boolean boolean49 = node44.isRegExp();
        boolean boolean50 = node44.isInstanceOf();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean55 = node54.isAnd();
        boolean boolean57 = node54.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node54.siblings();
        node54.putBooleanProp((int) (short) 100, false);
        boolean boolean62 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean69 = node68.isDo();
        boolean boolean70 = node68.isBlock();
        boolean boolean71 = node68.isStringKey();
        node54.putProp((int) (byte) 10, (java.lang.Object) node68);
        com.google.javascript.rhino.Node node73 = node44.copyInformationFrom(node54);
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node73.setJSType(jSType74);
        com.google.javascript.rhino.Node node76 = node23.useSourceInfoIfMissingFrom(node73);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING hi! 97" + "'", str26, "STRING hi! 97");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 1.0" + "'", str37, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test15740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15740");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags3.setThrows();
        sideEffectFlags3.setMutatesArguments();
        int int6 = sideEffectFlags3.valueOf();
        sideEffectFlags3.setMutatesThis();
        sideEffectFlags3.clearAllFlags();
        sideEffectFlags3.setReturnsTainted();
        int int10 = visibilityList2.lastIndexOf((java.lang.Object) sideEffectFlags3);
        int int11 = visibilityList2.size();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList12 = visibilityList2.reverse();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor14 = visibilityList2.listIterator(15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (15) must not be greater than size (1)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(visibilityList12);
    }

    @Test
    public void test15741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15741");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        boolean boolean5 = jSDocInfo0.hasThisType();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.setLicense("THIS JSDocInfo 16");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15742");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        node7.putIntProp((int) (short) 100, (int) (short) 10);
        com.google.javascript.rhino.Node node12 = node7.cloneTree();
        java.lang.String[] strArray39 = new java.lang.String[] { "(hi!)", "()", "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", "([PROTECTED])", "Named type with empty name component", "NUMBER 1.0 97", "(NUMBER 1.0)", "", "hi!", "()", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "Unknown class name", "NUMBER 1.0\n", "JSDocInfo", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n", "([PROTECTED])", "Named type with empty name component", "(JSDocInfo)", "OR 100\n", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "([PROTECTED])", "NUMBER 1.0\n", "NUMBER 1.0", "(NUMBER 1.0)", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node59.isBreak();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 1, node46, node50, node59, node69, 1, (-1));
        com.google.javascript.rhino.Node node73 = node72.cloneNode();
        int int75 = node72.getIntProp(10);
        boolean boolean76 = strSet40.remove((java.lang.Object) node72);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        node79.setLength(2);
        com.google.javascript.rhino.Node node82 = node72.useSourceInfoIfMissingFromForTree(node79);
        int int83 = node82.getSourceOffset();
        boolean boolean84 = node82.isSwitch();
        boolean boolean85 = node82.isDefaultCase();
        com.google.javascript.rhino.Node node86 = node12.useSourceInfoFrom(node82);
        com.google.javascript.rhino.Node node88 = node86.getChildAtIndex((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = node88.isLabel();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(node88);
    }

    @Test
    public void test15743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15743");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        boolean boolean32 = node27.isDec();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        int int42 = node27.getIndexOfChild(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean48 = node47.isDo();
        boolean boolean49 = node47.isFalse();
        com.google.javascript.rhino.Node node50 = node27.useSourceInfoFrom(node47);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node47.new FileLevelJsDocBuilder();
        boolean boolean52 = node47.isInc();
        boolean boolean53 = node47.isFunction();
        boolean boolean54 = node47.isFalse();
        boolean boolean55 = node47.isVoid();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test15744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15744");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        java.lang.String str14 = node7.getQualifiedName();
        boolean boolean15 = node7.isLabelName();
        boolean boolean16 = node7.isParamList();
        boolean boolean17 = node7.isGetProp();
        com.google.javascript.rhino.jstype.JSType jSType18 = node7.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
    }

    @Test
    public void test15745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15745");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isNE();
        com.google.javascript.rhino.Node node17 = node8.getAncestor(2);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        boolean boolean27 = node26.isDo();
        java.util.Set<java.lang.String> strSet28 = node26.getDirectives();
        boolean boolean29 = node26.isString();
        int int30 = node26.getSourceOffset();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node48.isBreak();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, node35, node39, node48, node58, 1, (-1));
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean67 = node66.isFalse();
        java.lang.String str68 = node66.getSourceFileName();
        boolean boolean69 = node66.isLabel();
        node35.putProp(1, (java.lang.Object) node66);
        node35.detachChildren();
        node35.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = node77.srcref(node81);
        boolean boolean83 = node82.isDo();
        java.util.Set<java.lang.String> strSet84 = node82.getDirectives();
        boolean boolean85 = node82.isString();
        node82.setWasEmptyNode(false);
        boolean boolean88 = node82.isGetterDef();
        com.google.javascript.rhino.Node node89 = node35.useSourceInfoFrom(node82);
        boolean boolean90 = node82.isStringKey();
        node26.addChildToFront(node82);
        com.google.javascript.rhino.Node node92 = node8.copyInformationFromForTree(node26);
        boolean boolean93 = node92.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test15746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15746");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        java.lang.String str5 = node3.getSourceFileName();
        int int6 = node3.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test15747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15747");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        boolean boolean33 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo34.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getParameterType("Not declared as a constructor");
        boolean boolean39 = jSDocInfo34.isExport();
        node8.setJSDocInfo(jSDocInfo34);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection41 = jSDocInfo34.getMarkers();
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo34.getAuthors();
        boolean boolean43 = jSDocInfo34.isNoShadow();
        boolean boolean44 = jSDocInfo34.isOverride();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(markerCollection41);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test15748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15748");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        jSDocInfo0.setAssociatedNode(node36);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean39 = jSDocInfo0.isOverride();
        java.lang.String str40 = jSDocInfo0.getOriginalCommentString();
        jSDocInfo0.addSuppression("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        java.lang.String str43 = jSDocInfo0.getOriginalCommentString();
        boolean boolean44 = jSDocInfo0.isOverride();
        boolean boolean45 = jSDocInfo0.hasReturnType();
        boolean boolean47 = jSDocInfo0.hasParameterType("");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test15749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15749");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags8.setThrows();
        sideEffectFlags8.setReturnsTainted();
        sideEffectFlags8.setMutatesGlobalState();
        sideEffectFlags8.setMutatesThis();
        boolean boolean13 = sideEffectFlags8.areAllFlagsSet();
        sideEffectFlags8.setMutatesGlobalState();
        sideEffectFlags8.clearSideEffectFlags();
        sideEffectFlags8.setThrows();
        sideEffectFlags8.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags19.setMutatesGlobalState();
        sideEffectFlags19.setAllFlags();
        int int22 = sideEffectFlags19.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags23 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags23.setThrows();
        sideEffectFlags23.setReturnsTainted();
        sideEffectFlags23.setMutatesGlobalState();
        sideEffectFlags23.setMutatesThis();
        boolean boolean28 = sideEffectFlags23.areAllFlagsSet();
        sideEffectFlags23.setMutatesGlobalState();
        sideEffectFlags23.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags33 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags33.setThrows();
        sideEffectFlags33.setMutatesArguments();
        int int36 = sideEffectFlags33.valueOf();
        sideEffectFlags33.setThrows();
        sideEffectFlags33.setReturnsTainted();
        sideEffectFlags33.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags40 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags40.setThrows();
        boolean boolean42 = sideEffectFlags40.areAllFlagsSet();
        boolean boolean43 = sideEffectFlags40.areAllFlagsSet();
        sideEffectFlags40.setReturnsTainted();
        sideEffectFlags40.setMutatesThis();
        sideEffectFlags40.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        sideEffectFlags48.clearSideEffectFlags();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList50 = com.google.common.collect.ImmutableList.of(sideEffectFlags0, sideEffectFlags8, sideEffectFlags19, sideEffectFlags23, sideEffectFlags32, sideEffectFlags33, sideEffectFlags40, sideEffectFlags48);
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(sideEffectFlagsList50);
    }

    @Test
    public void test15750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15750");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.lang.String str46 = jSDocInfo0.getReturnDescription();
        boolean boolean47 = jSDocInfo0.isConstant();
        java.lang.String str48 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test15751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15751");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        node4.setSourceEncodedPosition((int) (byte) 0);
        boolean boolean10 = node4.isFalse();
        boolean boolean11 = node4.isLabel();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean35 = node34.isBreak();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node16, node29, node34);
        java.util.Set<java.lang.String> strSet37 = node36.getDirectives();
        com.google.javascript.rhino.Node node38 = node36.getFirstChild();
        boolean boolean39 = node36.isArrayLit();
        com.google.javascript.rhino.Node node40 = node36.getFirstChild();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node48.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node48.getStaticSourceFile();
        java.lang.String str53 = node48.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = node48.getJSDocInfo();
        java.lang.String str55 = node48.getQualifiedName();
        boolean boolean56 = node48.isSetterDef();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        boolean boolean66 = node65.isDo();
        java.util.Set<java.lang.String> strSet67 = node65.getDirectives();
        boolean boolean68 = node65.isString();
        node65.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable71 = node65.getAncestors();
        com.google.javascript.rhino.Node node72 = node48.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node node73 = node65.getNext();
        com.google.javascript.rhino.Node node74 = node40.clonePropsFrom(node65);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node83 = node78.srcref(node82);
        java.lang.String str84 = node78.toString();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node78.addChildToBack(node88);
        com.google.javascript.rhino.Node node90 = node88.removeChildren();
        com.google.javascript.rhino.Node node91 = node88.cloneNode();
        node91.addSuppression("NEW [PROTECTED] 0");
        com.google.javascript.rhino.Node node94 = node74.srcref(node91);
        boolean boolean95 = node4.isEquivalentTo(node91);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(jSDocInfo54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(ancestorIterable71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "NUMBER 1.0" + "'", str84, "NUMBER 1.0");
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test15752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15752");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.isHidden();
        boolean boolean43 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean49 = node48.isDo();
        boolean boolean50 = node48.isBlock();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean55 = node54.isBreak();
        node54.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node58 = node54.cloneTree();
        com.google.javascript.rhino.Node node59 = node48.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean61 = node48.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags63 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags63.setAllFlags();
        node48.setSideEffectFlags(sideEffectFlags63);
        jSDocInfo0.setAssociatedNode(node48);
        node48.setCharno(54);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test15753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15753");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        node5.removeProp((int) (short) 0);
        boolean boolean14 = node5.isObjectLit();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean19 = node18.isGetterDef();
        com.google.javascript.rhino.Node node20 = node5.useSourceInfoFromForTree(node18);
        boolean boolean21 = node5.isThis();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean26 = node25.isFalse();
        com.google.javascript.rhino.Node node27 = node25.cloneTree();
        node27.setOptionalArg(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node27.getAncestors();
        boolean boolean31 = node27.isGetElem();
        boolean boolean32 = node5.isEquivalentTo(node27);
        boolean boolean33 = node27.hasOneChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) 'a', node1, node27, (int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test15754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15754");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str8 = jSDocInfo0.getDescription();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15755");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray6 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility5 };
        java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList7 = new java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList7, visibilityArray6);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor9 = visibilityList7.iterator();
        boolean boolean10 = strSet4.retainAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList7);
        java.util.Spliterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilitySpliterator11 = visibilityList7.spliterator();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(visibilityItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(visibilitySpliterator11);
    }

    @Test
    public void test15756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15756");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str34 = node4.toString(true, true, false);
        com.google.javascript.rhino.Node node36 = node4.getAncestor(45);
        boolean boolean37 = node4.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str34, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15757");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.TernaryValue[]> ternaryValueArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.TernaryValue[]>();
    }

    @Test
    public void test15758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15758");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean31 = node30.isBreak();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4095, node12, node25, node30);
        boolean boolean33 = node25.isFunction();
        boolean boolean34 = node25.isInstanceOf();
        boolean boolean35 = node25.isHook();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        int int48 = node37.getIndexOfChild(node41);
        boolean boolean49 = node37.wasEmptyNode();
        node25.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node51 = node3.srcref(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList53 = jSDocInfo52.getImplementedInterfaces();
        java.lang.String str54 = jSDocInfo52.getFileOverview();
        boolean boolean55 = jSDocInfo52.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = jSDocInfo52.getVisibility();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo52.getModifies();
        boolean boolean58 = jSDocInfo52.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo52.getBaseType();
        java.lang.String str60 = jSDocInfo52.getReturnDescription();
        node3.setJSDocInfo(jSDocInfo52);
        java.lang.String str62 = jSDocInfo52.getOriginalCommentString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(jSTypeExpressionList53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(visibility56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test15759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15759");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        boolean boolean14 = node8.isObjectLit();
        boolean boolean15 = node8.isParamList();
        boolean boolean16 = node8.hasChildren();
        node8.addSuppression("[PROTECTED]");
        boolean boolean19 = node8.isCatch();
        boolean boolean20 = node8.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15760");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node4.isCall();
        boolean boolean32 = node4.isAnd();
        boolean boolean33 = node4.isObjectLit();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node4.getStaticSourceFile();
        node4.putIntProp(50, 24);
        boolean boolean38 = node4.isTypeOf();
        int int40 = node4.getIntProp(1);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test15761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15761");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean54 = node53.isBreak();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(4095, node35, node48, node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        java.lang.String str65 = node59.toString();
        node59.removeProp((int) (short) 0);
        boolean boolean68 = node59.isObjectLit();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean73 = node72.isGetterDef();
        com.google.javascript.rhino.Node node74 = node59.useSourceInfoFromForTree(node72);
        com.google.javascript.rhino.Node node75 = node55.copyInformationFromForTree(node59);
        com.google.javascript.rhino.Node node76 = node27.srcrefTree(node55);
        boolean boolean77 = node55.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node81.children();
        node81.setWasEmptyNode(false);
        boolean boolean85 = node81.isDec();
        java.lang.String str86 = node81.getSourceFileName();
        boolean boolean87 = node81.isLabelName();
        com.google.javascript.rhino.Node node88 = node55.useSourceInfoFrom(node81);
        boolean boolean89 = node88.isBreak();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER 1.0" + "'", str65, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15762");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node31 = node4.getLastSibling();
        com.google.javascript.rhino.Node node32 = node31.cloneTree();
        node32.removeProp((int) (byte) 1);
        boolean boolean35 = node32.isHook();
        boolean boolean36 = node32.isReturn();
        com.google.javascript.rhino.InputId inputId37 = node32.getInputId();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputId37);
    }

    @Test
    public void test15763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15763");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(24, "(STRING \n)", 35, 221184);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test15764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15764");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node3.isThis();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        java.lang.String str43 = node37.toString();
        node37.removeProp((int) (short) 0);
        boolean boolean46 = node37.isObjectLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean51 = node50.isGetterDef();
        com.google.javascript.rhino.Node node52 = node37.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder53 = node50.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean58 = node57.isGetterDef();
        com.google.javascript.rhino.Node node59 = node50.useSourceInfoFrom(node57);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        java.lang.String str69 = node63.toString();
        node63.removeProp((int) (short) 0);
        boolean boolean72 = node63.isObjectLit();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean77 = node76.isGetterDef();
        com.google.javascript.rhino.Node node78 = node63.useSourceInfoFromForTree(node76);
        boolean boolean79 = node78.isObjectLit();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(54, node29, node33, node57, node78);
        java.lang.String str81 = node33.getSourceFileName();
        boolean boolean82 = node33.isNull();
        boolean boolean83 = node3.isEquivalentToTyped(node33);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 10, 10, (int) (short) -1);
        boolean boolean88 = node3.isEquivalentTo(node87);
        node3.setLength(12);
        boolean boolean91 = node3.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 1.0" + "'", str43, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "NUMBER 1.0" + "'", str69, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15765");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 4, (int) '4');
        node3.setCharno((int) '#');
    }

    @Test
    public void test15766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test15767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15767");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        boolean boolean77 = node76.isEmpty();
        boolean boolean78 = strSet67.remove((java.lang.Object) node76);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node83.getStaticSourceFile();
        boolean boolean85 = node83.isNot();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(4, node83);
        boolean boolean87 = strSet67.remove((java.lang.Object) node83);
        boolean boolean88 = node83.isAssignAdd();
        boolean boolean89 = node83.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15768");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node23.removeFirstChild();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str33 = node29.toString(false, false, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node29.getJsDocBuilderForNode();
        int int35 = node29.getSourceOffset();
        boolean boolean36 = node29.isNew();
        com.google.javascript.rhino.Node node37 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node38 = node37.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GETELEM Not declared as a constructor" + "'", str33, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test15769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15769");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isOr();
        com.google.javascript.rhino.Node node3 = node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSourceEncodedPosition(8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test15770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15770");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        node3.putBooleanProp((int) (short) 100, false);
        boolean boolean11 = node3.isBlock();
        boolean boolean12 = node3.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.getJsDocBuilderForNode();
        int int14 = node3.getSideEffectFlags();
        int int15 = node3.getSideEffectFlags();
        int int16 = node3.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test15771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15771");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        boolean boolean13 = node1.wasEmptyNode();
        int int14 = node1.getCharno();
        com.google.javascript.rhino.Node node15 = node1.cloneTree();
        boolean boolean16 = node1.isInstanceOf();
        boolean boolean17 = node1.isCall();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable18 = node1.getAncestors();
        java.lang.String str19 = node1.getSourceFileName();
        boolean boolean20 = node1.isVarArgs();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ancestorIterable18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test15772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15772");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        boolean boolean15 = node3.wasEmptyNode();
        boolean boolean16 = node3.isVar();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        java.lang.String str31 = node25.toString();
        node25.removeProp((int) (short) 0);
        boolean boolean34 = node25.isObjectLit();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean39 = node38.isGetterDef();
        com.google.javascript.rhino.Node node40 = node25.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 1, node40);
        com.google.javascript.rhino.Node node42 = node20.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node42.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int48 = node47.getSideEffectFlags();
        boolean boolean49 = node47.hasMoreThanOneChild();
        node47.setCharno(100);
        node42.addChildToBack(node47);
        boolean boolean53 = node42.isVoid();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        node57.addSuppression("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        node57.setStaticSourceFile(staticSourceFile60);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = node67.srcref(node71);
        java.lang.String str73 = node67.toString();
        int int74 = node63.getIndexOfChild(node67);
        boolean boolean75 = node63.wasEmptyNode();
        int int76 = node63.getCharno();
        com.google.javascript.rhino.Node node77 = node63.cloneTree();
        boolean boolean78 = node63.isInstanceOf();
        com.google.javascript.rhino.Node node79 = node57.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.Node node80 = node42.copyInformationFrom(node79);
        com.google.javascript.rhino.Node node81 = node3.useSourceInfoIfMissingFrom(node80);
        boolean boolean82 = node3.isFor();
        com.google.javascript.rhino.Node node83 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int85 = node83.getExistingIntProp((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 1.0" + "'", str31, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER 1.0" + "'", str73, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test15773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15773");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable14 = node8.getAncestors();
        boolean boolean15 = node8.isNE();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        java.lang.String str26 = node20.toString();
        node20.removeProp((int) (short) 0);
        boolean boolean29 = node20.isObjectLit();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean34 = node33.isGetterDef();
        com.google.javascript.rhino.Node node35 = node20.useSourceInfoFromForTree(node33);
        boolean boolean36 = node33.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node33.getJsDocBuilderForNode();
        fileLevelJsDocBuilder37.append("Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        node8.putProp(35, (java.lang.Object) "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node8.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ancestorIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 1.0" + "'", str26, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder37);
        org.junit.Assert.assertNull(staticSourceFile41);
    }

    @Test
    public void test15774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15774");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING hi! 97\n");
        boolean boolean8 = jSDocInfo0.isExpose();
        java.lang.String str9 = jSDocInfo0.toString();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
    }

    @Test
    public void test15775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15775");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        node58.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        int int76 = node66.getSourceOffset();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node85 = node80.srcref(node84);
        boolean boolean86 = node85.isDo();
        boolean boolean87 = node66.isEquivalentToTyped(node85);
        com.google.javascript.rhino.Node node88 = node85.cloneNode();
        boolean boolean89 = node58.isEquivalentTo(node85);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test15776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15776");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "NEW [PROTECTED]");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        java.lang.String str16 = node12.toString(false, false, true);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(61440, node12);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        node26.removeProp((int) (short) 0);
        boolean boolean35 = node26.isObjectLit();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean40 = node39.isGetterDef();
        com.google.javascript.rhino.Node node41 = node26.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 1, node41);
        com.google.javascript.rhino.Node node43 = node21.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable58 = node52.getAncestors();
        com.google.javascript.rhino.Node node59 = node42.srcrefTree(node52);
        node52.setWasEmptyNode(false);
        node52.addSuppression("([PROTECTED])");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        java.lang.String str74 = node68.toString();
        node68.removeProp((int) (short) 0);
        boolean boolean77 = node68.isObjectLit();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean82 = node81.isGetterDef();
        com.google.javascript.rhino.Node node83 = node68.useSourceInfoFromForTree(node81);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 1, node83);
        node84.setSourceFileForTesting("Not declared as a constructor");
        node84.setLineno((int) (short) 0);
        boolean boolean89 = node84.isNumber();
        node52.addChildrenToBack(node84);
        com.google.javascript.rhino.InputId inputId91 = node84.getInputId();
        boolean boolean92 = node84.isTypeOf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile93 = node84.getStaticSourceFile();
        node17.setStaticSourceFile(staticSourceFile93);
        node2.setStaticSourceFile(staticSourceFile93);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 1.0" + "'", str16, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(ancestorIterable58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 1.0" + "'", str74, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(inputId91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(staticSourceFile93);
    }

    @Test
    public void test15777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15777");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        boolean boolean33 = node28.isDec();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        int int43 = node28.getIndexOfChild(node42);
        int int44 = node42.getLength();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(16, node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId48 = null;
        node47.setInputId(inputId48);
        boolean boolean50 = node47.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node47.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId52 = null;
        node47.setInputId(inputId52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        boolean boolean63 = node61.isVar();
        double double64 = node61.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo65.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo65.getEnumParameterType();
        java.lang.String str69 = jSDocInfo65.getDescription();
        node61.setJSDocInfo(jSDocInfo65);
        node47.addChildrenToBack(node61);
        node47.addSuppression("");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean78 = node77.isThis();
        boolean boolean79 = node77.isExprResult();
        com.google.javascript.rhino.Node node80 = node77.removeFirstChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node77.children();
        // The following exception was thrown during execution in test generation
        try {
            node42.replaceChild(node47, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNotNull(nodeIterable81);
    }

    @Test
    public void test15778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15778");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(STRING true 1)", 8, 42);
        java.util.Set<java.lang.String> strSet4 = node3.getDirectives();
        int int5 = node3.getSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING (STRING true 1) 8 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test15779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15779");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        com.google.javascript.rhino.Node node32 = node27.detachFromParent();
        boolean boolean33 = node27.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        node27.setStaticSourceFile(staticSourceFile34);
        boolean boolean36 = node27.isQuotedString();
        boolean boolean37 = node27.isVoid();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15780");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node4.isBreak();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4095, node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        boolean boolean22 = node21.isDo();
        java.util.Set<java.lang.String> strSet23 = node21.getDirectives();
        boolean boolean24 = node21.isString();
        node21.setWasEmptyNode(false);
        boolean boolean27 = node21.isObjectLit();
        boolean boolean28 = node21.isDebugger();
        node21.removeProp((-1));
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(36, node21, (int) (byte) 10, 41);
        boolean boolean34 = node33.isReturn();
        boolean boolean35 = node33.isArrayLit();
        boolean boolean36 = node33.isParamList();
        boolean boolean37 = node33.isNE();
        com.google.javascript.rhino.Node node38 = node11.useSourceInfoFromForTree(node33);
        boolean boolean39 = node11.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15781");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node31.isWith();
        boolean boolean33 = node31.isNot();
        boolean boolean34 = node31.isLabelName();
        boolean boolean35 = node31.isReturn();
        boolean boolean36 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean42 = node41.isDo();
        node31.addChildrenToBack(node41);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(16, node31);
        boolean boolean45 = node44.isFor();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15782");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        java.lang.String str7 = node4.getQualifiedName();
        boolean boolean9 = node4.getBooleanProp(52);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(48, node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getImplementedInterfaces();
        boolean boolean13 = jSDocInfo11.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo11.getParameterType("Not declared as a constructor");
        boolean boolean16 = jSDocInfo11.isExport();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo11.getModifies();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        java.lang.String str27 = node21.toString();
        node21.removeProp((int) (short) 0);
        boolean boolean30 = node21.isObjectLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean35 = node34.isGetterDef();
        com.google.javascript.rhino.Node node36 = node21.useSourceInfoFromForTree(node34);
        boolean boolean37 = node34.isAdd();
        boolean boolean38 = node34.isOr();
        boolean boolean39 = node34.isTry();
        com.google.javascript.rhino.InputId inputId40 = null;
        node34.setInputId(inputId40);
        boolean boolean42 = strSet17.contains((java.lang.Object) node34);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        boolean boolean66 = node60.isBreak();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 1, node47, node51, node60, node70, 1, (-1));
        node73.setOptionalArg(true);
        int int76 = node73.getLength();
        int int77 = node73.getSourcePosition();
        boolean boolean78 = strSet17.remove((java.lang.Object) node73);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.Node node83 = node82.cloneNode();
        int int84 = node83.getLength();
        boolean boolean85 = strSet17.contains((java.lang.Object) node83);
        com.google.javascript.rhino.Node node86 = node10.clonePropsFrom(node83);
        java.lang.Class<?> wildcardClass87 = node83.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0" + "'", str27, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test15783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15783");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(((hi!)))", (int) (byte) 1, (int) 'a');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15784");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean5 = node4.isVar();
        boolean boolean6 = node4.isString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean34 = node33.isBreak();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node15, node28, node33);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        node10.setDirectives((java.util.Set<java.lang.String>) strSet39);
        strSet39.clear();
        node4.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.InputId inputId46 = null;
        node4.setInputId(inputId46);
        int int48 = node4.getType();
        boolean boolean49 = node4.isOr();
        boolean boolean50 = node4.isLabel();
        boolean boolean51 = node4.isDo();
        boolean boolean52 = node4.isNoSideEffectsCall();
        boolean boolean54 = node4.getBooleanProp(2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[, hi!]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 42 + "'", int48 == 42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15785");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean7 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility8);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        jSDocInfo0.addSuppression("(hi!)");
        jSDocInfo0.setDeprecated(true);
        java.util.Set<java.lang.String> strSet16 = jSDocInfo0.getSuppressions();
        boolean boolean17 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15786");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isDebugger();
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isSetterDef();
        boolean boolean34 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        int int37 = node27.getIndexOfChild(node36);
        boolean boolean38 = node36.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test15787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15787");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        jSDocInfo0.addSuppression("true");
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo0.getReferences();
        boolean boolean15 = jSDocInfo0.hasThisType();
        jSDocInfo0.addSuppression("STRING NUMBER 1.0 [directives: [, hi!]] 100\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
    }

    @Test
    public void test15788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15788");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean31 = node30.isBreak();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4095, node12, node25, node30);
        boolean boolean33 = node25.isFunction();
        boolean boolean34 = node25.isInstanceOf();
        boolean boolean35 = node25.isHook();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        int int48 = node37.getIndexOfChild(node41);
        boolean boolean49 = node37.wasEmptyNode();
        node25.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node51 = node3.srcref(node37);
        boolean boolean52 = node37.isLabelName();
        boolean boolean53 = node37.isGetterDef();
        boolean boolean54 = node37.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test15789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15789");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "((OR 0 [var_args_name: 1]\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15790");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        int int27 = jSDocInfo23.getParameterCount();
        java.lang.String str28 = jSDocInfo23.getVersion();
        jSDocInfo23.addSuppression("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n");
        boolean boolean31 = jSDocInfo23.isConstant();
        java.lang.String str32 = jSDocInfo23.toString();
        boolean boolean33 = jSDocInfo23.isNoAlias();
        boolean boolean34 = jSDocInfo23.isConstant();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo23.getSuppressions();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("[PROTECTED]");
        boolean boolean38 = strSet35.contains((java.lang.Object) node37);
        java.lang.String str39 = node37.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "STRING [PROTECTED]" + "'", str39, "STRING [PROTECTED]");
    }

    @Test
    public void test15791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15791");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        boolean boolean43 = node24.getBooleanProp(30);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node24.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        boolean boolean69 = node68.isDo();
        java.util.Set<java.lang.String> strSet70 = node68.getDirectives();
        boolean boolean71 = node68.isDebugger();
        boolean boolean72 = node68.isIf();
        com.google.javascript.rhino.Node node73 = node24.srcrefTree(node68);
        boolean boolean74 = node68.isScript();
        com.google.javascript.rhino.Node node75 = node68.cloneNode();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test15792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15792");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(16, "([PROTECTED])", 43, (int) (short) -1);
        boolean boolean9 = node7.getBooleanProp(48);
        boolean boolean10 = node7.isLabel();
        com.google.javascript.rhino.Node node11 = node1.copyInformationFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node11.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(staticSourceFile12);
    }

    @Test
    public void test15793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15793");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        node3.setSourceEncodedPositionForTree(0);
        boolean boolean7 = node3.isLabel();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        boolean boolean39 = node12.isCall();
        boolean boolean40 = node12.isAnd();
        boolean boolean41 = node12.isObjectLit();
        boolean boolean42 = node12.isComma();
        int int43 = node3.getIndexOfChild(node12);
        com.google.javascript.rhino.Node node44 = node12.getParent();
        boolean boolean45 = node12.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15794");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean10 = node9.isFalse();
        java.lang.String str11 = node9.getSourceFileName();
        boolean boolean12 = node9.isLabel();
        boolean boolean13 = node9.isSetterDef();
        boolean boolean14 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        boolean boolean38 = node32.isBreak();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 1, node19, node23, node32, node42, 1, (-1));
        boolean boolean46 = node45.isWith();
        boolean boolean47 = node45.isNot();
        boolean boolean48 = node9.isEquivalentToTyped(node45);
        jSDocInfo0.setAssociatedNode(node9);
        java.lang.String str50 = jSDocInfo0.getVersion();
        java.lang.String str51 = jSDocInfo0.getVersion();
        boolean boolean52 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15795");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(true);
        boolean boolean5 = ternaryValue1.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test15796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15796");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        node3.detachChildren();
        int int10 = node3.getLineno();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        boolean boolean34 = node28.isBreak();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 1, node15, node19, node28, node38, 1, (-1));
        com.google.javascript.rhino.Node node42 = node3.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node43 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = node43.isSetterDef();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
    }

    @Test
    public void test15797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15797");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        boolean boolean3 = node2.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node2.getStaticSourceFile();
        boolean boolean5 = node2.isWhile();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(44, node2);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node2.getStaticSourceFile();
        int int8 = node2.getLineno();
        node2.putBooleanProp(37, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(staticSourceFile4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test15798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15798");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setType(41);
        boolean boolean7 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15799");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isHidden();
        boolean boolean8 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test15800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15800");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean17 = node4.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags19.setAllFlags();
        node4.setSideEffectFlags(sideEffectFlags19);
        int int22 = node4.getLineno();
        node4.removeProp(35);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean28 = node27.isAssign();
        boolean boolean29 = node27.isDo();
        node4.addChildrenToBack(node27);
        com.google.javascript.rhino.Node node31 = node27.cloneNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isBreak();
        node36.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isGetProp();
        boolean boolean53 = node43.isDebugger();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '4', node36, node43);
        java.lang.String str55 = node54.toStringTree();
        boolean boolean56 = node54.isContinue();
        com.google.javascript.rhino.Node node57 = node27.srcrefTree(node54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable58 = node54.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n" + "'", str55, "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(ancestorIterable58);
    }

    @Test
    public void test15801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15801");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        boolean boolean43 = node24.getBooleanProp(30);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node24.useSourceInfoIfMissingFromForTree(node52);
        node52.setIsSyntheticBlock(false);
        java.lang.String str62 = node52.getSourceFileName();
        boolean boolean64 = node52.getBooleanProp(51);
        boolean boolean65 = node52.isVar();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15802");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isFalse();
        boolean boolean7 = node4.wasEmptyNode();
        boolean boolean8 = node4.isFalse();
        node4.setString("Not declared as a constructor");
        boolean boolean11 = node4.isExprResult();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray15, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) 'a', nodeArray15);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(50, nodeArray15, 53, 1);
        int int23 = node4.getIndexOfChild(node22);
        boolean boolean24 = node22.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test15803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15803");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        boolean boolean3 = jSDocInfo0.isOverride();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        java.lang.String str6 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test15804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15804");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING hi! 97 [quoted: 1]\n");
        node1.setType(44);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test15805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean4 = node3.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, node3, (int) (byte) 1, 48);
        boolean boolean9 = node8.isDec();
        node8.setOptionalArg(true);
        com.google.javascript.rhino.Node node12 = node8.cloneTree();
        boolean boolean14 = node12.getBooleanProp(15);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15806");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        java.lang.String str45 = jSDocInfo0.getMeaning();
        boolean boolean46 = jSDocInfo0.hasType();
        java.lang.String str47 = jSDocInfo0.getDeprecationReason();
        java.lang.String str48 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test15807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15807");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        int int72 = typePosition69.getStartLine();
        com.google.javascript.rhino.Node node73 = typePosition69.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test15808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15808");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)");
        com.google.javascript.rhino.Node node3 = node2.getFirstChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node17.getJSDocInfo();
        boolean boolean19 = node17.isQualifiedName();
        com.google.javascript.rhino.Node node20 = node8.useSourceInfoFromForTree(node17);
        boolean boolean21 = node8.isVarArgs();
        node8.setOptionalArg(true);
        boolean boolean24 = node8.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(51, node2, node8);
        boolean boolean26 = node8.isOptionalArg();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(0, "STRING true 1", 16, (int) (short) 100);
        com.google.javascript.rhino.Node node32 = node31.getLastSibling();
        boolean boolean33 = node31.isReturn();
        boolean boolean34 = node31.isComma();
        boolean boolean35 = node31.isNoSideEffectsCall();
        boolean boolean36 = node8.isEquivalentTo(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node8.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder37);
    }

    @Test
    public void test15809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15809");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node16.getNext();
        boolean boolean27 = node16.isNE();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        java.lang.String str38 = node32.toString();
        node32.removeProp((int) (short) 0);
        boolean boolean41 = node32.isGetProp();
        com.google.javascript.rhino.Node node42 = node32.getNext();
        node16.putProp((int) (short) 1, (java.lang.Object) node32);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node32.getJsDocBuilderForNode();
        boolean boolean45 = node32.isGetterDef();
        boolean boolean46 = node32.isVarArgs();
        com.google.javascript.rhino.Node node47 = node32.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test15810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15810");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 4, 51);
        boolean boolean4 = node3.isVarArgs();
        node3.putIntProp(2, 8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node3.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
    }

    @Test
    public void test15811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15811");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        com.google.javascript.rhino.Node node15 = node13.removeChildren();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node19.children();
        java.util.Set<java.lang.String> strSet21 = node19.getDirectives();
        node13.addChildrenToBack(node19);
        com.google.javascript.rhino.Node node23 = node13.removeFirstChild();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean29 = node28.isBreak();
        node28.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        java.lang.String str41 = node35.toString();
        node35.removeProp((int) (short) 0);
        boolean boolean44 = node35.isGetProp();
        boolean boolean45 = node35.isDebugger();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) '4', node28, node35);
        java.lang.String str47 = node46.toStringTree();
        node23.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node49 = node23.getLastSibling();
        boolean boolean50 = node49.isFromExterns();
        com.google.javascript.rhino.Node node51 = node49.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 1.0" + "'", str41, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n" + "'", str47, "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test15812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15812");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        node3.putBooleanProp((int) (short) 100, false);
        boolean boolean11 = node3.isCase();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node3.getAncestors();
        boolean boolean13 = node3.isRegExp();
        com.google.javascript.rhino.Node node14 = node3.getLastSibling();
        boolean boolean15 = node14.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15813");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 8, (int) (byte) 10);
    }

    @Test
    public void test15814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15814");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.isHidden();
        int int43 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean44 = jSDocInfo0.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
    }

    @Test
    public void test15815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15815");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isFromExterns();
        boolean boolean34 = node4.isIf();
        boolean boolean35 = node4.isVoid();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) '#', "[PROTECTED]", 8, 97);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean46 = node45.isDo();
        boolean boolean47 = node45.isBlock();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean52 = node51.isBreak();
        node51.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node55 = node51.cloneTree();
        com.google.javascript.rhino.Node node56 = node45.useSourceInfoIfMissingFromForTree(node51);
        node40.addChildToFront(node51);
        boolean boolean58 = node40.hasMoreThanOneChild();
        boolean boolean59 = node40.isDebugger();
        com.google.javascript.rhino.Node node60 = node4.srcref(node40);
        boolean boolean61 = node4.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test15816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15816");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isDebugger();
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isSetterDef();
        boolean boolean34 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.Node node40 = node38.cloneTree();
        com.google.javascript.rhino.Node node41 = node38.getLastSibling();
        boolean boolean42 = node41.isOptionalArg();
        boolean boolean43 = node41.isCall();
        boolean boolean44 = node41.isNumber();
        boolean boolean45 = node41.isDebugger();
        com.google.javascript.rhino.Node node46 = node27.copyInformationFromForTree(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.children();
        com.google.javascript.rhino.Node node48 = node41.getNext();
        int int49 = node41.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test15817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15817");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo11.getParameterType("hi!");
        jSDocInfo11.addSuppression("hi!");
        java.lang.String str16 = jSDocInfo11.toString();
        boolean boolean17 = jSDocInfo11.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo11.getBaseType();
        java.lang.String str19 = jSDocInfo11.getFileOverview();
        java.lang.String str20 = jSDocInfo11.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo21.getImplementedInterfaces();
        java.lang.String str23 = jSDocInfo21.getFileOverview();
        boolean boolean24 = jSDocInfo21.hasBaseType();
        boolean boolean25 = jSDocInfo21.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo21.getParameterType("true");
        boolean boolean28 = jSDocInfo21.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.isNoTypeCheck();
        boolean boolean31 = jSDocInfo29.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = jSDocInfo29.getVisibility();
        java.lang.String str33 = jSDocInfo29.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo29.setVisibility(visibility34);
        jSDocInfo21.setVisibility(visibility34);
        jSDocInfo11.setVisibility(visibility34);
        jSDocInfo0.setVisibility(visibility34);
        java.util.Collection<java.lang.String> strCollection39 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JSDocInfo" + "'", str16, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(visibility32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(strCollection39);
    }

    @Test
    public void test15818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15818");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        boolean boolean15 = jSDocInfo0.hasParameter("false");
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo0.getAuthors();
        boolean boolean17 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo0.getModifies();
        boolean boolean19 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15819");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node16.getJsDocBuilderForNode();
        boolean boolean21 = node16.isRegExp();
        boolean boolean22 = node16.isInstanceOf();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean46 = node45.isBreak();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node27, node40, node45);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node40.getStaticSourceFile();
        boolean boolean49 = node40.isTry();
        boolean boolean50 = node40.isQuotedString();
        com.google.javascript.rhino.Node node51 = node16.srcrefTree(node40);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node16.new FileLevelJsDocBuilder();
        int int53 = node16.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test15820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15820");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 2, 4095);
        boolean boolean4 = node3.isDec();
        java.lang.String str5 = node3.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "STRING Not declared as a type name 2\n" + "'", str5, "STRING Not declared as a type name 2\n");
    }

    @Test
    public void test15821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15821");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        boolean boolean26 = node17.isInstanceOf();
        boolean boolean27 = node17.isHook();
        boolean boolean28 = node17.isTry();
        node17.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15822");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean4 = node3.isGetterDef();
        boolean boolean5 = node3.isThis();
        java.lang.String str6 = node3.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isNull();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node27.isBreak();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, node14, node18, node27, node37, 1, (-1));
        java.lang.String str41 = node37.getQualifiedName();
        com.google.javascript.rhino.Node node42 = node37.detachFromParent();
        com.google.javascript.rhino.Node node43 = node3.srcref(node37);
        boolean boolean44 = node37.wasEmptyNode();
        boolean boolean45 = node37.isVarArgs();
        java.lang.String str46 = node37.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0\n" + "'", str46, "NUMBER 1.0\n");
    }

    @Test
    public void test15823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15823");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node4.new FileLevelJsDocBuilder();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder9 = serializableBuilder0.add((java.io.Serializable) node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo10.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo10.isDeprecated();
        boolean boolean13 = jSDocInfo10.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo10.getBaseType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection15 = jSDocInfo10.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getEnumParameterType();
        boolean boolean17 = jSDocInfo10.hasTypedefType();
        boolean boolean18 = jSDocInfo10.hasThisType();
        boolean boolean19 = jSDocInfo10.isDefine();
        boolean boolean20 = jSDocInfo10.isDeprecated();
        node4.setJSDocInfo(jSDocInfo10);
        java.lang.String str22 = jSDocInfo10.getSourceName();
        org.junit.Assert.assertNotNull(serializableBuilder0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableBuilder9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNotNull(markerCollection15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test15824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15824");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        java.lang.String str47 = jSDocInfo0.getBlockDescription();
        boolean boolean48 = jSDocInfo0.isNoCompile();
        boolean boolean49 = jSDocInfo0.isNoTypeCheck();
        boolean boolean50 = jSDocInfo0.hasType();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("JSDocInfo");
        boolean boolean53 = node52.isOr();
        jSDocInfo0.setAssociatedNode(node52);
        java.lang.String str55 = node52.toStringTree();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "STRING JSDocInfo\n" + "'", str55, "STRING JSDocInfo\n");
    }

    @Test
    public void test15825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15825");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node4.isSyntheticBlock();
        boolean boolean26 = node4.isScript();
        node4.setSourceEncodedPositionForTree((int) (short) 1);
        boolean boolean29 = node4.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test15826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15826");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isDebugger();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node27.isBreak();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, node14, node18, node27, node37, 1, (-1));
        boolean boolean41 = node14.isCall();
        boolean boolean42 = node14.isAnd();
        com.google.javascript.rhino.Node node43 = node14.getLastSibling();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        java.lang.String str53 = node47.toString();
        node47.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node56 = node14.useSourceInfoIfMissingFrom(node47);
        boolean boolean57 = node3.isEquivalentTo(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean68 = node67.isVar();
        boolean boolean69 = node67.isString();
        boolean boolean70 = node67.isDec();
        boolean boolean71 = node67.isLabel();
        boolean boolean72 = node67.isDelProp();
        boolean boolean73 = node67.isAssignAdd();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoIfMissingFrom(node67);
        node56.addChildToBack(node67);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER 1.0" + "'", str53, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test15827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15827");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        boolean boolean85 = node33.isArrayLit();
        com.google.javascript.rhino.Node node86 = node33.cloneNode();
        boolean boolean87 = node86.isContinue();
        boolean boolean88 = node86.isDec();
        boolean boolean89 = node86.wasEmptyNode();
        boolean boolean90 = node86.isTry();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test15828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15828");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("true");
        com.google.javascript.rhino.jstype.JSType jSType2 = null;
        node1.setJSType(jSType2);
        boolean boolean4 = node1.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15829");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        boolean boolean26 = node18.isFunction();
        boolean boolean27 = node18.isInstanceOf();
        com.google.javascript.rhino.Node node28 = node18.cloneNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int33 = node32.getSideEffectFlags();
        boolean boolean34 = node32.isUnscopedQualifiedName();
        boolean boolean35 = node32.isOr();
        node32.addSuppression("[PROTECTED]");
        boolean boolean38 = node32.isIf();
        com.google.javascript.rhino.Node node39 = node32.getLastChild();
        boolean boolean40 = node32.isVoid();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(46, node28, node32);
        node32.setSourceEncodedPosition(32);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test15830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15830");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean50 = node49.isThis();
        node49.setSourceEncodedPositionForTree(0);
        boolean boolean53 = node49.hasOneChild();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFrom(node49);
        boolean boolean55 = node54.isEmpty();
        boolean boolean56 = node54.isNew();
        node54.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node59 = node54.getFirstChild();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test15831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15831");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node7.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node27.isBreak();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, node14, node18, node27, node37, 1, (-1));
        boolean boolean41 = node18.isInstanceOf();
        boolean boolean42 = node18.isCase();
        int int43 = node18.getLineno();
        int int44 = node18.getType();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node18.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node51 = node7.useSourceInfoFrom(node18);
        int int52 = node51.getLineno();
        com.google.javascript.rhino.Node node53 = node3.useSourceInfoFromForTree(node51);
        int int54 = node53.getLength();
        node53.putIntProp(65589, 13);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 39 + "'", int44 == 39);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test15832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15832");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        boolean boolean14 = node8.isObjectLit();
        boolean boolean15 = node8.hasMoreThanOneChild();
        int int16 = node8.getLineno();
        com.google.javascript.rhino.Node node18 = node8.getAncestor((int) '#');
        boolean boolean19 = node8.isAssign();
        java.lang.String str20 = node8.toStringTree();
        java.lang.Object obj22 = node8.getProp(54);
        node8.setLineno(4146);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        java.lang.String str35 = node29.toString();
        node29.removeProp((int) (short) 0);
        boolean boolean38 = node29.isObjectLit();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean43 = node42.isGetterDef();
        com.google.javascript.rhino.Node node44 = node29.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node53.isDo();
        java.util.Set<java.lang.String> strSet55 = node53.getDirectives();
        com.google.javascript.rhino.Node node56 = node42.clonePropsFrom(node53);
        boolean boolean57 = node53.isDebugger();
        boolean boolean59 = node53.getBooleanProp(100);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(409652, node53, 54, (int) '#');
        boolean boolean63 = node8.isEquivalentTo(node53);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER 1.0\n" + "'", str20, "NUMBER 1.0\n");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 1.0" + "'", str35, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test15833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15833");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        java.lang.String str5 = jSDocInfo0.toString();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        jSDocInfo0.setDeprecated(false);
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean10 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15834");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        int int28 = node1.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node1.getLastSibling();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean53 = node52.isBreak();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(4095, node34, node47, node52);
        boolean boolean55 = node54.isContinue();
        boolean boolean56 = node54.isTry();
        com.google.javascript.rhino.Node node57 = node29.useSourceInfoFromForTree(node54);
        boolean boolean58 = node57.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test15835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15835");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test15836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15836");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean36 = node35.isAnd();
        node35.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str39 = node27.checkTreeEquals(node35);
        boolean boolean40 = node35.isGetProp();
        boolean boolean41 = node35.isFalse();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15837");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        boolean boolean7 = node3.isLocalResultCall();
        boolean boolean8 = node3.isAssign();
        boolean boolean9 = node3.isVarArgs();
        boolean boolean10 = node3.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15838");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test15839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15839");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean4 = node3.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, node3, (int) (byte) 1, 48);
        boolean boolean9 = node8.isParamList();
        int int10 = node8.getCharno();
        com.google.javascript.rhino.Node node11 = node8.getFirstChild();
        boolean boolean12 = node11.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15840");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(54, nodeArray4, 31, (int) 'a');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(44, nodeArray4, (int) (short) -1, (int) (byte) 0);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) '4', nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(48, nodeArray4, 65589, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node14.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test15841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15841");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        java.lang.String str13 = node8.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        java.lang.String str15 = node8.getQualifiedName();
        boolean boolean16 = node8.isSetterDef();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        boolean boolean26 = node25.isDo();
        java.util.Set<java.lang.String> strSet27 = node25.getDirectives();
        boolean boolean28 = node25.isString();
        node25.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable31 = node25.getAncestors();
        com.google.javascript.rhino.Node node32 = node8.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node37.setOptionalArg(true);
        boolean boolean40 = node37.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node37.siblings();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(2, node25, node37);
        boolean boolean43 = node25.isTry();
        boolean boolean44 = node25.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node25.new FileLevelJsDocBuilder();
        int int46 = node25.getChildCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ancestorIterable31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test15842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15842");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        java.lang.String str5 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        java.lang.String str29 = node23.toString();
        node23.removeProp((int) (short) 0);
        boolean boolean32 = node23.isObjectLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean37 = node36.isGetterDef();
        com.google.javascript.rhino.Node node38 = node23.useSourceInfoFromForTree(node36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean44 = node43.isGetterDef();
        com.google.javascript.rhino.Node node45 = node36.useSourceInfoFrom(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        java.lang.String str55 = node49.toString();
        node49.removeProp((int) (short) 0);
        boolean boolean58 = node49.isObjectLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean63 = node62.isGetterDef();
        com.google.javascript.rhino.Node node64 = node49.useSourceInfoFromForTree(node62);
        boolean boolean65 = node64.isObjectLit();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(54, node15, node19, node43, node64);
        boolean boolean67 = node66.isFromExterns();
        com.google.javascript.rhino.Node node68 = node3.srcrefTree(node66);
        com.google.javascript.rhino.InputId inputId69 = null;
        node68.setInputId(inputId69);
        boolean boolean71 = node68.wasEmptyNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 1.0" + "'", str29, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER 1.0" + "'", str55, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test15843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15843");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        boolean boolean5 = node4.isDefaultCase();
        boolean boolean6 = node4.isWhile();
        boolean boolean7 = node4.isLabelName();
        boolean boolean8 = node4.isScript();
        boolean boolean9 = node4.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15844");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet4.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet2.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet1.intersection(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList19 = com.google.common.collect.ImmutableList.of(booleanLiteralSet10, booleanLiteralSet12, booleanLiteralSet14, booleanLiteralSet16);
        boolean boolean21 = booleanLiteralSet16.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet8.intersection(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet26.intersection(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList30 = com.google.common.collect.ImmutableList.of(booleanLiteralSet24, booleanLiteralSet27, booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet34.intersection(booleanLiteralSet35);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList38 = com.google.common.collect.ImmutableList.of(booleanLiteralSet32, booleanLiteralSet35, booleanLiteralSet37);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = booleanLiteralSet27.intersection(booleanLiteralSet35);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet39.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet46.intersection(booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList50 = com.google.common.collect.ImmutableList.of(booleanLiteralSet44, booleanLiteralSet47, booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet54.intersection(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList58 = com.google.common.collect.ImmutableList.of(booleanLiteralSet52, booleanLiteralSet55, booleanLiteralSet57);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet47.intersection(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet59.union(booleanLiteralSet61);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet41.union(booleanLiteralSet62);
        boolean boolean65 = booleanLiteralSet63.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = booleanLiteralSet8.union(booleanLiteralSet63);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList30);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList38);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList50);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList58);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
    }

    @Test
    public void test15845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15845");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        node4.setSourceEncodedPosition((int) (byte) 0);
        boolean boolean10 = node4.isParamList();
        boolean boolean11 = node4.isThis();
        com.google.javascript.rhino.Node node12 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15846");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean43 = node42.isFalse();
        java.lang.String str44 = node42.getSourceFileName();
        boolean boolean45 = node42.isLabel();
        node11.putProp(1, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoFromForTree(node11);
        boolean boolean48 = node47.isCall();
        node47.putBooleanProp(54, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15847");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility>[][]> visibilityListArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility>[][]>();
    }

    @Test
    public void test15848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15848");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        boolean boolean26 = node24.isDebugger();
        int int27 = node24.getSourceOffset();
        boolean boolean28 = node24.isReturn();
        // The following exception was thrown during execution in test generation
        try {
            node24.setSideEffectFlags(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15849");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        boolean boolean13 = node1.wasEmptyNode();
        java.lang.String str14 = node1.getSourceFileName();
        boolean boolean15 = node1.isHook();
        boolean boolean16 = node1.isReturn();
        com.google.javascript.rhino.Node node17 = node1.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test15850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15850");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15851");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition0.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int11 = typePosition0.getPositionOnEndLine();
        typePosition0.setPositionInformation(16, 44, (int) 'a', 12);
        int int17 = typePosition0.getPositionOnEndLine();
        int int18 = typePosition0.getStartLine();
        int int19 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean43 = node42.isBreak();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(4095, node24, node37, node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node37.isEquivalentTo(node48);
        boolean boolean55 = node48.isVoid();
        boolean boolean56 = node48.isDec();
        typePosition0.setItem(node48);
        boolean boolean58 = node48.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node59 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = node48.isEquivalentTo(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test15852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15852");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean44 = jSDocInfo0.hasModifies();
        java.lang.String str46 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean47 = jSDocInfo0.isNoAlias();
        boolean boolean49 = jSDocInfo0.hasDescriptionForParameter("STRING BITXOR 45");
        java.lang.String str50 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test15853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15853");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        boolean boolean12 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15854");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, (int) (byte) 100, 30);
        com.google.javascript.rhino.Node node4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node5 = node3.srcrefTree(node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test15855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15855");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '#', "", (int) (short) 1, 221184);
        com.google.javascript.rhino.Node node5 = node4.cloneNode();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean11 = node10.isThis();
        node10.setSourceEncodedPositionForTree(0);
        boolean boolean14 = node10.hasOneChild();
        node10.setLength(47);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(44, node10);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        boolean boolean27 = node26.isDo();
        java.util.Set<java.lang.String> strSet28 = node26.getDirectives();
        boolean boolean29 = node26.isAssignAdd();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        boolean boolean39 = node38.isDo();
        java.util.Set<java.lang.String> strSet40 = node38.getDirectives();
        boolean boolean41 = node38.isString();
        node38.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node38.getAncestors();
        boolean boolean45 = node38.isNE();
        boolean boolean46 = node38.isGetterDef();
        int int47 = node38.getType();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFrom(node38);
        node17.addChildToFront(node38);
        node4.addChildToBack(node17);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 39 + "'", int47 == 39);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test15856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15856");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) ' ');
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15857");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean9 = node8.isReturn();
        node8.setSourceEncodedPosition(29);
        boolean boolean12 = node8.isOr();
        boolean boolean13 = node8.isIn();
        com.google.javascript.rhino.Node node14 = node8.cloneTree();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, node4, node8, (int) 'a', 48);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test15858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15858");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        boolean boolean15 = node3.wasEmptyNode();
        boolean boolean16 = node3.isReturn();
        boolean boolean18 = node3.getBooleanProp(100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test15859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15859");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("(NUMBER 1.0)");
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        boolean boolean8 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15860");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        node27.addSuppression("Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        boolean boolean33 = node27.isLocalResultCall();
        boolean boolean34 = node27.isContinue();
        com.google.javascript.rhino.InputId inputId35 = node27.getInputId();
        node27.putBooleanProp(61537, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
    }

    @Test
    public void test15861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15861");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags13.setMutatesGlobalState();
        sideEffectFlags13.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test15862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15862");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet67.spliterator();
        strSet67.clear();
        int int75 = strSet67.size();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test15863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15863");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        boolean boolean8 = node3.isLabel();
        int int9 = node3.getLength();
        boolean boolean10 = node3.isNumber();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15864");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean5 = node4.isAnd();
        node4.setSourceFileForTesting("[PROTECTED]");
        node4.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoFromForTree(node14);
        java.lang.Object obj17 = node4.getProp((int) (byte) 100);
        node4.setIsSyntheticBlock(false);
        boolean boolean20 = node4.isFor();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        int int33 = node22.getIndexOfChild(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node22.getJSDocInfo();
        int int35 = node22.getType();
        node22.putBooleanProp((int) (byte) -1, false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        java.lang.String str51 = node47.toString(false, false, true);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(44, node4, node22, node47);
        int int53 = node22.getSideEffectFlags();
        boolean boolean54 = node22.isComma();
        com.google.javascript.rhino.InputId inputId55 = null;
        node22.setInputId(inputId55);
        boolean boolean58 = node22.getBooleanProp(221184);
        boolean boolean59 = node22.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 1.0" + "'", str51, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test15865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15865");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        boolean boolean32 = node27.isDec();
        node27.addSuppression("JSDocInfo");
        int int35 = node27.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo36.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection38 = jSDocInfo36.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection39 = jSDocInfo36.getMarkers();
        boolean boolean40 = jSDocInfo36.isHidden();
        java.lang.String str41 = jSDocInfo36.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo36.getParameterType("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n");
        node27.setJSDocInfo(jSDocInfo36);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo36.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection46 = jSDocInfo36.getTypeNodes();
        java.lang.String str47 = jSDocInfo36.toString();
        boolean boolean48 = jSDocInfo36.hasTypedefType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(nodeCollection38);
        org.junit.Assert.assertNotNull(markerCollection39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(nodeCollection46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JSDocInfo" + "'", str47, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test15866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15866");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        int int29 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node30 = typePosition0.getItem();
        com.google.javascript.rhino.Node node31 = null;
        typePosition0.setItem(node31);
        int int33 = typePosition0.getPositionOnStartLine();
        boolean boolean34 = typePosition0.hasBrackets();
        int int35 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node36 = typePosition0.getItem();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 42 + "'", int29 == 42);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4095 + "'", int35 == 4095);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test15867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15867");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        strSet28.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray33 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility32 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList34 = com.google.common.collect.ImmutableList.of(visibilityArray33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean58 = node57.isBreak();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(4095, node39, node52, node57);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet63);
        java.lang.Object[] objArray66 = strSet63.toArray();
        boolean boolean67 = visibilityList34.contains((java.lang.Object) objArray66);
        boolean boolean69 = visibilityList34.equals((java.lang.Object) 43);
        boolean boolean70 = strSet28.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList34);
        boolean boolean71 = visibilityList34.isEmpty();
        boolean boolean72 = visibilityList34.isEmpty();
        int int73 = visibilityList34.size();
        int int74 = visibilityList34.size();
        // The following exception was thrown during execution in test generation
        try {
            visibilityList34.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray33);
        org.junit.Assert.assertNotNull(visibilityList34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test15868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15868");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean5 = node4.isVar();
        boolean boolean6 = node4.isString();
        int int7 = node4.getLength();
        com.google.javascript.rhino.InputId inputId8 = node4.getInputId();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node12.children();
        node12.setWasEmptyNode(false);
        boolean boolean16 = node12.isDec();
        java.lang.String str17 = node12.getSourceFileName();
        boolean boolean18 = node12.isAdd();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoIfMissingFrom(node12);
        boolean boolean20 = node19.isDec();
        boolean boolean21 = node19.isGetProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test15869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15869");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4095, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        boolean boolean3 = node2.isOr();
        boolean boolean4 = node2.isString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = node2.toString(true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15870");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(41, (int) (byte) 100, 29);
        boolean boolean4 = node3.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test15871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15871");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isTypeOf();
        node3.setLineno(4);
        java.lang.String str14 = node3.toString();
        boolean boolean15 = node3.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0 4" + "'", str14, "NUMBER 1.0 4");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15872");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        boolean boolean8 = node4.isThrow();
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        node4.setQuotedString();
        node4.addSuppression("NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test15873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15873");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        boolean boolean3 = node1.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.children();
        boolean boolean5 = node1.isFromExterns();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node9.children();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        int int12 = node9.getLength();
        boolean boolean13 = node9.isCatch();
        com.google.javascript.rhino.InputId inputId14 = node9.getInputId();
        com.google.javascript.rhino.Node node15 = node1.useSourceInfoFrom(node9);
        boolean boolean16 = node15.isVar();
        boolean boolean17 = node15.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test15874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15874");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        boolean boolean18 = node9.isObjectLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean23 = node22.isGetterDef();
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 1, node24);
        com.google.javascript.rhino.Node node26 = node4.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(45, node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node26.children();
        com.google.javascript.rhino.Node node29 = node26.cloneNode();
        boolean boolean30 = node26.isDelProp();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test15875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15875");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
    }

    @Test
    public void test15876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15876");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo23.getReferences();
        java.lang.String str33 = jSDocInfo23.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo23.getBaseType();
        com.google.javascript.rhino.Node node35 = jSDocInfo23.getAssociatedNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSDocInfo" + "'", str33, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test15877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15877");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(markerCollection9);
    }

    @Test
    public void test15878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15878");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.hasOneChild();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        com.google.javascript.rhino.InputId inputId39 = null;
        node16.setInputId(inputId39);
        boolean boolean41 = node16.isSwitch();
        com.google.javascript.rhino.Node node42 = node3.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.InputId inputId43 = null;
        node16.setInputId(inputId43);
        boolean boolean45 = node16.hasChildren();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 48);
        boolean boolean48 = node47.isExprResult();
        boolean boolean49 = node16.isEquivalentToTyped(node47);
        boolean boolean50 = node47.isStringKey();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15879");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        boolean boolean16 = node13.getBooleanProp(97);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15880");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isInc();
        int int12 = node3.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test15881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15881");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node9.isDo();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        boolean boolean12 = node9.isString();
        node9.setWasEmptyNode(false);
        boolean boolean15 = node9.isObjectLit();
        boolean boolean16 = node9.isParamList();
        boolean boolean17 = node9.hasOneChild();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, node9, (int) (byte) -1, 0);
        node9.setSourceEncodedPositionForTree(37);
        com.google.javascript.rhino.InputId inputId23 = null;
        node9.setInputId(inputId23);
        boolean boolean25 = node9.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15882");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        int int46 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)", (int) (short) 0, 45);
        boolean boolean51 = node50.isFromExterns();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node55.isBreak();
        boolean boolean62 = node55.isHook();
        node50.addChildrenToBack(node55);
        com.google.javascript.rhino.Node node64 = node4.srcrefTree(node55);
        boolean boolean65 = node4.isIn();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test15883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15883");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        int int5 = jSDocInfo0.getParameterCount();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15884");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.Object obj11 = node4.getProp(10);
        boolean boolean12 = node4.isQuotedString();
        node4.setCharno(1);
        com.google.javascript.rhino.Node node15 = node4.getLastSibling();
        node4.removeProp(0);
        boolean boolean18 = node4.isDebugger();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 1, node4, 15, (int) (short) 0);
        com.google.javascript.rhino.Node node22 = node4.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node22.siblings();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test15885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15885");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test15886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15886");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        boolean boolean10 = jSDocInfo0.isExpose();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        int int12 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test15887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15887");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags2.setMutatesGlobalState();
        sideEffectFlags2.clearSideEffectFlags();
        sideEffectFlags2.setMutatesArguments();
        int int21 = sideEffectFlags2.valueOf();
        int int22 = sideEffectFlags2.valueOf();
        sideEffectFlags2.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
    }

    @Test
    public void test15888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = jSDocInfo0.getTypeNodes();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeCollection12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test15889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15889");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        node3.setSourceFileForTesting("[PROTECTED]");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node3.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node9 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test15890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15890");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        int int62 = node13.getIntProp((int) (byte) 10);
        boolean boolean63 = node13.hasChildren();
        com.google.javascript.rhino.Node node64 = node13.cloneTree();
        com.google.javascript.rhino.Node node65 = null;
        com.google.javascript.rhino.Node node66 = node64.getChildBefore(node65);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test15891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15891");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 61537, (int) (byte) 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15892");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        boolean boolean30 = jSDocInfo23.isExpose();
        com.google.javascript.rhino.Node node31 = jSDocInfo23.getAssociatedNode();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo23.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray34 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility33 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList35 = com.google.common.collect.ImmutableList.of(visibilityArray34);
        java.lang.String str36 = visibilityList35.toString();
        java.lang.String str37 = visibilityList35.toString();
        java.lang.Object[] objArray38 = visibilityList35.toArray();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList39 = visibilityList35.asList();
        boolean boolean40 = strSet32.removeAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList35);
        int int41 = strSet32.size();
        java.util.Iterator<java.lang.String> strItor42 = strSet32.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray34);
        org.junit.Assert.assertNotNull(visibilityList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[PROTECTED]" + "'", str36, "[PROTECTED]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[PROTECTED]" + "'", str37, "[PROTECTED]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strItor42);
    }

    @Test
    public void test15893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15893");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.detachChildren();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean28 = node27.isBreak();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(4095, node9, node22, node27);
        boolean boolean30 = node22.isFunction();
        boolean boolean31 = node22.isInstanceOf();
        boolean boolean32 = node22.isTrue();
        com.google.javascript.rhino.Node node33 = node3.copyInformationFrom(node22);
        node33.setType(409652);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test15894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15894");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(hi!)");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        boolean boolean25 = node19.isBreak();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 1, node6, node10, node19, node29, 1, (-1));
        com.google.javascript.rhino.Node node33 = node6.getLastSibling();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.Node node39 = node37.cloneTree();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean42 = node39.isEquivalentToTyped(node41);
        node41.setSourceEncodedPositionForTree(31);
        boolean boolean45 = node41.isTypeOf();
        com.google.javascript.rhino.Node node46 = node6.srcrefTree(node41);
        com.google.javascript.rhino.Node node47 = node1.clonePropsFrom(node41);
        com.google.javascript.rhino.Node node48 = node41.cloneNode();
        com.google.javascript.rhino.Node node49 = node48.getLastSibling();
        int int50 = node49.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test15895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15895");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isAnd();
        node29.setSourceFileForTesting("[PROTECTED]");
        node29.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = node29.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node41 = node17.copyInformationFrom(node29);
        node41.setCharno(13);
        int int44 = node41.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test15896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15896");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        int int7 = node3.getSourcePosition();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        boolean boolean9 = node3.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15897");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean50 = node49.isThis();
        node49.setSourceEncodedPositionForTree(0);
        boolean boolean53 = node49.hasOneChild();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFrom(node49);
        boolean boolean55 = node54.isNot();
        boolean boolean56 = node54.isThrow();
        int int57 = node54.getSourcePosition();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test15898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15898");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        boolean boolean56 = node50.isBreak();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 1, node37, node41, node50, node60, 1, (-1));
        java.lang.String str64 = node60.getQualifiedName();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean69 = node68.isAnd();
        node68.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str72 = node60.checkTreeEquals(node68);
        jSDocInfo32.setAssociatedNode(node60);
        com.google.javascript.rhino.Node node74 = node8.useSourceInfoIfMissingFrom(node60);
        node60.setVarArgs(true);
        boolean boolean77 = node60.isNumber();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        java.lang.String str80 = node79.getQualifiedName();
        boolean boolean81 = node79.isAdd();
        boolean boolean82 = node60.hasChild(node79);
        boolean boolean83 = node60.isTypeOf();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15899");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isComma();
        node33.removeProp((int) (short) 10);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node54.getJSDocInfo();
        boolean boolean56 = node54.isQualifiedName();
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node node58 = node33.srcrefTree(node45);
        node45.setLineno(43);
        boolean boolean61 = node45.isNew();
        boolean boolean62 = node45.isOptionalArg();
        int int63 = node45.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test15900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15900");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        node3.putBooleanProp((int) (short) 100, false);
        boolean boolean11 = node3.isCase();
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isVar();
        int int14 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test15901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15901");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        boolean boolean32 = node4.isParamList();
        boolean boolean33 = node4.isName();
        com.google.javascript.rhino.jstype.JSType jSType34 = node4.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node4.children();
        node4.addSuppression("(Node tree inequality:\nTree1:\nSTRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nTYPEOF\n\n\nSubtree1: STRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: TYPEOF\n)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(nodeIterable35);
    }

    @Test
    public void test15902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15902");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", (int) (short) 1, 50);
        int int4 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node5 = node3.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4146 + "'", int4 == 4146);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test15903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15903");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getEndLine();
        int int12 = stringPosition0.getEndLine();
        java.lang.String str13 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test15904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("([PROTECTED])");
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.hasParameter("NUMBER 1.0 97\n");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId14 = null;
        node13.setInputId(inputId14);
        boolean boolean16 = node13.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId18 = null;
        node13.setInputId(inputId18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node27.isVar();
        double double30 = node27.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo31.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo31.getEnumParameterType();
        java.lang.String str35 = jSDocInfo31.getDescription();
        node27.setJSDocInfo(jSDocInfo31);
        node13.addChildrenToBack(node27);
        node13.addSuppression("");
        int int40 = node13.getSourceOffset();
        com.google.javascript.rhino.Node node41 = node13.getLastSibling();
        jSDocInfo0.setAssociatedNode(node13);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = node13.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  [jsdoc_info: JSDocInfo] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test15905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15905");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue2.and(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        java.lang.String str9 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue6.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue12.xor(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue4.xor(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue19.and(ternaryValue20);
        java.lang.String str22 = ternaryValue19.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue19.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue25.xor(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue31.and(ternaryValue32);
        java.lang.String str34 = ternaryValue31.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.and(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue31.or(ternaryValue37);
        boolean boolean41 = ternaryValue39.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue25.or(ternaryValue39);
        boolean boolean44 = ternaryValue25.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue4.and(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue0.or(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue49.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.and(ternaryValue54);
        java.lang.String str56 = ternaryValue53.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue58.and(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue53.or(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.xor(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue51.xor(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue66.and(ternaryValue67);
        java.lang.String str69 = ternaryValue66.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = ternaryValue71.and(ternaryValue72);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue66.or(ternaryValue72);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue72.xor(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = ternaryValue78.and(ternaryValue79);
        java.lang.String str81 = ternaryValue78.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = ternaryValue83.and(ternaryValue84);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = ternaryValue78.or(ternaryValue84);
        boolean boolean88 = ternaryValue86.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = ternaryValue72.or(ternaryValue86);
        boolean boolean91 = ternaryValue72.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = ternaryValue51.and(ternaryValue72);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue93 = ternaryValue47.or(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue94 = ternaryValue4.or(ternaryValue93);
        boolean boolean96 = ternaryValue93.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "true" + "'", str22, "true");
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true" + "'", str34, "true");
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "true" + "'", str56, "true");
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "true" + "'", str69, "true");
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "true" + "'", str81, "true");
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValue93);
        org.junit.Assert.assertNotNull(ternaryValue94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test15906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15906");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        jSDocInfo0.addSuppression("OR 0 [var_args_name: 1]\n");
        boolean boolean13 = jSDocInfo0.isConstant();
        boolean boolean14 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15907");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test15908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15908");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        boolean boolean18 = node9.isObjectLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean23 = node22.isGetterDef();
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 1, node24);
        com.google.javascript.rhino.Node node26 = node4.useSourceInfoFromForTree(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node26.siblings();
        boolean boolean28 = node26.isRegExp();
        boolean boolean29 = node26.isIn();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node47.isBreak();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, node34, node38, node47, node57, 1, (-1));
        boolean boolean61 = node34.isIf();
        boolean boolean62 = node34.isCatch();
        java.lang.String str66 = node34.toString(true, true, false);
        int int67 = node34.getSourceOffset();
        boolean boolean68 = node26.isEquivalentTo(node34);
        boolean boolean69 = node34.isComma();
        com.google.javascript.rhino.Node node70 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(54, node34, node70, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR 100" + "'", str66, "OR 100");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15909");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node33 = node28.detachFromParent();
        boolean boolean34 = node28.isIf();
        java.lang.String str35 = node28.toStringTree();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) 10, (int) (byte) 1, 54);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean45 = node44.isVar();
        com.google.javascript.rhino.InputId inputId46 = node44.getInputId();
        int int48 = node44.getIntProp((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(0, node28, node39, node44, 40, (int) '4');
        boolean boolean52 = node51.isVoid();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 1.0\n" + "'", str35, "NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(inputId46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15910");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("true");
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        java.lang.String str11 = jSDocInfo0.toString();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSDocInfo" + "'", str11, "JSDocInfo");
    }

    @Test
    public void test15911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15911");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean6 = node5.isBreak();
        node5.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node9 = node5.cloneTree();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 52, 42, (int) (byte) 1);
        boolean boolean14 = node9.isEquivalentToTyped(node13);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(42, node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node9.children();
        boolean boolean17 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = node9.getParent();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        java.lang.String str28 = node22.toString();
        node22.removeProp((int) (short) 0);
        boolean boolean31 = node22.isObjectLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean36 = node35.isGetterDef();
        com.google.javascript.rhino.Node node37 = node22.useSourceInfoFromForTree(node35);
        boolean boolean38 = node35.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node35.getJsDocBuilderForNode();
        boolean boolean40 = node35.isRegExp();
        com.google.javascript.rhino.Node node41 = node35.cloneTree();
        boolean boolean42 = node18.hasChild(node35);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        boolean boolean66 = node60.isBreak();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 1, node47, node51, node60, node70, 1, (-1));
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = node77.srcref(node81);
        java.lang.String str83 = node77.toString();
        node77.removeProp((int) (short) 0);
        boolean boolean86 = node77.isGetProp();
        boolean boolean87 = node77.isReturn();
        com.google.javascript.rhino.Node node88 = node47.srcref(node77);
        boolean boolean89 = node88.isStringKey();
        boolean boolean90 = node88.isBlock();
        boolean boolean91 = node35.hasChild(node88);
        com.google.javascript.rhino.InputId inputId92 = null;
        node35.setInputId(inputId92);
        boolean boolean94 = node35.isReturn();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(19, node35);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER 1.0" + "'", str28, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER 1.0" + "'", str83, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test15912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15912");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId33 = null;
        node32.setInputId(inputId33);
        boolean boolean35 = node32.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node32.getJsDocBuilderForNode();
        node32.setType((int) (byte) 100);
        boolean boolean39 = node32.isThrow();
        com.google.javascript.rhino.Node node40 = node16.srcref(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo41.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo41.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet43.spliterator();
        java.util.Iterator<java.lang.String> strItor45 = strSet43.iterator();
        node16.setDirectives(strSet43);
        boolean boolean47 = node16.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test15913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15913");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesGlobalState();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test15914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15914");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = strSet8.add("NUMBER 1.0 [jsdoc_info: JSDocInfo]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test15915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15915");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.String str46 = node40.toString();
        node40.removeProp((int) (short) 0);
        boolean boolean49 = node40.isObjectLit();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean54 = node53.isGetterDef();
        com.google.javascript.rhino.Node node55 = node40.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node64.isDo();
        java.util.Set<java.lang.String> strSet66 = node64.getDirectives();
        com.google.javascript.rhino.Node node67 = node53.clonePropsFrom(node64);
        boolean boolean68 = node67.isCase();
        java.lang.String str69 = node36.checkTreeEquals(node67);
        boolean boolean70 = node67.isOr();
        boolean boolean71 = node67.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test15916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15916");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        boolean boolean32 = node27.isDec();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        int int42 = node27.getIndexOfChild(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean48 = node47.isDo();
        boolean boolean49 = node47.isFalse();
        com.google.javascript.rhino.Node node50 = node27.useSourceInfoFrom(node47);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node47.new FileLevelJsDocBuilder();
        int int52 = node47.getType();
        node47.setSideEffectFlags(11);
        boolean boolean55 = node47.isVar();
        boolean boolean56 = node47.isRegExp();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30 + "'", int52 == 30);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15917");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.isExpose();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        java.lang.String str13 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test15918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15918");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node17.getStaticSourceFile();
        boolean boolean26 = node17.isTry();
        java.lang.String str27 = node17.getQualifiedName();
        java.lang.String str31 = node17.toString(false, false, false);
        com.google.javascript.rhino.Node node32 = node17.cloneTree();
        com.google.javascript.rhino.Node node33 = node17.cloneTree();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 1.0" + "'", str31, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test15919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15919");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isHidden();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test15920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15920");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder1 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(4095, node6, node19, node24);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder34 = serializableBuilder1.add((java.io.Serializable) strSet30);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList35 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder36 = serializableBuilder34.add((java.io.Serializable) booleanLiteralSetEnumList35);
        com.google.javascript.rhino.Node[] nodeArray41 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(54, nodeArray41, 31, (int) 'a');
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) '#', nodeArray41);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '4', nodeArray41, (int) (short) 10, 30);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray41, 100, 46);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder52 = serializableBuilder36.add((java.io.Serializable[]) nodeArray41);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(44, nodeArray41, 40, 0);
        boolean boolean56 = node55.isParamList();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder34);
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList35);
        org.junit.Assert.assertNotNull(serializableBuilder36);
        org.junit.Assert.assertNotNull(nodeArray41);
        org.junit.Assert.assertNotNull(serializableBuilder52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15921");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str12 = node8.toString(false, false, true);
        node8.setLineno(2);
        node8.addSuppression("Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        node8.setLineno(32);
        boolean boolean19 = node8.isDelProp();
        java.lang.String str23 = node8.toString(false, true, true);
        com.google.javascript.rhino.Node node24 = node8.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0 [jsdoc_info: JSDocInfo]" + "'", str23, "NUMBER 1.0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test15922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15922");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node1.getStaticSourceFile();
        node1.setOptionalArg(false);
        boolean boolean29 = node1.isName();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        java.lang.String str39 = node33.toString();
        node33.removeProp((int) (short) 0);
        boolean boolean42 = node33.isObjectLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean47 = node46.isGetterDef();
        com.google.javascript.rhino.Node node48 = node33.useSourceInfoFromForTree(node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        boolean boolean58 = node57.isDo();
        java.util.Set<java.lang.String> strSet59 = node57.getDirectives();
        com.google.javascript.rhino.Node node60 = node46.clonePropsFrom(node57);
        boolean boolean61 = node46.isStringKey();
        com.google.javascript.rhino.Node node62 = node1.srcrefTree(node46);
        boolean boolean63 = node46.isOr();
        boolean boolean64 = node46.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test15923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15923");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.containsDeclaration();
        boolean boolean13 = jSDocInfo0.isExpose();
        boolean boolean14 = jSDocInfo0.shouldPreserveTry();
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        boolean boolean16 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getBaseType();
        java.lang.String str18 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test15924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node6 = null;
        jSDocInfo0.setAssociatedNode(node6);
        boolean boolean8 = jSDocInfo0.isConstant();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean33 = node32.isBreak();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, node14, node27, node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        java.lang.String str44 = node38.toString();
        node38.removeProp((int) (short) 0);
        boolean boolean47 = node38.isObjectLit();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean52 = node51.isGetterDef();
        com.google.javascript.rhino.Node node53 = node38.useSourceInfoFromForTree(node51);
        com.google.javascript.rhino.Node node54 = node34.copyInformationFromForTree(node38);
        boolean boolean55 = node34.isFor();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean60 = node59.isVarArgs();
        int int61 = node34.getIndexOfChild(node59);
        int int62 = node34.getLength();
        jSDocInfo0.setAssociatedNode(node34);
        node34.setWasEmptyNode(true);
        boolean boolean66 = node34.isQuotedString();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 1.0" + "'", str44, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test15925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15925");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean36 = node35.isFalse();
        java.lang.String str37 = node35.getSourceFileName();
        boolean boolean38 = node35.isLabel();
        node4.putProp(1, (java.lang.Object) node35);
        node4.detachChildren();
        node4.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node51.isDo();
        java.util.Set<java.lang.String> strSet53 = node51.getDirectives();
        boolean boolean54 = node51.isString();
        node51.setWasEmptyNode(false);
        boolean boolean57 = node51.isGetterDef();
        com.google.javascript.rhino.Node node58 = node4.useSourceInfoFrom(node51);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 47, 15);
        com.google.javascript.rhino.Node node63 = node62.getNext();
        java.lang.String str64 = node62.getQualifiedName();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        java.lang.Object obj75 = node68.getProp(10);
        boolean boolean76 = node68.isArrayLit();
        boolean boolean77 = node68.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node78 = node62.useSourceInfoFrom(node68);
        com.google.javascript.rhino.Node node79 = node51.useSourceInfoFrom(node68);
        node68.addSuppression("BITXOR 45\n");
        boolean boolean82 = node68.isQuotedString();
        boolean boolean83 = node68.isDec();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15926");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean5 = node4.isVar();
        boolean boolean6 = node4.isString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean34 = node33.isBreak();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(4095, node15, node28, node33);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        node10.setDirectives((java.util.Set<java.lang.String>) strSet39);
        strSet39.clear();
        node4.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.InputId inputId46 = null;
        node4.setInputId(inputId46);
        int int48 = node4.getType();
        boolean boolean49 = node4.isExprResult();
        boolean boolean51 = node4.getBooleanProp(51);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[, hi!]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 42 + "'", int48 == 42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test15927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15927");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        boolean boolean9 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15928");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        boolean boolean26 = node24.isGetterDef();
        boolean boolean27 = node24.hasOneChild();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean33 = node32.isAnd();
        node32.setSourceFileForTesting("[PROTECTED]");
        node32.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node43 = node32.useSourceInfoFromForTree(node42);
        java.lang.Object obj45 = node32.getProp((int) (byte) 100);
        node32.setIsSyntheticBlock(false);
        boolean boolean48 = node32.isFor();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        java.lang.String str60 = node54.toString();
        int int61 = node50.getIndexOfChild(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node50.getJSDocInfo();
        int int63 = node50.getType();
        node50.putBooleanProp((int) (byte) -1, false);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        java.lang.String str79 = node75.toString(false, false, true);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(44, node32, node50, node75);
        boolean boolean81 = node50.isNot();
        com.google.javascript.rhino.Node node82 = node24.useSourceInfoIfMissingFromForTree(node50);
        boolean boolean83 = node24.isNE();
        java.lang.Class<?> wildcardClass84 = node24.getClass();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 1.0" + "'", str60, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 40 + "'", int63 == 40);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "NUMBER 1.0" + "'", str79, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test15929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15929");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        boolean boolean21 = node20.isQualifiedName();
        boolean boolean22 = node20.isFunction();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        boolean boolean46 = node40.isBreak();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 1, node27, node31, node40, node50, 1, (-1));
        boolean boolean54 = node31.isInstanceOf();
        boolean boolean55 = node31.isNot();
        int int56 = node31.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node31.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node62.getStaticSourceFile();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable64 = node62.getAncestors();
        com.google.javascript.rhino.Node node65 = node31.useSourceInfoFrom(node62);
        node20.addChildToFront(node62);
        boolean boolean67 = node20.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertNotNull(ancestorIterable64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15930");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(42);
        boolean boolean2 = node1.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test15931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15931");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        java.lang.String str45 = jSDocInfo0.getMeaning();
        boolean boolean46 = jSDocInfo0.hasType();
        java.lang.String str47 = jSDocInfo0.getDeprecationReason();
        java.lang.String str48 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo0.getModifies();
        java.lang.String str50 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(visibility51);
    }

    @Test
    public void test15932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15932");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test15933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15933");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test15934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15934");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node8, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node8.isThrow();
        boolean boolean18 = node8.isSetterDef();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node8.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
    }

    @Test
    public void test15935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15935");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        boolean boolean7 = node3.isSetterDef();
        boolean boolean8 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        boolean boolean32 = node26.isBreak();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 1, node13, node17, node26, node36, 1, (-1));
        boolean boolean40 = node39.isWith();
        boolean boolean41 = node39.isNot();
        boolean boolean42 = node3.isEquivalentToTyped(node39);
        java.lang.String[] strArray56 = new java.lang.String[] { "Unknown class name", "hi!", "(NUMBER 1.0)", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "JSDocInfo", "([PROTECTED])", "true", "NUMBER 1.0 [directives: [, hi!]]", "hi!", "hi!", "NUMBER 1.0\n", "(NUMBER 1.0)", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet57);
        java.util.Iterator<java.lang.String> strItor60 = strSet57.iterator();
        strSet57.clear();
        java.lang.Object[] objArray62 = strSet57.toArray();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
    }

    @Test
    public void test15936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15936");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("(NUMBER 1.0)");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        boolean boolean13 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test15937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15937");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0);
        boolean boolean46 = node45.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node45.getStaticSourceFile();
        boolean boolean48 = node45.isWhile();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean53 = node52.isAnd();
        boolean boolean54 = node52.isDebugger();
        boolean boolean55 = node52.isWhile();
        node52.setType((int) (byte) 0);
        com.google.javascript.rhino.Node node58 = node45.copyInformationFrom(node52);
        boolean boolean59 = strSet43.equals((java.lang.Object) node52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = strSet43.add("(NUMBER 10.0\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test15938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15938");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) '#', "NUMBER 1.0\n");
        node2.setLineno(4);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test15939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15939");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean50 = node49.isThis();
        node49.setSourceEncodedPositionForTree(0);
        boolean boolean53 = node49.hasOneChild();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFrom(node49);
        boolean boolean55 = node54.isSwitch();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        boolean boolean58 = node54.isAssign();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test15940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15940");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 8, (int) (short) 100);
    }

    @Test
    public void test15941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15941");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) '#', "[PROTECTED]", 8, 97);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean10 = node9.isDo();
        boolean boolean11 = node9.isBlock();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean16 = node15.isBreak();
        node15.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node19 = node15.cloneTree();
        com.google.javascript.rhino.Node node20 = node9.useSourceInfoIfMissingFromForTree(node15);
        node4.addChildToFront(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 12, 31, 48);
        boolean boolean26 = node25.isThrow();
        boolean boolean27 = node25.isNE();
        boolean boolean28 = node25.isWhile();
        com.google.javascript.rhino.Node node29 = node15.srcref(node25);
        int int30 = node15.getChildCount();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        java.lang.String str41 = node35.toString();
        node35.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean48 = node47.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) '#', node35, node47, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo54.getImplementedInterfaces();
        java.lang.String str56 = jSDocInfo54.getFileOverview();
        node53.setJSDocInfo(jSDocInfo54);
        int int58 = jSDocInfo54.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo54.getThisType();
        node15.setJSDocInfo(jSDocInfo54);
        boolean boolean61 = node15.isIf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 1.0" + "'", str41, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test15942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15942");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        boolean boolean15 = node14.isDo();
        java.util.Set<java.lang.String> strSet16 = node14.getDirectives();
        boolean boolean17 = node14.isString();
        node14.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node14.getAncestors();
        boolean boolean21 = node14.isNE();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        node26.removeProp((int) (short) 0);
        boolean boolean35 = node26.isObjectLit();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean40 = node39.isGetterDef();
        com.google.javascript.rhino.Node node41 = node26.useSourceInfoFromForTree(node39);
        boolean boolean42 = node39.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node39.getJsDocBuilderForNode();
        fileLevelJsDocBuilder43.append("Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        node14.putProp(35, (java.lang.Object) "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        node14.setIsSyntheticBlock(false);
        boolean boolean49 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = node14.cloneTree();
        com.google.javascript.rhino.Node node51 = node4.useSourceInfoFromForTree(node50);
        // The following exception was thrown during execution in test generation
        try {
            node51.setDouble((double) 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 3");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test15943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15943");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getAnnotation();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test15944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15944");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean11 = node10.isGetterDef();
        boolean boolean12 = node10.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', node17, node29, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.children();
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isBreak();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node47, node60, node65);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        node71.removeProp((int) (short) 0);
        boolean boolean80 = node71.isObjectLit();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean85 = node84.isGetterDef();
        com.google.javascript.rhino.Node node86 = node71.useSourceInfoFromForTree(node84);
        com.google.javascript.rhino.Node node87 = node67.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 100, node10, node35, node39, node67, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node91 = node35.detachFromParent();
        node91.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node94 = node4.useSourceInfoIfMissingFrom(node91);
        boolean boolean95 = node91.isCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node91.getJsDocBuilderForNode();
        int int97 = node91.getType();
        boolean boolean98 = node91.isGetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 35 + "'", int97 == 35);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test15945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15945");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isGetterDef();
        node3.putIntProp((int) (short) 100, 46);
        node3.setWasEmptyNode(true);
        java.lang.String str12 = node3.getQualifiedName();
        double double13 = node3.getDouble();
        node3.putIntProp((int) '#', 50);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test15946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15946");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node85 = node61.detachFromParent();
        boolean boolean86 = node61.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test15947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15947");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isWhile();
        com.google.javascript.rhino.Node node7 = node3.getLastSibling();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        boolean boolean12 = node9.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId14 = null;
        node9.setInputId(inputId14);
        java.lang.String str16 = node3.checkTreeEquals(node9);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node35.isBreak();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 1, node22, node26, node35, node45, 1, (-1));
        boolean boolean49 = node26.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        boolean boolean74 = node68.isBreak();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) 1, node55, node59, node68, node78, 1, (-1));
        java.lang.String str82 = node78.getQualifiedName();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean87 = node86.isAnd();
        node86.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str90 = node78.checkTreeEquals(node86);
        jSDocInfo50.setAssociatedNode(node78);
        com.google.javascript.rhino.Node node92 = node26.useSourceInfoIfMissingFrom(node78);
        typePosition17.setItem(node92);
        com.google.javascript.rhino.Node node94 = typePosition17.getItem();
        java.lang.String str95 = node3.checkTreeEquals(node94);
        boolean boolean96 = node94.isTypeOf();
        boolean boolean97 = node94.isWith();
        boolean boolean98 = node94.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n" + "'", str16, "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test15948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15948");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean25 = node24.isGetterDef();
        boolean boolean26 = node24.isThis();
        boolean boolean27 = node20.hasChild(node24);
        boolean boolean28 = node24.isThis();
        boolean boolean29 = node24.isInstanceOf();
        java.util.Set<java.lang.String> strSet30 = node24.getDirectives();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isObjectLit();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean48 = node47.isGetterDef();
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoFromForTree(node47);
        boolean boolean50 = node47.isAdd();
        boolean boolean51 = node47.isOr();
        boolean boolean52 = node47.isTry();
        com.google.javascript.rhino.InputId inputId53 = null;
        node47.setInputId(inputId53);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node47.new FileLevelJsDocBuilder();
        boolean boolean56 = node47.isTypeOf();
        boolean boolean57 = node47.isAssignAdd();
        com.google.javascript.rhino.Node node58 = node24.useSourceInfoIfMissingFrom(node47);
        boolean boolean59 = node58.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test15949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15949");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(50);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        int int6 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test15950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15950");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 0, 49);
    }

    @Test
    public void test15951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15951");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str5 = jSDocInfo0.getLicense();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test15952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15952");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test15953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15953");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test15954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15954");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15955");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean16 = node15.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15956");
        java.lang.String[] strArray1 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.lang.Object[] objArray5 = strSet2.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.of(strSet2, strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility15 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList17 = com.google.common.collect.ImmutableList.of(visibilityArray16);
        java.lang.String str18 = visibilityList17.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList19 = visibilityList17.reverse();
        boolean boolean20 = strSet11.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList17);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray22 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility21 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList23 = com.google.common.collect.ImmutableList.of(visibilityArray22);
        java.lang.String str24 = visibilityList23.toString();
        java.util.stream.Stream<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityStream25 = visibilityList23.parallelStream();
        java.util.stream.Stream<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityStream26 = visibilityList23.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        boolean boolean51 = node45.isBreak();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 1, node32, node36, node45, node55, 1, (-1));
        java.lang.String str59 = node55.getQualifiedName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean64 = node63.isAnd();
        node63.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str67 = node55.checkTreeEquals(node63);
        jSDocInfo27.setAssociatedNode(node55);
        boolean boolean69 = jSDocInfo27.hasFileOverview();
        boolean boolean70 = jSDocInfo27.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo27.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo27.getThrownTypes();
        java.util.Set<java.lang.String> strSet73 = jSDocInfo27.getSuppressions();
        boolean boolean74 = jSDocInfo27.shouldPreserveTry();
        boolean boolean75 = jSDocInfo27.isExport();
        boolean boolean76 = jSDocInfo27.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo27.getThisType();
        java.util.Collection<java.lang.String> strCollection78 = jSDocInfo27.getReferences();
        boolean boolean79 = jSDocInfo27.hasBaseType();
        int int80 = visibilityList23.lastIndexOf((java.lang.Object) boolean79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = visibilityList17.retainAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[JSDocInfo, hi!, true, NUMBER 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[JSDocInfo, hi!, true, NUMBER 1.0]");
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[PROTECTED]" + "'", str18, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray22);
        org.junit.Assert.assertNotNull(visibilityList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[PROTECTED]" + "'", str24, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityStream25);
        org.junit.Assert.assertNotNull(visibilityStream26);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertNull(strCollection78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test15957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15957");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("(hi!)");
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getModifies();
        int int15 = strSet14.size();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test15958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15958");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo23.getReferences();
        java.lang.String str33 = jSDocInfo23.toString();
        int int34 = jSDocInfo23.getParameterCount();
        boolean boolean35 = jSDocInfo23.isNoTypeCheck();
        java.lang.String str36 = jSDocInfo23.getBlockDescription();
        boolean boolean37 = jSDocInfo23.isIdGenerator();
        java.lang.String str38 = jSDocInfo23.getFileOverview();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSDocInfo" + "'", str33, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test15959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15959");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        boolean boolean6 = node3.isOr();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test15960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15960");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node4.isIf();
        boolean boolean32 = node4.isCatch();
        java.lang.String str36 = node4.toString(true, true, false);
        java.lang.String str40 = node4.toString(false, true, true);
        boolean boolean41 = node4.isDec();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR 100" + "'", str36, "OR 100");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR" + "'", str40, "OR");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15961");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str13 = node9.toString(false, false, true);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(61440, node9);
        // The following exception was thrown during execution in test generation
        try {
            node14.setDouble((double) 12325);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 61440");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
    }

    @Test
    public void test15962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15962");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray20 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[][] charSequenceArray21 = new java.lang.CharSequence[][] { charSequenceArray6, charSequenceArray13, charSequenceArray20 };
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[][] charSequenceArray43 = new java.lang.CharSequence[][] { charSequenceArray28, charSequenceArray35, charSequenceArray42 };
        java.lang.CharSequence[] charSequenceArray50 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray64 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[][] charSequenceArray65 = new java.lang.CharSequence[][] { charSequenceArray50, charSequenceArray57, charSequenceArray64 };
        java.lang.CharSequence[] charSequenceArray72 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray79 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[] charSequenceArray86 = new java.lang.CharSequence[] { "NUMBER 35.0 0", "(GETELEM Not declared as a constructor)", "((Not declared as a constructor))", "NUMBER 1.0 [source_file: NEW [PROTECTED] 0]\n", "(JSDocInfo)", "NUMBER 1.0 [directives: [, hi!]]" };
        java.lang.CharSequence[][] charSequenceArray87 = new java.lang.CharSequence[][] { charSequenceArray72, charSequenceArray79, charSequenceArray86 };
        java.lang.CharSequence[][][] charSequenceArray88 = new java.lang.CharSequence[][][] { charSequenceArray21, charSequenceArray43, charSequenceArray65, charSequenceArray87 };
        java.lang.CharSequence[][][][] charSequenceArray89 = new java.lang.CharSequence[][][][] { charSequenceArray88 };
        com.google.common.collect.ImmutableList<java.lang.CharSequence[][][]> charSequenceArrayList90 = com.google.common.collect.ImmutableList.copyOf(charSequenceArray89);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertNotNull(charSequenceArray20);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertNotNull(charSequenceArray43);
        org.junit.Assert.assertNotNull(charSequenceArray50);
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertNotNull(charSequenceArray64);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertNotNull(charSequenceArray72);
        org.junit.Assert.assertNotNull(charSequenceArray79);
        org.junit.Assert.assertNotNull(charSequenceArray86);
        org.junit.Assert.assertNotNull(charSequenceArray87);
        org.junit.Assert.assertNotNull(charSequenceArray88);
        org.junit.Assert.assertNotNull(charSequenceArray89);
        org.junit.Assert.assertNotNull(charSequenceArrayList90);
    }

    @Test
    public void test15963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        java.lang.String str6 = jSDocInfo0.getVersion();
        boolean boolean7 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15964");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue5.and(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.and(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.and(ternaryValue14);
        java.lang.String str16 = ternaryValue13.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue18.and(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue13.or(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue19.xor(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue11.xor(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue24.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue7.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue2.or(ternaryValue7);
        boolean boolean29 = ternaryValue27.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue32.and(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.and(ternaryValue37);
        java.lang.String str39 = ternaryValue36.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue41.and(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue36.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue42.xor(ternaryValue45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue34.xor(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue47.not();
        boolean boolean50 = ternaryValue47.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue30.or(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue51.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "true" + "'", str16, "true");
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "true" + "'", str39, "true");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
    }

    @Test
    public void test15965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15965");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(STRING true 1)", 8, 42);
        java.util.Set<java.lang.String> strSet4 = node3.getDirectives();
        int int5 = node3.getSideEffectFlags();
        boolean boolean6 = node3.isContinue();
        boolean boolean7 = node3.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15966");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node22.isDo();
        boolean boolean24 = node3.isEquivalentToTyped(node22);
        boolean boolean25 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test15967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15967");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo34.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo34.getEnumParameterType();
        java.lang.String str38 = jSDocInfo34.getDeprecationReason();
        java.lang.String str39 = jSDocInfo34.toString();
        boolean boolean40 = jSDocInfo34.isExterns();
        boolean boolean41 = strSet29.contains((java.lang.Object) jSDocInfo34);
        boolean boolean42 = jSDocInfo34.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo34.getBaseType();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo34.getModifies();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JSDocInfo" + "'", str39, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test15968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15968");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node4.isIf();
        java.lang.Object obj33 = node4.getProp(43);
        boolean boolean34 = node4.isNoSideEffectsCall();
        int int35 = node4.getType();
        boolean boolean36 = node4.isCall();
        boolean boolean37 = node4.isOr();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test15969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15969");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        int int2 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearAllFlags();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test15970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15970");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(0, 11, 52, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test15971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15971");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isFalse();
        double double11 = node8.getDouble();
        int int13 = node8.getIntProp((int) 'a');
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        boolean boolean37 = node31.isBreak();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, node18, node22, node31, node41, 1, (-1));
        java.lang.String str45 = node41.getQualifiedName();
        com.google.javascript.rhino.Node node46 = node41.detachFromParent();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        java.lang.Object obj57 = node50.getProp(10);
        boolean boolean58 = node50.isArrayLit();
        boolean boolean59 = node50.isAdd();
        int int60 = node50.getSideEffectFlags();
        boolean boolean61 = node50.isWith();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node8, node46, node50);
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        node62.removeProp(51);
        boolean boolean66 = node62.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = node62.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test15972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15972");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet67.spliterator();
        strSet67.clear();
        boolean boolean75 = strSet67.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test15973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15973");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        boolean boolean56 = node50.isBreak();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 1, node37, node41, node50, node60, 1, (-1));
        java.lang.String str64 = node60.getQualifiedName();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean69 = node68.isAnd();
        node68.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str72 = node60.checkTreeEquals(node68);
        jSDocInfo32.setAssociatedNode(node60);
        com.google.javascript.rhino.Node node74 = node8.useSourceInfoIfMissingFrom(node60);
        boolean boolean75 = node60.isNoSideEffectsCall();
        boolean boolean76 = node60.isFor();
        boolean boolean77 = node60.isName();
        boolean boolean78 = node60.isTrue();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test15974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test15975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15975");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean3 = node2.isReturn();
        boolean boolean4 = node2.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo5.getEnumParameterType();
        java.lang.String str9 = jSDocInfo5.getLicense();
        boolean boolean10 = jSDocInfo5.isExterns();
        boolean boolean11 = jSDocInfo5.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = jSDocInfo5.getTypeNodes();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        java.lang.String str27 = node21.toString();
        node21.removeProp((int) (short) 0);
        boolean boolean30 = node21.isObjectLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean35 = node34.isGetterDef();
        com.google.javascript.rhino.Node node36 = node21.useSourceInfoFromForTree(node34);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node36);
        com.google.javascript.rhino.Node node38 = node16.useSourceInfoFromForTree(node37);
        jSDocInfo5.setAssociatedNode(node37);
        boolean boolean40 = node2.isEquivalentToTyped(node37);
        boolean boolean41 = node2.isOr();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        boolean boolean51 = node49.isVar();
        double double52 = node49.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo53.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo53.getEnumParameterType();
        java.lang.String str57 = jSDocInfo53.getDescription();
        node49.setJSDocInfo(jSDocInfo53);
        boolean boolean59 = node49.isGetProp();
        node49.setLineno((int) (byte) 0);
        node2.addChildrenToBack(node49);
        node2.setLength(3);
        boolean boolean65 = node2.isThrow();
        boolean boolean66 = node2.isGetterDef();
        boolean boolean67 = node2.isString();
        int int68 = node2.getChildCount();
        boolean boolean69 = node2.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeCollection12);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0" + "'", str27, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15976");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean17 = node4.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags19.setAllFlags();
        node4.setSideEffectFlags(sideEffectFlags19);
        boolean boolean22 = node4.isNull();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test15977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15977");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        com.google.javascript.rhino.Node node28 = node1.removeChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node47.isBreak();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, node34, node38, node47, node57, 1, (-1));
        java.lang.String str61 = node57.getQualifiedName();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isAnd();
        node65.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str69 = node57.checkTreeEquals(node65);
        jSDocInfo29.setAssociatedNode(node57);
        java.util.Collection<java.lang.String> strCollection71 = jSDocInfo29.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo29.getParameterType("NUMBER 1.0");
        java.util.Set<java.lang.String> strSet74 = jSDocInfo29.getSuppressions();
        node1.setJSDocInfo(jSDocInfo29);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection76 = jSDocInfo29.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo29.getBaseType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(strCollection71);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(markerCollection76);
        org.junit.Assert.assertNull(jSTypeExpression77);
    }

    @Test
    public void test15978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15978");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(29, "NUMBER 1.0 [directives: [, hi!]]\n");
        boolean boolean3 = node2.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test15979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15979");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean9 = jSDocInfo0.isExpose();
        jSDocInfo0.setLicense("(NUMBER 1.0 [source_file: OR])");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15980");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray7, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) 'a', nodeArray7);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(50, nodeArray7, 53, 1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) 'a', nodeArray7, 51, 44);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(4095, nodeArray7, (int) (byte) 10, (int) (byte) 0);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(53, nodeArray7, 12325, 0);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(61537, nodeArray7, 4, (int) ' ');
        boolean boolean27 = node26.isNE();
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15981");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        boolean boolean26 = node24.isGetterDef();
        boolean boolean27 = node24.isLocalResultCall();
        java.util.Set<java.lang.String> strSet28 = node24.getDirectives();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        java.lang.String str39 = node33.toString();
        node33.removeProp((int) (short) 0);
        boolean boolean42 = node33.isObjectLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean47 = node46.isGetterDef();
        com.google.javascript.rhino.Node node48 = node33.useSourceInfoFromForTree(node46);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 1, node48);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(0);
        boolean boolean52 = node51.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node51.getStaticSourceFile();
        boolean boolean54 = node51.isWhile();
        int int55 = node48.getIndexOfChild(node51);
        int int56 = node51.getType();
        int int57 = node24.getIndexOfChild(node51);
        boolean boolean58 = node24.isIf();
        boolean boolean59 = node24.wasEmptyNode();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test15982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15982");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean6 = node5.isAnd();
        node5.setSourceFileForTesting("[PROTECTED]");
        node5.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFromForTree(node15);
        java.lang.Object obj18 = node5.getProp((int) (byte) 100);
        node5.setIsSyntheticBlock(false);
        boolean boolean21 = node5.isFor();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        java.lang.String str33 = node27.toString();
        int int34 = node23.getIndexOfChild(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node23.getJSDocInfo();
        int int36 = node23.getType();
        node23.putBooleanProp((int) (byte) -1, false);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str52 = node48.toString(false, false, true);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(44, node5, node23, node48);
        boolean boolean54 = node53.isDebugger();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node62.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node62.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node62.getStaticSourceFile();
        java.lang.String str67 = node62.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = node62.getJSDocInfo();
        java.lang.String str69 = node62.getQualifiedName();
        com.google.javascript.rhino.InputId inputId70 = null;
        node62.setInputId(inputId70);
        node62.setLineno(44);
        boolean boolean74 = node62.isDec();
        boolean boolean75 = node62.isInc();
        int int77 = node62.getIntProp((int) (short) 0);
        com.google.javascript.rhino.Node node78 = node62.cloneNode();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(4095, "true");
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(4, node53, node62, node81, 16, 36);
        node62.putBooleanProp(32, true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER 1.0" + "'", str33, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 40 + "'", int36 == 40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 1.0" + "'", str52, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(jSDocInfo68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test15983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15984");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getVersion();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str9 = jSDocInfo0.toString();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        boolean boolean12 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test15985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15985");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker4.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker4.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker8.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker12.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker12.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker12.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = marker16.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList21 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker8, marker12, marker16);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = marker16.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker16.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker16.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition19);
        org.junit.Assert.assertNull(typePosition20);
        org.junit.Assert.assertNotNull(markerList21);
        org.junit.Assert.assertNull(typePosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNull(stringPosition24);
    }

    @Test
    public void test15986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15986");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        node33.putIntProp(39, 53);
        boolean boolean88 = node33.hasOneChild();
        boolean boolean89 = node33.hasChildren();
        node33.removeProp(65589);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15987");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor3 = visibilityList2.iterator();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor4 = visibilityList2.listIterator();
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(visibilityItor3);
        org.junit.Assert.assertNotNull(visibilityItor4);
    }

    @Test
    public void test15988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15988");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node16.getJsDocBuilderForNode();
        boolean boolean21 = node16.isRegExp();
        com.google.javascript.rhino.Node node22 = node16.cloneTree();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        boolean boolean46 = node40.isBreak();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 1, node27, node31, node40, node50, 1, (-1));
        java.lang.String str54 = node50.getQualifiedName();
        boolean boolean55 = node50.isNull();
        boolean boolean56 = node16.hasChild(node50);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15989");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        node5.setOptionalArg(false);
        boolean boolean8 = node5.isTrue();
        int int9 = node5.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node5.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 409652 + "'", int9 == 409652);
    }

    @Test
    public void test15990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15990");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node16.getNext();
        boolean boolean27 = node16.isNE();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        java.lang.String str38 = node32.toString();
        node32.removeProp((int) (short) 0);
        boolean boolean41 = node32.isGetProp();
        com.google.javascript.rhino.Node node42 = node32.getNext();
        node16.putProp((int) (short) 1, (java.lang.Object) node32);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node32.getJsDocBuilderForNode();
        boolean boolean45 = node32.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test15991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15991");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test15992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15992");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        boolean boolean8 = node4.isThrow();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.isDebugger();
        node4.addChildrenToBack(node12);
        int int16 = node4.getType();
        com.google.javascript.rhino.Node node18 = node4.getAncestor(0);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(51, 53, 2);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean46 = node45.isBreak();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node27, node40, node45);
        java.util.Set<java.lang.String> strSet48 = node47.getDirectives();
        com.google.javascript.rhino.Node node49 = node47.getFirstChild();
        boolean boolean50 = node47.isArrayLit();
        boolean boolean51 = node47.isGetElem();
        boolean boolean52 = node47.isTry();
        com.google.javascript.rhino.Node node53 = node22.copyInformationFromForTree(node47);
        node22.setOptionalArg(false);
        com.google.javascript.rhino.Node node56 = node4.copyInformationFrom(node22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = node56.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test15993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15993");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 48, 45, 9);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test15994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15994");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node17.getStaticSourceFile();
        boolean boolean26 = node17.isContinue();
        boolean boolean27 = node17.isGetProp();
        com.google.javascript.rhino.Node node28 = node17.getParent();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean33 = node32.isThis();
        node32.setSourceEncodedPositionForTree(0);
        boolean boolean36 = node32.hasOneChild();
        java.lang.String str37 = node32.getQualifiedName();
        boolean boolean38 = node28.isEquivalentToTyped(node32);
        boolean boolean39 = node28.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test15995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15995");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        boolean boolean5 = node4.isDefaultCase();
        boolean boolean6 = node4.isWhile();
        boolean boolean7 = node4.isNot();
        boolean boolean8 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str13 = node12.toString();
        com.google.javascript.rhino.Node node14 = node12.cloneTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean17 = node14.isEquivalentToTyped(node16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(37, (int) (byte) 100, 30);
        node16.addChildrenToBack(node21);
        int int23 = node16.getChildCount();
        boolean boolean24 = node16.isReturn();
        int int25 = node4.getIndexOfChild(node16);
        boolean boolean26 = node4.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test15996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15996");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(4095, node7, node20, node25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object[] objArray34 = strSet31.toArray();
        boolean boolean35 = visibilityList2.contains((java.lang.Object) objArray34);
        boolean boolean37 = visibilityList2.equals((java.lang.Object) 43);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean43 = node42.isFalse();
        com.google.javascript.rhino.Node node44 = node42.cloneTree();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        boolean boolean68 = node62.isBreak();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 1, node49, node53, node62, node72, 1, (-1));
        java.lang.String str76 = node72.getQualifiedName();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean81 = node80.isAnd();
        node80.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str84 = node72.checkTreeEquals(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) ' ', node42, node80);
        int int86 = visibilityList2.lastIndexOf((java.lang.Object) node85);
        node85.setIsSyntheticBlock(false);
        boolean boolean89 = node85.isEmpty();
        boolean boolean90 = node85.isInc();
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test15997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15997");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node28.isDo();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        com.google.javascript.rhino.Node node31 = node17.clonePropsFrom(node28);
        java.lang.String str32 = node31.getSourceFileName();
        node31.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node31.new FileLevelJsDocBuilder();
        boolean boolean37 = node31.isContinue();
        node31.setLineno(29);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node56.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean64 = node63.isGetterDef();
        com.google.javascript.rhino.Node node65 = node56.useSourceInfoFrom(node63);
        com.google.javascript.rhino.InputId inputId66 = node56.getInputId();
        int int68 = node56.getIntProp(41);
        boolean boolean69 = node56.isNew();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(49, node31, node56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node31.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(inputId66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
    }

    @Test
    public void test15998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15998");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("JSDocInfo");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(4095, node7, node20, node25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet31);
        int int34 = node7.getCharno();
        java.lang.String str35 = node7.getQualifiedName();
        boolean boolean36 = node7.isFromExterns();
        boolean boolean37 = node7.isIf();
        boolean boolean38 = node7.isIn();
        java.lang.Object obj40 = node7.getProp(100);
        com.google.javascript.rhino.Node node41 = node2.useSourceInfoFromForTree(node7);
        boolean boolean42 = node41.isInc();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        java.lang.String str52 = node46.toString();
        node46.removeProp((int) (short) 0);
        boolean boolean55 = node46.isObjectLit();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean60 = node59.isGetterDef();
        com.google.javascript.rhino.Node node61 = node46.useSourceInfoFromForTree(node59);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId64 = null;
        node63.setInputId(inputId64);
        boolean boolean66 = node63.isReturn();
        com.google.javascript.rhino.InputId inputId67 = node63.getInputId();
        boolean boolean68 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFrom(node63);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean74 = node73.isAnd();
        node73.setSourceFileForTesting("[PROTECTED]");
        node73.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node84 = node73.useSourceInfoFromForTree(node83);
        com.google.javascript.rhino.InputId inputId85 = node73.getInputId();
        int int86 = node73.getChildCount();
        boolean boolean87 = node73.isParamList();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(397316, node41, node69, node73);
        node88.setOptionalArg(true);
        boolean boolean91 = node88.isLabel();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 1.0" + "'", str52, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(inputId85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test15999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test15999");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        boolean boolean9 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test16000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest31.test16000");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        node5.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean18 = node17.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) '#', node5, node17, 0, (int) (short) 0);
        namePosition0.setItem(node5);
        boolean boolean25 = node5.isRegExp();
        java.lang.Object obj27 = node5.getProp(50);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj27);
    }
}


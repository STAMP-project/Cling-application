import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        boolean boolean30 = jSDocInfo23.isExpose();
        com.google.javascript.rhino.Node node31 = jSDocInfo23.getAssociatedNode();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo23.getSuppressions();
        boolean boolean33 = jSDocInfo23.shouldPreserveTry();
        boolean boolean35 = jSDocInfo23.hasParameterType("Unknown class name");
        boolean boolean36 = jSDocInfo23.isDeprecated();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node30.isStringKey();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        boolean boolean55 = node49.isBreak();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 1, node36, node40, node49, node59, 1, (-1));
        boolean boolean63 = node62.isWith();
        boolean boolean64 = node62.isNot();
        com.google.javascript.rhino.Node node65 = node30.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean66 = node30.isQualifiedName();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        boolean boolean37 = node14.isInstanceOf();
        boolean boolean38 = node14.isCase();
        int int39 = node14.getLineno();
        int int40 = node14.getType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node14.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoFrom(node14);
        boolean boolean48 = node47.isIf();
        com.google.javascript.rhino.Node node49 = node47.cloneNode();
        boolean boolean50 = node49.isVarArgs();
        int int51 = node49.getCharno();
        node49.detachChildren();
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(39, nodeArray1, 24, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        node5.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean18 = node17.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) '#', node5, node17, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo24.getImplementedInterfaces();
        java.lang.String str26 = jSDocInfo24.getFileOverview();
        node23.setJSDocInfo(jSDocInfo24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        java.lang.String str37 = node31.toString();
        node31.removeProp((int) (short) 0);
        boolean boolean40 = node31.isObjectLit();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean45 = node44.isGetterDef();
        com.google.javascript.rhino.Node node46 = node31.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        boolean boolean56 = node55.isDo();
        java.util.Set<java.lang.String> strSet57 = node55.getDirectives();
        com.google.javascript.rhino.Node node58 = node44.clonePropsFrom(node55);
        java.lang.String str59 = node58.getSourceFileName();
        node58.putBooleanProp((int) (byte) 0, true);
        java.lang.String str63 = node58.getSourceFileName();
        node23.addChildrenToFront(node58);
        boolean boolean65 = node58.isSyntheticBlock();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node69.children();
        node69.setWasEmptyNode(false);
        boolean boolean73 = node69.isDec();
        java.lang.String str74 = node69.getSourceFileName();
        node69.detachChildren();
        int int76 = node69.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node69.getJSDocInfo();
        boolean boolean78 = node69.isThrow();
        node69.removeProp((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(11, node58, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 1.0" + "'", str37, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        boolean boolean23 = node22.wasEmptyNode();
        node22.setLineno((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node22.getJSDocInfo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSDocInfo26);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        boolean boolean77 = node76.isEmpty();
        boolean boolean78 = strSet67.remove((java.lang.Object) node76);
        int int79 = node76.getType();
        int int80 = node76.getCharno();
        node76.setWasEmptyNode(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = node76.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 54 + "'", int79 == 54);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isAssignAdd();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        boolean boolean21 = node20.isDo();
        java.util.Set<java.lang.String> strSet22 = node20.getDirectives();
        boolean boolean23 = node20.isString();
        node20.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node20.getAncestors();
        boolean boolean27 = node20.isNE();
        boolean boolean28 = node20.isGetterDef();
        int int29 = node20.getType();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFrom(node20);
        boolean boolean31 = node8.isThrow();
        boolean boolean32 = node8.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 39 + "'", int29 == 39);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        boolean boolean3 = jSDocInfo0.isOverride();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        java.lang.String str6 = jSDocInfo0.getLicense();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isDebugger();
        boolean boolean12 = node8.isHook();
        node8.addSuppression("Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n");
        boolean boolean15 = node8.isThrow();
        int int17 = node8.getIntProp((int) (short) 0);
        boolean boolean18 = node8.isThrow();
        int int19 = node8.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.addSuppression("STRING BITXOR 45");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean3 = node2.isParamList();
        boolean boolean4 = node2.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node2.children();
        boolean boolean6 = node2.isFromExterns();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node10.children();
        java.util.Set<java.lang.String> strSet12 = node10.getDirectives();
        int int13 = node10.getLength();
        boolean boolean14 = node10.isCatch();
        com.google.javascript.rhino.InputId inputId15 = node10.getInputId();
        com.google.javascript.rhino.Node node16 = node2.useSourceInfoFrom(node10);
        boolean boolean17 = node2.isOr();
        boolean boolean18 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(61440, node2, (int) (byte) -1, 32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node2.setStaticSourceFile(staticSourceFile22);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Named type with empty name component", 38, 46);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 35);
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(42, node4, node6);
        boolean boolean9 = node8.isCall();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        boolean boolean19 = node18.isDo();
        java.util.Set<java.lang.String> strSet20 = node18.getDirectives();
        boolean boolean21 = node18.isString();
        node18.setWasEmptyNode(false);
        boolean boolean24 = node18.isObjectLit();
        boolean boolean25 = node18.isCall();
        boolean boolean26 = node18.isNE();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node18.getJSDocInfo();
        boolean boolean28 = node8.isEquivalentTo(node18);
        boolean boolean29 = node18.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = node3.getJSDocInfo();
        org.junit.Assert.assertNull(jSDocInfo4);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isFalse();
        boolean boolean7 = node4.wasEmptyNode();
        boolean boolean8 = node4.isFalse();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node4.setJSType(jSType9);
        boolean boolean11 = node4.isGetterDef();
        int int12 = node4.getSourcePosition();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean11 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean37 = node36.isFalse();
        java.lang.String str38 = node36.getSourceFileName();
        boolean boolean39 = node36.isLabel();
        node5.putProp(1, (java.lang.Object) node36);
        node5.detachChildren();
        node5.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node5.useSourceInfoFrom(node52);
        double double60 = node52.getDouble();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean64 = node63.isAssign();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        boolean boolean75 = node74.isDo();
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        boolean boolean77 = node74.isString();
        node74.setWasEmptyNode(false);
        boolean boolean80 = node74.isObjectLit();
        boolean boolean81 = node74.isParamList();
        boolean boolean82 = node74.hasOneChild();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(38, node74, (int) (byte) -1, 0);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(32, node52, node63, node85, 16, 53);
        boolean boolean89 = node63.isIf();
        boolean boolean90 = node63.isString();
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString(43, "true");
        com.google.javascript.rhino.InputId inputId94 = null;
        node93.setInputId(inputId94);
        boolean boolean96 = node93.isTypeOf();
        com.google.javascript.rhino.Node node97 = node63.useSourceInfoFromForTree(node93);
        boolean boolean98 = node97.isNull();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(7, nodeArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)", (int) (short) 0, 45);
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        boolean boolean14 = node8.isBreak();
        boolean boolean15 = node8.isHook();
        node3.addChildrenToBack(node8);
        boolean boolean17 = node8.isCall();
        com.google.javascript.rhino.jstype.JSType jSType18 = node8.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType18);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.hasMoreThanOneChild();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node7.isLabel();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(4095, node13, node26, node31);
        boolean boolean34 = node13.isSyntheticBlock();
        boolean boolean35 = node13.isScript();
        node13.setSourceEncodedPositionForTree((int) (short) 1);
        com.google.javascript.rhino.Node node39 = node13.getAncestor(36);
        boolean boolean40 = node13.isTrue();
        com.google.javascript.rhino.Node node41 = node7.copyInformationFromForTree(node13);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags42 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags42.setThrows();
        boolean boolean44 = sideEffectFlags42.areAllFlagsSet();
        sideEffectFlags42.clearAllFlags();
        sideEffectFlags42.clearSideEffectFlags();
        sideEffectFlags42.setMutatesArguments();
        sideEffectFlags42.setThrows();
        sideEffectFlags42.clearAllFlags();
        sideEffectFlags42.clearSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node41.setSideEffectFlags(sideEffectFlags42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean22 = node21.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', node9, node21, 0, (int) (short) 0);
        namePosition4.setItem(node9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition29 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int30 = namePosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int32 = namePosition31.getPositionOnStartLine();
        int int33 = namePosition31.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition2, namePosition4, namePosition29, namePosition31);
        // The following exception was thrown during execution in test generation
        try {
            namePosition0.setPositionInformation(44, 100, 31, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 44?end-line: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(namePositionList34);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isQuotedString();
        int int12 = node3.getChildCount();
        boolean boolean13 = node3.isAnd();
        boolean boolean14 = node3.isCall();
        boolean boolean15 = node3.isTry();
        boolean boolean16 = node3.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node9.isDo();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        boolean boolean12 = node9.isString();
        node9.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node9.getAncestors();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(31, node9);
        node9.setSourceEncodedPositionForTree(54);
        boolean boolean19 = node9.isSetterDef();
        boolean boolean20 = node9.isUnscopedQualifiedName();
        boolean boolean21 = node9.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 12, 31, 48);
        boolean boolean4 = node3.isDefaultCase();
        boolean boolean5 = node3.isLabel();
        boolean boolean6 = node3.isIf();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node7.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        boolean boolean11 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        java.lang.String str19 = node13.toString();
        node13.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) '#', node13, node25, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node32 = node5.useSourceInfoFromForTree(node25);
        int int34 = node25.getIntProp(13);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 1.0" + "'", str19, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        java.lang.String str3 = jSDocInfo0.getLicense();
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        boolean boolean15 = node13.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node13.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        java.lang.String str18 = node13.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node13.getJSDocInfo();
        java.lang.String str20 = node13.getQualifiedName();
        boolean boolean21 = node13.isSetterDef();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node30.isDo();
        java.util.Set<java.lang.String> strSet32 = node30.getDirectives();
        boolean boolean33 = node30.isString();
        node30.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node30.getAncestors();
        com.google.javascript.rhino.Node node37 = node13.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        boolean boolean48 = node46.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node46.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean55 = node54.isAnd();
        boolean boolean56 = node54.isBreak();
        boolean boolean57 = node54.isName();
        boolean boolean58 = node54.isRegExp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(53, node46, node54, node60, 0, 29);
        com.google.javascript.rhino.Node node64 = node13.clonePropsFrom(node63);
        jSDocInfo0.setAssociatedNode(node63);
        jSDocInfo0.addSuppression("(BITXOR 45)");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        typePosition0.setPositionInformation(12, (int) (short) 10, 30, 1);
        typePosition0.setPositionInformation(40, 39, (int) (byte) 100, 54);
        int int39 = typePosition0.getStartLine();
        int int40 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 40 + "'", int39 == 40);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 41, 44, 54);
        boolean boolean4 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable6 = node4.getAncestors();
        com.google.javascript.rhino.Node node7 = node4.removeFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        boolean boolean12 = node9.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.getJsDocBuilderForNode();
        int int15 = node9.getIntProp(37);
        boolean boolean16 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node9.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node18 = node4.useSourceInfoFromForTree(node9);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        java.lang.String str29 = node23.toString();
        node23.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean36 = node35.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) '#', node23, node35, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo42.getImplementedInterfaces();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        node41.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        java.lang.String str55 = node49.toString();
        node49.removeProp((int) (short) 0);
        boolean boolean58 = node49.isObjectLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean63 = node62.isGetterDef();
        com.google.javascript.rhino.Node node64 = node49.useSourceInfoFromForTree(node62);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        boolean boolean74 = node73.isDo();
        java.util.Set<java.lang.String> strSet75 = node73.getDirectives();
        com.google.javascript.rhino.Node node76 = node62.clonePropsFrom(node73);
        java.lang.String str77 = node76.getSourceFileName();
        node76.putBooleanProp((int) (byte) 0, true);
        java.lang.String str81 = node76.getSourceFileName();
        node41.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node83 = node18.copyInformationFromForTree(node76);
        // The following exception was thrown during execution in test generation
        try {
            node18.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 3");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 1.0" + "'", str29, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER 1.0" + "'", str55, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isComma();
        node33.removeProp((int) (short) 10);
        boolean boolean41 = node33.isLabelName();
        int int42 = node33.getChildCount();
        boolean boolean43 = node33.isCatch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        java.lang.String str53 = node47.toString();
        node47.removeProp((int) (short) 0);
        boolean boolean56 = node47.isObjectLit();
        boolean boolean57 = node47.isName();
        com.google.javascript.rhino.Node node58 = node33.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node47.setJSType(jSType59);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER 1.0" + "'", str53, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(397316);
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.isOverride();
        boolean boolean30 = jSDocInfo23.isImplicitCast();
        boolean boolean31 = jSDocInfo23.isNoShadow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) ' ');
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.isHidden();
        boolean boolean12 = jSDocInfo0.hasType();
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("BITXOR 45");
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        boolean boolean15 = node3.isNew();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean39 = node38.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4095, node20, node33, node38);
        com.google.javascript.rhino.InputId inputId41 = null;
        node38.setInputId(inputId41);
        boolean boolean43 = node38.isTrue();
        boolean boolean44 = node38.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable45 = node38.getAncestors();
        boolean boolean46 = node38.isSyntheticBlock();
        node38.setSourceFileForTesting("STRING hi! 97\n");
        node38.setSourceEncodedPositionForTree(0);
        com.google.javascript.rhino.Node node51 = node38.getNext();
        boolean boolean52 = node38.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node53 = node3.clonePropsFrom(node38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(ancestorIterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        java.lang.String[] strArray1 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.lang.Object[] objArray5 = strSet2.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.of(strSet2, strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility15 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList17 = com.google.common.collect.ImmutableList.of(visibilityArray16);
        java.lang.String str18 = visibilityList17.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList19 = visibilityList17.reverse();
        boolean boolean20 = strSet11.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList17);
        java.lang.Object[] objArray21 = strSet11.toArray();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[JSDocInfo, hi!, true, NUMBER 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[JSDocInfo, hi!, true, NUMBER 1.0]");
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[PROTECTED]" + "'", str18, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[JSDocInfo, hi!, true, NUMBER 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[JSDocInfo, hi!, true, NUMBER 1.0]");
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getEndLine();
        int int12 = stringPosition0.getEndLine();
        int int13 = stringPosition0.getEndLine();
        java.lang.String str14 = stringPosition0.getItem();
        int int15 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        node3.setSourceEncodedPositionForTree(0);
        boolean boolean7 = node3.isLabel();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        boolean boolean39 = node12.isCall();
        boolean boolean40 = node12.isAnd();
        boolean boolean41 = node12.isObjectLit();
        boolean boolean42 = node12.isComma();
        int int43 = node3.getIndexOfChild(node12);
        boolean boolean44 = node12.isGetProp();
        com.google.javascript.rhino.Node node46 = node12.getAncestor(0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)");
        com.google.javascript.rhino.Node node7 = node6.getFirstChild();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node21.getJSDocInfo();
        boolean boolean23 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node24 = node12.useSourceInfoFromForTree(node21);
        boolean boolean25 = node12.isVarArgs();
        node12.setOptionalArg(true);
        boolean boolean28 = node12.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(51, node6, node12);
        com.google.javascript.rhino.Node node30 = node3.clonePropsFrom(node29);
        boolean boolean31 = node30.isContinue();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        java.lang.String str5 = jSDocInfo0.toString();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.isConstructor();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isDebugger();
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isContinue();
        boolean boolean34 = node27.isNot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = node27.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "true");
        node2.removeProp(0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable5 = node2.getAncestors();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean11 = node10.isDo();
        boolean boolean12 = node10.isInstanceOf();
        boolean boolean13 = node10.isFor();
        com.google.javascript.rhino.Node node14 = node10.getLastChild();
        boolean boolean15 = node10.isTrue();
        node10.addSuppression("[PROTECTED]");
        boolean boolean18 = node10.isInc();
        node2.addChildToFront(node10);
        boolean boolean20 = node2.isScript();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(48);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node26.children();
        boolean boolean28 = node26.isBreak();
        com.google.javascript.rhino.Node node29 = node22.useSourceInfoFrom(node26);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean34 = node33.isThis();
        boolean boolean35 = node33.isUnscopedQualifiedName();
        int int36 = node33.getLineno();
        boolean boolean37 = node33.isOnlyModifiesThisCall();
        node26.addChildrenToBack(node33);
        com.google.javascript.rhino.Node node39 = node2.srcrefTree(node26);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(ancestorIterable5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("hi!");
        stringPosition0.setPositionInformation(4, 37, 45, 100);
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getStartLine();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        boolean boolean8 = node3.isIn();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        java.lang.String str20 = node14.toString();
        int int21 = node10.getIndexOfChild(node14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node10.getJSDocInfo();
        int int23 = node10.getType();
        node10.setLineno(15);
        java.lang.String str26 = node3.checkTreeEquals(node10);
        int int27 = node10.getSourcePosition();
        boolean boolean28 = node10.isEmpty();
        com.google.javascript.rhino.Node node29 = node10.cloneTree();
        int int30 = node29.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER 1.0" + "'", str20, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n" + "'", str26, "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 61440 + "'", int27 == 61440);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node39.isVar();
        double double42 = node39.getDouble();
        boolean boolean43 = node39.isParamList();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean47 = node46.isDec();
        node46.setOptionalArg(false);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(53, node31, node39, node46, 0, (int) (short) -1);
        boolean boolean53 = node31.isNew();
        com.google.javascript.rhino.InputId inputId54 = null;
        node31.setInputId(inputId54);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean37 = node36.isFalse();
        java.lang.String str38 = node36.getSourceFileName();
        boolean boolean39 = node36.isLabel();
        node5.putProp(1, (java.lang.Object) node36);
        node5.detachChildren();
        node5.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node5.useSourceInfoFrom(node52);
        double double60 = node52.getDouble();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean64 = node63.isAssign();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        boolean boolean75 = node74.isDo();
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        boolean boolean77 = node74.isString();
        node74.setWasEmptyNode(false);
        boolean boolean80 = node74.isObjectLit();
        boolean boolean81 = node74.isParamList();
        boolean boolean82 = node74.hasOneChild();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(38, node74, (int) (byte) -1, 0);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(32, node52, node63, node85, 16, 53);
        boolean boolean89 = node63.isIf();
        boolean boolean90 = node63.isString();
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString(43, "true");
        com.google.javascript.rhino.InputId inputId94 = null;
        node93.setInputId(inputId94);
        boolean boolean96 = node93.isTypeOf();
        com.google.javascript.rhino.Node node97 = node63.useSourceInfoFromForTree(node93);
        boolean boolean98 = node97.isDefaultCase();
        boolean boolean99 = node97.isRegExp();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray5, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) 'a', nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50, nodeArray5, 53, 1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(50, nodeArray5);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray5, 409652, 13);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, 52, 61440);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        boolean boolean18 = sideEffectFlags13.areAllFlagsSet();
        sideEffectFlags13.setReturnsTainted();
        sideEffectFlags13.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        boolean boolean12 = node9.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId14 = null;
        node9.setInputId(inputId14);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        boolean boolean25 = node23.isVar();
        double double26 = node23.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo27.getEnumParameterType();
        java.lang.String str31 = jSDocInfo27.getDescription();
        node23.setJSDocInfo(jSDocInfo27);
        node9.addChildrenToBack(node23);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        java.lang.String str48 = node42.toString();
        node42.removeProp((int) (short) 0);
        boolean boolean51 = node42.isObjectLit();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean56 = node55.isGetterDef();
        com.google.javascript.rhino.Node node57 = node42.useSourceInfoFromForTree(node55);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 1, node57);
        com.google.javascript.rhino.Node node59 = node37.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        boolean boolean69 = node68.isDo();
        java.util.Set<java.lang.String> strSet70 = node68.getDirectives();
        boolean boolean71 = node68.isString();
        node68.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable74 = node68.getAncestors();
        com.google.javascript.rhino.Node node75 = node58.srcrefTree(node68);
        com.google.javascript.rhino.Node node76 = node9.srcref(node68);
        boolean boolean77 = node68.wasEmptyNode();
        boolean boolean78 = node68.isNE();
        boolean boolean79 = strSet7.equals((java.lang.Object) node68);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 1.0" + "'", str48, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(ancestorIterable74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue5.and(ternaryValue6);
        java.lang.String str8 = ternaryValue5.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue5.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue11.xor(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue3.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue16.and(ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue20.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.and(ternaryValue25);
        java.lang.String str27 = ternaryValue24.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue29.and(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue24.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue30.xor(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue22.xor(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue18.or(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue38.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue42.and(ternaryValue43);
        java.lang.String str45 = ternaryValue42.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue47.and(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue42.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue48.xor(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue40.xor(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue55.and(ternaryValue56);
        java.lang.String str58 = ternaryValue55.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue60.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue55.or(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue61.xor(ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue67.and(ternaryValue68);
        java.lang.String str70 = ternaryValue67.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue72.and(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue67.or(ternaryValue73);
        boolean boolean77 = ternaryValue75.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue61.or(ternaryValue75);
        boolean boolean80 = ternaryValue61.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue40.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = ternaryValue36.and(ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = ternaryValue84.and(ternaryValue85);
        java.lang.String str87 = ternaryValue84.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = ternaryValue89.and(ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = ternaryValue84.or(ternaryValue90);
        java.lang.String str93 = ternaryValue90.toString();
        boolean boolean95 = ternaryValue90.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue96 = ternaryValue82.or(ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue97 = ternaryValue82.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "true" + "'", str27, "true");
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "true" + "'", str45, "true");
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "true" + "'", str58, "true");
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "true" + "'", str70, "true");
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "true" + "'", str87, "true");
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "true" + "'", str93, "true");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(ternaryValue96);
        org.junit.Assert.assertNotNull(ternaryValue97);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isNot();
        node27.putBooleanProp(0, false);
        node27.setSourceFileForTesting("(STRING \n)");
        boolean boolean37 = node27.isHook();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node27.setJSType(jSType38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nIN Not declared as a constructor\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: IN Not declared as a constructor\n");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nIN Not declared as a constructor\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: IN Not declared as a constructor\n)" + "'", str1, "(Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nIN Not declared as a constructor\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: IN Not declared as a constructor\n)");
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isDebugger();
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isSetterDef();
        boolean boolean34 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        int int37 = node27.getIndexOfChild(node36);
        java.lang.Object obj39 = node36.getProp(31);
        java.lang.String str40 = node36.getSourceFileName();
        boolean boolean41 = node36.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(4095, node7, node20, node25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object[] objArray34 = strSet31.toArray();
        boolean boolean35 = visibilityList2.contains((java.lang.Object) objArray34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str37 = jSDocInfo36.getDescription();
        boolean boolean38 = jSDocInfo36.isInterface();
        jSDocInfo36.setDeprecated(true);
        boolean boolean41 = visibilityList2.equals((java.lang.Object) jSDocInfo36);
        boolean boolean42 = jSDocInfo36.isExport();
        java.lang.String str43 = jSDocInfo36.getOriginalCommentString();
        boolean boolean44 = jSDocInfo36.isInterface();
        java.lang.String str45 = jSDocInfo36.getDescription();
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isComma();
        boolean boolean39 = node33.isThis();
        boolean boolean40 = node33.isGetterDef();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean44 = node43.isReturn();
        boolean boolean45 = node43.hasOneChild();
        node33.addChildToFront(node43);
        java.lang.String str47 = node43.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 10);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.lang.String str46 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo0.getParameterType("Unknown class name");
        boolean boolean49 = jSDocInfo0.hasFileOverview();
        java.lang.String str50 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        java.lang.String str2 = stringPosition0.getItem();
        stringPosition0.setItem("Unknown class name");
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 35.0 0");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isQuotedString();
        int int12 = node3.getChildCount();
        boolean boolean13 = node3.isHook();
        boolean boolean14 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean50 = node49.isThis();
        node49.setSourceEncodedPositionForTree(0);
        boolean boolean53 = node49.hasOneChild();
        com.google.javascript.rhino.Node node54 = node4.useSourceInfoFrom(node49);
        boolean boolean55 = node54.isEmpty();
        com.google.javascript.rhino.Node node56 = node54.detachFromParent();
        boolean boolean57 = node56.isThrow();
        boolean boolean58 = node56.isString();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", (int) (short) 1, 50);
        node56.addChildToBack(node62);
        com.google.javascript.rhino.Node node64 = node56.getFirstChild();
        boolean boolean65 = node64.isTry();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        boolean boolean6 = node4.isFor();
        boolean boolean7 = node4.isBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("hi!");
        stringPosition0.setPositionInformation(4, 37, 45, 100);
        stringPosition0.setItem("Not declared as a type name");
        java.lang.String str10 = stringPosition0.getItem();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Not declared as a type name" + "'", str10, "Not declared as a type name");
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nSTRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nTYPEOF\n\n\nSubtree1: STRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: TYPEOF\n", 221184, (int) (byte) 10);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        java.lang.String str5 = jSDocInfo0.toString();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        stringPosition2.setPositionInformation(38, 49, 43, (int) (short) 10);
        java.lang.String str61 = stringPosition2.getItem();
        stringPosition2.setItem("STRING hi! 97");
        int int64 = stringPosition2.getPositionOnStartLine();
        int int65 = stringPosition2.getStartLine();
        int int66 = stringPosition2.getStartLine();
        stringPosition2.setPositionInformation(12, 36, 16, 44);
        java.lang.String str72 = stringPosition2.getItem();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition2.setPositionInformation(51, 2, 29, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 51?end-line: 29");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 49 + "'", int64 == 49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 38 + "'", int65 == 38);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 38 + "'", int66 == 38);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING hi! 97" + "'", str72, "STRING hi! 97");
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.String str46 = node40.toString();
        node40.removeProp((int) (short) 0);
        boolean boolean49 = node40.isObjectLit();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean54 = node53.isGetterDef();
        com.google.javascript.rhino.Node node55 = node40.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node64.isDo();
        java.util.Set<java.lang.String> strSet66 = node64.getDirectives();
        com.google.javascript.rhino.Node node67 = node53.clonePropsFrom(node64);
        boolean boolean68 = node67.isCase();
        java.lang.String str69 = node36.checkTreeEquals(node67);
        boolean boolean70 = node67.isNot();
        boolean boolean71 = node67.isGetProp();
        boolean boolean72 = node67.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        boolean boolean5 = node4.isDefaultCase();
        boolean boolean6 = node4.isWhile();
        boolean boolean7 = node4.isNot();
        boolean boolean8 = node4.isFor();
        boolean boolean9 = node4.isHook();
        node4.setString("OR\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0\n    NUMBER 1.0\n", 4095, 37);
        boolean boolean4 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("NUMBER 1.0\n");
        java.lang.String str7 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(15, (int) (short) 0, 65589, 30);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NUMBER 1.0\n" + "'", str7, "NUMBER 1.0\n");
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(7, "NUMBER 0.0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("GETELEM 0");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean8 = node7.isVar();
        boolean boolean9 = node7.isString();
        int int10 = node7.getLength();
        com.google.javascript.rhino.Node node11 = node7.getLastChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        boolean boolean21 = node20.isDo();
        java.util.Set<java.lang.String> strSet22 = node20.getDirectives();
        boolean boolean23 = node20.isString();
        boolean boolean24 = node20.isAssignAdd();
        boolean boolean25 = node20.isLocalResultCall();
        boolean boolean26 = node7.isEquivalentTo(node20);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        java.lang.String str41 = node35.toString();
        node35.removeProp((int) (short) 0);
        boolean boolean44 = node35.isObjectLit();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean49 = node48.isGetterDef();
        com.google.javascript.rhino.Node node50 = node35.useSourceInfoFromForTree(node48);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 1, node50);
        com.google.javascript.rhino.Node node52 = node30.useSourceInfoFromForTree(node51);
        boolean boolean53 = node51.isGetterDef();
        int int54 = node51.getCharno();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node58.children();
        node58.setWasEmptyNode(false);
        boolean boolean62 = node58.isDec();
        com.google.javascript.rhino.Node node63 = node58.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(0, node2, node20, node51, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 1.0" + "'", str41, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        com.google.javascript.rhino.Node node15 = node13.removeChildren();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node19.children();
        java.util.Set<java.lang.String> strSet21 = node19.getDirectives();
        node13.addChildrenToBack(node19);
        node19.setSourceFileForTesting("STRING hi! 97");
        boolean boolean25 = node19.isAdd();
        boolean boolean26 = node19.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node4.isIf();
        java.lang.Object obj33 = node4.getProp(43);
        boolean boolean34 = node4.isComma();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo35.getEnumParameterType();
        java.lang.String str39 = jSDocInfo35.getDeprecationReason();
        boolean boolean40 = jSDocInfo35.hasBaseType();
        java.lang.String str41 = jSDocInfo35.getBlockDescription();
        jSDocInfo35.setDeprecated(false);
        java.lang.String str44 = jSDocInfo35.getBlockDescription();
        boolean boolean45 = jSDocInfo35.isNoCompile();
        boolean boolean46 = jSDocInfo35.isNoShadow();
        node4.setJSDocInfo(jSDocInfo35);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isFromExterns();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node4.children();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING NUMBER 1.0 [directives: [, hi!]]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING NUMBER 1.0 [directives: [, hi!]]\n");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(1, node37, 44, 16);
        com.google.javascript.rhino.Node node41 = node4.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str46 = node45.toString();
        com.google.javascript.rhino.Node node47 = node45.cloneTree();
        com.google.javascript.rhino.Node node48 = node45.getLastSibling();
        boolean boolean49 = node48.isOptionalArg();
        com.google.javascript.rhino.InputId inputId50 = node48.getInputId();
        boolean boolean51 = node48.isExprResult();
        boolean boolean52 = node41.hasChild(node48);
        java.lang.String str53 = node41.toString();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        node41.setStaticSourceFile(staticSourceFile54);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str53, "NUMBER 1.0 [directives: [, hi!]]");
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getModifies();
        boolean boolean44 = jSDocInfo0.hasModifies();
        jSDocInfo0.setLicense("(STRING \n)");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getVersion();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList3 = com.google.common.collect.ImmutableList.of(marker0);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNotNull(markerList3);
        org.junit.Assert.assertNull(stringPosition4);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        java.lang.String str3 = jSDocInfo0.getLicense();
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        boolean boolean15 = node13.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node13.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        java.lang.String str18 = node13.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node13.getJSDocInfo();
        java.lang.String str20 = node13.getQualifiedName();
        boolean boolean21 = node13.isSetterDef();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node30.isDo();
        java.util.Set<java.lang.String> strSet32 = node30.getDirectives();
        boolean boolean33 = node30.isString();
        node30.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable36 = node30.getAncestors();
        com.google.javascript.rhino.Node node37 = node13.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        boolean boolean48 = node46.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node46.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = node46.getStaticSourceFile();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean55 = node54.isAnd();
        boolean boolean56 = node54.isBreak();
        boolean boolean57 = node54.isName();
        boolean boolean58 = node54.isRegExp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(53, node46, node54, node60, 0, 29);
        com.google.javascript.rhino.Node node64 = node13.clonePropsFrom(node63);
        jSDocInfo0.setAssociatedNode(node63);
        boolean boolean66 = node63.isEmpty();
        boolean boolean67 = node63.isComma();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertNull(staticSourceFile50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        boolean boolean4 = node1.isAssignAdd();
        boolean boolean5 = node1.isDo();
        node1.detachChildren();
        boolean boolean7 = node1.isQualifiedName();
        boolean boolean8 = node1.isNull();
        boolean boolean9 = node1.isFalse();
        boolean boolean10 = node1.isAnd();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node15.getJSDocInfo();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 10, node15);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoIfMissingFromForTree(node19);
        node3.addSuppression("(OR 0 [var_args_name: 1]\n)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo24.getImplementedInterfaces();
        java.lang.String str26 = jSDocInfo24.getFileOverview();
        boolean boolean27 = jSDocInfo24.hasReturnType();
        java.lang.String str28 = jSDocInfo24.getFileOverview();
        node3.setJSDocInfo(jSDocInfo24);
        boolean boolean30 = jSDocInfo24.isOverride();
        boolean boolean31 = jSDocInfo24.isImplicitCast();
        boolean boolean32 = jSDocInfo24.hasModifies();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node22.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator26 = nodeIterable25.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node3.isOptionalArg();
        node3.setDouble((double) 0);
        boolean boolean11 = node3.isStringKey();
        boolean boolean12 = node3.isEmpty();
        boolean boolean13 = node3.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        node4.setSourceEncodedPosition((int) (byte) 0);
        java.util.Set<java.lang.String> strSet10 = node4.getDirectives();
        boolean boolean11 = node4.isDo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node4.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node3.isThis();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean24 = node23.isFalse();
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        node25.setOptionalArg(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node25.getAncestors();
        boolean boolean29 = node25.isGetElem();
        boolean boolean30 = node3.isEquivalentTo(node25);
        node3.setSourceEncodedPositionForTree((-1));
        java.util.Set<java.lang.String> strSet33 = node3.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(strSet33);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        boolean boolean11 = node7.isThis();
        boolean boolean12 = node7.isQualifiedName();
        node7.setOptionalArg(false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node7.children();
        boolean boolean16 = node7.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(4095, node7, node20, node25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object[] objArray34 = strSet31.toArray();
        boolean boolean35 = visibilityList2.contains((java.lang.Object) objArray34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str37 = jSDocInfo36.getDescription();
        boolean boolean38 = jSDocInfo36.isInterface();
        jSDocInfo36.setDeprecated(true);
        boolean boolean41 = visibilityList2.equals((java.lang.Object) jSDocInfo36);
        boolean boolean42 = jSDocInfo36.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo36.getType();
        boolean boolean45 = jSDocInfo36.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING NUMBER 1.0 97\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING NUMBER 1.0 97\n");
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 10, node8);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.Node node15 = node12.getAncestor((int) (short) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node12.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        boolean boolean20 = node17.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node17.getJsDocBuilderForNode();
        boolean boolean22 = node17.isRegExp();
        boolean boolean23 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean28 = node27.isAnd();
        boolean boolean30 = node27.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node27.siblings();
        node27.putBooleanProp((int) (short) 100, false);
        boolean boolean35 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean42 = node41.isDo();
        boolean boolean43 = node41.isBlock();
        boolean boolean44 = node41.isStringKey();
        node27.putProp((int) (byte) 10, (java.lang.Object) node41);
        com.google.javascript.rhino.Node node46 = node17.copyInformationFrom(node27);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node46.setJSType(jSType47);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, 4146, 0);
        boolean boolean52 = node51.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 0, 97);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor5 = ancestorIterable4.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(nodeItor5);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        boolean boolean32 = node4.isParamList();
        node4.setSourceEncodedPosition((int) (byte) 10);
        com.google.javascript.rhino.Node node35 = node4.removeChildren();
        com.google.javascript.rhino.Node node36 = node4.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node36.removeProp(221184);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean8 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node3.getJSDocInfo();
        boolean boolean12 = node3.isAssign();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        node16.addSuppression("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node16.setStaticSourceFile(staticSourceFile19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        int int33 = node22.getIndexOfChild(node26);
        boolean boolean34 = node22.wasEmptyNode();
        int int35 = node22.getCharno();
        com.google.javascript.rhino.Node node36 = node22.cloneTree();
        boolean boolean37 = node22.isInstanceOf();
        com.google.javascript.rhino.Node node38 = node16.useSourceInfoIfMissingFrom(node22);
        com.google.javascript.rhino.Node node39 = node3.copyInformationFromForTree(node16);
        com.google.javascript.rhino.InputId inputId40 = null;
        node3.setInputId(inputId40);
        boolean boolean42 = node3.hasOneChild();
        boolean boolean43 = node3.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isInterface();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        int int72 = typePosition3.getPositionOnStartLine();
        int int73 = typePosition3.getPositionOnStartLine();
        int int74 = typePosition3.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4095 + "'", int72 == 4095);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4095 + "'", int73 == 4095);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4095 + "'", int74 == 4095);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node17.getStaticSourceFile();
        boolean boolean26 = node17.isTry();
        node17.setType(3);
        boolean boolean29 = node17.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean35 = node34.isDo();
        boolean boolean36 = node34.isBlock();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean41 = node40.isBreak();
        node40.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node44 = node40.cloneTree();
        com.google.javascript.rhino.Node node45 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node46 = node17.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node47 = node17.cloneTree();
        boolean boolean48 = node47.isQuotedString();
        boolean boolean49 = node47.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet6.intersection(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet10.intersection(booleanLiteralSet11);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList15 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet2, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet8, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet12, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet13, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet0.union(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean26 = booleanLiteralSet24.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList27 = com.google.common.collect.ImmutableList.of(booleanLiteralSet18, booleanLiteralSet20, booleanLiteralSet22, booleanLiteralSet24);
        boolean boolean29 = booleanLiteralSet18.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet0.union(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet32.intersection(booleanLiteralSet33);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = booleanLiteralSet38.intersection(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet36, booleanLiteralSet39, booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet32.intersection(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean53 = booleanLiteralSet51.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList54 = com.google.common.collect.ImmutableList.of(booleanLiteralSet45, booleanLiteralSet47, booleanLiteralSet49, booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet51.intersection(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet39.intersection(booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet18.union(booleanLiteralSet39);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList15);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList54);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        jSDocInfo0.setAssociatedNode(node36);
        boolean boolean38 = node36.hasChildren();
        node36.setSourceEncodedPositionForTree(4095);
        boolean boolean41 = node36.isFor();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        boolean boolean21 = node20.isOr();
        com.google.javascript.rhino.Node node22 = node20.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = node22.isQualifiedName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setDeprecated(false);
        boolean boolean4 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNotNull(markerCollection6);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean7 = node6.isDo();
        boolean boolean8 = node6.isFalse();
        boolean boolean9 = node6.wasEmptyNode();
        boolean boolean10 = node6.isFalse();
        node6.setString("Not declared as a constructor");
        boolean boolean13 = node6.isCall();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(43, node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node6.setStaticSourceFile(staticSourceFile15);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(2, node6, 3, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        boolean boolean11 = node7.isDebugger();
        boolean boolean12 = node7.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setSourceEncodedPositionForTree(30);
        boolean boolean14 = node8.isGetProp();
        boolean boolean15 = node8.isHook();
        node8.setSourceFileForTesting("BITXOR 45\n");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int19 = typePosition18.getPositionOnStartLine();
        typePosition18.setPositionInformation(2, (int) '4', 43, 10);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int29 = node28.getSideEffectFlags();
        node28.setOptionalArg(true);
        boolean boolean32 = node28.isNew();
        typePosition18.setItem(node28);
        node8.addChildToFront(node28);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = node8.getExistingIntProp((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo23.getReferences();
        int int33 = jSDocInfo23.getParameterCount();
        boolean boolean34 = jSDocInfo23.isIdGenerator();
        jSDocInfo23.addSuppression("GETELEM Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.isHidden();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        java.util.Collection<java.lang.String> strCollection13 = jSDocInfo0.getAuthors();
        boolean boolean14 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strCollection13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "NUMBER 1.0", 12, 15);
        com.google.javascript.rhino.InputId inputId5 = null;
        node4.setInputId(inputId5);
        int int7 = node4.getLineno();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean12 = node11.isThis();
        boolean boolean13 = node11.isVoid();
        boolean boolean14 = node11.isDebugger();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        java.lang.String str24 = node18.toString();
        node18.removeProp((int) (short) 0);
        boolean boolean27 = node18.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean32 = node31.isGetterDef();
        com.google.javascript.rhino.Node node33 = node18.useSourceInfoFromForTree(node31);
        boolean boolean34 = node31.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node31.getJsDocBuilderForNode();
        boolean boolean36 = node31.isRegExp();
        boolean boolean37 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node55.getStaticSourceFile();
        boolean boolean64 = node55.isTry();
        boolean boolean65 = node55.isQuotedString();
        com.google.javascript.rhino.Node node66 = node31.srcrefTree(node55);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node31.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            node4.replaceChildAfter(node11, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        boolean boolean7 = node4.isStringKey();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        node16.removeProp(0);
        com.google.javascript.rhino.Node node41 = node4.copyInformationFromForTree(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        boolean boolean66 = node60.isBreak();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 1, node47, node51, node60, node70, 1, (-1));
        java.lang.String str74 = node70.getQualifiedName();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean79 = node78.isAnd();
        node78.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str82 = node70.checkTreeEquals(node78);
        jSDocInfo42.setAssociatedNode(node70);
        boolean boolean84 = jSDocInfo42.hasFileOverview();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo42.getModifies();
        node41.setDirectives(strSet85);
        boolean boolean87 = node41.isAnd();
        boolean boolean88 = node41.isAdd();
        com.google.javascript.rhino.InputId inputId89 = null;
        node41.setInputId(inputId89);
        com.google.javascript.rhino.Node node91 = node41.cloneTree();
        boolean boolean92 = node41.isFunction();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "Node tree inequality:\nTree1:\nDELPROP STRING hi! 97\n\n\nTree2:\nNEW [PROTECTED]\n\n\nSubtree1: DELPROP STRING hi! 97\n\n\nSubtree2: NEW [PROTECTED]\n", 65589, 50);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        boolean boolean28 = node1.isString();
        java.lang.String str29 = node1.toStringTree();
        node1.setSourceEncodedPosition(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node40.isDo();
        java.util.Set<java.lang.String> strSet42 = node40.getDirectives();
        boolean boolean43 = node40.isString();
        node40.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable46 = node40.getAncestors();
        boolean boolean47 = node40.isNE();
        com.google.javascript.rhino.Node node48 = node1.useSourceInfoIfMissingFrom(node40);
        java.util.Set<java.lang.String> strSet49 = node48.getDirectives();
        node48.setQuotedString();
        boolean boolean51 = node48.isNew();
        java.lang.String str52 = node48.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" + "'", str29, "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ancestorIterable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isConstructor();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        boolean boolean10 = jSDocInfo0.isExterns();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node14 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isFalse();
        double double11 = node8.getDouble();
        int int13 = node8.getIntProp((int) 'a');
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        boolean boolean37 = node31.isBreak();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, node18, node22, node31, node41, 1, (-1));
        java.lang.String str45 = node41.getQualifiedName();
        com.google.javascript.rhino.Node node46 = node41.detachFromParent();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        java.lang.Object obj57 = node50.getProp(10);
        boolean boolean58 = node50.isArrayLit();
        boolean boolean59 = node50.isAdd();
        int int60 = node50.getSideEffectFlags();
        boolean boolean61 = node50.isWith();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0, node8, node46, node50);
        boolean boolean63 = node62.isOnlyModifiesThisCall();
        node62.removeProp(51);
        boolean boolean66 = node62.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean36 = node35.isFalse();
        java.lang.String str37 = node35.getSourceFileName();
        boolean boolean38 = node35.isLabel();
        node4.putProp(1, (java.lang.Object) node35);
        node4.detachChildren();
        node4.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node51.isDo();
        java.util.Set<java.lang.String> strSet53 = node51.getDirectives();
        boolean boolean54 = node51.isString();
        node51.setWasEmptyNode(false);
        boolean boolean57 = node51.isGetterDef();
        com.google.javascript.rhino.Node node58 = node4.useSourceInfoFrom(node51);
        boolean boolean59 = node51.isStringKey();
        boolean boolean60 = node51.isOr();
        boolean boolean61 = node51.isHook();
        boolean boolean62 = node51.isQuotedString();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        java.lang.String str27 = jSDocInfo23.getSourceName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection28 = jSDocInfo23.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo23.getThrownTypes();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo23.getModifies();
        boolean boolean31 = jSDocInfo23.isIdGenerator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(markerCollection28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.hasThisType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 3, 12, 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node54.getStaticSourceFile();
        boolean boolean63 = node54.isTry();
        node54.setType(3);
        com.google.javascript.rhino.Node node66 = node36.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node67 = node27.useSourceInfoFrom(node66);
        com.google.javascript.rhino.Node node68 = node27.cloneNode();
        boolean boolean69 = node68.isEmpty();
        node68.setLineno(53);
        node68.removeProp(3);
        node68.setDouble(0.0d);
        boolean boolean76 = node68.isFunction();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        boolean boolean4 = node1.isWhile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean9 = node8.isAnd();
        boolean boolean10 = node8.isDebugger();
        boolean boolean11 = node8.isWhile();
        node8.setType((int) (byte) 0);
        com.google.javascript.rhino.Node node14 = node1.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        boolean boolean38 = node32.isBreak();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 1, node19, node23, node32, node42, 1, (-1));
        java.lang.String str46 = node42.getQualifiedName();
        boolean boolean47 = node42.isDec();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        int int57 = node42.getIndexOfChild(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean63 = node62.isDo();
        boolean boolean64 = node62.isFalse();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoFrom(node62);
        node42.setLength(50);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str74 = node70.toString(false, false, true);
        node70.setType(40);
        com.google.javascript.rhino.Node node77 = node42.srcref(node70);
        boolean boolean78 = node77.isOr();
        com.google.javascript.rhino.Node node79 = node8.copyInformationFrom(node77);
        java.lang.String str80 = node77.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GETELEM Not declared as a constructor" + "'", str74, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(54, nodeArray3, 31, (int) 'a');
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(52, nodeArray3, 38, 13);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3, 65589, 61440);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        java.lang.String str35 = node29.toString();
        node29.removeProp((int) (short) 0);
        boolean boolean38 = node29.isObjectLit();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean43 = node42.isGetterDef();
        com.google.javascript.rhino.Node node44 = node29.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node node45 = node25.copyInformationFromForTree(node29);
        boolean boolean46 = node25.isNull();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, node25, (int) (byte) 100, 48);
        int int50 = node25.getChildCount();
        boolean boolean51 = node25.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node25.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 1.0" + "'", str35, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isDebugger();
        boolean boolean12 = node8.isHook();
        boolean boolean13 = node8.isNew();
        boolean boolean14 = node8.isGetterDef();
        node8.setDouble((double) 'a');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        java.lang.String str26 = node20.toString();
        node20.removeProp((int) (short) 0);
        boolean boolean29 = node20.isObjectLit();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean34 = node33.isGetterDef();
        com.google.javascript.rhino.Node node35 = node20.useSourceInfoFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        boolean boolean45 = node44.isDo();
        java.util.Set<java.lang.String> strSet46 = node44.getDirectives();
        com.google.javascript.rhino.Node node47 = node33.clonePropsFrom(node44);
        java.lang.String str48 = node47.getSourceFileName();
        int int50 = node47.getIntProp(43);
        int int51 = node47.getSourcePosition();
        java.util.Set<java.lang.String> strSet52 = node47.getDirectives();
        com.google.javascript.rhino.Node node53 = node8.copyInformationFrom(node47);
        boolean boolean54 = node47.isIf();
        node47.putIntProp(0, 4146);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 1.0" + "'", str26, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 397316 + "'", int51 == 397316);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        java.lang.String str41 = node35.toString();
        node35.removeProp((int) (short) 0);
        boolean boolean44 = node35.isObjectLit();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean49 = node48.isGetterDef();
        com.google.javascript.rhino.Node node50 = node35.useSourceInfoFromForTree(node48);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 1, node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean56 = node55.isGetterDef();
        boolean boolean57 = node55.isThis();
        boolean boolean58 = node51.hasChild(node55);
        boolean boolean59 = node51.isReturn();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = node64.getStaticSourceFile();
        boolean boolean66 = node64.isNot();
        boolean boolean67 = node64.isIf();
        boolean boolean68 = node64.isVar();
        node51.putProp(10, (java.lang.Object) node64);
        boolean boolean70 = node51.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str75 = node74.toString();
        com.google.javascript.rhino.Node node76 = node74.cloneTree();
        boolean boolean77 = node74.isCase();
        // The following exception was thrown during execution in test generation
        try {
            node8.addChildAfter(node51, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 1.0" + "'", str41, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(staticSourceFile65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER 1.0" + "'", str75, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node30.isCase();
        int int32 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node30.getAncestor(30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = node34.isVarArgs();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair5 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType3, jSType4);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair8 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType6, jSType7);
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair8.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair12 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType10, jSType11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType13, jSType14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair18 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType16, jSType17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType19, jSType20);
        com.google.javascript.rhino.jstype.JSType jSType22 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType23 = typePair21.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList24 = com.google.common.collect.ImmutableList.of(typePair2, typePair5, typePair8, typePair12, typePair15, typePair18, typePair21);
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair5.typeB;
        com.google.javascript.rhino.jstype.JSType jSType26 = typePair5.typeA;
        com.google.javascript.rhino.jstype.JSType jSType27 = typePair5.typeA;
        com.google.javascript.rhino.jstype.JSType jSType28 = typePair5.typeA;
        com.google.javascript.rhino.jstype.JSType jSType29 = typePair5.typeA;
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertNull(jSType23);
        org.junit.Assert.assertNotNull(typePairList24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNull(jSType29);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "true");
        node2.removeProp(0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node2.getJSDocInfo();
        java.lang.String str6 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        java.lang.String str38 = node34.getQualifiedName();
        boolean boolean39 = node34.isDec();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        int int49 = node34.getIndexOfChild(node48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean55 = node54.isDo();
        boolean boolean56 = node54.isFalse();
        com.google.javascript.rhino.Node node57 = node34.useSourceInfoFrom(node54);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node59 = node2.srcrefTree(node57);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        boolean boolean69 = node68.isDo();
        java.util.Set<java.lang.String> strSet70 = node68.getDirectives();
        boolean boolean71 = node68.isString();
        node68.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node68.getJSDocInfo();
        boolean boolean75 = node68.isNE();
        com.google.javascript.rhino.Node node77 = node68.getAncestor(2);
        boolean boolean78 = node68.isCatch();
        boolean boolean79 = node68.wasEmptyNode();
        node68.putIntProp(53, 51);
        com.google.javascript.rhino.Node node83 = node59.useSourceInfoFrom(node68);
        boolean boolean84 = node59.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(jSDocInfo5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean5 = node4.isAnd();
        node4.setSourceFileForTesting("[PROTECTED]");
        node4.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoFromForTree(node14);
        java.lang.Object obj17 = node4.getProp((int) (byte) 100);
        node4.setIsSyntheticBlock(false);
        boolean boolean20 = node4.isFor();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        int int33 = node22.getIndexOfChild(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node22.getJSDocInfo();
        int int35 = node22.getType();
        node22.putBooleanProp((int) (byte) -1, false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        java.lang.String str51 = node47.toString(false, false, true);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(44, node4, node22, node47);
        com.google.javascript.rhino.Node node53 = node47.cloneTree();
        java.util.Set<java.lang.String> strSet54 = node53.getDirectives();
        boolean boolean55 = node53.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 1.0" + "'", str51, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        boolean boolean37 = node14.isInstanceOf();
        boolean boolean38 = node14.isCase();
        int int39 = node14.getLineno();
        int int40 = node14.getType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node14.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoFrom(node14);
        boolean boolean48 = node47.isIf();
        com.google.javascript.rhino.Node node49 = node47.cloneNode();
        boolean boolean50 = node49.isVarArgs();
        java.lang.String str54 = node49.toString(false, false, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = node49.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR" + "'", str54, "OR");
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        boolean boolean32 = strSet28.isEmpty();
        boolean boolean34 = strSet28.add("hi!");
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet28.spliterator();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.children();
        node39.setWasEmptyNode(false);
        boolean boolean43 = node39.isDec();
        boolean boolean44 = node39.isSetterDef();
        boolean boolean45 = strSet28.remove((java.lang.Object) boolean44);
        int int46 = strSet28.size();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean12 = jSDocInfo0.hasThisType();
        java.lang.String str13 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getBaseType();
        java.lang.String str16 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node4.isSyntheticBlock();
        boolean boolean26 = node4.isScript();
        node4.setSourceEncodedPositionForTree((int) (short) 1);
        node4.setLineno(10);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("Not declared as a constructor");
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        java.lang.String[] strArray11 = new java.lang.String[] { "STRING hi! 97\n", "Named type with empty name component", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n", "true", "NUMBER 1.0\n", "([PROTECTED])", "OR 100", "OR 100\n", "NUMBER 1.0 97", "([PROTECTED])", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.Object[] objArray14 = strSet12.toArray();
        java.util.Iterator<java.lang.String> strItor15 = strSet12.iterator();
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList16 = com.google.common.collect.ImmutableList.of(strSet12);
        java.util.Iterator<java.lang.String> strItor17 = strSet12.iterator();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[STRING hi! 97\n, Named type with empty name component, INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n, true, NUMBER 1.0\n, ([PROTECTED]), OR 100, OR 100\n, NUMBER 1.0 97]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[STRING hi! 97\n, Named type with empty name component, INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n, true, NUMBER 1.0\n, ([PROTECTED]), OR 100, OR 100\n, NUMBER 1.0 97]");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strSetList16);
        org.junit.Assert.assertNotNull(strItor17);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isNull();
        com.google.javascript.rhino.Node node21 = node16.getParent();
        int int22 = node16.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        boolean boolean18 = node9.isObjectLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean23 = node22.isGetterDef();
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 1, node24);
        com.google.javascript.rhino.Node node26 = node4.useSourceInfoFromForTree(node25);
        boolean boolean27 = node4.isExprResult();
        boolean boolean28 = node4.isDec();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean33 = node32.isFalse();
        com.google.javascript.rhino.Node node34 = node32.cloneTree();
        node34.setOptionalArg(false);
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node4, node34, (int) (byte) 0, 50);
        boolean boolean41 = node40.isContinue();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR 100" + "'", str37, "OR 100");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean2 = node1.isContinue();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor4 = ancestorIterable3.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor5 = ancestorIterable3.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor6 = ancestorIterable3.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeItor6);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.hasChildren();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        int int7 = node6.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        boolean boolean4 = node1.isWhile();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(48, 100, 8);
        node1.addChildToBack(node8);
        java.lang.String str10 = node1.getSourceFileName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        java.lang.String str20 = node14.toString();
        node14.removeProp((int) (short) 0);
        boolean boolean23 = node14.isObjectLit();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean28 = node27.isGetterDef();
        com.google.javascript.rhino.Node node29 = node14.useSourceInfoFromForTree(node27);
        boolean boolean30 = node27.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean36 = node35.isFalse();
        java.lang.String str37 = node35.getSourceFileName();
        boolean boolean38 = node35.isLabel();
        boolean boolean39 = node35.isSetterDef();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node27, node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER 1.0" + "'", str20, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        boolean boolean15 = jSDocInfo0.hasParameter("false");
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo0.getAuthors();
        boolean boolean17 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo0.getModifies();
        boolean boolean20 = jSDocInfo0.hasDescriptionForParameter("(Node tree inequality:\nTree1:\nNUMBER 1.0\n    NUMBER 1.0\n\n\nTree2:\nBITXOR\n    STRING hi! 97\n\n\nSubtree1: NUMBER 1.0\n    NUMBER 1.0\n\n\nSubtree2: BITXOR\n    STRING hi! 97\n)");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = jSDocInfo0.getVisibility();
        int int44 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean45 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(visibility43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.isExport();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setDeprecated(true);
        boolean boolean13 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str14 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        int int7 = node3.getSourcePosition();
        boolean boolean8 = node3.isNumber();
        com.google.javascript.rhino.Node node9 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node54.getStaticSourceFile();
        boolean boolean63 = node54.isTry();
        node54.setType(3);
        com.google.javascript.rhino.Node node66 = node36.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node67 = node27.useSourceInfoFrom(node66);
        node27.detachChildren();
        com.google.javascript.rhino.Node node69 = node27.detachFromParent();
        java.lang.String str73 = node69.toString(true, false, true);
        com.google.javascript.rhino.InputId inputId74 = null;
        node69.setInputId(inputId74);
        boolean boolean76 = node69.isFalse();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER 1.0" + "'", str73, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        boolean boolean12 = jSDocInfo0.hasParameter("(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        boolean boolean72 = typePosition22.hasBrackets();
        boolean boolean73 = typePosition22.hasBrackets();
        int int74 = typePosition22.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet5.intersection(booleanLiteralSet6);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet9.intersection(booleanLiteralSet10);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList14 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet1, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet7, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet11, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet12, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet12.union(booleanLiteralSet15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList14);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        boolean boolean38 = jSDocInfo32.isDeprecated();
        boolean boolean39 = jSDocInfo32.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo32.getModifies();
        boolean boolean41 = jSDocInfo32.shouldPreserveTry();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str12 = node8.toString(false, false, true);
        boolean boolean13 = node8.isEmpty();
        boolean boolean14 = node8.isVoid();
        boolean boolean15 = node8.isFromExterns();
        boolean boolean16 = node8.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        boolean boolean11 = node7.isFalse();
        boolean boolean12 = node7.isCase();
        boolean boolean14 = node7.getBooleanProp((int) (short) 10);
        boolean boolean15 = node7.isLabelName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray17 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility16 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList18 = com.google.common.collect.ImmutableList.of(visibilityArray17);
        java.lang.String str19 = visibilityList18.toString();
        java.lang.String str20 = visibilityList18.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getParameterType("hi!");
        boolean boolean24 = jSDocInfo21.hasModifies();
        boolean boolean26 = jSDocInfo21.hasDescriptionForParameter("");
        boolean boolean28 = jSDocInfo21.hasParameter("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo21.setVisibility(visibility29);
        com.google.javascript.rhino.Node node31 = jSDocInfo21.getAssociatedNode();
        boolean boolean32 = visibilityList18.contains((java.lang.Object) jSDocInfo21);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        jSDocInfo21.setAssociatedNode(node37);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo21.getParameterType("NUMBER 1.0 [directives: [, hi!]]");
        com.google.javascript.rhino.Node node41 = jSDocInfo21.getAssociatedNode();
        boolean boolean42 = node7.isEquivalentToTyped(node41);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray17);
        org.junit.Assert.assertNotNull(visibilityList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[PROTECTED]" + "'", str19, "[PROTECTED]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[PROTECTED]" + "'", str20, "[PROTECTED]");
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        boolean boolean11 = node7.isNull();
        com.google.javascript.rhino.InputId inputId12 = node7.getInputId();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.children();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str18 = node17.toString();
        boolean boolean19 = node17.isDebugger();
        boolean boolean20 = node17.isNE();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        java.lang.String str30 = node24.toString();
        node24.removeProp((int) (short) 0);
        boolean boolean33 = node24.isObjectLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node24.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node37.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        java.lang.String str50 = node44.toString();
        node44.removeProp((int) (short) 0);
        boolean boolean53 = node44.isObjectLit();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean58 = node57.isGetterDef();
        com.google.javascript.rhino.Node node59 = node44.useSourceInfoFromForTree(node57);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node57.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean65 = node64.isGetterDef();
        com.google.javascript.rhino.Node node66 = node57.useSourceInfoFrom(node64);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        boolean boolean76 = node74.isFalse();
        com.google.javascript.rhino.Node node77 = node64.useSourceInfoIfMissingFrom(node74);
        boolean boolean78 = node74.isTrue();
        com.google.javascript.rhino.Node node79 = node37.srcrefTree(node74);
        node74.setSourceFileForTesting("NUMBER 1.0 54\n    NUMBER 1.0\n");
        // The following exception was thrown during execution in test generation
        try {
            node7.addChildBefore(node17, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 1.0" + "'", str50, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 65589, (int) (short) -1, 65589);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        java.lang.String str13 = node7.toString();
        node7.removeProp((int) (short) 0);
        boolean boolean16 = node7.isObjectLit();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean21 = node20.isGetterDef();
        com.google.javascript.rhino.Node node22 = node7.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node20.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean28 = node27.isGetterDef();
        com.google.javascript.rhino.Node node29 = node20.useSourceInfoFrom(node27);
        com.google.javascript.rhino.Node node30 = node20.getNext();
        boolean boolean31 = node20.isNE();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        java.lang.String str42 = node36.toString();
        node36.removeProp((int) (short) 0);
        boolean boolean45 = node36.isGetProp();
        com.google.javascript.rhino.Node node46 = node36.getNext();
        node20.putProp((int) (short) 1, (java.lang.Object) node36);
        com.google.javascript.rhino.Node node48 = node36.cloneNode();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(4095, "true");
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        boolean boolean76 = node70.isBreak();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 1, node57, node61, node70, node80, 1, (-1));
        java.lang.String str84 = node80.getQualifiedName();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean89 = node88.isAnd();
        node88.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str92 = node80.checkTreeEquals(node88);
        jSDocInfo52.setAssociatedNode(node80);
        com.google.javascript.rhino.Node node94 = node51.useSourceInfoIfMissingFrom(node80);
        boolean boolean95 = node94.isGetProp();
        com.google.javascript.rhino.Node node96 = node48.copyInformationFrom(node94);
        boolean boolean97 = node3.hasChild(node48);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER 1.0" + "'", str42, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        java.lang.String str47 = jSDocInfo0.getBlockDescription();
        boolean boolean48 = jSDocInfo0.isNoCompile();
        boolean boolean49 = jSDocInfo0.isNoTypeCheck();
        boolean boolean50 = jSDocInfo0.isConstructor();
        java.lang.String str51 = jSDocInfo0.getDeprecationReason();
        boolean boolean52 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(221184, "NUMBER 1.0 54\n    NUMBER 1.0\n", 45, 97);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node36.isUnscopedQualifiedName();
        boolean boolean38 = node36.isBreak();
        boolean boolean39 = node36.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(48);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node5.children();
        boolean boolean7 = node5.isBreak();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoFrom(node5);
        boolean boolean9 = node8.isStringKey();
        boolean boolean10 = node8.isContinue();
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        com.google.javascript.rhino.Node node21 = node19.getLastChild();
        boolean boolean22 = node19.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node19.getStaticSourceFile();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        java.lang.String str33 = node27.toString();
        node27.removeProp((int) (short) 0);
        boolean boolean36 = node27.isObjectLit();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean41 = node40.isGetterDef();
        com.google.javascript.rhino.Node node42 = node27.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node40.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean48 = node47.isGetterDef();
        com.google.javascript.rhino.Node node49 = node40.useSourceInfoFrom(node47);
        com.google.javascript.rhino.Node node50 = node40.getNext();
        boolean boolean51 = node40.isNE();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        java.lang.String str62 = node56.toString();
        node56.removeProp((int) (short) 0);
        boolean boolean65 = node56.isGetProp();
        com.google.javascript.rhino.Node node66 = node56.getNext();
        node40.putProp((int) (short) 1, (java.lang.Object) node56);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder68 = node56.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node69 = node19.useSourceInfoIfMissingFrom(node56);
        boolean boolean70 = node19.isTypeOf();
        node19.setLineno(47);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        node19.setJSType(jSType73);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER 1.0" + "'", str33, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER 1.0" + "'", str62, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean4 = node3.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, node3, (int) (byte) 1, 48);
        int int9 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        boolean boolean32 = node27.isDec();
        node27.addSuppression("JSDocInfo");
        int int35 = node27.getSourcePosition();
        node27.detachChildren();
        int int38 = node27.getIntProp((int) (byte) 100);
        boolean boolean39 = node27.isTrue();
        int int40 = node27.getType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.String str34 = node28.toString();
        node28.removeProp((int) (short) 0);
        boolean boolean37 = node28.isObjectLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean42 = node41.isGetterDef();
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node44 = node24.copyInformationFromForTree(node28);
        node44.addSuppression("Not declared as a constructor");
        java.lang.String str47 = node44.getQualifiedName();
        boolean boolean48 = node44.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0" + "'", str34, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        node4.setType(53);
        boolean boolean9 = node4.hasOneChild();
        com.google.javascript.rhino.Node node10 = node4.cloneTree();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        boolean boolean34 = node28.isBreak();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 1, node15, node19, node28, node38, 1, (-1));
        boolean boolean42 = node19.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        boolean boolean67 = node61.isBreak();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 1, node48, node52, node61, node71, 1, (-1));
        java.lang.String str75 = node71.getQualifiedName();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean80 = node79.isAnd();
        node79.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str83 = node71.checkTreeEquals(node79);
        jSDocInfo43.setAssociatedNode(node71);
        com.google.javascript.rhino.Node node85 = node19.useSourceInfoIfMissingFrom(node71);
        int int86 = node71.getCharno();
        boolean boolean87 = node71.isOptionalArg();
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n", (int) (short) -1, 0);
        com.google.javascript.rhino.Node node92 = node71.srcrefTree(node91);
        boolean boolean93 = node71.isAnd();
        boolean boolean94 = node71.isContinue();
        com.google.javascript.rhino.Node node95 = node4.useSourceInfoIfMissingFromForTree(node71);
        boolean boolean96 = node4.isObjectLit();
        boolean boolean97 = node4.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1.0f));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node6 = null;
        jSDocInfo0.setAssociatedNode(node6);
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("Unknown class name");
        int int12 = jSDocInfo0.getParameterCount();
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        jSDocInfo0.setLicense("GETELEM Not declared as a constructor");
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray4, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(24, nodeArray4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getImplementedInterfaces();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo11.getVisibility();
        java.lang.String str16 = jSDocInfo11.toString();
        java.lang.String str18 = jSDocInfo11.getDescriptionForParameter("");
        node10.setJSDocInfo(jSDocInfo11);
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JSDocInfo" + "'", str16, "JSDocInfo");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isOr();
        int int21 = node16.getSideEffectFlags();
        int int22 = node16.getSideEffectFlags();
        boolean boolean23 = node16.isDec();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node16.children();
        int int25 = node16.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node16.getNext();
        boolean boolean27 = node16.isNE();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        java.lang.String str38 = node32.toString();
        node32.removeProp((int) (short) 0);
        boolean boolean41 = node32.isGetProp();
        com.google.javascript.rhino.Node node42 = node32.getNext();
        node16.putProp((int) (short) 1, (java.lang.Object) node32);
        boolean boolean44 = node32.isComma();
        boolean boolean45 = node32.isFromExterns();
        boolean boolean46 = node32.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isDebugger();
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isSetterDef();
        boolean boolean34 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.Node node40 = node38.cloneTree();
        com.google.javascript.rhino.Node node41 = node38.getLastSibling();
        boolean boolean42 = node41.isOptionalArg();
        boolean boolean43 = node41.isCall();
        boolean boolean44 = node41.isNumber();
        boolean boolean45 = node41.isDebugger();
        com.google.javascript.rhino.Node node46 = node27.copyInformationFromForTree(node41);
        boolean boolean47 = node41.hasOneChild();
        node41.setCharno(12325);
        boolean boolean50 = node41.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node1.getJsDocBuilderForNode();
        boolean boolean29 = node1.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isVoid();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isGetProp();
        boolean boolean27 = node17.isDebugger();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '4', node10, node17);
        com.google.javascript.rhino.Node node29 = node3.useSourceInfoIfMissingFrom(node28);
        boolean boolean30 = node28.isObjectLit();
        boolean boolean31 = node28.isRegExp();
        boolean boolean32 = node28.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId36 = null;
        node35.setInputId(inputId36);
        boolean boolean38 = node35.isWith();
        boolean boolean39 = node35.isExprResult();
        boolean boolean40 = node4.isEquivalentToTyped(node35);
        boolean boolean41 = node4.isEmpty();
        boolean boolean42 = node4.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo43.getEnumParameterType();
        java.lang.String str47 = jSDocInfo43.getDescription();
        boolean boolean48 = jSDocInfo43.isNoAlias();
        boolean boolean49 = jSDocInfo43.isDefine();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        boolean boolean60 = node59.isDo();
        java.util.Set<java.lang.String> strSet61 = node59.getDirectives();
        boolean boolean62 = node59.isString();
        node59.setWasEmptyNode(false);
        boolean boolean65 = node59.isGetterDef();
        boolean boolean66 = node59.isFunction();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        boolean boolean76 = node74.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node74.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node74.getStaticSourceFile();
        java.lang.String str79 = node74.getSourceFileName();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(2, node59, node74, node83, 32, 0);
        jSDocInfo43.setAssociatedNode(node59);
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean92 = node91.isAnd();
        boolean boolean94 = node91.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable95 = node91.siblings();
        boolean boolean96 = node91.isUnscopedQualifiedName();
        boolean boolean97 = node91.isCall();
        // The following exception was thrown during execution in test generation
        try {
            node4.replaceChildAfter(node59, node91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertNull(staticSourceFile78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(nodeIterable95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node22.isIn();
        int int26 = node22.getSourceOffset();
        boolean boolean27 = node22.isBlock();
        boolean boolean28 = node22.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean5 = node4.isNull();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(16, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", 52, 35);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node10, 52, 100);
        java.lang.Object obj15 = node10.getProp(43);
        node10.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (int) (short) 10, (int) '4');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        boolean boolean27 = node21.isBreak();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 1, node8, node12, node21, node31, 1, (-1));
        java.lang.String str35 = node31.getQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node31.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean64 = node63.isBreak();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node45, node58, node63);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = node58.getStaticSourceFile();
        boolean boolean67 = node58.isTry();
        node58.setType(3);
        com.google.javascript.rhino.Node node70 = node40.copyInformationFrom(node58);
        com.google.javascript.rhino.Node node71 = node31.useSourceInfoFrom(node70);
        boolean boolean72 = node31.isLabel();
        boolean boolean74 = node31.getBooleanProp(2);
        boolean boolean75 = node3.isEquivalentTo(node31);
        node31.addSuppression("(STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n)");
        com.google.javascript.rhino.Node node78 = node31.removeChildren();
        boolean boolean79 = node31.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(staticSourceFile66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.hasParameter("true");
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean6 = node5.isGetterDef();
        boolean boolean7 = node5.isThis();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.String str18 = node12.toString();
        node12.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', node12, node24, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.children();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean80 = node79.isGetterDef();
        com.google.javascript.rhino.Node node81 = node66.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node82 = node62.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 100, node5, node30, node34, node62, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node86 = node30.detachFromParent();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(0, node86);
        node86.setSourceEncodedPosition(32);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = node86.getExistingIntProp(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray4, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(12, nodeArray4);
        com.google.javascript.rhino.InputId inputId11 = null;
        node10.setInputId(inputId11);
        boolean boolean13 = node10.isDelProp();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("GETELEM Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition7.setItem("hi!");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str11 = stringPosition10.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str13 = stringPosition12.getItem();
        int int14 = stringPosition12.getPositionOnStartLine();
        stringPosition12.setItem("GETELEM Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str18 = stringPosition17.getItem();
        int int19 = stringPosition17.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int30 = stringPosition29.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition31.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int37 = stringPosition31.getEndLine();
        int int38 = stringPosition31.getPositionOnEndLine();
        int int39 = stringPosition31.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition41.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int47 = stringPosition41.getEndLine();
        int int48 = stringPosition41.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition49.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int55 = stringPosition49.getEndLine();
        int int56 = stringPosition49.getPositionOnEndLine();
        int int57 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str59 = stringPosition58.getItem();
        int int60 = stringPosition58.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition61 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition61.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int67 = stringPosition61.getEndLine();
        int int68 = stringPosition61.getPositionOnEndLine();
        int int69 = stringPosition61.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int71 = stringPosition70.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition72.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition78 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str79 = stringPosition78.getItem();
        int int80 = stringPosition78.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition81 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str82 = stringPosition81.getItem();
        int int83 = stringPosition81.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList84 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition31, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition40, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition58, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition61, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition70, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition72, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition78, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition81);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition85 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition85.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int91 = stringPosition85.getEndLine();
        int int92 = stringPosition85.getPositionOnEndLine();
        int int93 = stringPosition85.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition94 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str95 = stringPosition94.getItem();
        int int96 = stringPosition94.getEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList97 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition5, stringPosition7, stringPosition10, stringPosition12, stringPosition17, stringPosition20, stringPosition58, stringPosition85, stringPosition94);
        stringPosition58.setItem("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING NUMBER 1.0 [directives: [, hi!]]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING NUMBER 1.0 [directives: [, hi!]]\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 48 + "'", int57 == 48);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 48 + "'", int69 == 48);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList84);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(stringPositionList97);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("true");
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strSet11.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node8.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        node8.setSourceEncodedPosition(42);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        java.lang.String str27 = node21.toString();
        int int28 = node17.getIndexOfChild(node21);
        boolean boolean29 = node17.wasEmptyNode();
        int int30 = node17.getCharno();
        com.google.javascript.rhino.Node node31 = node17.cloneTree();
        boolean boolean32 = node31.isQuotedString();
        int int33 = node31.getLength();
        boolean boolean34 = node31.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = node8.copyInformationFromForTree(node31);
        boolean boolean36 = node35.isTry();
        boolean boolean37 = node35.isGetElem();
        node35.putIntProp(38, (int) 'a');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0" + "'", str27, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(NEW [PROTECTED] 0)", 30, 11);
        com.google.javascript.rhino.Node node5 = node3.getAncestor((int) (byte) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 16, 52);
        boolean boolean4 = node3.isNot();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node3.getJSDocInfo();
        boolean boolean6 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSDocInfo5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        int int23 = node16.getType();
        java.lang.Object obj25 = node16.getProp(48);
        com.google.javascript.rhino.Node node26 = node16.getFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo27.getEnumParameterType();
        java.lang.String str31 = jSDocInfo27.getDescription();
        boolean boolean32 = jSDocInfo27.isNoAlias();
        boolean boolean33 = jSDocInfo27.isDefine();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        boolean boolean44 = node43.isDo();
        java.util.Set<java.lang.String> strSet45 = node43.getDirectives();
        boolean boolean46 = node43.isString();
        node43.setWasEmptyNode(false);
        boolean boolean49 = node43.isGetterDef();
        boolean boolean50 = node43.isFunction();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        boolean boolean60 = node58.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = node58.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node58.getStaticSourceFile();
        java.lang.String str63 = node58.getSourceFileName();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(2, node43, node58, node67, 32, 0);
        jSDocInfo27.setAssociatedNode(node43);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean77 = node76.isAnd();
        boolean boolean78 = node76.isDebugger();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(40, node76, (int) (short) 100, 29);
        com.google.javascript.rhino.Node node82 = node43.useSourceInfoIfMissingFromForTree(node76);
        node76.setLength(0);
        java.lang.String str85 = node16.checkTreeEquals(node76);
        boolean boolean86 = node76.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 39 + "'", int23 == 39);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSDocInfo61);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        boolean boolean7 = jSDocInfo0.isExpose();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0 [directives: [, hi!]]");
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strSet11.add("((OR 0 [var_args_name: 1]\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(54, nodeArray4, 31, (int) 'a');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(44, nodeArray4, (int) (short) -1, (int) (byte) 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(10, nodeArray4, 5, (int) (short) 1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(61537, nodeArray4);
        boolean boolean15 = node14.isIn();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node85 = node29.detachFromParent();
        boolean boolean86 = node85.isInstanceOf();
        node85.setCharno(30);
        java.lang.String str92 = node85.toString(true, true, false);
        boolean boolean93 = node85.isLabel();
        boolean boolean94 = node85.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "GETELEM 0" + "'", str92, "GETELEM 0");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.util.ListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor3 = visibilityList2.listIterator();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean8 = node7.isFalse();
        com.google.javascript.rhino.Node node9 = node7.cloneTree();
        int int10 = visibilityList2.lastIndexOf((java.lang.Object) node9);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor11 = visibilityList2.iterator();
        java.lang.Object[] objArray12 = visibilityList2.toArray();
        int int13 = visibilityList2.size();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node18, node31, node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        java.lang.String str48 = node42.toString();
        node42.removeProp((int) (short) 0);
        boolean boolean51 = node42.isObjectLit();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean56 = node55.isGetterDef();
        com.google.javascript.rhino.Node node57 = node42.useSourceInfoFromForTree(node55);
        com.google.javascript.rhino.Node node58 = node38.copyInformationFromForTree(node42);
        boolean boolean59 = node42.isComma();
        int int60 = visibilityList2.indexOf((java.lang.Object) boolean59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor62 = visibilityList2.listIterator(397316);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (397316) must not be greater than size (1)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(visibilityItor3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(visibilityItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[PROTECTED]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER 1.0" + "'", str48, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        int int7 = node4.getIntProp(42);
        int int8 = node4.getChildCount();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId11 = null;
        node10.setInputId(inputId11);
        boolean boolean13 = node10.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node10.getJsDocBuilderForNode();
        node10.setType((int) (byte) 100);
        com.google.javascript.rhino.InputId inputId17 = node10.getInputId();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean22 = node21.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node21.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(40, node21, (int) (byte) 1, 48);
        com.google.javascript.rhino.Node node27 = node21.cloneNode();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4, node4, node10, node27);
        boolean boolean29 = node4.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder14);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node30.hasOneChild();
        com.google.javascript.rhino.Node node33 = node30.removeChildren();
        boolean boolean34 = node33.isDo();
        node33.setLength(38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        boolean boolean46 = node45.isDo();
        java.util.Set<java.lang.String> strSet47 = node45.getDirectives();
        boolean boolean48 = node45.isString();
        node45.setWasEmptyNode(false);
        boolean boolean51 = node45.isObjectLit();
        boolean boolean52 = node45.isParamList();
        com.google.javascript.rhino.Node node53 = node33.useSourceInfoFrom(node45);
        boolean boolean54 = node45.isExprResult();
        node45.setCharno(30);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isAssignAdd();
        boolean boolean12 = node8.isStringKey();
        boolean boolean13 = node8.isFunction();
        com.google.javascript.rhino.Node node14 = node8.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        java.lang.String str4 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue1.or(ternaryValue7);
        java.lang.String str10 = ternaryValue7.toString();
        java.lang.String str11 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.and(ternaryValue18);
        java.lang.String str20 = ternaryValue17.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue17.or(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue23.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue15.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue28.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue7.and(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue33.and(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue37.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue41.and(ternaryValue42);
        java.lang.String str44 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue46.and(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue41.or(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue47.xor(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue39.xor(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue52.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue35.or(ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue31.and(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue54.not();
        boolean boolean58 = ternaryValue56.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "true" + "'", str44, "true");
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        java.lang.Object obj24 = node22.getProp(48);
        int int25 = node22.getChildCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        jSDocInfo0.addSuppression("");
        boolean boolean11 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        java.lang.String str44 = jSDocInfo0.toString();
        boolean boolean45 = jSDocInfo0.hasFileOverview();
        java.lang.String str46 = jSDocInfo0.getLicense();
        boolean boolean48 = jSDocInfo0.hasDescriptionForParameter("STRING BITXOR 45");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JSDocInfo" + "'", str44, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.hasParameter("true");
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            strSet8.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isFalse();
        java.lang.Object obj11 = node7.getProp((int) (byte) -1);
        boolean boolean12 = node7.isStringKey();
        boolean boolean13 = node7.isAssign();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node7.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node7.isContinue();
        boolean boolean17 = node7.isLabel();
        boolean boolean18 = node7.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0L, (int) (short) 0, 47);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        boolean boolean14 = node13.isDo();
        java.util.Set<java.lang.String> strSet15 = node13.getDirectives();
        boolean boolean16 = node13.isString();
        node13.setWasEmptyNode(false);
        boolean boolean19 = node13.isGetterDef();
        boolean boolean20 = node13.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node28.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node28.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        java.lang.String str33 = node28.getSourceFileName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(2, node13, node28, node37, 32, 0);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean45 = node44.isThis();
        node44.setSourceEncodedPositionForTree(0);
        boolean boolean48 = node44.hasOneChild();
        node44.setVarArgs(true);
        java.lang.String str51 = node28.checkTreeEquals(node44);
        com.google.javascript.rhino.Node node52 = node3.srcref(node28);
        com.google.javascript.rhino.Node node53 = node28.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertNull(staticSourceFile32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n" + "'", str51, "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        jSDocInfo0.setLicense("NUMBER 1.0 [directives: [, hi!]]");
        jSDocInfo0.addSuppression("OR 100\n");
        boolean boolean51 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo0.getThisType();
        java.lang.String str53 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(16, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", 52, 35);
        boolean boolean5 = node4.wasEmptyNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node4.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterable6);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node37 = node33.cloneTree();
        node33.setOptionalArg(false);
        int int40 = node33.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo11.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo11.getEnumParameterType();
        java.lang.String str15 = jSDocInfo11.getDescription();
        node7.setJSDocInfo(jSDocInfo11);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo11.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo11.getReturnType();
        boolean boolean19 = jSDocInfo11.hasTypedefType();
        boolean boolean20 = jSDocInfo11.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo11.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo11.getParameterType("(((Not declared as a constructor)))");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertNull(jSTypeExpression23);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(visibility5);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isJavaDispatch();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        boolean boolean4 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        boolean boolean45 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean48 = jSDocInfo0.isHidden();
        java.lang.String str49 = jSDocInfo0.getOriginalCommentString();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strList50);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        java.lang.String str30 = jSDocInfo23.getDescription();
        com.google.javascript.rhino.Node node31 = jSDocInfo23.getAssociatedNode();
        boolean boolean32 = jSDocInfo23.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo23.getTypedefType();
        boolean boolean34 = jSDocInfo23.isImplicitCast();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        node30.setOptionalArg(true);
        int int33 = node30.getLength();
        boolean boolean34 = node30.isCall();
        java.util.Set<java.lang.String> strSet35 = node30.getDirectives();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strSet35);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        boolean boolean3 = node1.isAssignAdd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node1.getStaticSourceFile();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(staticSourceFile4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean31 = node30.isBreak();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4095, node12, node25, node30);
        boolean boolean33 = node25.isFunction();
        boolean boolean34 = node25.isInstanceOf();
        boolean boolean35 = node25.isHook();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        int int48 = node37.getIndexOfChild(node41);
        boolean boolean49 = node37.wasEmptyNode();
        node25.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node51 = node3.srcref(node37);
        boolean boolean52 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isCase();
        node7.setWasEmptyNode(false);
        java.lang.String str15 = node7.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0\n" + "'", str15, "NUMBER 1.0\n");
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isAnd();
        node29.setSourceFileForTesting("[PROTECTED]");
        node29.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = node29.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node41 = node17.copyInformationFrom(node29);
        boolean boolean42 = node17.isDo();
        boolean boolean43 = node17.isVar();
        boolean boolean44 = node17.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean43 = node42.isFalse();
        java.lang.String str44 = node42.getSourceFileName();
        boolean boolean45 = node42.isLabel();
        node11.putProp(1, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node56.isDo();
        java.util.Set<java.lang.String> strSet58 = node56.getDirectives();
        boolean boolean59 = node56.isString();
        node56.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node56.getJSDocInfo();
        boolean boolean63 = node56.isNE();
        java.lang.String str64 = node56.getSourceFileName();
        boolean boolean65 = node56.isReturn();
        com.google.javascript.rhino.Node node66 = node11.copyInformationFrom(node56);
        boolean boolean67 = node11.isCall();
        int int68 = node11.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        java.lang.Object[] objArray73 = strSet67.toArray();
        java.util.Iterator<java.lang.String> strItor74 = strSet67.iterator();
        strSet67.clear();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId78 = null;
        node77.setInputId(inputId78);
        boolean boolean80 = node77.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder81 = node77.getJsDocBuilderForNode();
        int int83 = node77.getIntProp(37);
        boolean boolean84 = node77.isOnlyModifiesThisCall();
        int int85 = node77.getSourceOffset();
        boolean boolean86 = node77.isTry();
        com.google.javascript.rhino.Node node87 = node77.cloneTree();
        boolean boolean88 = node77.isOr();
        node77.putBooleanProp(97, true);
        boolean boolean92 = strSet67.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[, hi!, true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[, hi!, true]");
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node51.isBreak();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 1, node38, node42, node51, node61, 1, (-1));
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean70 = node69.isAnd();
        node69.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str73 = node61.checkTreeEquals(node69);
        boolean boolean74 = strSet29.equals((java.lang.Object) node61);
        java.lang.String str78 = node61.toString(true, false, true);
        java.lang.String str79 = node61.getSourceFileName();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean84 = node83.isGetterDef();
        boolean boolean85 = node83.isThis();
        java.lang.String str86 = node83.getQualifiedName();
        boolean boolean88 = node83.getBooleanProp(52);
        boolean boolean89 = node83.isFunction();
        com.google.javascript.rhino.Node node90 = node61.srcrefTree(node83);
        boolean boolean91 = node61.isFunction();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER 1.0" + "'", str78, "NUMBER 1.0");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        java.lang.String str2 = jSDocInfo0.getDescription();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("NUMBER 10.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition0.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int11 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node12 = typePosition0.getItem();
        int int13 = typePosition0.getEndLine();
        int int14 = typePosition0.getPositionOnStartLine();
        int int15 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        node17.setSourceEncodedPosition(0);
        node17.setSourceFileForTesting("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        boolean boolean29 = node17.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean54 = node53.isBreak();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(4095, node35, node48, node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        java.lang.String str65 = node59.toString();
        node59.removeProp((int) (short) 0);
        boolean boolean68 = node59.isObjectLit();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean73 = node72.isGetterDef();
        com.google.javascript.rhino.Node node74 = node59.useSourceInfoFromForTree(node72);
        com.google.javascript.rhino.Node node75 = node55.copyInformationFromForTree(node59);
        com.google.javascript.rhino.Node node76 = node27.srcrefTree(node55);
        boolean boolean77 = node55.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node81.children();
        node81.setWasEmptyNode(false);
        boolean boolean85 = node81.isDec();
        java.lang.String str86 = node81.getSourceFileName();
        boolean boolean87 = node81.isLabelName();
        com.google.javascript.rhino.Node node88 = node55.useSourceInfoFrom(node81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = node88.toString(true, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER 1.0" + "'", str65, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet5.spliterator();
        java.lang.Object[] objArray8 = strSet5.toArray();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.BooleanLiteralSet[][][]> booleanLiteralSetArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.BooleanLiteralSet[][][]>();
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        boolean boolean61 = node9.isTrue();
        boolean boolean62 = node9.isAnd();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean67 = node66.isBreak();
        node66.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node70 = node66.cloneTree();
        boolean boolean71 = node70.isIf();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable72 = node70.getAncestors();
        com.google.javascript.rhino.Node node73 = node9.useSourceInfoFrom(node70);
        com.google.javascript.rhino.Node node74 = node9.removeFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(ancestorIterable72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        java.lang.String[] strArray1 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.lang.Object[] objArray5 = strSet2.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.of(strSet2, strSet11);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean20 = node19.isDo();
        boolean boolean21 = node19.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        node25.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node29 = node25.cloneTree();
        com.google.javascript.rhino.Node node30 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node19.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags34.setAllFlags();
        node19.setSideEffectFlags(sideEffectFlags34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.Object obj47 = node40.getProp(10);
        boolean boolean48 = node40.isQuotedString();
        boolean boolean49 = node40.isAnd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        java.lang.String str59 = node53.toString();
        node53.removeProp((int) (short) 0);
        boolean boolean62 = node53.isObjectLit();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean67 = node66.isGetterDef();
        com.google.javascript.rhino.Node node68 = node53.useSourceInfoFromForTree(node66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(35, node19, node40, node66, (int) (short) 1, (int) (short) 1);
        node66.setQuotedString();
        boolean boolean73 = strSet2.remove((java.lang.Object) node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList75 = jSDocInfo74.getImplementedInterfaces();
        java.lang.String str76 = jSDocInfo74.getFileOverview();
        boolean boolean77 = jSDocInfo74.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = jSDocInfo74.getVisibility();
        java.lang.String str80 = jSDocInfo74.getDescriptionForParameter("NUMBER 1.0");
        node66.setJSDocInfo(jSDocInfo74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo74.getThisType();
        com.google.javascript.rhino.Node node83 = jSDocInfo74.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo74.getReturnType();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 1.0" + "'", str59, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(visibility78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(jSTypeExpression84);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesThis();
        int int4 = sideEffectFlags0.valueOf();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        node34.setWasEmptyNode(false);
        node34.addSuppression("([PROTECTED])");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        java.lang.String str56 = node50.toString();
        node50.removeProp((int) (short) 0);
        boolean boolean59 = node50.isObjectLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean64 = node63.isGetterDef();
        com.google.javascript.rhino.Node node65 = node50.useSourceInfoFromForTree(node63);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node65);
        node66.setSourceFileForTesting("Not declared as a constructor");
        node66.setLineno((int) (short) 0);
        boolean boolean71 = node66.isNumber();
        node34.addChildrenToBack(node66);
        com.google.javascript.rhino.InputId inputId73 = node66.getInputId();
        com.google.javascript.rhino.Node node74 = node66.getLastSibling();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node74.siblings();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER 1.0" + "'", str56, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(nodeIterable75);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        boolean boolean18 = node9.isObjectLit();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean23 = node22.isGetterDef();
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoFromForTree(node22);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 1, node24);
        com.google.javascript.rhino.Node node26 = node4.useSourceInfoFromForTree(node25);
        boolean boolean27 = node4.isExprResult();
        boolean boolean28 = node4.isDec();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean33 = node32.isFalse();
        com.google.javascript.rhino.Node node34 = node32.cloneTree();
        node34.setOptionalArg(false);
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node4, node34, (int) (byte) 0, 50);
        boolean boolean41 = node40.isStringKey();
        int int42 = node40.getCharno();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR 100" + "'", str37, "OR 100");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        boolean boolean26 = node24.isDebugger();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        com.google.javascript.rhino.Node node29 = node24.copyInformationFromForTree(node28);
        node24.setSourceEncodedPositionForTree(221184);
        boolean boolean32 = node24.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo4.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo4.getFileOverview();
        boolean boolean7 = jSDocInfo4.hasBaseType();
        boolean boolean8 = jSDocInfo4.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo4.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo4.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo4.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getParameterType("hi!");
        boolean boolean15 = jSDocInfo12.hasModifies();
        boolean boolean17 = jSDocInfo12.hasDescriptionForParameter("");
        boolean boolean19 = jSDocInfo12.hasParameter("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo12.setVisibility(visibility20);
        jSDocInfo4.setVisibility(visibility20);
        jSDocInfo0.setVisibility(visibility20);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        java.lang.String[] strArray3 = new java.lang.String[] { "NUMBER 1.0", "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet4.spliterator();
        java.util.Iterator<java.lang.String> strItor7 = strSet4.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet4.spliterator();
        boolean boolean10 = strSet4.add("Not declared as a constructor");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "OR 100\n", "OR 100\n", "NUMBER 1.0 [directives: [, hi!]]", "true", "NEW [PROTECTED]", "JSDocInfo", "[PROTECTED]", "NUMBER 1.0\n", "Named type with empty name component", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n", "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", "OR 100", "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n", "([PROTECTED])", "OR 100", "NUMBER 1.0\n", "Not declared as a constructor", "Not declared as a type name", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.lang.String[] strArray38 = new java.lang.String[] { "NUMBER 1.0", "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.util.Spliterator<java.lang.String> strSpliterator41 = strSet39.spliterator();
        boolean boolean43 = strSet39.add("([PROTECTED])");
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList44 = com.google.common.collect.ImmutableList.of((java.util.Set<java.lang.String>) strSet4, (java.util.Set<java.lang.String>) strSet33, (java.util.Set<java.lang.String>) strSet39);
        boolean boolean46 = strSet39.add("()");
        strSet39.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray48 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray49 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray50 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] { visibilityArray48, visibilityArray49, visibilityArray50 };
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray52 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray53 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray54 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray55 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] { visibilityArray52, visibilityArray53, visibilityArray54 };
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray56 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray57 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray58 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray59 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] { visibilityArray56, visibilityArray57, visibilityArray58 };
        com.google.javascript.rhino.JSDocInfo.Visibility[][][] visibilityArray60 = new com.google.javascript.rhino.JSDocInfo.Visibility[][][] { visibilityArray51, visibilityArray55, visibilityArray59 };
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray61 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray62 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray63 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray64 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] { visibilityArray61, visibilityArray62, visibilityArray63 };
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray65 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray66 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray67 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray68 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] { visibilityArray65, visibilityArray66, visibilityArray67 };
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray69 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray70 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray71 = new com.google.javascript.rhino.JSDocInfo.Visibility[] {};
        com.google.javascript.rhino.JSDocInfo.Visibility[][] visibilityArray72 = new com.google.javascript.rhino.JSDocInfo.Visibility[][] { visibilityArray69, visibilityArray70, visibilityArray71 };
        com.google.javascript.rhino.JSDocInfo.Visibility[][][] visibilityArray73 = new com.google.javascript.rhino.JSDocInfo.Visibility[][][] { visibilityArray64, visibilityArray68, visibilityArray72 };
        com.google.javascript.rhino.JSDocInfo.Visibility[][][][] visibilityArray74 = new com.google.javascript.rhino.JSDocInfo.Visibility[][][][] { visibilityArray60, visibilityArray73 };
        com.google.javascript.rhino.JSDocInfo.Visibility[][][][] visibilityArray75 = strSet39.toArray(visibilityArray74);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strSet39.spliterator();
        boolean boolean77 = strSet39.isEmpty();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSpliterator41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSetList44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(visibilityArray48);
        org.junit.Assert.assertNotNull(visibilityArray49);
        org.junit.Assert.assertNotNull(visibilityArray50);
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityArray52);
        org.junit.Assert.assertNotNull(visibilityArray53);
        org.junit.Assert.assertNotNull(visibilityArray54);
        org.junit.Assert.assertNotNull(visibilityArray55);
        org.junit.Assert.assertNotNull(visibilityArray56);
        org.junit.Assert.assertNotNull(visibilityArray57);
        org.junit.Assert.assertNotNull(visibilityArray58);
        org.junit.Assert.assertNotNull(visibilityArray59);
        org.junit.Assert.assertNotNull(visibilityArray60);
        org.junit.Assert.assertNotNull(visibilityArray61);
        org.junit.Assert.assertNotNull(visibilityArray62);
        org.junit.Assert.assertNotNull(visibilityArray63);
        org.junit.Assert.assertNotNull(visibilityArray64);
        org.junit.Assert.assertNotNull(visibilityArray65);
        org.junit.Assert.assertNotNull(visibilityArray66);
        org.junit.Assert.assertNotNull(visibilityArray67);
        org.junit.Assert.assertNotNull(visibilityArray68);
        org.junit.Assert.assertNotNull(visibilityArray69);
        org.junit.Assert.assertNotNull(visibilityArray70);
        org.junit.Assert.assertNotNull(visibilityArray71);
        org.junit.Assert.assertNotNull(visibilityArray72);
        org.junit.Assert.assertNotNull(visibilityArray73);
        org.junit.Assert.assertNotNull(visibilityArray74);
        org.junit.Assert.assertNotNull(visibilityArray75);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.isOverride();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo23.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray32 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility31 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList33 = com.google.common.collect.ImmutableList.of(visibilityArray32);
        java.lang.String str34 = visibilityList33.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList35 = visibilityList33.reverse();
        boolean boolean36 = strSet30.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList33);
        java.util.Spliterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilitySpliterator37 = visibilityList33.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo39.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo39.getModifies();
        boolean boolean42 = jSDocInfo39.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection43 = jSDocInfo39.getTypeNodes();
        boolean boolean44 = jSDocInfo39.isDeprecated();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo45.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo45.getEnumParameterType();
        java.lang.String str49 = jSDocInfo45.getLicense();
        java.lang.String str50 = jSDocInfo45.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList52 = jSDocInfo51.getImplementedInterfaces();
        java.lang.String str53 = jSDocInfo51.getFileOverview();
        boolean boolean54 = jSDocInfo51.hasBaseType();
        boolean boolean55 = jSDocInfo51.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo51.getParameterType("true");
        boolean boolean58 = jSDocInfo51.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.isNoTypeCheck();
        boolean boolean61 = jSDocInfo59.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = jSDocInfo59.getVisibility();
        java.lang.String str63 = jSDocInfo59.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo59.setVisibility(visibility64);
        jSDocInfo51.setVisibility(visibility64);
        jSDocInfo45.setVisibility(visibility64);
        jSDocInfo39.setVisibility(visibility64);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = visibilityList33.set(3, visibility64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray32);
        org.junit.Assert.assertNotNull(visibilityList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[PROTECTED]" + "'", str34, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(visibilitySpliterator37);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(visibility62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + visibility64 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility64.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = new java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList2, visibilityArray1);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor4 = visibilityList2.iterator();
        java.lang.Object obj5 = null;
        boolean boolean6 = visibilityList2.contains(obj5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        java.lang.Class<?> wildcardClass30 = node11.getClass();
        int int31 = visibilityList2.lastIndexOf((java.lang.Object) wildcardClass30);
        int int32 = visibilityList2.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = null;
        boolean boolean34 = visibilityList2.add(visibility33);
        java.util.stream.Stream<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityStream35 = visibilityList2.stream();
        java.util.stream.Stream<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityStream36 = visibilityList2.stream();
        java.util.function.UnaryOperator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityUnaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            visibilityList2.replaceAll(visibilityUnaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(visibilityItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(visibilityStream35);
        org.junit.Assert.assertNotNull(visibilityStream36);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 1, 49, 10);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.InputId inputId11 = null;
        node7.setInputId(inputId11);
        com.google.javascript.rhino.Node node13 = node7.cloneTree();
        com.google.javascript.rhino.Node node14 = null;
        com.google.javascript.rhino.Node node15 = node13.getChildBefore(node14);
        boolean boolean16 = node13.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        boolean boolean34 = node17.isEquivalentTo(node28);
        boolean boolean35 = node28.isTry();
        boolean boolean36 = node28.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) -1, "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", 1, (int) '4');
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        boolean boolean3 = jSDocInfo0.isDefine();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getVersion();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        jSDocInfo0.setAssociatedNode(node36);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean39 = jSDocInfo0.isOverride();
        java.lang.String str40 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo0.getBaseType();
        java.util.Collection<java.lang.String> strCollection43 = jSDocInfo0.getAuthors();
        jSDocInfo0.setLicense("OR");
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nASSIGN_MOD 0\n\n\nTree2:\nOR\n\n\nSubtree1: ASSIGN_MOD 0\n\n\nSubtree2: OR\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNull(strCollection43);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        boolean boolean14 = node8.isObjectLit();
        boolean boolean15 = node8.isParamList();
        boolean boolean16 = node8.hasOneChild();
        java.lang.String str17 = node8.getQualifiedName();
        boolean boolean18 = node8.isComma();
        boolean boolean19 = node8.wasEmptyNode();
        boolean boolean20 = node8.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isQuotedString();
        int int12 = node3.getChildCount();
        boolean boolean13 = node3.isAnd();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node27.getJSDocInfo();
        boolean boolean29 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoFromForTree(node27);
        int int31 = node3.getIndexOfChild(node27);
        double double32 = node3.getDouble();
        com.google.javascript.rhino.Node node33 = node3.removeChildren();
        boolean boolean34 = node3.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        java.lang.String str7 = node6.getSourceFileName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean10 = node9.isParamList();
        boolean boolean11 = node9.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node9.children();
        boolean boolean13 = node9.isFromExterns();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node17.children();
        java.util.Set<java.lang.String> strSet19 = node17.getDirectives();
        int int20 = node17.getLength();
        boolean boolean21 = node17.isCatch();
        com.google.javascript.rhino.InputId inputId22 = node17.getInputId();
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoFrom(node17);
        boolean boolean24 = node9.isOr();
        boolean boolean25 = node9.isDefaultCase();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str30 = node29.toString();
        com.google.javascript.rhino.Node node31 = node29.cloneTree();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean34 = node31.isEquivalentToTyped(node33);
        node33.setSourceEncodedPositionForTree(31);
        com.google.javascript.rhino.Node node37 = null;
        boolean boolean38 = node33.hasChild(node37);
        node33.putBooleanProp(97, false);
        com.google.javascript.rhino.InputId inputId42 = node33.getInputId();
        int int43 = node33.getCharno();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(12, node6, node9, node33);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags47 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags47.setThrows();
        boolean boolean49 = sideEffectFlags47.areAllFlagsSet();
        boolean boolean50 = sideEffectFlags47.areAllFlagsSet();
        sideEffectFlags47.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node44.setSideEffectFlags(sideEffectFlags47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got EQ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        boolean boolean26 = node17.isInstanceOf();
        boolean boolean27 = node17.isHook();
        node17.setCharno(4095);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node17.setJSType(jSType30);
        node17.setCharno(35);
        boolean boolean34 = node17.isIf();
        boolean boolean35 = node17.isFromExterns();
        boolean boolean36 = node17.isNoSideEffectsCall();
        boolean boolean37 = node17.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        boolean boolean28 = node1.isString();
        boolean boolean29 = node1.isOr();
        boolean boolean30 = node1.isWhile();
        boolean boolean31 = node1.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node28.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node55.getStaticSourceFile();
        boolean boolean64 = node55.isTry();
        node55.setType(3);
        com.google.javascript.rhino.Node node67 = node37.copyInformationFrom(node55);
        com.google.javascript.rhino.Node node68 = node28.useSourceInfoFrom(node67);
        boolean boolean69 = node67.isCatch();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) '4', node67, 1, 0);
        boolean boolean73 = node72.isTrue();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 41, (int) (short) 100, 50);
        com.google.javascript.rhino.Node node4 = node3.removeFirstChild();
        boolean boolean5 = node3.isString();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 12, 31, 48);
        boolean boolean10 = node9.isThrow();
        node3.addChildToBack(node9);
        boolean boolean12 = node9.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setThrows();
        int int9 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo11.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo11.getEnumParameterType();
        java.lang.String str15 = jSDocInfo11.getDescription();
        node7.setJSDocInfo(jSDocInfo11);
        boolean boolean17 = jSDocInfo11.isExpose();
        boolean boolean18 = jSDocInfo11.isIdGenerator();
        boolean boolean19 = jSDocInfo11.isConstant();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = jSDocInfo11.getTypeNodes();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeCollection20);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        boolean boolean32 = node4.isParamList();
        boolean boolean33 = node4.isName();
        boolean boolean34 = node4.isSyntheticBlock();
        java.util.Set<java.lang.String> strSet35 = node4.getDirectives();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = node4.getJSDocInfo();
        boolean boolean7 = node4.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSDocInfo6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 48, 221184);
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("(NUMBER 1.0 [jsdoc_info: JSDocInfo] [directives: [JSDocInfo, hi!, true, NUMBER 1.0]]\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        boolean boolean26 = node17.isInstanceOf();
        boolean boolean27 = node17.isHook();
        boolean boolean28 = node17.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        java.lang.String str13 = node8.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        java.lang.String str15 = node8.getQualifiedName();
        boolean boolean16 = node8.isSetterDef();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        boolean boolean26 = node25.isDo();
        java.util.Set<java.lang.String> strSet27 = node25.getDirectives();
        boolean boolean28 = node25.isString();
        node25.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable31 = node25.getAncestors();
        com.google.javascript.rhino.Node node32 = node8.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node37.setOptionalArg(true);
        boolean boolean40 = node37.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node37.siblings();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(2, node25, node37);
        boolean boolean43 = node37.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ancestorIterable31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isBreak();
        boolean boolean6 = node3.isName();
        boolean boolean7 = node3.isRegExp();
        boolean boolean8 = node3.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.hasParameter("(Not declared as a type name)");
        boolean boolean9 = jSDocInfo0.isDeprecated();
        jSDocInfo0.setLicense("STRING hi! 97 [quoted: 1]\n");
        jSDocInfo0.setDeprecated(false);
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        java.lang.String str12 = node6.toString();
        node6.removeProp((int) (short) 0);
        boolean boolean15 = node6.isObjectLit();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean20 = node19.isGetterDef();
        com.google.javascript.rhino.Node node21 = node6.useSourceInfoFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node30.isDo();
        java.util.Set<java.lang.String> strSet32 = node30.getDirectives();
        com.google.javascript.rhino.Node node33 = node19.clonePropsFrom(node30);
        com.google.javascript.rhino.Node node34 = node33.getNext();
        typePosition0.setItem(node33);
        com.google.javascript.rhino.Node node36 = typePosition0.getItem();
        com.google.javascript.rhino.Node node37 = node36.cloneNode();
        boolean boolean38 = node37.isTypeOf();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isDebugger();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFromForTree(node8);
        boolean boolean10 = node9.isFor();
        boolean boolean11 = node9.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        boolean boolean21 = node20.isDo();
        java.util.Set<java.lang.String> strSet22 = node20.getDirectives();
        boolean boolean23 = node20.isString();
        node20.setWasEmptyNode(false);
        boolean boolean26 = node20.isObjectLit();
        boolean boolean27 = node9.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node28 = node20.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str12 = node8.toString(false, false, true);
        boolean boolean13 = node8.isEmpty();
        boolean boolean14 = node8.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo15.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo15.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo15.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo15.getBaseType();
        boolean boolean21 = jSDocInfo15.isConstant();
        boolean boolean23 = jSDocInfo15.hasDescriptionForParameter("([PROTECTED])");
        java.lang.String str24 = jSDocInfo15.getLicense();
        jSDocInfo15.setLicense("NUMBER 1.0");
        node8.setJSDocInfo(jSDocInfo15);
        boolean boolean28 = node8.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        java.lang.String str39 = jSDocInfo32.getOriginalCommentString();
        int int40 = jSDocInfo32.getParameterCount();
        boolean boolean41 = jSDocInfo32.hasThisType();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        java.lang.String str52 = node46.toString();
        node46.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean59 = node58.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        node58.setJSType(jSType60);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) '#', node46, node58, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList66 = jSDocInfo65.getImplementedInterfaces();
        java.lang.String str67 = jSDocInfo65.getFileOverview();
        node64.setJSDocInfo(jSDocInfo65);
        boolean boolean70 = jSDocInfo65.hasParameterType("NUMBER 1.0");
        boolean boolean71 = jSDocInfo65.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo65.getThrownTypes();
        boolean boolean73 = jSDocInfo65.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str75 = jSDocInfo74.getDescription();
        java.lang.String str76 = jSDocInfo74.getDescription();
        java.lang.String str77 = jSDocInfo74.getLendsName();
        java.lang.String str78 = jSDocInfo74.getOriginalCommentString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList79 = com.google.common.collect.ImmutableList.of(jSDocInfo32, jSDocInfo65, jSDocInfo74);
        boolean boolean80 = jSDocInfo74.isDeprecated();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 1.0" + "'", str52, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jSDocInfoList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        int int6 = node3.getLineno();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        boolean boolean38 = node37.isWith();
        boolean boolean39 = node37.isNot();
        boolean boolean40 = node37.isLabelName();
        com.google.javascript.rhino.Node node41 = node3.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        boolean boolean66 = node60.isBreak();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 1, node47, node51, node60, node70, 1, (-1));
        java.lang.String str74 = node70.getQualifiedName();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean79 = node78.isAnd();
        node78.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str82 = node70.checkTreeEquals(node78);
        jSDocInfo42.setAssociatedNode(node70);
        boolean boolean84 = node70.hasOneChild();
        boolean boolean85 = node37.isEquivalentToTyped(node70);
        boolean boolean86 = node70.isAdd();
        boolean boolean87 = node70.isWhile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        boolean boolean37 = node14.isInstanceOf();
        boolean boolean38 = node14.isCase();
        int int39 = node14.getLineno();
        int int40 = node14.getType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node14.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoFrom(node14);
        int int48 = node47.getLineno();
        boolean boolean49 = node47.isFromExterns();
        java.lang.String str50 = node47.getSourceFileName();
        int int51 = node47.getLength();
        node47.addSuppression("STRING Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean3 = node2.isReturn();
        boolean boolean4 = node2.isName();
        boolean boolean5 = node2.isNew();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node2.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node7 = node2.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.hasChildren();
        boolean boolean7 = node3.isAdd();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        java.lang.String str3 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo32.getTypeNodes();
        java.lang.String str44 = jSDocInfo32.getDescriptionForParameter("([PROTECTED])");
        boolean boolean45 = jSDocInfo32.hasThisType();
        boolean boolean46 = jSDocInfo32.isOverride();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node24.isContinue();
        boolean boolean26 = node24.isTry();
        boolean boolean27 = node24.isLabelName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        boolean boolean32 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node33 = node24.srcref(node31);
        // The following exception was thrown during execution in test generation
        try {
            node24.setString("STRING NUMBER 1.0 [directives: [, hi!]] 100\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        java.lang.String str30 = jSDocInfo23.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection31 = jSDocInfo23.getTypeNodes();
        boolean boolean32 = jSDocInfo23.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo23.getParameterType("NUMBER 1.0 100\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(nodeCollection31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean36 = node35.isFalse();
        java.lang.String str37 = node35.getSourceFileName();
        boolean boolean38 = node35.isLabel();
        node4.putProp(1, (java.lang.Object) node35);
        boolean boolean40 = node35.isNew();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.children();
        boolean boolean42 = node35.isCall();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        java.lang.String str52 = node46.toString();
        node46.removeProp((int) (short) 0);
        boolean boolean55 = node46.isObjectLit();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean60 = node59.isGetterDef();
        com.google.javascript.rhino.Node node61 = node46.useSourceInfoFromForTree(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node59.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean67 = node66.isGetterDef();
        com.google.javascript.rhino.Node node68 = node59.useSourceInfoFrom(node66);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node77 = node72.srcref(node76);
        boolean boolean78 = node76.isFalse();
        com.google.javascript.rhino.Node node79 = node66.useSourceInfoIfMissingFrom(node76);
        boolean boolean80 = node76.isTrue();
        boolean boolean81 = node76.isComma();
        node76.removeProp((int) (short) 10);
        com.google.javascript.rhino.Node node84 = node76.getLastSibling();
        com.google.javascript.rhino.Node node85 = node35.clonePropsFrom(node76);
        boolean boolean86 = node35.isDec();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 1.0" + "'", str52, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo23.getReferences();
        java.lang.String str33 = jSDocInfo23.toString();
        int int34 = jSDocInfo23.getParameterCount();
        java.util.Collection<java.lang.String> strCollection35 = jSDocInfo23.getAuthors();
        java.lang.String str36 = jSDocInfo23.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo23.getEnumParameterType();
        java.lang.String str38 = jSDocInfo23.getReturnDescription();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSDocInfo" + "'", str33, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(strCollection35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        int int27 = jSDocInfo23.getImplementedInterfaceCount();
        boolean boolean28 = jSDocInfo23.isExpose();
        jSDocInfo23.addSuppression("[PROTECTED]");
        boolean boolean31 = jSDocInfo23.isHidden();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean11 = node10.isGetterDef();
        boolean boolean12 = node10.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', node17, node29, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.children();
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isBreak();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node47, node60, node65);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        node71.removeProp((int) (short) 0);
        boolean boolean80 = node71.isObjectLit();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean85 = node84.isGetterDef();
        com.google.javascript.rhino.Node node86 = node71.useSourceInfoFromForTree(node84);
        com.google.javascript.rhino.Node node87 = node67.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 100, node10, node35, node39, node67, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node91 = node35.detachFromParent();
        node91.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node94 = node4.useSourceInfoIfMissingFrom(node91);
        boolean boolean95 = node91.isName();
        boolean boolean96 = node91.isSwitch();
        boolean boolean97 = node91.isInc();
        java.lang.String str98 = node91.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "GETELEM 0 [jsdoc_info: JSDocInfo]" + "'", str98, "GETELEM 0 [jsdoc_info: JSDocInfo]");
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags7.setMutatesArguments();
        int int19 = sideEffectFlags7.valueOf();
        sideEffectFlags7.setThrows();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        jSDocInfo0.setLicense("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean49 = jSDocInfo0.isNoCompile();
        boolean boolean50 = jSDocInfo0.isDeprecated();
        java.lang.String str51 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        typePosition0.setPositionInformation(2, (int) '4', 43, 10);
        int int7 = typePosition0.getEndLine();
        int int8 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node9 = typePosition0.getItem();
        int int10 = typePosition0.getStartLine();
        int int11 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.containsDeclaration();
        boolean boolean44 = jSDocInfo0.hasFileOverview();
        boolean boolean46 = jSDocInfo0.hasParameterType("(STRING true 1)");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 12, 100, (int) (short) 100);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean9 = node8.isThrow();
        int int10 = node8.getSourcePosition();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node8.setStaticSourceFile(staticSourceFile11);
        node8.setLineno((-1));
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        java.lang.String str27 = node23.toString(false, false, true);
        boolean boolean28 = node23.isEmpty();
        boolean boolean29 = node23.isFromExterns();
        com.google.javascript.rhino.Node node30 = node8.srcref(node23);
        boolean boolean31 = node30.isFor();
        node30.setSourceEncodedPositionForTree(8);
        com.google.javascript.rhino.Node node34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node4, node30, node34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0" + "'", str27, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node39.isVar();
        double double42 = node39.getDouble();
        boolean boolean43 = node39.isParamList();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean47 = node46.isDec();
        node46.setOptionalArg(false);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(53, node31, node39, node46, 0, (int) (short) -1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean57 = node56.isAnd();
        boolean boolean59 = node56.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node56.siblings();
        boolean boolean61 = node56.isUnscopedQualifiedName();
        boolean boolean62 = node56.isVarArgs();
        boolean boolean63 = node56.isTypeOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node56.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node65 = node39.clonePropsFrom(node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo66.getParameterType("hi!");
        boolean boolean69 = jSDocInfo66.hasModifies();
        boolean boolean71 = jSDocInfo66.hasDescriptionForParameter("");
        boolean boolean72 = jSDocInfo66.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection73 = jSDocInfo66.getAuthors();
        boolean boolean74 = jSDocInfo66.isExport();
        boolean boolean75 = jSDocInfo66.isNoCompile();
        int int76 = jSDocInfo66.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo66.getModifies();
        node56.setDirectives(strSet77);
        boolean boolean79 = strSet77.isEmpty();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        java.lang.String[] strArray1 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.lang.Object[] objArray5 = strSet2.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.of(strSet2, strSet11);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean20 = node19.isDo();
        boolean boolean21 = node19.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        node25.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node29 = node25.cloneTree();
        com.google.javascript.rhino.Node node30 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node19.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags34.setAllFlags();
        node19.setSideEffectFlags(sideEffectFlags34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.Object obj47 = node40.getProp(10);
        boolean boolean48 = node40.isQuotedString();
        boolean boolean49 = node40.isAnd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        java.lang.String str59 = node53.toString();
        node53.removeProp((int) (short) 0);
        boolean boolean62 = node53.isObjectLit();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean67 = node66.isGetterDef();
        com.google.javascript.rhino.Node node68 = node53.useSourceInfoFromForTree(node66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(35, node19, node40, node66, (int) (short) 1, (int) (short) 1);
        node66.setQuotedString();
        boolean boolean73 = strSet2.remove((java.lang.Object) node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList75 = jSDocInfo74.getImplementedInterfaces();
        java.lang.String str76 = jSDocInfo74.getFileOverview();
        boolean boolean77 = jSDocInfo74.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = jSDocInfo74.getVisibility();
        java.lang.String str80 = jSDocInfo74.getDescriptionForParameter("NUMBER 1.0");
        node66.setJSDocInfo(jSDocInfo74);
        jSDocInfo74.setLicense("true");
        java.lang.String str84 = jSDocInfo74.getBlockDescription();
        boolean boolean85 = jSDocInfo74.hasReturnType();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 1.0" + "'", str59, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(visibility78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        java.lang.String str4 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue1.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue9.or(ternaryValue12);
        java.lang.String str15 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.and(ternaryValue18);
        java.lang.String str20 = ternaryValue17.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue17.or(ternaryValue23);
        java.lang.String str26 = ternaryValue23.toString();
        java.lang.String str27 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue12.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue12.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue12.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "true" + "'", str15, "true");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "true" + "'", str27, "true");
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("STRING hi!\n");
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        boolean boolean21 = node20.isBlock();
        boolean boolean22 = node20.hasMoreThanOneChild();
        boolean boolean23 = node20.isQualifiedName();
        node20.putBooleanProp(12325, false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setSourceEncodedPositionForTree(30);
        boolean boolean14 = node8.isGetProp();
        boolean boolean15 = node8.isUnscopedQualifiedName();
        boolean boolean16 = node8.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node8.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setSourceEncodedPositionForTree(30);
        boolean boolean14 = node8.isGetProp();
        boolean boolean15 = node8.isHook();
        node8.setSourceFileForTesting("BITXOR 45\n");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int19 = typePosition18.getPositionOnStartLine();
        typePosition18.setPositionInformation(2, (int) '4', 43, 10);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int29 = node28.getSideEffectFlags();
        node28.setOptionalArg(true);
        boolean boolean32 = node28.isNew();
        typePosition18.setItem(node28);
        node8.addChildToFront(node28);
        boolean boolean35 = node28.isOnlyModifiesThisCall();
        boolean boolean36 = node28.isLabelName();
        int int37 = node28.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition43.getPositionOnEndLine();
        int int57 = stringPosition43.getPositionOnEndLine();
        int int58 = stringPosition43.getPositionOnStartLine();
        int int59 = stringPosition43.getEndLine();
        int int60 = stringPosition43.getStartLine();
        stringPosition43.setItem("(STRING NUMBER 1.0 [directives: [, hi!]])");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        java.lang.Object obj6 = node4.getProp(32);
        boolean boolean7 = node4.isVoid();
        com.google.javascript.rhino.jstype.JSType jSType8 = node4.getJSType();
        node4.setCharno((int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Not declared as a type name");
        boolean boolean2 = node1.hasChildren();
        boolean boolean3 = node1.isDec();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean27 = node26.isBreak();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4095, node8, node21, node26);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = strSet32.add("true");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray38 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList39 = com.google.common.collect.ImmutableList.of(visibilityArray38);
        java.lang.String str40 = visibilityList39.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList41 = visibilityList39.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo42.getImplementedInterfaces();
        boolean boolean44 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo42.getParameterType("Not declared as a constructor");
        boolean boolean47 = jSDocInfo42.isExport();
        boolean boolean48 = jSDocInfo42.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo42.getImplementedInterfaces();
        boolean boolean50 = visibilityList39.equals((java.lang.Object) jSDocInfo42);
        boolean boolean51 = strSet32.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList39);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean53 = node1.isTry();
        boolean boolean54 = node1.isBlock();
        node1.setSourceFileForTesting("((OR 0 [var_args_name: 1]\n))");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray38);
        org.junit.Assert.assertNotNull(visibilityList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[PROTECTED]" + "'", str40, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList41);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("STRING hi! 97\n");
        int int6 = stringPosition0.getStartLine();
        java.lang.String str7 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "STRING hi! 97\n" + "'", str7, "STRING hi! 97\n");
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isJavaDispatch();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        boolean boolean4 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        boolean boolean10 = node7.isOnlyModifiesThisCall();
        boolean boolean11 = node7.isNew();
        boolean boolean12 = node7.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean27 = node26.isBreak();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4095, node8, node21, node26);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.Object[] objArray35 = strSet32.toArray();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet32);
        int int37 = strSet32.size();
        strSet32.clear();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        boolean boolean48 = node47.isDo();
        java.util.Set<java.lang.String> strSet49 = node47.getDirectives();
        boolean boolean50 = node47.isString();
        node47.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = node47.getJSDocInfo();
        boolean boolean54 = node47.isNE();
        com.google.javascript.rhino.Node node56 = node47.getAncestor(2);
        boolean boolean57 = strSet32.contains((java.lang.Object) node56);
        boolean boolean59 = strSet32.add("STRING ");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        java.lang.Object obj70 = node63.getProp(10);
        boolean boolean71 = node63.isArrayLit();
        boolean boolean72 = node63.isAdd();
        int int73 = node63.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node63.children();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node79 = node63.srcref(node78);
        boolean boolean80 = strSet32.equals((java.lang.Object) node63);
        boolean boolean81 = node63.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[, hi!]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSDocInfo53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        boolean boolean7 = node5.getBooleanProp((int) (byte) 1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        java.lang.String str39 = node35.getQualifiedName();
        com.google.javascript.rhino.Node node40 = node35.detachFromParent();
        boolean boolean41 = node35.isCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node35.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(23, node1, node5, node35, (int) (short) 0, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        boolean boolean37 = node14.isInstanceOf();
        boolean boolean38 = node14.isCase();
        int int39 = node14.getLineno();
        int int40 = node14.getType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node14.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoFrom(node14);
        boolean boolean48 = node47.isAssign();
        boolean boolean49 = node47.hasChildren();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str54 = node53.toString();
        com.google.javascript.rhino.Node node55 = node53.cloneTree();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean58 = node55.isEquivalentToTyped(node57);
        node47.addChildrenToFront(node57);
        int int60 = node47.getSourceOffset();
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 39 + "'", int40 == 39);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER 1.0" + "'", str54, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 97, 397316, 51);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        boolean boolean7 = node6.isThrow();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.String str18 = node12.toString();
        node12.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', node12, node24, 0, (int) (short) 0);
        java.lang.Object obj32 = node30.getProp(48);
        com.google.javascript.rhino.Node node33 = node6.useSourceInfoFrom(node30);
        boolean boolean34 = node30.isName();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        boolean boolean58 = node52.isBreak();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 1, node39, node43, node52, node62, 1, (-1));
        java.lang.String str66 = node62.getQualifiedName();
        com.google.javascript.rhino.Node node67 = node62.detachFromParent();
        boolean boolean68 = node62.isIf();
        boolean boolean69 = node62.hasMoreThanOneChild();
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        node62.setJSType(jSType70);
        java.lang.Object obj73 = node62.getProp(54);
        boolean boolean74 = node62.isAnd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = node30.removeChildAfter(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getName();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
        org.junit.Assert.assertNull(stringPosition8);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        java.lang.Object obj24 = node22.getProp(48);
        com.google.javascript.rhino.Node node25 = node22.getFirstChild();
        boolean boolean26 = node25.isQuotedString();
        java.lang.String str27 = node25.toString();
        boolean boolean28 = node25.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        java.lang.String str38 = node32.toString();
        node32.removeProp((int) (short) 0);
        boolean boolean41 = node32.isObjectLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean46 = node45.isGetterDef();
        com.google.javascript.rhino.Node node47 = node32.useSourceInfoFromForTree(node45);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder48 = node45.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        java.lang.String str58 = node52.toString();
        node52.removeProp((int) (short) 0);
        boolean boolean61 = node52.isObjectLit();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean66 = node65.isGetterDef();
        com.google.javascript.rhino.Node node67 = node52.useSourceInfoFromForTree(node65);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder68 = node65.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean73 = node72.isGetterDef();
        com.google.javascript.rhino.Node node74 = node65.useSourceInfoFrom(node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node83 = node78.srcref(node82);
        boolean boolean84 = node82.isFalse();
        com.google.javascript.rhino.Node node85 = node72.useSourceInfoIfMissingFrom(node82);
        boolean boolean86 = node82.isTrue();
        com.google.javascript.rhino.Node node87 = node45.srcrefTree(node82);
        com.google.javascript.rhino.Node node88 = node82.removeChildren();
        boolean boolean89 = node25.isEquivalentTo(node82);
        boolean boolean90 = node25.isNot();
        boolean boolean92 = node25.getBooleanProp((int) (byte) 100);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0" + "'", str27, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER 1.0" + "'", str58, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        int int12 = node8.getSourceOffset();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        boolean boolean36 = node30.isBreak();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 1, node17, node21, node30, node40, 1, (-1));
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean49 = node48.isFalse();
        java.lang.String str50 = node48.getSourceFileName();
        boolean boolean51 = node48.isLabel();
        node17.putProp(1, (java.lang.Object) node48);
        node17.detachChildren();
        node17.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node64.isDo();
        java.util.Set<java.lang.String> strSet66 = node64.getDirectives();
        boolean boolean67 = node64.isString();
        node64.setWasEmptyNode(false);
        boolean boolean70 = node64.isGetterDef();
        com.google.javascript.rhino.Node node71 = node17.useSourceInfoFrom(node64);
        boolean boolean72 = node64.isStringKey();
        node8.addChildToFront(node64);
        java.lang.String str74 = node8.toStringTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node8.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList77 = jSDocInfo76.getImplementedInterfaces();
        java.lang.String str78 = jSDocInfo76.getFileOverview();
        boolean boolean79 = jSDocInfo76.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = jSDocInfo76.getVisibility();
        java.lang.String str82 = jSDocInfo76.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str83 = jSDocInfo76.getVersion();
        java.util.Set<java.lang.String> strSet84 = jSDocInfo76.getModifies();
        boolean boolean85 = jSDocInfo76.shouldPreserveTry();
        java.lang.String str86 = jSDocInfo76.getSourceName();
        java.lang.String str87 = jSDocInfo76.getVersion();
        boolean boolean88 = jSDocInfo76.hasBaseType();
        node8.setJSDocInfo(jSDocInfo76);
        boolean boolean90 = jSDocInfo76.isConstructor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 1.0\n    NUMBER 1.0\n" + "'", str74, "NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(jSTypeExpressionList77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(visibility80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.isConstant();
        java.lang.String str33 = jSDocInfo23.getLendsName();
        boolean boolean34 = jSDocInfo23.hasThisType();
        boolean boolean35 = jSDocInfo23.isNoTypeCheck();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("(hi!)");
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getParameterType("hi!");
        jSDocInfo14.addSuppression("hi!");
        java.lang.String str19 = jSDocInfo14.toString();
        boolean boolean20 = jSDocInfo14.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo14.setVisibility(visibility21);
        boolean boolean23 = jSDocInfo14.hasModifies();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo14.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo14.getParameterType("(hi!)");
        java.lang.String str27 = jSDocInfo14.getSourceName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo14.getVisibility();
        jSDocInfo0.setVisibility(visibility28);
        boolean boolean30 = jSDocInfo0.containsDeclaration();
        int int31 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        boolean boolean72 = typePosition3.hasBrackets();
        int int73 = typePosition3.getPositionOnEndLine();
        com.google.javascript.rhino.Node node74 = typePosition3.getItem();
        int int75 = typePosition3.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4095 + "'", int75 == 4095);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isOr();
        boolean boolean8 = node4.isThrow();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str13 = node12.toString();
        boolean boolean14 = node12.isDebugger();
        node4.addChildrenToBack(node12);
        int int16 = node4.getType();
        com.google.javascript.rhino.Node node18 = node4.getAncestor(0);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(51, 53, 2);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean46 = node45.isBreak();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(4095, node27, node40, node45);
        java.util.Set<java.lang.String> strSet48 = node47.getDirectives();
        com.google.javascript.rhino.Node node49 = node47.getFirstChild();
        boolean boolean50 = node47.isArrayLit();
        boolean boolean51 = node47.isGetElem();
        boolean boolean52 = node47.isTry();
        com.google.javascript.rhino.Node node53 = node22.copyInformationFromForTree(node47);
        node22.setOptionalArg(false);
        com.google.javascript.rhino.Node node56 = node4.copyInformationFrom(node22);
        boolean boolean57 = node4.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isVoid();
        node3.setLength(51);
        com.google.javascript.rhino.InputId inputId8 = node3.getInputId();
        boolean boolean9 = node3.isFalse();
        com.google.javascript.rhino.jstype.JSType jSType10 = node3.getJSType();
        node3.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSType10);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node13.getJSDocInfo();
        boolean boolean15 = node13.isQualifiedName();
        com.google.javascript.rhino.Node node16 = node4.useSourceInfoFromForTree(node13);
        node13.setDouble((double) (byte) 10);
        boolean boolean19 = node13.wasEmptyNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isOr();
        com.google.javascript.rhino.Node node21 = node16.getLastSibling();
        node16.setCharno(100);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.String str34 = node28.toString();
        node28.removeProp((int) (short) 0);
        boolean boolean37 = node28.isObjectLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean42 = node41.isGetterDef();
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, node43);
        node44.setSourceFileForTesting("Not declared as a constructor");
        boolean boolean47 = node16.isEquivalentToTyped(node44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = node44.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0" + "'", str34, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 46, (int) '4', 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        node1.setSourceEncodedPositionForTree(97);
        boolean boolean15 = node1.isOptionalArg();
        boolean boolean16 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 12, 31, 48);
        boolean boolean4 = node3.isDefaultCase();
        boolean boolean5 = node3.isLabel();
        boolean boolean7 = node3.getBooleanProp(2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isCatch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node46.isBreak();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node37, node46, node56, 1, (-1));
        boolean boolean60 = node46.isEmpty();
        java.lang.String str61 = node22.checkTreeEquals(node46);
        boolean boolean62 = node46.isFromExterns();
        boolean boolean63 = node46.isString();
        com.google.javascript.rhino.InputId inputId64 = node46.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(inputId64);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isArrayLit();
        boolean boolean12 = node3.hasMoreThanOneChild();
        node3.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isHidden();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isObjectLit();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean48 = node47.isGetterDef();
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoFromForTree(node47);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 1, node49);
        com.google.javascript.rhino.Node node51 = node29.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node60.isDo();
        java.util.Set<java.lang.String> strSet62 = node60.getDirectives();
        boolean boolean63 = node60.isString();
        node60.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable66 = node60.getAncestors();
        com.google.javascript.rhino.Node node67 = node50.srcrefTree(node60);
        com.google.javascript.rhino.Node node68 = node1.srcref(node60);
        int int69 = node60.getLineno();
        int int71 = node60.getIntProp(15);
        boolean boolean72 = node60.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ancestorIterable66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        int int62 = node13.getIntProp((int) (byte) 10);
        boolean boolean63 = node13.isTrue();
        node13.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n");
        boolean boolean66 = node13.isExprResult();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node71.setOptionalArg(true);
        boolean boolean74 = node71.isOr();
        node71.setSourceEncodedPosition((int) (byte) 0);
        java.util.Set<java.lang.String> strSet77 = node71.getDirectives();
        node71.detachChildren();
        boolean boolean79 = node71.isAssign();
        node13.addChildToBack(node71);
        boolean boolean81 = node13.isStringKey();
        int int83 = node13.getIntProp((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            node13.setDouble((double) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("([PROTECTED])");
        boolean boolean9 = jSDocInfo0.isExpose();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isCatch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node46.isBreak();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node37, node46, node56, 1, (-1));
        boolean boolean60 = node46.isEmpty();
        java.lang.String str61 = node22.checkTreeEquals(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node46.getJsDocBuilderForNode();
        node46.detachChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        java.lang.String str74 = node68.toString();
        node68.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean81 = node80.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node80.setJSType(jSType82);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) '#', node68, node80, 0, (int) (short) 0);
        node46.addChildToBack(node86);
        boolean boolean88 = node46.hasOneChild();
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean92 = node91.isVar();
        com.google.javascript.rhino.Node node93 = node46.clonePropsFrom(node91);
        boolean boolean94 = node91.hasMoreThanOneChild();
        boolean boolean95 = node91.isVar();
        boolean boolean96 = node91.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 1.0" + "'", str74, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isBreak();
        boolean boolean34 = node4.isVar();
        node4.putBooleanProp(2, true);
        boolean boolean38 = node4.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.isExpose();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        boolean boolean11 = jSDocInfo0.isOverride();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 2, 4095);
        boolean boolean4 = node3.isTypeOf();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        node4.setLength(4095);
        boolean boolean7 = node4.isLabelName();
        boolean boolean8 = node4.isSwitch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isObjectLit();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean48 = node47.isGetterDef();
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoFromForTree(node47);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 1, node49);
        com.google.javascript.rhino.Node node51 = node29.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node60.isDo();
        java.util.Set<java.lang.String> strSet62 = node60.getDirectives();
        boolean boolean63 = node60.isString();
        node60.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable66 = node60.getAncestors();
        com.google.javascript.rhino.Node node67 = node50.srcrefTree(node60);
        com.google.javascript.rhino.Node node68 = node1.srcref(node60);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node77 = node72.srcref(node76);
        boolean boolean78 = node76.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node76.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = node76.getStaticSourceFile();
        boolean boolean81 = node76.isCase();
        boolean boolean82 = node76.isGetProp();
        node1.addChildrenToFront(node76);
        com.google.javascript.rhino.jstype.JSType jSType84 = null;
        node1.setJSType(jSType84);
        java.util.Set<java.lang.String> strSet86 = node1.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder87 = node1.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ancestorIterable66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
        org.junit.Assert.assertNull(staticSourceFile80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(strSet86);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder87);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node4.new FileLevelJsDocBuilder();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder9 = serializableBuilder0.add((java.io.Serializable) node4);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        boolean boolean19 = node18.isDo();
        java.util.Set<java.lang.String> strSet20 = node18.getDirectives();
        boolean boolean21 = node18.isString();
        node18.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node18.getJSDocInfo();
        boolean boolean25 = node18.isNE();
        com.google.javascript.rhino.Node node27 = node18.getAncestor(2);
        boolean boolean28 = node18.isCatch();
        boolean boolean29 = node18.isOptionalArg();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder30 = serializableBuilder0.add((java.io.Serializable) node18);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray36, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) 'a', nodeArray36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(12, nodeArray36);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(3, nodeArray36, 4095, 5);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder46 = serializableBuilder0.add((java.io.Serializable[]) nodeArray36);
        org.junit.Assert.assertNotNull(serializableBuilder0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableBuilder9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableBuilder30);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(serializableBuilder46);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node18.isObjectLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str24 = node23.toString();
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean28 = node25.isEquivalentToTyped(node27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        java.lang.String str43 = node37.toString();
        node37.removeProp((int) (short) 0);
        boolean boolean46 = node37.isObjectLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean51 = node50.isGetterDef();
        com.google.javascript.rhino.Node node52 = node37.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 1, node52);
        com.google.javascript.rhino.Node node54 = node32.useSourceInfoFromForTree(node53);
        boolean boolean55 = node53.isInc();
        int int56 = node53.getSourcePosition();
        boolean boolean57 = node53.isQuotedString();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node59 = node25.copyInformationFrom(node53);
        node18.addChildToFront(node59);
        int int61 = node18.getType();
        boolean boolean62 = node18.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 1.0" + "'", str43, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 39 + "'", int61 == 39);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node7 = node3.getLastChild();
        boolean boolean8 = node3.isTrue();
        node3.setType(41);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        int int26 = node17.getType();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n", 31, (int) ' ');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int35 = node34.getSideEffectFlags();
        boolean boolean36 = node34.isUnscopedQualifiedName();
        boolean boolean37 = node34.isDec();
        int int38 = node30.getIndexOfChild(node34);
        com.google.javascript.rhino.Node node39 = node17.srcrefTree(node30);
        boolean boolean40 = node39.isGetProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder41 = node39.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 39 + "'", int26 == 39);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder41);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "STRING ", 4095, 61537);
        boolean boolean5 = node4.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        java.lang.String str7 = node6.getSourceFileName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean10 = node9.isParamList();
        boolean boolean11 = node9.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node9.children();
        boolean boolean13 = node9.isFromExterns();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node17.children();
        java.util.Set<java.lang.String> strSet19 = node17.getDirectives();
        int int20 = node17.getLength();
        boolean boolean21 = node17.isCatch();
        com.google.javascript.rhino.InputId inputId22 = node17.getInputId();
        com.google.javascript.rhino.Node node23 = node9.useSourceInfoFrom(node17);
        boolean boolean24 = node9.isOr();
        boolean boolean25 = node9.isDefaultCase();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str30 = node29.toString();
        com.google.javascript.rhino.Node node31 = node29.cloneTree();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean34 = node31.isEquivalentToTyped(node33);
        node33.setSourceEncodedPositionForTree(31);
        com.google.javascript.rhino.Node node37 = null;
        boolean boolean38 = node33.hasChild(node37);
        node33.putBooleanProp(97, false);
        com.google.javascript.rhino.InputId inputId42 = node33.getInputId();
        int int43 = node33.getCharno();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(12, node6, node9, node33);
        boolean boolean45 = node33.isNot();
        boolean boolean46 = node33.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        java.lang.String str14 = node7.getQualifiedName();
        com.google.javascript.rhino.InputId inputId15 = null;
        node7.setInputId(inputId15);
        node7.setLineno(44);
        boolean boolean19 = node7.isDec();
        boolean boolean20 = node7.isInc();
        int int22 = node7.getIntProp((int) (short) 0);
        int int23 = node7.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        int int29 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node30 = typePosition0.getItem();
        boolean boolean31 = node30.isAnd();
        node30.setString("STRING NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        boolean boolean46 = jSDocInfo0.isExport();
        boolean boolean47 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        node7.putIntProp((int) (short) 100, (int) (short) 10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node29.isBreak();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 1, node16, node20, node29, node39, 1, (-1));
        boolean boolean43 = node42.isWith();
        boolean boolean44 = node42.isNot();
        boolean boolean45 = node42.isLabelName();
        com.google.javascript.rhino.Node node46 = node7.copyInformationFrom(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node7.children();
        boolean boolean49 = node7.getBooleanProp(61440);
        com.google.javascript.rhino.InputId inputId50 = node7.getInputId();
        boolean boolean51 = node7.isThis();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node7.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node31 = node30.cloneNode();
        boolean boolean32 = node30.hasOneChild();
        com.google.javascript.rhino.Node node33 = node30.removeChildren();
        boolean boolean34 = node33.isDo();
        node33.setLength(38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        boolean boolean46 = node45.isDo();
        java.util.Set<java.lang.String> strSet47 = node45.getDirectives();
        boolean boolean48 = node45.isString();
        node45.setWasEmptyNode(false);
        boolean boolean51 = node45.isObjectLit();
        boolean boolean52 = node45.isParamList();
        com.google.javascript.rhino.Node node53 = node33.useSourceInfoFrom(node45);
        node53.addSuppression("STRING Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n 31");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node16.isDo();
        java.util.Set<java.lang.String> strSet18 = node16.getDirectives();
        boolean boolean19 = node16.isString();
        node16.setWasEmptyNode(false);
        boolean boolean22 = node16.isGetterDef();
        boolean boolean23 = node16.isFunction();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node31.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node31.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = node31.getStaticSourceFile();
        java.lang.String str36 = node31.getSourceFileName();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(2, node16, node31, node40, 32, 0);
        jSDocInfo0.setAssociatedNode(node16);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean50 = node49.isAnd();
        boolean boolean51 = node49.isDebugger();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(40, node49, (int) (short) 100, 29);
        com.google.javascript.rhino.Node node55 = node16.useSourceInfoIfMissingFromForTree(node49);
        node49.setLength(0);
        java.lang.String str58 = node49.getQualifiedName();
        java.lang.String str62 = node49.toString(true, false, true);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertNull(staticSourceFile35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER 1.0" + "'", str62, "NUMBER 1.0");
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        jSDocInfo0.addSuppression("true");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str15 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.setLicense("STRING Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n 31");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList34 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder35 = serializableBuilder33.add((java.io.Serializable) booleanLiteralSetEnumList34);
        java.lang.String[] strArray37 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = com.google.common.collect.ImmutableList.copyOf(strArray37);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder39 = serializableBuilder33.add((java.io.Serializable[]) strArray37);
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of(strArray37);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList34);
        org.junit.Assert.assertNotNull(serializableBuilder35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(serializableBuilder39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        boolean boolean6 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList72 = com.google.common.collect.ImmutableList.of(typePosition69);
        int int73 = typePosition69.getStartLine();
        int int74 = typePosition69.getEndLine();
        com.google.javascript.rhino.Node node75 = typePosition69.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertNotNull(typePositionList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(51, "Not declared as a constructor");
        int int3 = node2.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        com.google.javascript.rhino.Node node5 = node2.cloneNode();
        boolean boolean6 = node2.isThrow();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        java.lang.String str16 = node10.toString();
        node10.removeProp((int) (short) 0);
        boolean boolean19 = node10.isObjectLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node10.useSourceInfoFromForTree(node23);
        int int26 = node25.getSourceOffset();
        boolean boolean27 = node25.isCall();
        int int28 = node25.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean52 = node51.isBreak();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(4095, node33, node46, node51);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet57);
        int int60 = node33.getCharno();
        boolean boolean61 = node33.isParamList();
        boolean boolean62 = node33.isName();
        boolean boolean63 = node33.isOptionalArg();
        boolean boolean64 = node33.isAnd();
        java.lang.String str65 = node25.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node66 = node2.useSourceInfoFromForTree(node25);
        boolean boolean67 = node2.isRegExp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 1.0" + "'", str16, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.UnmodifiableListIterator<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityItorBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(visibilityItorBuilder0);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.isExport();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        boolean boolean14 = jSDocInfo0.hasParameterType("NUMBER 1.0 0 [directives: [NUMBER 1.0, , hi!, Not declared as a constructor]]\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isCatch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node46.isBreak();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node37, node46, node56, 1, (-1));
        boolean boolean60 = node46.isEmpty();
        java.lang.String str61 = node22.checkTreeEquals(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node46.getJsDocBuilderForNode();
        node46.detachChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        java.lang.String str74 = node68.toString();
        node68.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean81 = node80.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node80.setJSType(jSType82);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) '#', node68, node80, 0, (int) (short) 0);
        node46.addChildToBack(node86);
        boolean boolean88 = node46.hasOneChild();
        boolean boolean90 = node46.getBooleanProp(3);
        int int91 = node46.getCharno();
        boolean boolean92 = node46.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = node46.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER 1.0" + "'", str74, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("hi!");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection47 = jSDocInfo0.getTypeNodes();
        boolean boolean48 = jSDocInfo0.isIdGenerator();
        java.lang.String str49 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(nodeCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.isHidden();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("STRING hi! 97 [quoted: 1]\n");
        java.lang.String str13 = jSDocInfo0.getDeprecationReason();
        boolean boolean14 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean4 = node3.isDec();
        node3.setOptionalArg(false);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.String str18 = node12.toString();
        int int19 = node8.getIndexOfChild(node12);
        boolean boolean20 = node8.wasEmptyNode();
        int int21 = node8.getCharno();
        com.google.javascript.rhino.Node node22 = node8.cloneTree();
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node28.setOptionalArg(true);
        node28.setType(53);
        boolean boolean33 = node28.isInstanceOf();
        java.lang.String str34 = node28.getSourceFileName();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        boolean boolean58 = node52.isBreak();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 1, node39, node43, node52, node62, 1, (-1));
        com.google.javascript.rhino.Node node66 = node65.cloneNode();
        boolean boolean67 = node65.isArrayLit();
        boolean boolean68 = node65.isFunction();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node3, node22, node28, node65);
        node3.removeProp((int) (byte) 10);
        com.google.javascript.rhino.Node node72 = node3.removeFirstChild();
        boolean boolean73 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        jSDocInfo0.setLicense("GETELEM Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(visibility7);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setSourceEncodedPositionForTree((int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        boolean boolean5 = node3.isWith();
        com.google.javascript.rhino.Node node7 = node3.getAncestor(53);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str7 = jSDocInfo6.getDescription();
        boolean boolean8 = jSDocInfo6.isInterface();
        jSDocInfo6.setDeprecated(true);
        boolean boolean11 = jSDocInfo6.isNoSideEffects();
        boolean boolean12 = jSDocInfo6.isNoTypeCheck();
        java.lang.String str13 = jSDocInfo6.toString();
        boolean boolean14 = jSDocInfo6.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo6.getImplementedInterfaces();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str22 = node18.toString(false, false, true);
        node18.setType(40);
        node18.putIntProp(2, 15);
        jSDocInfo6.setAssociatedNode(node18);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean52 = node51.isBreak();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(4095, node33, node46, node51);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet57);
        boolean boolean61 = strSet57.add("true");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("[PROTECTED]", 8, 44);
        boolean boolean66 = strSet57.contains((java.lang.Object) node65);
        strSet57.clear();
        boolean boolean69 = strSet57.add("(Not declared as a constructor)");
        node18.setDirectives((java.util.Set<java.lang.String>) strSet57);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(221184, "Node tree inequality:\nTree1:\nSTRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nTYPEOF\n\n\nSubtree1: STRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: TYPEOF\n", 15, 0);
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChildAfter(node18, node75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GETELEM Not declared as a constructor" + "'", str22, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node58.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = node67.srcref(node71);
        java.lang.String str73 = node67.toString();
        int int74 = node63.getIndexOfChild(node67);
        node63.setSourceEncodedPositionForTree(97);
        com.google.javascript.rhino.Node node77 = node58.useSourceInfoIfMissingFromForTree(node63);
        node58.setWasEmptyNode(true);
        boolean boolean80 = node58.isVar();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) 2, 29, (int) (short) 0);
        com.google.javascript.rhino.Node node85 = node58.useSourceInfoIfMissingFromForTree(node84);
        boolean boolean86 = node58.isDec();
        node58.putIntProp(61440, (int) (short) 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER 1.0" + "'", str73, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        boolean boolean20 = node17.isGetElem();
        com.google.javascript.rhino.Node node21 = node17.getNext();
        boolean boolean22 = node17.isRegExp();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) '4', node17, 23, (int) ' ');
        boolean boolean26 = node25.isComma();
        com.google.javascript.rhino.Node node27 = node25.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 7, 11);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.hasParameter("NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        node4.setQuotedString();
        int int6 = node4.getChildCount();
        boolean boolean7 = node4.isCase();
        node4.setWasEmptyNode(true);
        node4.setType((int) ' ');
        boolean boolean12 = node4.isName();
        com.google.javascript.rhino.Node node13 = node4.getParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        int int62 = node13.getIntProp((int) (byte) 10);
        boolean boolean63 = node13.isTrue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node67.children();
        java.util.Set<java.lang.String> strSet69 = node67.getDirectives();
        boolean boolean70 = node67.isFunction();
        boolean boolean71 = node67.isDec();
        com.google.javascript.rhino.Node node72 = node13.srcref(node67);
        boolean boolean73 = node72.isWhile();
        boolean boolean74 = node72.isTypeOf();
        boolean boolean75 = node72.isComma();
        boolean boolean76 = node72.isGetProp();
        boolean boolean77 = node72.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node72.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags9.setAllFlags();
        sideEffectFlags9.setMutatesArguments();
        boolean boolean20 = sideEffectFlags9.areAllFlagsSet();
        sideEffectFlags9.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        java.lang.String str14 = node13.getSourceFileName();
        jSDocInfo0.setAssociatedNode(node13);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getPositionOnStartLine();
        com.google.javascript.rhino.Node node18 = typePosition16.getItem();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        java.lang.String str28 = node22.toString();
        node22.removeProp((int) (short) 0);
        boolean boolean31 = node22.isObjectLit();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean36 = node35.isGetterDef();
        com.google.javascript.rhino.Node node37 = node22.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        boolean boolean47 = node46.isDo();
        java.util.Set<java.lang.String> strSet48 = node46.getDirectives();
        com.google.javascript.rhino.Node node49 = node35.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node50 = node49.getNext();
        typePosition16.setItem(node49);
        com.google.javascript.rhino.Node node52 = typePosition16.getItem();
        com.google.javascript.rhino.Node node53 = node52.cloneNode();
        boolean boolean54 = node52.isQualifiedName();
        node13.addChildrenToBack(node52);
        node13.putIntProp(54, 3);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER 1.0" + "'", str28, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        jSDocInfo0.addSuppression("true");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean16 = jSDocInfo0.hasParameterType("STRING true 1");
        java.lang.String str17 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        boolean boolean13 = jSDocInfo0.isExpose();
        boolean boolean14 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getEnumParameterType();
        boolean boolean16 = jSDocInfo0.hasThisType();
        boolean boolean17 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("JSDocInfo");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        node1.removeProp(48);
        node1.setString("");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node9.isDo();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        boolean boolean12 = node9.isString();
        node9.setWasEmptyNode(false);
        boolean boolean15 = node9.isObjectLit();
        boolean boolean16 = node9.isDebugger();
        node9.removeProp((-1));
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(36, node9, (int) (byte) 10, 41);
        boolean boolean22 = node9.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        java.util.Collection<java.lang.String> strCollection40 = jSDocInfo32.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = jSDocInfo32.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo32.getSuppressions();
        boolean boolean44 = jSDocInfo32.hasParameter("(NUMBER 1.0 [jsdoc_info: JSDocInfo] [directives: [JSDocInfo, hi!, true, NUMBER 1.0]]\n)");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strCollection40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n))", 40, (int) (byte) 0);
        boolean boolean4 = node3.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        stringPosition2.setItem("");
        int int58 = stringPosition2.getPositionOnStartLine();
        int int59 = stringPosition2.getStartLine();
        int int60 = stringPosition2.getStartLine();
        stringPosition2.setItem("NUMBER 1.0 97");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isCase();
        int int33 = node8.getLineno();
        java.lang.Object obj35 = node8.getProp(3);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        boolean boolean59 = node53.isBreak();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node40, node44, node53, node63, 1, (-1));
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        java.lang.String str76 = node70.toString();
        node70.removeProp((int) (short) 0);
        boolean boolean79 = node70.isGetProp();
        boolean boolean80 = node70.isReturn();
        com.google.javascript.rhino.Node node81 = node40.srcref(node70);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean86 = node85.isThis();
        node85.setSourceEncodedPositionForTree(0);
        boolean boolean89 = node85.hasOneChild();
        com.google.javascript.rhino.Node node90 = node40.useSourceInfoFrom(node85);
        boolean boolean91 = node90.isEmpty();
        com.google.javascript.rhino.Node node92 = node90.detachFromParent();
        boolean boolean93 = node92.isThrow();
        boolean boolean94 = node92.isHook();
        node92.setVarArgs(true);
        com.google.javascript.rhino.Node node97 = node8.useSourceInfoIfMissingFromForTree(node92);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER 1.0" + "'", str76, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.hasParameter("true");
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("NUMBER 49.0 2\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.setIsSyntheticBlock(true);
        boolean boolean28 = node1.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        boolean boolean5 = node3.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo6.getEnumParameterType();
        java.lang.String str10 = jSDocInfo6.getDescription();
        boolean boolean11 = jSDocInfo6.isNoAlias();
        boolean boolean12 = jSDocInfo6.isDefine();
        boolean boolean13 = jSDocInfo6.hasThisType();
        boolean boolean14 = jSDocInfo6.isExterns();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo6.getSuppressions();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node20.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        boolean boolean46 = node40.isBreak();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 1, node27, node31, node40, node50, 1, (-1));
        boolean boolean54 = node31.isInstanceOf();
        boolean boolean55 = node31.isCase();
        int int56 = node31.getLineno();
        int int57 = node31.getType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node31.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node64 = node20.useSourceInfoFrom(node31);
        boolean boolean65 = node64.isHook();
        boolean boolean66 = node64.isArrayLit();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(35, node64, 37, 41);
        com.google.javascript.rhino.Node node70 = node69.removeChildren();
        boolean boolean71 = strSet15.contains((java.lang.Object) node69);
        node69.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node73 = node3.removeChildAfter(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 39 + "'", int57 == 39);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isOr();
        int int21 = node16.getSideEffectFlags();
        boolean boolean22 = node16.isSyntheticBlock();
        node16.setType((int) '#');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        boolean boolean8 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getVersion();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        boolean boolean47 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str48 = jSDocInfo0.toString();
        boolean boolean50 = jSDocInfo0.hasParameter("STRING NUMBER 1.0 [directives: [, hi!]] 51");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isReturn();
        com.google.javascript.rhino.InputId inputId5 = node1.getInputId();
        com.google.javascript.rhino.Node node6 = node1.cloneTree();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean80 = node79.isGetterDef();
        com.google.javascript.rhino.Node node81 = node66.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node82 = node62.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node83 = node34.srcrefTree(node62);
        boolean boolean84 = node83.isIn();
        boolean boolean85 = node83.isCase();
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildToBack(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        boolean boolean11 = node7.isNull();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str16 = node15.toString();
        boolean boolean17 = node15.isDebugger();
        boolean boolean18 = node15.isGetterDef();
        com.google.javascript.rhino.Node node19 = node7.useSourceInfoIfMissingFromForTree(node15);
        node7.addSuppression("OR 0 [var_args_name: 1]\n");
        boolean boolean22 = node7.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 1.0" + "'", str16, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("GETELEM Not declared as a constructor");
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getReferences();
        boolean boolean13 = jSDocInfo0.isNoCompile();
        boolean boolean14 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
        org.junit.Assert.assertNull(stringPosition8);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        boolean boolean5 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        int int7 = node1.getIntProp(37);
        boolean boolean8 = node1.isOnlyModifiesThisCall();
        int int9 = node1.getSourceOffset();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean33 = node32.isBreak();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, node14, node27, node32);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet38);
        boolean boolean42 = strSet38.add("true");
        java.lang.String[] strArray44 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        java.util.Iterator<java.lang.String> strItor47 = strSet45.iterator();
        java.lang.Object[] objArray48 = strSet45.toArray();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean72 = node71.isBreak();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(4095, node53, node66, node71);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet77);
        boolean boolean81 = strSet77.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList82 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet38, (java.util.HashSet<java.lang.String>) strSet45, (java.util.HashSet<java.lang.String>) strSet77);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        boolean boolean87 = node86.isEmpty();
        boolean boolean88 = strSet77.remove((java.lang.Object) node86);
        node86.setLineno(8);
        com.google.javascript.rhino.Node node91 = node1.copyInformationFrom(node86);
        node91.detachChildren();
        node91.addSuppression("true");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = node91.getChildAtIndex(5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strSetList82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nTYPEOF\n\n\nSubtree1: STRING \n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: TYPEOF\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Not declared as a type name");
        boolean boolean2 = node1.isSetterDef();
        node1.putIntProp(0, (int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType6 = node1.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSType6);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean18 = node17.isThis();
        boolean boolean19 = node17.isVoid();
        boolean boolean20 = node17.isDebugger();
        int int21 = node17.getLineno();
        boolean boolean22 = node17.isString();
        boolean boolean23 = node17.isOr();
        boolean boolean24 = node17.isNumber();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node17.getJsDocBuilderForNode();
        node7.addChildrenToFront(node17);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        java.lang.String str13 = node5.getQualifiedName();
        boolean boolean14 = node5.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node1.getJSDocInfo();
        int int14 = node1.getType();
        node1.putBooleanProp((int) (byte) -1, false);
        boolean boolean18 = node1.isAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 40 + "'", int14 == 40);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(51, 53, 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean27 = node26.isBreak();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4095, node8, node21, node26);
        java.util.Set<java.lang.String> strSet29 = node28.getDirectives();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        boolean boolean31 = node28.isArrayLit();
        boolean boolean32 = node28.isGetElem();
        boolean boolean33 = node28.isTry();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFromForTree(node28);
        node3.setOptionalArg(false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node3.new FileLevelJsDocBuilder();
        boolean boolean38 = node3.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("(Not declared as a type name)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(2, "(hi!)", 54, 3);
        int int5 = node4.getType();
        int int6 = node4.getCharno();
        boolean boolean7 = node4.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        boolean boolean4 = node3.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node4.setOptionalArg(true);
        boolean boolean7 = node4.isIf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean13 = node12.isVar();
        boolean boolean14 = node12.isString();
        int int15 = node12.getLength();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node20.setOptionalArg(true);
        node20.setType(53);
        boolean boolean25 = node12.hasChild(node20);
        boolean boolean26 = node4.isEquivalentToTyped(node20);
        java.lang.String str27 = node4.getString();
        node4.setLength(42);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean34 = node33.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node33.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(40, node33, (int) (byte) 1, 48);
        boolean boolean39 = node38.isNot();
        com.google.javascript.rhino.Node node40 = node4.srcref(node38);
        boolean boolean41 = node38.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "([PROTECTED])" + "'", str27, "([PROTECTED])");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "(NUMBER 100.0 100)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("GETELEM 0");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        boolean boolean11 = node9.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node9.getJSDocInfo();
        boolean boolean13 = node9.isFalse();
        boolean boolean14 = node9.isSetterDef();
        int int16 = node9.getIntProp(221184);
        com.google.javascript.rhino.Node node17 = node1.useSourceInfoFrom(node9);
        boolean boolean18 = node17.isBlock();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node22.children();
        node22.setWasEmptyNode(false);
        boolean boolean26 = node22.isDec();
        java.lang.String str27 = node22.getSourceFileName();
        boolean boolean28 = node22.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node17.removeChildAfter(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isVoid();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isGetProp();
        boolean boolean27 = node17.isDebugger();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '4', node10, node17);
        com.google.javascript.rhino.Node node29 = node3.useSourceInfoIfMissingFrom(node28);
        node28.setWasEmptyNode(false);
        node28.setIsSyntheticBlock(false);
        node28.setCharno(48);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.String str34 = node28.toString();
        node28.removeProp((int) (short) 0);
        boolean boolean37 = node28.isObjectLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean42 = node41.isGetterDef();
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node44 = node24.copyInformationFromForTree(node28);
        boolean boolean45 = node24.isNull();
        com.google.javascript.rhino.Node node46 = node24.getNext();
        int int47 = node24.getCharno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo48.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo48.getEnumParameterType();
        java.lang.String str52 = jSDocInfo48.getLicense();
        java.lang.String str53 = jSDocInfo48.getVersion();
        java.util.Collection<java.lang.String> strCollection54 = jSDocInfo48.getAuthors();
        java.util.Collection<java.lang.String> strCollection55 = jSDocInfo48.getAuthors();
        java.lang.String str56 = jSDocInfo48.getDeprecationReason();
        node24.setJSDocInfo(jSDocInfo48);
        boolean boolean58 = node24.isParamList();
        int int59 = node24.getLineno();
        java.lang.String str60 = node24.getSourceFileName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0" + "'", str34, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(strCollection54);
        org.junit.Assert.assertNull(strCollection55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.String str34 = node28.toString();
        node28.removeProp((int) (short) 0);
        boolean boolean37 = node28.isObjectLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean42 = node41.isGetterDef();
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node44 = node24.copyInformationFromForTree(node28);
        int int45 = node28.getCharno();
        node28.setVarArgs(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0" + "'", str34, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean36 = node35.isFalse();
        java.lang.String str37 = node35.getSourceFileName();
        boolean boolean38 = node35.isLabel();
        node4.putProp(1, (java.lang.Object) node35);
        boolean boolean40 = node35.isNew();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.children();
        boolean boolean42 = node35.isCall();
        node35.setIsSyntheticBlock(false);
        boolean boolean45 = node35.isIf();
        boolean boolean46 = node35.isAssignAdd();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        boolean boolean8 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str34 = node4.toString(true, true, false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean58 = node57.isBreak();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(4095, node39, node52, node57);
        java.util.Set<java.lang.String> strSet60 = node59.getDirectives();
        com.google.javascript.rhino.Node node61 = node59.getFirstChild();
        boolean boolean62 = node59.isCatch();
        boolean boolean63 = node4.isEquivalentToTyped(node59);
        com.google.javascript.rhino.Node node64 = node4.detachFromParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str34, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        java.lang.String str39 = jSDocInfo32.getDescription();
        boolean boolean40 = jSDocInfo32.hasEnumParameterType();
        boolean boolean41 = jSDocInfo32.isExport();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection42 = jSDocInfo32.getMarkers();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(markerCollection42);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        boolean boolean7 = node4.isStringKey();
        int int8 = node4.getType();
        boolean boolean9 = node4.isIn();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int11 = namePosition10.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int13 = namePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        java.lang.String str25 = node19.toString();
        node19.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) '#', node19, node31, 0, (int) (short) 0);
        namePosition14.setItem(node19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int40 = namePosition39.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition41 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int42 = namePosition41.getPositionOnStartLine();
        int int43 = namePosition41.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList44 = com.google.common.collect.ImmutableList.of(namePosition10, namePosition12, namePosition14, namePosition39, namePosition41);
        int int45 = namePosition12.getStartLine();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(0, "STRING true 1", 16, (int) (short) 100);
        boolean boolean51 = node50.isInc();
        boolean boolean52 = node50.isSetterDef();
        namePosition12.setItem(node50);
        boolean boolean54 = node4.isEquivalentToTyped(node50);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags55 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags55.setThrows();
        sideEffectFlags55.setReturnsTainted();
        sideEffectFlags55.setMutatesGlobalState();
        sideEffectFlags55.setMutatesThis();
        boolean boolean60 = sideEffectFlags55.areAllFlagsSet();
        sideEffectFlags55.setMutatesGlobalState();
        sideEffectFlags55.setReturnsTainted();
        boolean boolean63 = sideEffectFlags55.areAllFlagsSet();
        node4.setSideEffectFlags(sideEffectFlags55);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30 + "'", int8 == 30);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER 1.0" + "'", str25, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(namePositionList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR 100");
        node1.setWasEmptyNode(true);
        // The following exception was thrown during execution in test generation
        try {
            double double4 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING OR 100 [empty_block: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.isDeprecated();
        boolean boolean12 = jSDocInfo0.isNoAlias();
        boolean boolean13 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getParameterType("hi!");
        boolean boolean9 = jSDocInfo6.hasModifies();
        boolean boolean11 = jSDocInfo6.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo6.getThrownTypes();
        java.lang.String str13 = jSDocInfo6.getDescription();
        boolean boolean14 = jSDocInfo6.isIdGenerator();
        boolean boolean15 = jSDocInfo6.isNoShadow();
        com.google.javascript.rhino.Node node16 = jSDocInfo6.getAssociatedNode();
        boolean boolean17 = jSDocInfo6.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getParameterType("hi!");
        jSDocInfo18.addSuppression("hi!");
        java.lang.String str23 = jSDocInfo18.toString();
        boolean boolean24 = jSDocInfo18.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo18.getMarkers();
        java.lang.String str26 = jSDocInfo18.getDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = jSDocInfo27.getTemplateTypeNames();
        boolean boolean29 = jSDocInfo27.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo30.getImplementedInterfaces();
        java.lang.String str32 = jSDocInfo30.getFileOverview();
        boolean boolean33 = jSDocInfo30.hasBaseType();
        boolean boolean34 = jSDocInfo30.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo30.getVisibility();
        java.lang.String str36 = jSDocInfo30.getMeaning();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo30.setVisibility(visibility37);
        jSDocInfo27.setVisibility(visibility37);
        jSDocInfo18.setVisibility(visibility37);
        jSDocInfo6.setVisibility(visibility37);
        jSDocInfo0.setVisibility(visibility37);
        boolean boolean43 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JSDocInfo" + "'", str23, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        int int72 = typePosition0.getPositionOnStartLine();
        boolean boolean73 = typePosition0.hasBrackets();
        int int74 = typePosition0.getEndLine();
        boolean boolean75 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo33.getParameterType("hi!");
        jSDocInfo33.addSuppression("hi!");
        java.lang.String str38 = jSDocInfo33.toString();
        node8.setJSDocInfo(jSDocInfo33);
        boolean boolean40 = jSDocInfo33.isJavaDispatch();
        boolean boolean41 = jSDocInfo33.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo33.getThisType();
        boolean boolean43 = jSDocInfo33.isIdGenerator();
        boolean boolean44 = jSDocInfo33.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo33.getParameterType("");
        jSDocInfo33.setLicense("NUMBER 1.0 10");
        boolean boolean49 = jSDocInfo33.hasEnumParameterType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JSDocInfo" + "'", str38, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        com.google.javascript.rhino.Node node32 = node27.detachFromParent();
        java.lang.String str36 = node27.toString(true, false, true);
        boolean boolean37 = node27.isGetterDef();
        boolean boolean38 = node27.isFalse();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 1.0" + "'", str36, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isOr();
        node1.setLineno(97);
        int int5 = node1.getLength();
        boolean boolean6 = node1.isDo();
        java.lang.Object obj8 = node1.getProp(37);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getVersion();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getLicense();
        jSDocInfo0.addSuppression("GT (Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n) 221184");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        com.google.javascript.rhino.Node node26 = node24.getFirstChild();
        boolean boolean27 = node24.isArrayLit();
        boolean boolean28 = node24.isGetElem();
        node24.setSourceFileForTesting("NUMBER 1.0");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node24.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean4 = node3.isDec();
        boolean boolean5 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 100, node3);
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node28.isDo();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        com.google.javascript.rhino.Node node31 = node17.clonePropsFrom(node28);
        boolean boolean32 = node28.isDebugger();
        com.google.javascript.rhino.Node node33 = node28.getFirstChild();
        boolean boolean34 = node28.isSetterDef();
        boolean boolean35 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        int int38 = node28.getIndexOfChild(node37);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node28.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        boolean boolean68 = node67.isDo();
        java.util.Set<java.lang.String> strSet69 = node67.getDirectives();
        com.google.javascript.rhino.Node node70 = node56.clonePropsFrom(node67);
        boolean boolean71 = node67.isDebugger();
        boolean boolean73 = node67.getBooleanProp(100);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = node77.srcref(node81);
        java.lang.Object obj84 = node77.getProp(10);
        boolean boolean85 = node77.isQuotedString();
        int int86 = node77.getChildCount();
        boolean boolean87 = node77.isHook();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(4146, node28, node67, node77, 15, 13);
        boolean boolean91 = node77.isNull();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isAssignAdd();
        com.google.javascript.rhino.Node node39 = node33.getLastChild();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node33.setJSType(jSType40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor8 = strSet7.iterator();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strItor8);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        java.util.Set<java.lang.String> strSet2 = node1.getDirectives();
        boolean boolean3 = node1.isSetterDef();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(48);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node9.children();
        boolean boolean11 = node9.isBreak();
        com.google.javascript.rhino.Node node12 = node5.useSourceInfoFrom(node9);
        boolean boolean13 = node5.isGetElem();
        com.google.javascript.rhino.Node node14 = node1.srcrefTree(node5);
        boolean boolean15 = node1.isWhile();
        org.junit.Assert.assertNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isBreak();
        boolean boolean6 = node3.isObjectLit();
        boolean boolean7 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        boolean boolean5 = node4.isDefaultCase();
        boolean boolean6 = node4.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node17.getStaticSourceFile();
        boolean boolean26 = node17.isTry();
        java.lang.String str27 = node17.getQualifiedName();
        java.lang.String str31 = node17.toString(false, false, false);
        com.google.javascript.rhino.Node node32 = node17.cloneTree();
        boolean boolean33 = node17.isNew();
        int int34 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean58 = node57.isBreak();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(4095, node39, node52, node57);
        boolean boolean60 = node52.isFunction();
        boolean boolean61 = node52.isInstanceOf();
        boolean boolean62 = node52.isHook();
        boolean boolean63 = node52.isTry();
        int int64 = node52.getSideEffectFlags();
        com.google.javascript.rhino.Node node65 = node52.getLastSibling();
        com.google.javascript.rhino.Node node66 = node17.clonePropsFrom(node65);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = node70.getStaticSourceFile();
        boolean boolean72 = node70.isNot();
        boolean boolean73 = node70.isIf();
        boolean boolean74 = node70.isVar();
        node70.setType(51);
        com.google.javascript.rhino.Node node77 = node65.useSourceInfoIfMissingFromForTree(node70);
        boolean boolean78 = node65.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 1.0" + "'", str31, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(staticSourceFile71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList34 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder35 = serializableBuilder33.add((java.io.Serializable) booleanLiteralSetEnumList34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        java.lang.String str50 = node44.toString();
        node44.removeProp((int) (short) 0);
        boolean boolean53 = node44.isObjectLit();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean58 = node57.isGetterDef();
        com.google.javascript.rhino.Node node59 = node44.useSourceInfoFromForTree(node57);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, node59);
        com.google.javascript.rhino.Node node61 = node39.useSourceInfoFromForTree(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node61.siblings();
        boolean boolean63 = node61.isCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = node61.getJSDocInfo();
        boolean boolean65 = node61.isIn();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        java.lang.String str75 = node69.toString();
        node69.removeProp((int) (short) 0);
        boolean boolean78 = node69.isObjectLit();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean83 = node82.isGetterDef();
        com.google.javascript.rhino.Node node84 = node69.useSourceInfoFromForTree(node82);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder85 = node82.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean90 = node89.isGetterDef();
        com.google.javascript.rhino.Node node91 = node82.useSourceInfoFrom(node89);
        com.google.javascript.rhino.InputId inputId92 = node82.getInputId();
        boolean boolean93 = node82.isIf();
        com.google.javascript.rhino.Node node94 = node61.copyInformationFrom(node82);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder95 = serializableBuilder33.add((java.io.Serializable) node94);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node94.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList34);
        org.junit.Assert.assertNotNull(serializableBuilder35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 1.0" + "'", str50, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSDocInfo64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER 1.0" + "'", str75, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(inputId92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(serializableBuilder95);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder96);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("true");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.lang.String str10 = jSDocInfo0.toString();
        boolean boolean11 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getType();
        java.lang.String str13 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean45 = jSDocInfo0.hasParameterType("Not declared as a type name");
        boolean boolean47 = jSDocInfo0.hasParameterType("false");
        boolean boolean48 = jSDocInfo0.isExterns();
        boolean boolean49 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(43, nodeArray1, 4, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition0.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int11 = typePosition0.getPositionOnEndLine();
        typePosition0.setPositionInformation(16, 44, (int) 'a', 12);
        int int17 = typePosition0.getPositionOnEndLine();
        int int18 = typePosition0.getEndLine();
        int int19 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str24 = node23.toString();
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean28 = node25.isEquivalentToTyped(node27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean33 = node32.isFalse();
        java.lang.String str34 = node32.getSourceFileName();
        boolean boolean35 = node32.isLabel();
        boolean boolean36 = node32.isSetterDef();
        boolean boolean37 = node32.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node55.isBreak();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 1, node42, node46, node55, node65, 1, (-1));
        boolean boolean69 = node68.isWith();
        boolean boolean70 = node68.isNot();
        boolean boolean71 = node32.isEquivalentToTyped(node68);
        boolean boolean72 = node68.isSyntheticBlock();
        boolean boolean73 = node27.isEquivalentTo(node68);
        typePosition0.setItem(node68);
        node68.setVarArgs(true);
        node68.setSourceEncodedPositionForTree(4095);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.isNoTypeCheck();
        boolean boolean9 = jSDocInfo7.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo7.getVisibility();
        java.lang.String str11 = jSDocInfo7.getSourceName();
        boolean boolean12 = jSDocInfo7.isNoAlias();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo7.getModifies();
        java.lang.Object[] objArray14 = strSet13.toArray();
        com.google.javascript.rhino.jstype.BooleanLiteralSet[][] booleanLiteralSetArray15 = new com.google.javascript.rhino.jstype.BooleanLiteralSet[][] {};
        com.google.javascript.rhino.jstype.BooleanLiteralSet[][] booleanLiteralSetArray16 = strSet13.toArray(booleanLiteralSetArray15);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet[]> booleanLiteralSetArrayList17 = com.google.common.collect.ImmutableList.of(booleanLiteralSetArray16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet[][] booleanLiteralSetArray18 = strSet5.toArray(booleanLiteralSetArray16);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(booleanLiteralSetArray15);
        org.junit.Assert.assertNotNull(booleanLiteralSetArray16);
        org.junit.Assert.assertNotNull(booleanLiteralSetArrayList17);
        org.junit.Assert.assertNotNull(booleanLiteralSetArray18);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        boolean boolean4 = node1.isWhile();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(48, 100, 8);
        node1.addChildToBack(node8);
        java.lang.String str10 = node1.getSourceFileName();
        java.lang.String str11 = node1.getQualifiedName();
        boolean boolean12 = node1.isNumber();
        boolean boolean13 = node1.isNot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        node20.setSourceFileForTesting("Not declared as a constructor");
        node20.setLineno((int) (short) 0);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node28.setSourceEncodedPosition((int) (short) 10);
        node28.addSuppression("NUMBER 1.0 [jsdoc_info: JSDocInfo]");
        node20.addChildrenToBack(node28);
        boolean boolean34 = node28.isInc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        boolean boolean2 = node1.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isVoid();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isGetProp();
        boolean boolean27 = node17.isDebugger();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '4', node10, node17);
        com.google.javascript.rhino.Node node29 = node3.useSourceInfoIfMissingFrom(node28);
        java.lang.String str30 = node3.toString();
        boolean boolean31 = node3.isNumber();
        node3.setIsSyntheticBlock(true);
        node3.setSourceEncodedPositionForTree(43);
        int int36 = node3.getLineno();
        node3.detachChildren();
        boolean boolean38 = node3.isObjectLit();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR" + "'", str30, "OR");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        java.lang.String str12 = node6.toString();
        int int13 = node2.getIndexOfChild(node6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node2.getJSDocInfo();
        int int15 = node2.getType();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(50, node2, (int) '4', 30);
        int int19 = node2.getType();
        boolean boolean20 = node2.isAssign();
        boolean boolean21 = node2.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 40 + "'", int19 == 40);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean22 = node21.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', node9, node21, 0, (int) (short) 0);
        namePosition4.setItem(node9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition29 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int30 = namePosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int32 = namePosition31.getPositionOnStartLine();
        int int33 = namePosition31.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition2, namePosition4, namePosition29, namePosition31);
        int int35 = namePosition0.getPositionOnStartLine();
        int int36 = namePosition0.getEndLine();
        int int37 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int39 = namePosition38.getEndLine();
        namePosition38.setPositionInformation(42, 30, 4095, 53);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList45 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition38);
        int int46 = namePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(namePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(namePositionList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node1.getStaticSourceFile();
        node1.setOptionalArg(false);
        boolean boolean29 = node1.isName();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        java.lang.String str39 = node33.toString();
        node33.removeProp((int) (short) 0);
        boolean boolean42 = node33.isObjectLit();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean47 = node46.isGetterDef();
        com.google.javascript.rhino.Node node48 = node33.useSourceInfoFromForTree(node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        boolean boolean58 = node57.isDo();
        java.util.Set<java.lang.String> strSet59 = node57.getDirectives();
        com.google.javascript.rhino.Node node60 = node46.clonePropsFrom(node57);
        boolean boolean61 = node46.isStringKey();
        com.google.javascript.rhino.Node node62 = node1.srcrefTree(node46);
        boolean boolean63 = node1.isOnlyModifiesThisCall();
        boolean boolean64 = node1.isInstanceOf();
        boolean boolean65 = node1.isFor();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) ' ', "NUMBER 1.0", 35, (int) (short) 10);
        node70.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            node1.removeChild(node70);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean9 = booleanLiteralSet7.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList10 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet3, booleanLiteralSet5, booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet14.intersection(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList18 = com.google.common.collect.ImmutableList.of(booleanLiteralSet12, booleanLiteralSet15, booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet22.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList26 = com.google.common.collect.ImmutableList.of(booleanLiteralSet20, booleanLiteralSet23, booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet15.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet27.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet3.union(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean41 = booleanLiteralSet39.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet33, booleanLiteralSet35, booleanLiteralSet37, booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet39.intersection(booleanLiteralSet43);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet30.union(booleanLiteralSet43);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList10);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList18);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList26);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        com.google.javascript.rhino.Node node4 = node1.removeFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        boolean boolean23 = node4.isParamList();
        boolean boolean24 = node4.isLabelName();
        node4.detachChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean9 = booleanLiteralSet7.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList10 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet3, booleanLiteralSet5, booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet14.intersection(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList18 = com.google.common.collect.ImmutableList.of(booleanLiteralSet12, booleanLiteralSet15, booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet22.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList26 = com.google.common.collect.ImmutableList.of(booleanLiteralSet20, booleanLiteralSet23, booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet15.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet27.union(booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet3.union(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean41 = booleanLiteralSet39.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet33, booleanLiteralSet35, booleanLiteralSet37, booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet46.intersection(booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList50 = com.google.common.collect.ImmutableList.of(booleanLiteralSet44, booleanLiteralSet47, booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet54.intersection(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList58 = com.google.common.collect.ImmutableList.of(booleanLiteralSet52, booleanLiteralSet55, booleanLiteralSet57);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = booleanLiteralSet47.intersection(booleanLiteralSet55);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet59.union(booleanLiteralSet61);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet33.union(booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean73 = booleanLiteralSet71.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList74 = com.google.common.collect.ImmutableList.of(booleanLiteralSet65, booleanLiteralSet67, booleanLiteralSet69, booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = booleanLiteralSet78.intersection(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList82 = com.google.common.collect.ImmutableList.of(booleanLiteralSet76, booleanLiteralSet79, booleanLiteralSet81);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = booleanLiteralSet86.intersection(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList90 = com.google.common.collect.ImmutableList.of(booleanLiteralSet84, booleanLiteralSet87, booleanLiteralSet89);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = booleanLiteralSet79.intersection(booleanLiteralSet87);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = booleanLiteralSet91.union(booleanLiteralSet93);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet95 = booleanLiteralSet65.union(booleanLiteralSet94);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet96 = booleanLiteralSet63.intersection(booleanLiteralSet94);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = booleanLiteralSet30.intersection(booleanLiteralSet94);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList10);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList18);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList26);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList50);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList58);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList74);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList82);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList90);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet95 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet95.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet96 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet96.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        stringPosition2.setPositionInformation(38, 49, 43, (int) (short) 10);
        java.lang.String str61 = stringPosition2.getItem();
        stringPosition2.setItem("STRING hi! 97");
        int int64 = stringPosition2.getEndLine();
        java.lang.String str65 = stringPosition2.getItem();
        int int66 = stringPosition2.getStartLine();
        int int67 = stringPosition2.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 43 + "'", int64 == 43);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING hi! 97" + "'", str65, "STRING hi! 97");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 38 + "'", int66 == 38);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 38 + "'", int67 == 38);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node28.isDo();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        com.google.javascript.rhino.Node node31 = node17.clonePropsFrom(node28);
        boolean boolean32 = node28.isDebugger();
        com.google.javascript.rhino.Node node33 = node28.getFirstChild();
        boolean boolean34 = node28.isSetterDef();
        boolean boolean35 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str40 = node39.toString();
        com.google.javascript.rhino.Node node41 = node39.cloneTree();
        com.google.javascript.rhino.Node node42 = node39.getLastSibling();
        boolean boolean43 = node42.isOptionalArg();
        boolean boolean44 = node42.isCall();
        boolean boolean45 = node42.isNumber();
        boolean boolean46 = node42.isDebugger();
        com.google.javascript.rhino.Node node47 = node28.copyInformationFromForTree(node42);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(97);
        boolean boolean50 = node49.isDo();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node49.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(45, node42, node49);
        com.google.javascript.rhino.Node node54 = node49.getAncestor(13);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(0);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = node56.getStaticSourceFile();
        boolean boolean59 = node56.isWhile();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean64 = node63.isAnd();
        boolean boolean65 = node63.isDebugger();
        boolean boolean66 = node63.isWhile();
        node63.setType((int) (byte) 0);
        com.google.javascript.rhino.Node node69 = node56.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node70 = node63.getLastSibling();
        boolean boolean71 = node63.isScript();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean76 = node75.isAnd();
        boolean boolean77 = node75.isDebugger();
        boolean boolean78 = node75.isWhile();
        node75.setType((int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.isNoTypeCheck();
        boolean boolean83 = jSDocInfo81.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility84 = jSDocInfo81.getVisibility();
        java.lang.String str85 = jSDocInfo81.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo81.setVisibility(visibility86);
        boolean boolean88 = jSDocInfo81.isHidden();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo81.getParameterNames();
        node75.setDirectives(strSet89);
        boolean boolean91 = node75.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node54.addChildAfter(node63, node75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(visibility84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + visibility86 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility86.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        boolean boolean4 = node3.isDelProp();
        boolean boolean5 = node3.isGetElem();
        boolean boolean6 = node3.isNull();
        boolean boolean7 = node3.isDec();
        node3.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        int int6 = typePosition0.getEndLine();
        int int7 = typePosition0.getPositionOnStartLine();
        int int8 = typePosition0.getStartLine();
        typePosition0.setPositionInformation((-1), 24, 47, 19);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4095 + "'", int6 == 4095);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4095 + "'", int7 == 4095);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30 + "'", int8 == 30);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(50, (int) (byte) 100, (int) '4');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        boolean boolean13 = node11.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node11.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = node11.getStaticSourceFile();
        java.lang.String str16 = node11.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node11.getJSDocInfo();
        java.lang.String str18 = node11.getQualifiedName();
        boolean boolean19 = node11.isSetterDef();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node28.isDo();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        boolean boolean31 = node28.isString();
        node28.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node28.getAncestors();
        com.google.javascript.rhino.Node node35 = node11.useSourceInfoIfMissingFrom(node28);
        boolean boolean36 = node35.isDebugger();
        boolean boolean37 = node35.isArrayLit();
        boolean boolean38 = node35.isFalse();
        com.google.javascript.rhino.Node node39 = node3.clonePropsFrom(node35);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNull(staticSourceFile15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean16 = node15.isSwitch();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo19.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo19.isDeprecated();
        boolean boolean22 = jSDocInfo19.hasType();
        boolean boolean23 = jSDocInfo19.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo19.getType();
        node15.setJSDocInfo(jSDocInfo19);
        boolean boolean26 = node15.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setSourceEncodedPositionForTree(30);
        boolean boolean14 = node8.isGetProp();
        boolean boolean15 = node8.isHook();
        boolean boolean16 = node8.wasEmptyNode();
        int int17 = node8.getLineno();
        com.google.javascript.rhino.Node node18 = node8.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node6 = null;
        jSDocInfo0.setAssociatedNode(node6);
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean10 = jSDocInfo0.isConstructor();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        boolean boolean12 = strSet11.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = strSet11.add("(NUMBER 1.0\n    NUMBER 1.0\n)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        int int62 = node13.getIntProp((int) (byte) 10);
        boolean boolean63 = node13.isTrue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node67.children();
        java.util.Set<java.lang.String> strSet69 = node67.getDirectives();
        boolean boolean70 = node67.isFunction();
        boolean boolean71 = node67.isDec();
        com.google.javascript.rhino.Node node72 = node13.srcref(node67);
        boolean boolean73 = node72.isWhile();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable74 = node72.getAncestors();
        boolean boolean75 = node72.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(ancestorIterable74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean4 = node3.isGetterDef();
        boolean boolean5 = node3.isThis();
        java.lang.String str6 = node3.getQualifiedName();
        boolean boolean7 = node3.isLabelName();
        boolean boolean8 = node3.isAssignAdd();
        int int9 = node3.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.hasChildren();
        node3.setSourceEncodedPosition(4);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.Object obj19 = node12.getProp(10);
        boolean boolean20 = node12.isArrayLit();
        com.google.javascript.rhino.Node node21 = node3.copyInformationFrom(node12);
        boolean boolean22 = node12.isNE();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((-1.0d));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean11 = node10.isGetterDef();
        boolean boolean12 = node10.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', node17, node29, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.children();
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isBreak();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node47, node60, node65);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        node71.removeProp((int) (short) 0);
        boolean boolean80 = node71.isObjectLit();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean85 = node84.isGetterDef();
        com.google.javascript.rhino.Node node86 = node71.useSourceInfoFromForTree(node84);
        com.google.javascript.rhino.Node node87 = node67.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 100, node10, node35, node39, node67, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node91 = node35.detachFromParent();
        node91.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node94 = node4.useSourceInfoIfMissingFrom(node91);
        com.google.javascript.rhino.Node node95 = node4.getLastSibling();
        boolean boolean96 = node4.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.containsDeclaration();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo23.getTemplateTypeNames();
        boolean boolean34 = jSDocInfo23.isExport();
        boolean boolean35 = jSDocInfo23.isNoTypeCheck();
        int int36 = jSDocInfo23.getParameterCount();
        boolean boolean37 = jSDocInfo23.isInterface();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesThis();
        boolean boolean4 = sideEffectFlags0.areAllFlagsSet();
        int int5 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        boolean boolean20 = node17.isAdd();
        boolean boolean21 = node17.isOr();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean45 = node44.isBreak();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(4095, node26, node39, node44);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node53 = node26.detachFromParent();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(42, node17, node26, node62, 15, (int) 'a');
        boolean boolean66 = node65.isNumber();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        boolean boolean76 = node75.isDo();
        java.util.Set<java.lang.String> strSet77 = node75.getDirectives();
        boolean boolean78 = node75.isString();
        node75.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = node75.getJSDocInfo();
        boolean boolean82 = node75.isLabelName();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(0);
        boolean boolean85 = node84.isRegExp();
        boolean boolean86 = node75.hasChild(node84);
        node65.addChildrenToBack(node75);
        boolean boolean88 = node65.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("CALL 100 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(CALL 100 [jsdoc_info: JSDocInfo])" + "'", str1, "(CALL 100 [jsdoc_info: JSDocInfo])");
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean29 = node28.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        boolean boolean32 = node28.isNE();
        com.google.javascript.rhino.Node node33 = node22.srcrefTree(node28);
        boolean boolean34 = node22.isNull();
        boolean boolean35 = node22.isNull();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("Unknown class name", 4095, 4);
        com.google.javascript.rhino.jstype.JSType jSType40 = node39.getJSType();
        node39.setWasEmptyNode(false);
        boolean boolean43 = node39.isArrayLit();
        node22.addChildToBack(node39);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [jsdoc_info: JSDocInfo]", (int) (short) 10, 1);
        boolean boolean4 = node3.isHook();
        node3.setSourceFileForTesting("");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.InputId inputId31 = null;
        node8.setInputId(inputId31);
        boolean boolean33 = node8.isThis();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray35 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility34 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList36 = com.google.common.collect.ImmutableList.of(visibilityArray35);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet65);
        java.lang.Object[] objArray68 = strSet65.toArray();
        boolean boolean69 = visibilityList36.contains((java.lang.Object) objArray68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str71 = jSDocInfo70.getDescription();
        boolean boolean72 = jSDocInfo70.isInterface();
        jSDocInfo70.setDeprecated(true);
        boolean boolean75 = visibilityList36.equals((java.lang.Object) jSDocInfo70);
        boolean boolean76 = jSDocInfo70.isNoAlias();
        java.lang.String str77 = jSDocInfo70.getOriginalCommentString();
        boolean boolean78 = jSDocInfo70.isHidden();
        boolean boolean79 = jSDocInfo70.isDeprecated();
        node8.setJSDocInfo(jSDocInfo70);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray35);
        org.junit.Assert.assertNotNull(visibilityList36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isQuotedString();
        boolean boolean12 = node3.isFor();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean36 = node35.isBreak();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(4095, node17, node30, node35);
        com.google.javascript.rhino.InputId inputId38 = node37.getInputId();
        boolean boolean39 = node37.isNot();
        node37.setSourceFileForTesting("STRING hi! 97");
        boolean boolean42 = node37.isThis();
        boolean boolean43 = node37.isRegExp();
        node3.addChildToBack(node37);
        com.google.javascript.rhino.Node node45 = node37.detachFromParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputId38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 2, 29);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node7.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node27.isBreak();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, node14, node18, node27, node37, 1, (-1));
        boolean boolean41 = node18.isInstanceOf();
        boolean boolean42 = node18.isCase();
        int int43 = node18.getLineno();
        int int44 = node18.getType();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node18.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node51 = node7.useSourceInfoFrom(node18);
        node7.setOptionalArg(false);
        com.google.javascript.rhino.Node node54 = node3.clonePropsFrom(node7);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        java.lang.String str65 = node59.toString();
        node59.removeProp((int) (short) 0);
        boolean boolean68 = node59.isObjectLit();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean73 = node72.isGetterDef();
        com.google.javascript.rhino.Node node74 = node59.useSourceInfoFromForTree(node72);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 1, node74);
        node75.setSourceFileForTesting("Not declared as a constructor");
        node75.setLineno((int) (short) 0);
        boolean boolean80 = node75.isCatch();
        com.google.javascript.rhino.Node node81 = node3.useSourceInfoFrom(node75);
        boolean boolean82 = node75.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 39 + "'", int44 == 39);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER 1.0" + "'", str65, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node22.isIn();
        int int26 = node22.getSourceOffset();
        boolean boolean27 = node22.isQuotedString();
        boolean boolean28 = node22.isGetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet0.intersection(booleanLiteralSet3);
        boolean boolean7 = booleanLiteralSet3.contains(false);
        boolean boolean9 = booleanLiteralSet3.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(61440, "");
        node2.setIsSyntheticBlock(true);
        boolean boolean5 = node2.isHook();
        boolean boolean6 = node2.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isVoid();
        node3.setLength(51);
        boolean boolean8 = node3.isCatch();
        boolean boolean9 = node3.isTry();
        boolean boolean10 = node3.isSetterDef();
        boolean boolean11 = node3.isNull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node3.isThis();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean24 = node23.isFalse();
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        node25.setOptionalArg(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node25.getAncestors();
        boolean boolean29 = node25.isGetElem();
        boolean boolean30 = node3.isEquivalentTo(node25);
        boolean boolean31 = node3.isVarArgs();
        boolean boolean32 = node3.hasChildren();
        boolean boolean33 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n");
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        boolean boolean9 = jSDocInfo0.isExterns();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        boolean boolean11 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable6 = node4.getAncestors();
        com.google.javascript.rhino.Node node7 = node4.removeFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId10 = null;
        node9.setInputId(inputId10);
        boolean boolean12 = node9.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node9.getJsDocBuilderForNode();
        int int15 = node9.getIntProp(37);
        boolean boolean16 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node9.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node18 = node4.useSourceInfoFromForTree(node9);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        java.lang.String str29 = node23.toString();
        node23.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean36 = node35.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) '#', node23, node35, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo42.getImplementedInterfaces();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        node41.setJSDocInfo(jSDocInfo42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        java.lang.String str55 = node49.toString();
        node49.removeProp((int) (short) 0);
        boolean boolean58 = node49.isObjectLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean63 = node62.isGetterDef();
        com.google.javascript.rhino.Node node64 = node49.useSourceInfoFromForTree(node62);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        boolean boolean74 = node73.isDo();
        java.util.Set<java.lang.String> strSet75 = node73.getDirectives();
        com.google.javascript.rhino.Node node76 = node62.clonePropsFrom(node73);
        java.lang.String str77 = node76.getSourceFileName();
        node76.putBooleanProp((int) (byte) 0, true);
        java.lang.String str81 = node76.getSourceFileName();
        node41.addChildrenToFront(node76);
        com.google.javascript.rhino.Node node83 = node18.copyInformationFromForTree(node76);
        boolean boolean84 = node83.isInc();
        boolean boolean85 = node83.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 1.0" + "'", str29, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER 1.0" + "'", str55, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isFromExterns();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean57 = node56.isBreak();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node38, node51, node56);
        java.util.Set<java.lang.String> strSet59 = node58.getDirectives();
        node4.addChildToFront(node58);
        com.google.javascript.rhino.jstype.JSType jSType61 = node4.getJSType();
        int int62 = node4.getType();
        boolean boolean64 = node4.getBooleanProp(97);
        java.util.Set<java.lang.String> strSet65 = node4.getDirectives();
        boolean boolean67 = node4.getBooleanProp((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node71.addChildToBack(node81);
        com.google.javascript.rhino.Node node83 = node81.removeChildren();
        com.google.javascript.rhino.Node node84 = node81.cloneNode();
        boolean boolean85 = node84.isRegExp();
        int int86 = node4.getIndexOfChild(node84);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 39 + "'", int62 == 39);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n", 31, (int) ' ');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int8 = node7.getSideEffectFlags();
        boolean boolean9 = node7.isUnscopedQualifiedName();
        boolean boolean10 = node7.isDec();
        int int11 = node3.getIndexOfChild(node7);
        com.google.javascript.rhino.Node node12 = null;
        boolean boolean13 = node3.hasChild(node12);
        com.google.javascript.rhino.Node node14 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean47 = node46.isFalse();
        com.google.javascript.rhino.Node node48 = node46.cloneTree();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        boolean boolean72 = node66.isBreak();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) 1, node53, node57, node66, node76, 1, (-1));
        java.lang.String str80 = node76.getQualifiedName();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean85 = node84.isAnd();
        node84.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str88 = node76.checkTreeEquals(node84);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) ' ', node46, node84);
        boolean boolean90 = node89.isObjectLit();
        boolean boolean91 = node24.isEquivalentTo(node89);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable92 = node24.children();
        boolean boolean93 = node24.isInstanceOf();
        boolean boolean94 = node24.isDelProp();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(nodeIterable92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 12, 31, 48);
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isInc();
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str17 = node16.toString();
        com.google.javascript.rhino.Node node18 = node16.cloneTree();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean21 = node18.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        node26.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean39 = node38.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) '#', node26, node38, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node45 = node18.useSourceInfoFromForTree(node38);
        boolean boolean46 = node38.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = node3.getChildBefore(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo32.getTypeNodes();
        java.lang.String str44 = jSDocInfo32.getDescriptionForParameter("([PROTECTED])");
        boolean boolean45 = jSDocInfo32.hasBaseType();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo32.getParameterNames();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        boolean boolean56 = node55.isDo();
        java.util.Set<java.lang.String> strSet57 = node55.getDirectives();
        boolean boolean58 = node55.isString();
        int int59 = node55.getSourceOffset();
        boolean boolean60 = node55.isLabelName();
        boolean boolean61 = node55.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = strSet46.remove((java.lang.Object) boolean61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        node3.detachChildren();
        int int10 = node3.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node3.getJSDocInfo();
        boolean boolean12 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        node17.setQuotedString();
        int int19 = node17.getChildCount();
        boolean boolean20 = node17.isBreak();
        boolean boolean21 = node17.isTypeOf();
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isStringKey();
        node22.setWasEmptyNode(true);
        boolean boolean26 = node22.isOnlyModifiesThisCall();
        node22.detachChildren();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        int int2 = typePosition0.getPositionOnEndLine();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.String str46 = node40.toString();
        node40.removeProp((int) (short) 0);
        boolean boolean49 = node40.isGetProp();
        boolean boolean50 = node40.isDebugger();
        com.google.javascript.rhino.Node node51 = node36.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean52 = node36.isDebugger();
        com.google.javascript.rhino.Node node54 = node36.getAncestor(221184);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isBreak();
        node4.putIntProp(12, 97);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        com.google.javascript.rhino.Node node28 = node1.removeChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node47.isBreak();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, node34, node38, node47, node57, 1, (-1));
        java.lang.String str61 = node57.getQualifiedName();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isAnd();
        node65.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str69 = node57.checkTreeEquals(node65);
        jSDocInfo29.setAssociatedNode(node57);
        java.util.Collection<java.lang.String> strCollection71 = jSDocInfo29.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo29.getParameterType("NUMBER 1.0");
        java.util.Set<java.lang.String> strSet74 = jSDocInfo29.getSuppressions();
        node1.setJSDocInfo(jSDocInfo29);
        node1.setWasEmptyNode(true);
        boolean boolean78 = node1.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(strCollection71);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        stringPosition0.setPositionInformation(36, 97, (int) '4', 3);
        int int11 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n");
        node2.setIsSyntheticBlock(false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node2.children();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable5);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.String str46 = node40.toString();
        node40.removeProp((int) (short) 0);
        boolean boolean49 = node40.isGetProp();
        boolean boolean50 = node40.isDebugger();
        com.google.javascript.rhino.Node node51 = node36.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean52 = node36.isCase();
        boolean boolean53 = node36.isDo();
        boolean boolean54 = node36.isOptionalArg();
        boolean boolean55 = node36.isLocalResultCall();
        int int56 = node36.getSourceOffset();
        node36.removeProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        java.lang.String str2 = node1.getQualifiedName();
        boolean boolean3 = node1.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = node1.getExistingIntProp((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node18.isObjectLit();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str24 = node23.toString();
        com.google.javascript.rhino.Node node25 = node23.cloneTree();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean28 = node25.isEquivalentToTyped(node27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        java.lang.String str43 = node37.toString();
        node37.removeProp((int) (short) 0);
        boolean boolean46 = node37.isObjectLit();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean51 = node50.isGetterDef();
        com.google.javascript.rhino.Node node52 = node37.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 1, node52);
        com.google.javascript.rhino.Node node54 = node32.useSourceInfoFromForTree(node53);
        boolean boolean55 = node53.isInc();
        int int56 = node53.getSourcePosition();
        boolean boolean57 = node53.isQuotedString();
        boolean boolean58 = node53.isAssignAdd();
        com.google.javascript.rhino.Node node59 = node25.copyInformationFrom(node53);
        node18.addChildToFront(node59);
        int int61 = node18.getType();
        java.lang.String str62 = node18.toString();
        java.lang.String str63 = node18.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 1.0" + "'", str43, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 39 + "'", int61 == 39);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER 1.0 97" + "'", str62, "NUMBER 1.0 97");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER 1.0 97\n    NUMBER 1.0\n" + "'", str63, "NUMBER 1.0 97\n    NUMBER 1.0\n");
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition43.getEndLine();
        stringPosition43.setItem("STRING  97\n");
        int int59 = stringPosition43.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str5 = node4.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(46, node4);
        boolean boolean7 = node4.isScript();
        boolean boolean8 = node4.isOnlyModifiesThisCall();
        node4.setVarArgs(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 1.0" + "'", str5, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        boolean boolean12 = node8.isAssignAdd();
        boolean boolean13 = node8.isLocalResultCall();
        node8.setLength((int) (short) 0);
        double double16 = node8.getDouble();
        int int17 = node8.getType();
        com.google.javascript.rhino.Node node18 = node8.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = node18.isLabelName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        boolean boolean45 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean48 = jSDocInfo0.isHidden();
        boolean boolean49 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo0.getSuppressions();
        java.lang.String str52 = jSDocInfo0.getDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 100\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 100\n");
        boolean boolean53 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable14 = node8.getAncestors();
        node8.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            node8.setString("(true)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ancestorIterable14);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker5.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker5.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker5.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition11 = marker5.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker5.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker13.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = marker13.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker13.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition19 = marker13.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker20 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker20.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = marker20.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = marker20.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker24 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker24.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = marker24.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker24.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker28 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition29 = marker28.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition30 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition33 = marker32.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = marker32.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition35 = marker32.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker36 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition37 = marker36.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition38 = marker36.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition39 = marker36.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = marker36.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList41 = com.google.common.collect.ImmutableList.of(marker20, marker24, marker28, marker32, marker36);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = marker28.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker43 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker44 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition45 = marker44.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition46 = marker44.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = marker44.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = marker44.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = marker44.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList50 = com.google.common.collect.ImmutableList.of(marker0, marker5, marker13, marker28, marker43, marker44);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition51 = marker13.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(nodeSourcePosition11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(stringPosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(nodeSourcePosition19);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(stringPosition22);
        org.junit.Assert.assertNull(stringPosition23);
        org.junit.Assert.assertNull(stringPosition25);
        org.junit.Assert.assertNull(typePosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(nodeSourcePosition29);
        org.junit.Assert.assertNull(stringPosition30);
        org.junit.Assert.assertNull(stringPosition31);
        org.junit.Assert.assertNull(nodeSourcePosition33);
        org.junit.Assert.assertNull(stringPosition34);
        org.junit.Assert.assertNull(stringPosition35);
        org.junit.Assert.assertNull(nodeSourcePosition37);
        org.junit.Assert.assertNull(stringPosition38);
        org.junit.Assert.assertNull(stringPosition39);
        org.junit.Assert.assertNull(typePosition40);
        org.junit.Assert.assertNotNull(markerList41);
        org.junit.Assert.assertNull(stringPosition42);
        org.junit.Assert.assertNull(nodeSourcePosition45);
        org.junit.Assert.assertNull(stringPosition46);
        org.junit.Assert.assertNull(typePosition47);
        org.junit.Assert.assertNull(stringPosition48);
        org.junit.Assert.assertNull(stringPosition49);
        org.junit.Assert.assertNotNull(markerList50);
        org.junit.Assert.assertNull(stringPosition51);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean57 = node56.isBreak();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node38, node51, node56);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.lang.String str68 = node38.toString(true, true, false);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder69 = serializableBuilder33.add((java.io.Serializable) str68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo70.getImplementedInterfaces();
        boolean boolean72 = jSDocInfo70.isDeprecated();
        boolean boolean73 = jSDocInfo70.hasType();
        java.lang.String str74 = jSDocInfo70.getBlockDescription();
        java.lang.String str75 = jSDocInfo70.getReturnDescription();
        boolean boolean76 = jSDocInfo70.isExpose();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder77 = serializableBuilder33.add((java.io.Serializable) jSDocInfo70);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = jSDocInfo70.getBaseType();
        boolean boolean79 = jSDocInfo70.hasFileOverview();
        jSDocInfo70.addSuppression("false");
        boolean boolean82 = jSDocInfo70.hasEnumParameterType();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str68, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNotNull(serializableBuilder69);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(serializableBuilder77);
        org.junit.Assert.assertNull(jSTypeExpression78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = node7.getLastChild();
        boolean boolean15 = node7.isDelProp();
        com.google.javascript.rhino.Node node16 = node7.cloneNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node7.children();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        node7.setStaticSourceFile(staticSourceFile18);
        boolean boolean21 = node7.getBooleanProp(4146);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node4.children();
        java.util.Set<java.lang.String> strSet6 = node4.getDirectives();
        boolean boolean7 = node4.hasChildren();
        boolean boolean8 = node4.isWhile();
        boolean boolean9 = node4.isTry();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean14 = node13.isBreak();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node13.addChildToBack(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 3, 97, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(54, node4, node18, node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        java.lang.String str47 = jSDocInfo0.getBlockDescription();
        boolean boolean48 = jSDocInfo0.isNoCompile();
        boolean boolean49 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo0.getEnumParameterType();
        boolean boolean51 = jSDocInfo0.hasTypedefType();
        boolean boolean52 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags1.setMutatesThis();
        int int19 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        boolean boolean37 = node33.isTrue();
        boolean boolean38 = node33.isComma();
        node33.removeProp((int) (short) 10);
        boolean boolean41 = node33.isLabelName();
        java.lang.Object obj43 = node33.getProp(0);
        java.lang.String str47 = node33.toString(false, false, false);
        com.google.javascript.rhino.Node node48 = node33.cloneTree();
        boolean boolean49 = node33.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        java.lang.String[] strArray1 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.lang.Object[] objArray5 = strSet2.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.of(strSet2, strSet11);
        strSet2.clear();
        boolean boolean15 = strSet2.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator16 = strSet2.spliterator();
        strSet2.clear();
        int int18 = strSet2.size();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0L);
        java.lang.String str2 = node1.getQualifiedName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(ancestorIterable3);
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        strSet28.clear();
        boolean boolean33 = strSet28.add("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray35 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility34 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList36 = com.google.common.collect.ImmutableList.of(visibilityArray35);
        java.lang.String str37 = visibilityList36.toString();
        boolean boolean38 = strSet28.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList36);
        java.util.Iterator<java.lang.String> strItor39 = strSet28.iterator();
        java.util.Iterator<java.lang.String> strItor40 = strSet28.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray35);
        org.junit.Assert.assertNotNull(visibilityList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[PROTECTED]" + "'", str37, "[PROTECTED]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strItor40);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        boolean boolean3 = node1.isAssignAdd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node1.getStaticSourceFile();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(staticSourceFile4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(48, "", 3, (int) (byte) 10);
        boolean boolean5 = node4.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        boolean boolean15 = node14.isDo();
        java.util.Set<java.lang.String> strSet16 = node14.getDirectives();
        boolean boolean17 = node14.isString();
        node14.setWasEmptyNode(false);
        boolean boolean20 = node14.isObjectLit();
        boolean boolean21 = node14.isCall();
        boolean boolean22 = node14.isNE();
        boolean boolean23 = node14.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node4.srcref(node14);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setReturnsTainted();
        boolean boolean9 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isVoid();
        boolean boolean6 = node3.isDebugger();
        int int7 = node3.getLineno();
        boolean boolean8 = node3.isStringKey();
        boolean boolean9 = node3.isAdd();
        boolean boolean10 = node3.isCatch();
        boolean boolean11 = node3.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        java.lang.String str4 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue1.or(ternaryValue7);
        java.lang.String str10 = ternaryValue7.toString();
        java.lang.String str11 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.and(ternaryValue18);
        java.lang.String str20 = ternaryValue17.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue17.or(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue23.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue15.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue28.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue7.and(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue33.and(ternaryValue34);
        java.lang.String str36 = ternaryValue33.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue38.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue33.or(ternaryValue39);
        java.lang.String str42 = ternaryValue39.toString();
        java.lang.String str43 = ternaryValue39.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue45.and(ternaryValue46);
        java.lang.String str48 = ternaryValue45.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.and(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue45.or(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue55.and(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue53.or(ternaryValue56);
        java.lang.String str59 = ternaryValue56.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue61.and(ternaryValue62);
        java.lang.String str64 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue66.and(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue61.or(ternaryValue67);
        java.lang.String str70 = ternaryValue67.toString();
        java.lang.String str71 = ternaryValue67.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue56.xor(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = ternaryValue39.and(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue7.xor(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue7.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "true" + "'", str36, "true");
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "true" + "'", str43, "true");
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "true" + "'", str48, "true");
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "true" + "'", str64, "true");
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "true" + "'", str70, "true");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "true" + "'", str71, "true");
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node9.isDo();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        boolean boolean12 = node9.isString();
        node9.setWasEmptyNode(false);
        boolean boolean15 = node9.isObjectLit();
        boolean boolean16 = node9.hasMoreThanOneChild();
        int int17 = node9.getLineno();
        com.google.javascript.rhino.Node node19 = node9.getAncestor((int) '#');
        boolean boolean20 = node9.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(8, node9);
        boolean boolean22 = node21.isAssign();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 42, 100);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        typePosition0.setPositionInformation(2, (int) '4', 43, 10);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int11 = node10.getSideEffectFlags();
        node10.setOptionalArg(true);
        boolean boolean14 = node10.isNew();
        typePosition0.setItem(node10);
        boolean boolean16 = typePosition0.hasBrackets();
        int int17 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 43 + "'", int17 == 43);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        boolean boolean46 = node45.isStringKey();
        boolean boolean47 = node45.isBlock();
        com.google.javascript.rhino.Node node48 = node45.getParent();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isArrayLit();
        boolean boolean12 = node3.isAdd();
        node3.putBooleanProp(2, true);
        java.lang.Object obj17 = node3.getProp(48);
        boolean boolean18 = node3.isSetterDef();
        boolean boolean19 = node3.isDelProp();
        boolean boolean20 = node3.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("NUMBER 1.0 54\n    NUMBER 1.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean47 = node46.isFalse();
        com.google.javascript.rhino.Node node48 = node46.cloneTree();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        boolean boolean72 = node66.isBreak();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) 1, node53, node57, node66, node76, 1, (-1));
        java.lang.String str80 = node76.getQualifiedName();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean85 = node84.isAnd();
        node84.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str88 = node76.checkTreeEquals(node84);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) ' ', node46, node84);
        boolean boolean90 = node89.isObjectLit();
        boolean boolean91 = node24.isEquivalentTo(node89);
        int int92 = node24.getSideEffectFlags();
        boolean boolean93 = node24.isVoid();
        boolean boolean94 = node24.isHook();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        boolean boolean3 = jSDocInfo0.isOverride();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isDefine();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        java.lang.String str30 = jSDocInfo23.getDescription();
        com.google.javascript.rhino.Node node31 = jSDocInfo23.getAssociatedNode();
        boolean boolean32 = jSDocInfo23.hasReturnType();
        boolean boolean33 = jSDocInfo23.isNoShadow();
        java.util.Collection<java.lang.String> strCollection34 = jSDocInfo23.getAuthors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strCollection34);
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.hasThisType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean16 = node15.isThis();
        boolean boolean17 = node15.isExprResult();
        com.google.javascript.rhino.Node node18 = node15.removeFirstChild();
        boolean boolean19 = strSet11.remove((java.lang.Object) node18);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("true");
        boolean boolean7 = jSDocInfo0.isExpose();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', 1, 4095);
        boolean boolean4 = node3.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        boolean boolean9 = jSDocInfo0.hasThisType();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isAnd();
        node29.setSourceFileForTesting("[PROTECTED]");
        node29.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = node29.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node41 = node17.copyInformationFrom(node29);
        boolean boolean42 = node17.isContinue();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node17.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(54, nodeArray48, 31, (int) 'a');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray48);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(54, nodeArray48, 0, 35);
        com.google.javascript.rhino.Node node56 = node17.srcrefTree(node55);
        boolean boolean57 = node56.isBlock();
        boolean boolean58 = node56.isSetterDef();
        boolean boolean59 = node56.isIn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isBreak();
        boolean boolean34 = node4.isVar();
        boolean boolean35 = node4.isThis();
        boolean boolean36 = node4.isString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        boolean boolean13 = node7.isUnscopedQualifiedName();
        boolean boolean14 = node7.isOr();
        boolean boolean15 = node7.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        boolean boolean5 = node4.isLocalResultCall();
        node4.setSourceEncodedPositionForTree(0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean44 = strSet43.isEmpty();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        java.lang.String str5 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        java.lang.String str29 = node23.toString();
        node23.removeProp((int) (short) 0);
        boolean boolean32 = node23.isObjectLit();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean37 = node36.isGetterDef();
        com.google.javascript.rhino.Node node38 = node23.useSourceInfoFromForTree(node36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean44 = node43.isGetterDef();
        com.google.javascript.rhino.Node node45 = node36.useSourceInfoFrom(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        java.lang.String str55 = node49.toString();
        node49.removeProp((int) (short) 0);
        boolean boolean58 = node49.isObjectLit();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean63 = node62.isGetterDef();
        com.google.javascript.rhino.Node node64 = node49.useSourceInfoFromForTree(node62);
        boolean boolean65 = node64.isObjectLit();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(54, node15, node19, node43, node64);
        boolean boolean67 = node66.isFromExterns();
        com.google.javascript.rhino.Node node68 = node3.srcrefTree(node66);
        node68.setSourceEncodedPosition(41);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 1.0" + "'", str29, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER 1.0" + "'", str55, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean57 = node56.isBreak();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node38, node51, node56);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.lang.String str68 = node38.toString(true, true, false);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder69 = serializableBuilder33.add((java.io.Serializable) str68);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder71 = serializableBuilder33.add((java.io.Serializable) 31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo72.getImplementedInterfaces();
        java.lang.String str74 = jSDocInfo72.getFileOverview();
        boolean boolean75 = jSDocInfo72.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = jSDocInfo72.getVisibility();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo72.getModifies();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder78 = serializableBuilder71.add((java.io.Serializable) jSDocInfo72);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str83 = node82.toString();
        com.google.javascript.rhino.Node node84 = node82.cloneTree();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean87 = node84.isEquivalentToTyped(node86);
        node86.setSourceEncodedPositionForTree(31);
        com.google.javascript.rhino.Node node90 = null;
        boolean boolean91 = node86.hasChild(node90);
        node86.putBooleanProp(97, false);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder95 = serializableBuilder71.add((java.io.Serializable) node86);
        int int96 = node86.getSideEffectFlags();
        com.google.javascript.rhino.Node node97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = node86.useSourceInfoIfMissingFromForTree(node97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str68, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNotNull(serializableBuilder69);
        org.junit.Assert.assertNotNull(serializableBuilder71);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(visibility76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(serializableBuilder78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER 1.0" + "'", str83, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(serializableBuilder95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isCatch();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node46.isBreak();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node37, node46, node56, 1, (-1));
        boolean boolean60 = node46.isEmpty();
        java.lang.String str61 = node22.checkTreeEquals(node46);
        boolean boolean62 = node22.isTrue();
        boolean boolean63 = node22.isVar();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = node22.getExistingIntProp(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 12, 31, 48);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.hasChildren();
        boolean boolean6 = node3.isTypeOf();
        boolean boolean7 = node3.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.hasMoreThanOneChild();
        node3.setCharno(100);
        int int8 = node3.getLineno();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder9.append("(Node tree inequality:\nTree1:\nNEW [PROTECTED]\n\n\nTree2:\nNUMBER 1.0 0\n\n\nSubtree1: NEW [PROTECTED]\n\n\nSubtree2: NUMBER 1.0 0\n)");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean44 = jSDocInfo0.hasModifies();
        java.lang.String str46 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean47 = jSDocInfo0.isNoSideEffects();
        boolean boolean48 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        com.google.javascript.rhino.Node node5 = node3.removeFirstChild();
        int int7 = node3.getIntProp(46);
        boolean boolean8 = node3.isThis();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("true");
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("STRING hi! 97");
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        java.lang.String str45 = jSDocInfo0.getMeaning();
        boolean boolean46 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo0.getTypedefType();
        boolean boolean48 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(4095, node6, node19, node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        java.lang.String str36 = node30.toString();
        node30.removeProp((int) (short) 0);
        boolean boolean39 = node30.isObjectLit();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean44 = node43.isGetterDef();
        com.google.javascript.rhino.Node node45 = node30.useSourceInfoFromForTree(node43);
        com.google.javascript.rhino.Node node46 = node26.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(8, node26, 10, (int) 'a');
        node26.setOptionalArg(true);
        com.google.javascript.rhino.Node node52 = node26.cloneNode();
        com.google.javascript.rhino.Node node53 = node26.removeChildren();
        boolean boolean54 = node53.isSyntheticBlock();
        node53.setSourceFileForTesting("(((hi!)))");
        com.google.javascript.rhino.jstype.JSType jSType57 = node53.getJSType();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean62 = node61.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node61.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(40, node61, (int) (byte) 1, 48);
        com.google.javascript.rhino.Node node67 = node61.cloneNode();
        boolean boolean68 = node67.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 100, node53, node67, 53, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing sibling");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 1.0" + "'", str36, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSType57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = node1.getStaticSourceFile();
        boolean boolean3 = node1.isAssign();
        int int4 = node1.getSideEffectFlags();
        boolean boolean5 = node1.isNE();
        org.junit.Assert.assertNull(staticSourceFile2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 0);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("GETELEM Not declared as a constructor");
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        int int6 = jSDocInfo0.getParameterCount();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo8.getParameterType("hi!");
        boolean boolean11 = jSDocInfo8.hasModifies();
        boolean boolean13 = jSDocInfo8.hasDescriptionForParameter("");
        boolean boolean15 = jSDocInfo8.hasParameter("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo8.setVisibility(visibility16);
        jSDocInfo0.setVisibility(visibility16);
        java.lang.String str19 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getParameterType("hi!");
        jSDocInfo20.addSuppression("hi!");
        java.lang.String str25 = jSDocInfo20.toString();
        boolean boolean26 = jSDocInfo20.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getBaseType();
        java.lang.String str28 = jSDocInfo20.getFileOverview();
        java.lang.String str29 = jSDocInfo20.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo30.getImplementedInterfaces();
        java.lang.String str32 = jSDocInfo30.getFileOverview();
        boolean boolean33 = jSDocInfo30.hasBaseType();
        boolean boolean34 = jSDocInfo30.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo30.getParameterType("true");
        boolean boolean37 = jSDocInfo30.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isNoTypeCheck();
        boolean boolean40 = jSDocInfo38.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = jSDocInfo38.getVisibility();
        java.lang.String str42 = jSDocInfo38.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo38.setVisibility(visibility43);
        jSDocInfo30.setVisibility(visibility43);
        jSDocInfo20.setVisibility(visibility43);
        jSDocInfo0.setVisibility(visibility43);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JSDocInfo" + "'", str25, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(visibility41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        java.lang.String str14 = node7.getQualifiedName();
        boolean boolean15 = node7.isSetterDef();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        boolean boolean25 = node24.isDo();
        java.util.Set<java.lang.String> strSet26 = node24.getDirectives();
        boolean boolean27 = node24.isString();
        node24.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node24.getAncestors();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoIfMissingFrom(node24);
        boolean boolean32 = node7.isTry();
        boolean boolean33 = node7.isComma();
        boolean boolean34 = node7.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isFunction();
        node22.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean12 = jSDocInfo0.hasThisType();
        boolean boolean13 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str14 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(jSTypeExpression15);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        boolean boolean4 = node3.hasOneChild();
        boolean boolean5 = node3.isNoSideEffectsCall();
        boolean boolean6 = node3.isDefaultCase();
        node3.setSourceEncodedPositionForTree(37);
        node3.setSourceFileForTesting("GT Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n 52");
        com.google.javascript.rhino.Node node11 = node3.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        boolean boolean47 = jSDocInfo0.shouldPreserveTry();
        boolean boolean48 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo0.getReturnType();
        jSDocInfo0.addSuppression("EQ\n    STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertNull(jSTypeExpression50);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isAssignAdd();
        boolean boolean12 = node8.isStringKey();
        int int13 = node8.getLineno();
        boolean boolean14 = node8.isComma();
        boolean boolean15 = node8.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        int int72 = typePosition21.getPositionOnEndLine();
        int int73 = typePosition21.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Not declared as a type name");
        boolean boolean2 = node1.isContinue();
        node1.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node5 = node1.cloneTree();
        com.google.javascript.rhino.Node node6 = node5.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        int int5 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        node1.setType((int) (byte) 100);
        boolean boolean8 = node1.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        java.lang.String str14 = node7.getQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        java.lang.String str24 = node18.toString();
        node18.removeProp((int) (short) 0);
        boolean boolean27 = node18.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean32 = node31.isGetterDef();
        com.google.javascript.rhino.Node node33 = node18.useSourceInfoFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        boolean boolean43 = node42.isDo();
        java.util.Set<java.lang.String> strSet44 = node42.getDirectives();
        com.google.javascript.rhino.Node node45 = node31.clonePropsFrom(node42);
        boolean boolean46 = node42.isDebugger();
        com.google.javascript.rhino.Node node47 = node42.getFirstChild();
        com.google.javascript.rhino.InputId inputId48 = node42.getInputId();
        boolean boolean49 = node7.hasChild(node42);
        boolean boolean50 = node7.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNull(inputId48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        boolean boolean11 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition3.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition9.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition15.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition22.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition22.setPositionInformation(3, (int) (short) -1, 52, 53);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getPositionOnStartLine();
        com.google.javascript.rhino.Node node35 = typePosition33.getItem();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.String str45 = node39.toString();
        node39.removeProp((int) (short) 0);
        boolean boolean48 = node39.isObjectLit();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean53 = node52.isGetterDef();
        com.google.javascript.rhino.Node node54 = node39.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        boolean boolean64 = node63.isDo();
        java.util.Set<java.lang.String> strSet65 = node63.getDirectives();
        com.google.javascript.rhino.Node node66 = node52.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node67 = node66.getNext();
        typePosition33.setItem(node66);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int70 = typePosition69.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList71 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition3, typePosition9, typePosition15, typePosition21, typePosition22, typePosition33, typePosition69);
        int int72 = typePosition0.getPositionOnStartLine();
        boolean boolean73 = typePosition0.hasBrackets();
        boolean boolean74 = typePosition0.hasBrackets();
        int int75 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 1.0" + "'", str45, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(typePositionList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        boolean boolean15 = node3.isNew();
        boolean boolean16 = node3.isOr();
        boolean boolean17 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        jSDocInfo0.setDeprecated(false);
        boolean boolean8 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node33 = node28.detachFromParent();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        node41.removeProp((int) (short) 0);
        boolean boolean50 = node41.isObjectLit();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean55 = node54.isGetterDef();
        com.google.javascript.rhino.Node node56 = node41.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node54.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean62 = node61.isGetterDef();
        com.google.javascript.rhino.Node node63 = node54.useSourceInfoFrom(node61);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = node67.srcref(node71);
        boolean boolean73 = node71.isFalse();
        com.google.javascript.rhino.Node node74 = node61.useSourceInfoIfMissingFrom(node71);
        boolean boolean75 = node74.isTrue();
        node74.addSuppression("NUMBER 1.0 [directives: [, hi!]]");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("true", (int) (short) 1, 38);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, node37, node74, node81);
        int int83 = node74.getLineno();
        boolean boolean84 = node74.wasEmptyNode();
        int int85 = node74.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.addChildToBack(node13);
        boolean boolean15 = node3.wasEmptyNode();
        node3.putIntProp(61440, (-1));
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isAnd();
        boolean boolean25 = node22.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node22.siblings();
        node22.putBooleanProp((int) (short) 100, false);
        boolean boolean30 = node22.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean37 = node36.isDo();
        boolean boolean38 = node36.isBlock();
        boolean boolean39 = node36.isStringKey();
        node22.putProp((int) (byte) 10, (java.lang.Object) node36);
        boolean boolean41 = node22.isNE();
        boolean boolean42 = node22.isOptionalArg();
        boolean boolean43 = node22.isIf();
        com.google.javascript.rhino.InputId inputId44 = null;
        node22.setInputId(inputId44);
        boolean boolean46 = node22.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = node3.getChildBefore(node22);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isNE();
        boolean boolean16 = node8.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition2.getPositionOnStartLine();
        stringPosition2.setItem("(hi!)");
        int int59 = stringPosition2.getEndLine();
        int int60 = stringPosition2.getPositionOnEndLine();
        java.lang.String str61 = stringPosition2.getItem();
        int int62 = stringPosition2.getPositionOnStartLine();
        stringPosition2.setPositionInformation(2, 35, 97, (-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 48 + "'", int56 == 48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(hi!)" + "'", str61, "(hi!)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 48 + "'", int62 == 48);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        boolean boolean2 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean9 = booleanLiteralSet7.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList10 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet3, booleanLiteralSet5, booleanLiteralSet7);
        boolean boolean12 = booleanLiteralSet7.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList20 = com.google.common.collect.ImmutableList.of(booleanLiteralSet14, booleanLiteralSet17, booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet7.union(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet22.intersection(booleanLiteralSet25);
        boolean boolean29 = booleanLiteralSet25.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet21.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet33.intersection(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet31.intersection(booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet25.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet39.intersection(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet37.union(booleanLiteralSet39);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList20);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        boolean boolean8 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.clearSideEffectFlags();
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(2, "(hi!)", 54, 3);
        int int5 = node4.getType();
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(30, 61537, (int) '4', 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.isExport();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        boolean boolean77 = node76.isEmpty();
        boolean boolean78 = strSet67.remove((java.lang.Object) node76);
        strSet67.clear();
        strSet67.clear();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        java.lang.String str19 = node13.toString();
        node13.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) '#', node13, node25, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node32 = node5.useSourceInfoFromForTree(node25);
        boolean boolean33 = node5.isScript();
        int int34 = node5.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 1.0" + "'", str19, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isFromExterns();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node4.new FileLevelJsDocBuilder();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder9 = serializableBuilder0.add((java.io.Serializable) node4);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray14, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) 'a', nodeArray14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(46, nodeArray14);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(42, nodeArray14, 47, 30);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder23 = serializableBuilder9.add((java.io.Serializable[]) nodeArray14);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node27.detachChildren();
        int int29 = node27.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        java.lang.String str39 = node33.toString();
        node33.removeProp((int) (short) 0);
        boolean boolean42 = node33.isGetProp();
        boolean boolean43 = node27.isEquivalentTo(node33);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder44 = serializableBuilder23.add((java.io.Serializable) boolean43);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = serializableBuilder23.build();
        org.junit.Assert.assertNotNull(serializableBuilder0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(serializableBuilder9);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertNotNull(serializableBuilder23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(serializableBuilder44);
        org.junit.Assert.assertNotNull(serializableList45);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isBreak();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        boolean boolean44 = node42.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node42.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node42.getStaticSourceFile();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(0, node42, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.Node node50 = node42.cloneTree();
        node50.setVarArgs(true);
        com.google.javascript.rhino.Node node53 = node4.copyInformationFrom(node50);
        com.google.javascript.rhino.Node node54 = node50.getLastChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo55.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo55.getEnumParameterType();
        boolean boolean59 = jSDocInfo55.hasEnumParameterType();
        boolean boolean60 = jSDocInfo55.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList61 = jSDocInfo55.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo55.getReturnType();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = node67.srcref(node71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = node76.srcref(node80);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean86 = node85.isBreak();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(4095, node67, node80, node85);
        boolean boolean88 = node80.isNumber();
        boolean boolean89 = node80.isLocalResultCall();
        com.google.javascript.rhino.Node node91 = node80.getAncestor(0);
        jSDocInfo55.setAssociatedNode(node80);
        node50.setJSDocInfo(jSDocInfo55);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList61);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        java.lang.String str12 = node6.toString();
        node6.removeProp((int) (short) 0);
        boolean boolean15 = node6.isObjectLit();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean20 = node19.isGetterDef();
        com.google.javascript.rhino.Node node21 = node6.useSourceInfoFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node30.isDo();
        java.util.Set<java.lang.String> strSet32 = node30.getDirectives();
        com.google.javascript.rhino.Node node33 = node19.clonePropsFrom(node30);
        java.lang.String str34 = node33.getSourceFileName();
        node33.putBooleanProp((int) (byte) 0, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node33.new FileLevelJsDocBuilder();
        boolean boolean39 = node2.hasChild(node33);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(48, 100, 8);
        node43.setType(50);
        boolean boolean46 = node43.isGetterDef();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(41, node2, node43);
        boolean boolean48 = node43.isSwitch();
        int int49 = node43.getLength();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        boolean boolean5 = node4.isLocalResultCall();
        boolean boolean6 = node4.isFunction();
        com.google.javascript.rhino.Node node7 = node4.getParent();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node11.addChildToBack(node21);
        com.google.javascript.rhino.Node node23 = node21.removeChildren();
        com.google.javascript.rhino.InputId inputId24 = null;
        node21.setInputId(inputId24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node21.clonePropsFrom(node34);
        boolean boolean42 = node34.isOptionalArg();
        com.google.javascript.rhino.Node node43 = node4.useSourceInfoFromForTree(node34);
        node34.setCharno((int) (byte) 10);
        boolean boolean46 = node34.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        jSDocInfo0.addSuppression("OR 0 [var_args_name: 1]\n");
        boolean boolean13 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        boolean boolean56 = node50.isBreak();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 1, node37, node41, node50, node60, 1, (-1));
        java.lang.String str64 = node60.getQualifiedName();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean69 = node68.isAnd();
        node68.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str72 = node60.checkTreeEquals(node68);
        jSDocInfo32.setAssociatedNode(node60);
        com.google.javascript.rhino.Node node74 = node8.useSourceInfoIfMissingFrom(node60);
        int int75 = node60.getCharno();
        boolean boolean76 = node60.isOptionalArg();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n", (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = node60.srcrefTree(node80);
        boolean boolean82 = node80.isNot();
        node80.setVarArgs(true);
        com.google.javascript.rhino.Node node85 = node80.getNext();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        boolean boolean4 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(markerCollection6);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isArrayLit();
        boolean boolean12 = node3.isAdd();
        int int13 = node3.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.children();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node19 = node3.srcref(node18);
        boolean boolean20 = node3.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        com.google.javascript.rhino.Node node27 = node22.detachFromParent();
        node22.setLength(30);
        int int30 = node22.getType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        java.lang.String str38 = node34.getQualifiedName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean43 = node42.isAnd();
        node42.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str46 = node34.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) ' ', node4, node42);
        boolean boolean48 = node42.isGetProp();
        boolean boolean49 = node42.isTrue();
        node42.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean36 = node35.isFalse();
        java.lang.String str37 = node35.getSourceFileName();
        boolean boolean38 = node35.isLabel();
        node4.putProp(1, (java.lang.Object) node35);
        boolean boolean40 = node35.isNew();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.children();
        boolean boolean42 = node35.isCall();
        node35.setIsSyntheticBlock(false);
        boolean boolean45 = node35.isIf();
        boolean boolean46 = node35.isVar();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        boolean boolean33 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo34.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getParameterType("Not declared as a constructor");
        boolean boolean39 = jSDocInfo34.isExport();
        node8.setJSDocInfo(jSDocInfo34);
        java.util.Collection<java.lang.String> strCollection41 = jSDocInfo34.getAuthors();
        java.lang.String str42 = jSDocInfo34.getSourceName();
        java.lang.String str43 = jSDocInfo34.getLendsName();
        java.lang.String str44 = jSDocInfo34.getReturnDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo34.getExtendedInterfaces();
        boolean boolean46 = jSDocInfo34.isConsistentIdGenerator();
        java.lang.String str47 = jSDocInfo34.getLendsName();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo34.getParameterNames();
        boolean boolean49 = jSDocInfo34.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strCollection41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("([PROTECTED])");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo23.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection30 = jSDocInfo23.getTypeNodes();
        boolean boolean31 = jSDocInfo23.isNoAlias();
        boolean boolean32 = jSDocInfo23.hasTypedefType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNotNull(nodeCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node1.getStaticSourceFile();
        boolean boolean4 = node1.isAssignAdd();
        boolean boolean5 = node1.isDo();
        node1.detachChildren();
        boolean boolean7 = node1.isStringKey();
        node1.putBooleanProp(39, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(54, nodeArray5, 31, (int) 'a');
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(44, nodeArray5, (int) (short) -1, (int) (byte) 0);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(10, nodeArray5, 5, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(31, nodeArray5);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(12325, nodeArray5);
        boolean boolean17 = node16.isVarArgs();
        com.google.javascript.rhino.Node node18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = node16.clonePropsFrom(node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node19);
        com.google.javascript.rhino.Node node21 = node19.getLastChild();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        boolean boolean45 = node39.isBreak();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 1, node26, node30, node39, node49, 1, (-1));
        java.lang.String str53 = node49.getQualifiedName();
        com.google.javascript.rhino.InputId inputId54 = node49.getInputId();
        boolean boolean55 = node49.isCatch();
        boolean boolean56 = node49.isNumber();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        java.lang.String str66 = node60.toString();
        node60.removeProp((int) (short) 0);
        boolean boolean69 = node60.isObjectLit();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean74 = node73.isGetterDef();
        com.google.javascript.rhino.Node node75 = node60.useSourceInfoFromForTree(node73);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node73.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean81 = node80.isGetterDef();
        com.google.javascript.rhino.Node node82 = node73.useSourceInfoFrom(node80);
        com.google.javascript.rhino.Node node83 = node73.cloneTree();
        boolean boolean84 = node73.isNot();
        com.google.javascript.rhino.Node node85 = node49.useSourceInfoFromForTree(node73);
        boolean boolean86 = node19.hasChild(node49);
        com.google.javascript.rhino.Node node87 = node49.detachFromParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(inputId54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 1.0" + "'", str66, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        boolean boolean6 = node3.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.InputId inputId31 = null;
        node8.setInputId(inputId31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean56 = node55.isBreak();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(4095, node37, node50, node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        java.lang.String str67 = node61.toString();
        node61.removeProp((int) (short) 0);
        boolean boolean70 = node61.isObjectLit();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean75 = node74.isGetterDef();
        com.google.javascript.rhino.Node node76 = node61.useSourceInfoFromForTree(node74);
        com.google.javascript.rhino.Node node77 = node57.copyInformationFromForTree(node61);
        node77.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node80 = node8.srcrefTree(node77);
        boolean boolean81 = node80.isReturn();
        node80.setDouble((double) '4');
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER 1.0" + "'", str67, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        int int33 = node8.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node8.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        java.lang.Object obj46 = node39.getProp(10);
        boolean boolean47 = node39.isQuotedString();
        boolean boolean48 = node39.isAnd();
        com.google.javascript.rhino.Node node49 = node39.cloneNode();
        node49.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node52 = node8.useSourceInfoFromForTree(node49);
        node52.putBooleanProp((int) (byte) 10, false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setThrows();
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        boolean boolean9 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nNEW [PROTECTED]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: NEW [PROTECTED]\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 100);
        boolean boolean2 = node1.isCatch();
        boolean boolean3 = node1.isNE();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node1.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(staticSourceFile4);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.hasTypedefType();
        boolean boolean33 = jSDocInfo23.hasThisType();
        boolean boolean34 = jSDocInfo23.isIdGenerator();
        boolean boolean35 = jSDocInfo23.hasBaseType();
        java.lang.String str36 = jSDocInfo23.getBlockDescription();
        java.lang.String str37 = jSDocInfo23.getDeprecationReason();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 47, 15);
        com.google.javascript.rhino.Node node5 = node4.getNext();
        boolean boolean6 = node4.isFor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        boolean boolean16 = node14.isVar();
        double double17 = node14.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo18.getEnumParameterType();
        java.lang.String str22 = jSDocInfo18.getDescription();
        node14.setJSDocInfo(jSDocInfo18);
        com.google.javascript.rhino.Node node24 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(5, node4);
        boolean boolean26 = node4.isFor();
        com.google.javascript.rhino.Node node27 = node4.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(7);
        boolean boolean2 = node1.isFor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        java.lang.String str4 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue1.or(ternaryValue7);
        java.lang.String str10 = ternaryValue7.toString();
        java.lang.String str11 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.and(ternaryValue18);
        java.lang.String str20 = ternaryValue17.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue17.or(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue23.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue15.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue28.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue7.and(ternaryValue30);
        boolean boolean33 = ternaryValue30.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue35.and(ternaryValue36);
        java.lang.String str38 = ternaryValue35.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue40.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue35.or(ternaryValue41);
        java.lang.String str44 = ternaryValue41.toString();
        boolean boolean46 = ternaryValue41.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue41.or(ternaryValue48);
        java.lang.String str50 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue41.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue30.xor(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue54.and(ternaryValue55);
        java.lang.String str57 = ternaryValue54.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue59.and(ternaryValue60);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue54.or(ternaryValue60);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue64.and(ternaryValue65);
        java.lang.String str67 = ternaryValue64.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue69.and(ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue64.or(ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue70.xor(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue62.xor(ternaryValue74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue52.and(ternaryValue62);
        boolean boolean78 = ternaryValue76.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "true" + "'", str38, "true");
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "true" + "'", str44, "true");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "true" + "'", str50, "true");
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "true" + "'", str57, "true");
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "true" + "'", str67, "true");
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isFromExterns();
        int int3 = node1.getCharno();
        boolean boolean4 = node1.isDo();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean29 = node28.isBreak();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(4095, node10, node23, node28);
        com.google.javascript.rhino.InputId inputId31 = node30.getInputId();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        int int34 = node30.getType();
        boolean boolean35 = node1.hasChild(node30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4095 + "'", int34 == 4095);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean6 = node5.isGetterDef();
        boolean boolean7 = node5.isThis();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.String str18 = node12.toString();
        node12.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', node12, node24, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.children();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean80 = node79.isGetterDef();
        com.google.javascript.rhino.Node node81 = node66.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node82 = node62.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 100, node5, node30, node34, node62, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node86 = node30.detachFromParent();
        boolean boolean87 = node30.isDebugger();
        boolean boolean88 = node30.isQualifiedName();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((-1), node30);
        java.lang.String str90 = node30.toString();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "GETELEM 0" + "'", str90, "GETELEM 0");
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node9.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node51.isBreak();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 1, node38, node42, node51, node61, 1, (-1));
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean70 = node69.isAnd();
        node69.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str73 = node61.checkTreeEquals(node69);
        jSDocInfo33.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node75 = node9.useSourceInfoIfMissingFrom(node61);
        typePosition0.setItem(node75);
        int int77 = node75.getSourcePosition();
        boolean boolean78 = node75.isCall();
        node75.setSourceEncodedPositionForTree(8);
        node75.addSuppression("NUMBER 1.0 97");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        com.google.common.collect.ImmutableList.Builder<java.util.Spliterator<java.lang.String>> strSpliteratorBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.Spliterator<java.lang.String>>();
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        boolean boolean27 = node22.isTrue();
        boolean boolean28 = node22.isDo();
        java.lang.String str29 = node22.toStringTree();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean34 = node33.isBreak();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node37 = node33.cloneTree();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        boolean boolean63 = node55.isFunction();
        boolean boolean64 = node55.isInstanceOf();
        boolean boolean65 = node55.isHook();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        int int78 = node67.getIndexOfChild(node71);
        boolean boolean79 = node67.wasEmptyNode();
        node55.addChildrenToFront(node67);
        com.google.javascript.rhino.Node node81 = node33.srcref(node67);
        boolean boolean82 = node67.isLabelName();
        boolean boolean83 = node67.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            node22.addChildrenToFront(node67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER 1.0\n" + "'", str29, "NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        boolean boolean33 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo34.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getParameterType("Not declared as a constructor");
        boolean boolean39 = jSDocInfo34.isExport();
        node8.setJSDocInfo(jSDocInfo34);
        java.util.Collection<java.lang.String> strCollection41 = jSDocInfo34.getAuthors();
        java.lang.String str42 = jSDocInfo34.getSourceName();
        boolean boolean43 = jSDocInfo34.isInterface();
        boolean boolean44 = jSDocInfo34.isJavaDispatch();
        boolean boolean45 = jSDocInfo34.isDeprecated();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strCollection41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue5.and(ternaryValue6);
        java.lang.String str8 = ternaryValue5.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue5.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue11.xor(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue3.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue18.and(ternaryValue19);
        java.lang.String str21 = ternaryValue18.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue23.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue18.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue24.xor(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue30.and(ternaryValue31);
        java.lang.String str33 = ternaryValue30.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue35.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue30.or(ternaryValue36);
        boolean boolean40 = ternaryValue38.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue24.or(ternaryValue38);
        boolean boolean43 = ternaryValue24.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue3.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue46.and(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.and(ternaryValue51);
        java.lang.String str53 = ternaryValue50.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue55.and(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue50.or(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue56.xor(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue48.xor(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue61.and(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue24.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue66.and(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue70.and(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue74.and(ternaryValue75);
        java.lang.String str77 = ternaryValue74.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue79.and(ternaryValue80);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = ternaryValue74.or(ternaryValue80);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = ternaryValue80.xor(ternaryValue83);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = ternaryValue72.xor(ternaryValue80);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = ternaryValue85.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue87 = ternaryValue68.or(ternaryValue85);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue64.or(ternaryValue85);
        java.lang.String str89 = ternaryValue64.toString();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "true" + "'", str21, "true");
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "true" + "'", str53, "true");
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "true" + "'", str77, "true");
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValue87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "false" + "'", str89, "false");
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        java.lang.String str47 = jSDocInfo0.getBlockDescription();
        boolean boolean48 = jSDocInfo0.isNoCompile();
        boolean boolean49 = jSDocInfo0.isNoTypeCheck();
        boolean boolean50 = jSDocInfo0.isExport();
        boolean boolean51 = jSDocInfo0.isNoSideEffects();
        boolean boolean52 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(24, (int) '#', 50);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node4.isSyntheticBlock();
        boolean boolean26 = node4.isScript();
        node4.setSourceFileForTesting("STRING hi! 97\n");
        boolean boolean29 = node4.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        node3.setSourceFileForTesting("[PROTECTED]");
        node3.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoFromForTree(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        java.lang.String str24 = node18.toString();
        node18.removeProp((int) (short) 0);
        boolean boolean27 = node18.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean32 = node31.isGetterDef();
        com.google.javascript.rhino.Node node33 = node18.useSourceInfoFromForTree(node31);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node31.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean39 = node38.isGetterDef();
        com.google.javascript.rhino.Node node40 = node31.useSourceInfoFrom(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        boolean boolean50 = node48.isFalse();
        com.google.javascript.rhino.Node node51 = node38.useSourceInfoIfMissingFrom(node48);
        node3.addChildrenToBack(node38);
        boolean boolean53 = node38.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        boolean boolean77 = node71.isBreak();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 1, node58, node62, node71, node81, 1, (-1));
        com.google.javascript.rhino.Node node85 = node84.cloneNode();
        boolean boolean86 = node84.hasOneChild();
        com.google.javascript.rhino.Node node87 = node38.useSourceInfoIfMissingFrom(node84);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = node87.getExistingIntProp(409652);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 409652");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.setSourceEncodedPosition(35);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        boolean boolean14 = node13.isDo();
        java.util.Set<java.lang.String> strSet15 = node13.getDirectives();
        boolean boolean16 = node13.isAssignAdd();
        int int17 = node3.getIndexOfChild(node13);
        boolean boolean18 = node13.isSwitch();
        boolean boolean19 = node13.isComma();
        int int20 = node13.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        java.lang.String str30 = node24.toString();
        node24.removeProp((int) (short) 0);
        boolean boolean33 = node24.isObjectLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node24.useSourceInfoFromForTree(node37);
        boolean boolean40 = node37.isAdd();
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node42 = node37.getLastSibling();
        node37.setCharno(100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        boolean boolean68 = node62.isBreak();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 1, node49, node53, node62, node72, 1, (-1));
        node53.removeProp(0);
        boolean boolean78 = node37.isEquivalentTo(node53);
        com.google.javascript.rhino.Node node79 = node13.copyInformationFromForTree(node53);
        boolean boolean80 = node13.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean5 = node4.isFalse();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        java.lang.String str38 = node34.getQualifiedName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean43 = node42.isAnd();
        node42.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str46 = node34.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) ' ', node4, node42);
        boolean boolean48 = node47.isObjectLit();
        boolean boolean49 = node47.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node50 = node47.removeFirstChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        java.lang.String str39 = jSDocInfo32.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo32.getImplementedInterfaces();
        boolean boolean41 = jSDocInfo32.isConstant();
        int int42 = jSDocInfo32.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        boolean boolean4 = jSDocInfo0.isHidden();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(markerCollection7);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node28.isDo();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        com.google.javascript.rhino.Node node31 = node17.clonePropsFrom(node28);
        boolean boolean32 = node28.isDebugger();
        com.google.javascript.rhino.Node node33 = node28.getFirstChild();
        boolean boolean34 = node28.isSetterDef();
        boolean boolean35 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        int int38 = node28.getIndexOfChild(node37);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node28.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        boolean boolean68 = node67.isDo();
        java.util.Set<java.lang.String> strSet69 = node67.getDirectives();
        com.google.javascript.rhino.Node node70 = node56.clonePropsFrom(node67);
        boolean boolean71 = node67.isDebugger();
        boolean boolean73 = node67.getBooleanProp(100);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = node77.srcref(node81);
        java.lang.Object obj84 = node77.getProp(10);
        boolean boolean85 = node77.isQuotedString();
        int int86 = node77.getChildCount();
        boolean boolean87 = node77.isHook();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(4146, node28, node67, node77, 15, 13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = node77.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        java.lang.String str31 = node30.getSourceFileName();
        int int33 = node30.getIntProp(43);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean39 = node38.isDo();
        node38.putIntProp(38, 31);
        com.google.javascript.rhino.InputId inputId43 = node38.getInputId();
        com.google.javascript.rhino.Node node44 = node30.srcrefTree(node38);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Not declared as a type name");
        boolean boolean47 = node46.hasChildren();
        boolean boolean48 = node46.isDec();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = node62.srcref(node66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean72 = node71.isBreak();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(4095, node53, node66, node71);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet77);
        boolean boolean81 = strSet77.add("true");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray83 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility82 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList84 = com.google.common.collect.ImmutableList.of(visibilityArray83);
        java.lang.String str85 = visibilityList84.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList86 = visibilityList84.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList88 = jSDocInfo87.getImplementedInterfaces();
        boolean boolean89 = jSDocInfo87.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = jSDocInfo87.getParameterType("Not declared as a constructor");
        boolean boolean92 = jSDocInfo87.isExport();
        boolean boolean93 = jSDocInfo87.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList94 = jSDocInfo87.getImplementedInterfaces();
        boolean boolean95 = visibilityList84.equals((java.lang.Object) jSDocInfo87);
        boolean boolean96 = strSet77.containsAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList84);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet77);
        boolean boolean98 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node99 = node30.srcref(node46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray83);
        org.junit.Assert.assertNotNull(visibilityList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[PROTECTED]" + "'", str85, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList86);
        org.junit.Assert.assertNotNull(jSTypeExpressionList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSTypeExpression91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags13.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        java.lang.Object[] objArray4 = strSet2.toArray();
        int int5 = strSet2.size();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean33 = node32.isBreak();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, node14, node27, node32);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        node9.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet38.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet38.spliterator();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        java.lang.String str55 = node49.toString();
        node49.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) '#', node49, node61, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList69 = jSDocInfo68.getImplementedInterfaces();
        java.lang.String str70 = jSDocInfo68.getFileOverview();
        node67.setJSDocInfo(jSDocInfo68);
        java.lang.String str72 = jSDocInfo68.getSourceName();
        boolean boolean73 = jSDocInfo68.hasType();
        boolean boolean74 = strSet38.contains((java.lang.Object) boolean73);
        java.lang.Object[] objArray75 = strSet38.toArray();
        boolean boolean76 = strSet38.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray78 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility77 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList79 = com.google.common.collect.ImmutableList.of(visibilityArray78);
        java.util.ListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor80 = visibilityList79.listIterator();
        java.lang.Object[] objArray81 = visibilityList79.toArray();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags83 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags83.setMutatesGlobalState();
        sideEffectFlags83.setAllFlags();
        boolean boolean86 = sideEffectFlags83.areAllFlagsSet();
        sideEffectFlags83.setReturnsTainted();
        int int88 = visibilityList79.indexOf((java.lang.Object) sideEffectFlags83);
        boolean boolean89 = strSet38.retainAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList79);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor90 = visibilityList79.iterator();
        boolean boolean91 = strSet2.retainAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = visibilityList79.remove(38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[, hi!]");
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER 1.0" + "'", str55, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + visibility77 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility77.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray78);
        org.junit.Assert.assertNotNull(visibilityList79);
        org.junit.Assert.assertNotNull(visibilityItor80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[PROTECTED]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(visibilityItor90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        boolean boolean6 = node3.isOr();
        node3.addSuppression("[PROTECTED]");
        boolean boolean9 = node3.isIf();
        com.google.javascript.rhino.Node node10 = node3.getLastChild();
        boolean boolean11 = node3.isVoid();
        boolean boolean12 = node3.isIf();
        boolean boolean13 = node3.isLabel();
        com.google.javascript.rhino.Node node14 = node3.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str5 = node4.toString();
        com.google.javascript.rhino.Node node6 = node4.cloneTree();
        boolean boolean7 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean44 = node43.isFalse();
        java.lang.String str45 = node43.getSourceFileName();
        boolean boolean46 = node43.isLabel();
        node12.putProp(1, (java.lang.Object) node43);
        com.google.javascript.rhino.Node node48 = node6.useSourceInfoFromForTree(node12);
        boolean boolean49 = node48.isGetterDef();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 10, node48, 16, 40);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        boolean boolean62 = node60.isVar();
        double double63 = node60.getDouble();
        int int64 = node60.getLength();
        boolean boolean65 = node60.isArrayLit();
        node60.setDouble((double) '#');
        node60.setSourceEncodedPosition((int) (short) 0);
        node60.putIntProp(13, 24);
        com.google.javascript.rhino.Node node73 = node48.useSourceInfoFrom(node60);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 1.0" + "'", str5, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags9.setAllFlags();
        sideEffectFlags9.clearSideEffectFlags();
        int int20 = sideEffectFlags9.valueOf();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.isExpose();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        boolean boolean11 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        boolean boolean34 = node17.isEquivalentTo(node28);
        boolean boolean35 = node28.isRegExp();
        int int36 = node28.getSourceOffset();
        int int37 = node28.getChildCount();
        node28.setOptionalArg(true);
        com.google.javascript.rhino.Node node40 = node28.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 36);
        boolean boolean2 = node1.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        java.lang.String[] strArray1 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.util.Iterator<java.lang.String> strItor4 = strSet2.iterator();
        java.lang.Object[] objArray5 = strSet2.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList13 = com.google.common.collect.ImmutableList.of(strSet2, strSet11);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean20 = node19.isDo();
        boolean boolean21 = node19.isBlock();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean26 = node25.isBreak();
        node25.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node29 = node25.cloneTree();
        com.google.javascript.rhino.Node node30 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node19.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags34 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags34.setAllFlags();
        node19.setSideEffectFlags(sideEffectFlags34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.Object obj47 = node40.getProp(10);
        boolean boolean48 = node40.isQuotedString();
        boolean boolean49 = node40.isAnd();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        java.lang.String str59 = node53.toString();
        node53.removeProp((int) (short) 0);
        boolean boolean62 = node53.isObjectLit();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean67 = node66.isGetterDef();
        com.google.javascript.rhino.Node node68 = node53.useSourceInfoFromForTree(node66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(35, node19, node40, node66, (int) (short) 1, (int) (short) 1);
        node66.setQuotedString();
        boolean boolean73 = strSet2.remove((java.lang.Object) node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList75 = jSDocInfo74.getImplementedInterfaces();
        java.lang.String str76 = jSDocInfo74.getFileOverview();
        boolean boolean77 = jSDocInfo74.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = jSDocInfo74.getVisibility();
        java.lang.String str80 = jSDocInfo74.getDescriptionForParameter("NUMBER 1.0");
        node66.setJSDocInfo(jSDocInfo74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo74.getThisType();
        com.google.javascript.rhino.Node node83 = jSDocInfo74.getAssociatedNode();
        java.lang.String str84 = jSDocInfo74.getVersion();
        java.lang.String str85 = jSDocInfo74.getReturnDescription();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSetList13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 1.0" + "'", str59, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(visibility78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        boolean boolean10 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker4 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker4.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker4.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker4.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker8.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition13 = marker12.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker12.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker12.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = marker16.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = marker16.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList21 = com.google.common.collect.ImmutableList.of(marker0, marker4, marker8, marker12, marker16);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition22 = marker4.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition23 = marker4.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = marker4.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition25 = marker4.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(nodeSourcePosition13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition19);
        org.junit.Assert.assertNull(typePosition20);
        org.junit.Assert.assertNotNull(markerList21);
        org.junit.Assert.assertNull(nodeSourcePosition22);
        org.junit.Assert.assertNull(nodeSourcePosition23);
        org.junit.Assert.assertNull(typePosition24);
        org.junit.Assert.assertNull(stringPosition25);
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.Visibility[][][][]> visibilityArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.Visibility[][][][]>();
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        node3.detachChildren();
        int int10 = node3.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node3.getJSDocInfo();
        boolean boolean12 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        node17.setQuotedString();
        int int19 = node17.getChildCount();
        boolean boolean20 = node17.isBreak();
        boolean boolean21 = node17.isTypeOf();
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isWhile();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isFalse();
        int int10 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable11 = node7.getAncestors();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getPositionOnStartLine();
        com.google.javascript.rhino.Node node14 = typePosition12.getItem();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        java.lang.String str24 = node18.toString();
        node18.removeProp((int) (short) 0);
        boolean boolean27 = node18.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean32 = node31.isGetterDef();
        com.google.javascript.rhino.Node node33 = node18.useSourceInfoFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        boolean boolean43 = node42.isDo();
        java.util.Set<java.lang.String> strSet44 = node42.getDirectives();
        com.google.javascript.rhino.Node node45 = node31.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node46 = node45.getNext();
        typePosition12.setItem(node45);
        com.google.javascript.rhino.Node node48 = typePosition12.getItem();
        boolean boolean49 = node48.hasOneChild();
        com.google.javascript.rhino.Node node50 = node7.srcrefTree(node48);
        com.google.javascript.rhino.jstype.JSType jSType51 = node7.getJSType();
        boolean boolean52 = node7.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 1.0" + "'", str24, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        java.lang.String[] strArray3 = new java.lang.String[] { "NUMBER 1.0", "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet4.spliterator();
        boolean boolean8 = strSet4.add("([PROTECTED])");
        boolean boolean9 = strSet4.isEmpty();
        boolean boolean10 = strSet4.isEmpty();
        boolean boolean12 = strSet4.add("((Not declared as a type name))");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        boolean boolean9 = jSDocInfo0.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("(NUMBER 0.0)");
        boolean boolean13 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        node33.putIntProp(39, 53);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = node33.getStaticSourceFile();
        boolean boolean89 = node33.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(staticSourceFile88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo0.getParameterNames();
        boolean boolean44 = jSDocInfo0.hasModifies();
        java.lang.String str46 = jSDocInfo0.getDescriptionForParameter("Not declared as a type name");
        boolean boolean47 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection48 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strCollection48);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str12 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        node5.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean18 = node17.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) '#', node5, node17, 0, (int) (short) 0);
        namePosition0.setItem(node5);
        com.google.javascript.rhino.Node node25 = namePosition0.getItem();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node25.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder26.append("NUMBER 1.0 97");
        fileLevelJsDocBuilder26.append("Not declared as a constructor");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getName();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 0);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node9.isDo();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        boolean boolean12 = node9.isString();
        node9.setWasEmptyNode(false);
        boolean boolean15 = node9.isGetterDef();
        boolean boolean16 = node9.isFunction();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        boolean boolean26 = node24.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node24.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        java.lang.String str29 = node24.getSourceFileName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(2, node9, node24, node33, 32, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean41 = node40.isThis();
        node40.setSourceEncodedPositionForTree(0);
        boolean boolean44 = node40.hasOneChild();
        node40.setVarArgs(true);
        java.lang.String str47 = node24.checkTreeEquals(node40);
        java.lang.String str48 = node40.toStringTree();
        com.google.javascript.rhino.InputId inputId49 = node40.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n" + "'", str47, "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nOR 0 [var_args_name: 1]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: OR 0 [var_args_name: 1]\n");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR 0 [var_args_name: 1]\n" + "'", str48, "OR 0 [var_args_name: 1]\n");
        org.junit.Assert.assertNull(inputId49);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        com.google.common.collect.ImmutableList.Builder<java.lang.String[][][][]> strArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(strArrayBuilder0);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        int int6 = node3.getLength();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node15.getJSDocInfo();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 10, node15);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoIfMissingFromForTree(node19);
        node3.addSuppression("(OR 0 [var_args_name: 1]\n)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo24.getImplementedInterfaces();
        java.lang.String str26 = jSDocInfo24.getFileOverview();
        boolean boolean27 = jSDocInfo24.hasReturnType();
        java.lang.String str28 = jSDocInfo24.getFileOverview();
        node3.setJSDocInfo(jSDocInfo24);
        boolean boolean30 = node3.isHook();
        com.google.javascript.rhino.InputId inputId31 = node3.getInputId();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSDocInfo18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId31);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isOr();
        com.google.javascript.rhino.Node node21 = node16.getLastSibling();
        node16.setCharno(100);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        boolean boolean47 = node41.isBreak();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 1, node28, node32, node41, node51, 1, (-1));
        node32.removeProp(0);
        boolean boolean57 = node16.isEquivalentTo(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo58.getImplementedInterfaces();
        boolean boolean60 = jSDocInfo58.isDeprecated();
        boolean boolean61 = jSDocInfo58.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo58.getBaseType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection63 = jSDocInfo58.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList64 = jSDocInfo58.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo58.getType();
        node32.setJSDocInfo(jSDocInfo58);
        java.lang.String str67 = jSDocInfo58.getFileOverview();
        boolean boolean69 = jSDocInfo58.hasParameter("OR 100\n");
        boolean boolean70 = jSDocInfo58.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo58.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo58.getModifies();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNotNull(markerCollection63);
        org.junit.Assert.assertNotNull(jSTypeExpressionList64);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertNotNull(strSet72);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        boolean boolean3 = jSDocInfo0.isDefine();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        boolean boolean6 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        boolean boolean61 = node9.isTrue();
        boolean boolean62 = node9.isAnd();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean67 = node66.isBreak();
        node66.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node70 = node66.cloneTree();
        boolean boolean71 = node70.isIf();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable72 = node70.getAncestors();
        com.google.javascript.rhino.Node node73 = node9.useSourceInfoFrom(node70);
        com.google.javascript.rhino.Node node74 = node70.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(ancestorIterable72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        int int29 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node30 = typePosition0.getItem();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isObjectLit();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean48 = node47.isGetterDef();
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoFromForTree(node47);
        boolean boolean50 = node34.isAnd();
        node34.removeProp((-1));
        boolean boolean53 = node34.isSetterDef();
        typePosition0.setItem(node34);
        com.google.javascript.rhino.Node node55 = node34.getParent();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 42 + "'", int29 == 42);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean10 = jSDocInfo0.hasParameter("STRING true 1");
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(51, 53, 2);
        boolean boolean4 = node3.isArrayLit();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean7 = node6.isParamList();
        boolean boolean8 = node6.isDo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node6.children();
        boolean boolean10 = node6.isFromExterns();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node14.children();
        java.util.Set<java.lang.String> strSet16 = node14.getDirectives();
        int int17 = node14.getLength();
        boolean boolean18 = node14.isCatch();
        com.google.javascript.rhino.InputId inputId19 = node14.getInputId();
        com.google.javascript.rhino.Node node20 = node6.useSourceInfoFrom(node14);
        boolean boolean21 = node6.isParamList();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean26 = node25.isFalse();
        java.lang.String str27 = node25.getSourceFileName();
        boolean boolean28 = node25.isLabel();
        boolean boolean29 = node25.isSetterDef();
        boolean boolean30 = node25.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node48.isBreak();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 1, node35, node39, node48, node58, 1, (-1));
        boolean boolean62 = node61.isWith();
        boolean boolean63 = node61.isNot();
        boolean boolean64 = node25.isEquivalentToTyped(node61);
        boolean boolean65 = node25.isAssignAdd();
        com.google.javascript.rhino.Node node66 = node6.clonePropsFrom(node25);
        boolean boolean67 = node25.isDo();
        node3.addChildToFront(node25);
        boolean boolean69 = node25.isGetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesThis();
        int int5 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 29 + "'", int5 == 29);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        java.lang.String str15 = node9.toString();
        node9.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean22 = node21.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', node9, node21, 0, (int) (short) 0);
        namePosition4.setItem(node9);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition29 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int30 = namePosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition31 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int32 = namePosition31.getPositionOnStartLine();
        int int33 = namePosition31.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList34 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition2, namePosition4, namePosition29, namePosition31);
        com.google.javascript.rhino.Node node35 = namePosition0.getItem();
        int int36 = namePosition0.getEndLine();
        int int37 = namePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 1.0" + "'", str15, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(namePositionList34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isObjectLit();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean48 = node47.isGetterDef();
        com.google.javascript.rhino.Node node49 = node34.useSourceInfoFromForTree(node47);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 1, node49);
        com.google.javascript.rhino.Node node51 = node29.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node60.isDo();
        java.util.Set<java.lang.String> strSet62 = node60.getDirectives();
        boolean boolean63 = node60.isString();
        node60.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable66 = node60.getAncestors();
        com.google.javascript.rhino.Node node67 = node50.srcrefTree(node60);
        com.google.javascript.rhino.Node node68 = node1.srcref(node60);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        node68.setStaticSourceFile(staticSourceFile69);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ancestorIterable66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING NUMBER 1.0 [directives: [, hi!]] 51", 0, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean27 = node26.isBreak();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4095, node8, node21, node26);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet32);
        int int35 = node8.getCharno();
        boolean boolean36 = node8.isParamList();
        boolean boolean37 = node8.isName();
        boolean boolean38 = node8.isGetProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node8.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node40 = node3.copyInformationFromForTree(node8);
        node40.detachChildren();
        boolean boolean42 = node40.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node17.getStaticSourceFile();
        boolean boolean26 = node17.isTry();
        java.lang.String str27 = node17.getQualifiedName();
        java.lang.String str31 = node17.toString(false, false, false);
        boolean boolean32 = node17.hasMoreThanOneChild();
        boolean boolean33 = node17.isTrue();
        com.google.javascript.rhino.Node node34 = node17.cloneTree();
        boolean boolean35 = node34.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(staticSourceFile25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 1.0" + "'", str31, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet4.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet2.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet1.intersection(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean12 = booleanLiteralSet10.contains(false);
        boolean boolean14 = booleanLiteralSet10.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean30 = booleanLiteralSet28.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList31 = com.google.common.collect.ImmutableList.of(booleanLiteralSet22, booleanLiteralSet24, booleanLiteralSet26, booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean41 = booleanLiteralSet39.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList42 = com.google.common.collect.ImmutableList.of(booleanLiteralSet33, booleanLiteralSet35, booleanLiteralSet37, booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean52 = booleanLiteralSet50.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList53 = com.google.common.collect.ImmutableList.of(booleanLiteralSet44, booleanLiteralSet46, booleanLiteralSet48, booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet59.intersection(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList63 = com.google.common.collect.ImmutableList.of(booleanLiteralSet57, booleanLiteralSet60, booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean73 = booleanLiteralSet71.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList74 = com.google.common.collect.ImmutableList.of(booleanLiteralSet65, booleanLiteralSet67, booleanLiteralSet69, booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean84 = booleanLiteralSet82.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList85 = com.google.common.collect.ImmutableList.of(booleanLiteralSet76, booleanLiteralSet78, booleanLiteralSet80, booleanLiteralSet82);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList86 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet10, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet16, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet19, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet28, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet37, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet46, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet55, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet60, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet65, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet80);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean90 = booleanLiteralSet88.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = booleanLiteralSet46.intersection(booleanLiteralSet88);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = booleanLiteralSet8.union(booleanLiteralSet88);
        boolean boolean94 = booleanLiteralSet88.contains(false);
        boolean boolean96 = booleanLiteralSet88.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList31);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList42);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList53);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList63);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList74);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList85);
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList86);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        java.lang.String[] strArray24 = new java.lang.String[] { "(hi!)", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n", "(JSDocInfo)", "STRING ", "[PROTECTED]", "(STRING hi! 97)", "Unknown class name", "OR 0 [var_args_name: 1]\n", "NUMBER 1.0", "Not declared as a type name", "NUMBER 1.0\n", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n", "STRING ", "(JSDocInfo)", "JSDocInfo", "(NUMBER 1.0)", "(STRING hi! 97)", "(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)", "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", "STRING hi! 97", "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", "Node tree inequality:\nTree1:\nNUMBER 1.0 54\n\n\nTree2:\nOR 100\n    OR 100\n\n\nSubtree1: NUMBER 1.0 54\n\n\nSubtree2: OR 100\n    OR 100\n", "", "Named type with empty name component" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        java.lang.String str36 = node30.toString();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node30.addChildToBack(node40);
        com.google.javascript.rhino.Node node42 = node40.removeChildren();
        boolean boolean43 = strSet25.remove((java.lang.Object) node40);
        boolean boolean44 = node40.isOptionalArg();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean51 = node50.isAssign();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node59.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node59.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = node59.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node59.getJSDocInfo();
        java.lang.String str66 = node59.getQualifiedName();
        com.google.javascript.rhino.InputId inputId67 = null;
        node59.setInputId(inputId67);
        node59.setLineno(44);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(4, node47, node50, node59);
        com.google.javascript.rhino.Node node72 = node40.useSourceInfoFrom(node59);
        boolean boolean73 = node59.isExprResult();
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER 1.0" + "'", str36, "NUMBER 1.0");
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean31 = node30.isBreak();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4095, node12, node25, node30);
        boolean boolean33 = node25.isFunction();
        boolean boolean34 = node25.isInstanceOf();
        boolean boolean35 = node25.isHook();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        int int48 = node37.getIndexOfChild(node41);
        boolean boolean49 = node37.wasEmptyNode();
        node25.addChildrenToFront(node37);
        com.google.javascript.rhino.Node node51 = node3.srcref(node37);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        boolean boolean75 = node69.isBreak();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 1, node56, node60, node69, node79, 1, (-1));
        node82.setOptionalArg(true);
        int int85 = node82.getLength();
        boolean boolean86 = node82.isCall();
        boolean boolean87 = node51.isEquivalentToTyped(node82);
        com.google.javascript.rhino.jstype.JSType jSType88 = node82.getJSType();
        boolean boolean89 = node82.isVarArgs();
        int int90 = node82.getSourceOffset();
        boolean boolean91 = node82.isFunction();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node9.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node51.isBreak();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 1, node38, node42, node51, node61, 1, (-1));
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean70 = node69.isAnd();
        node69.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str73 = node61.checkTreeEquals(node69);
        jSDocInfo33.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node75 = node9.useSourceInfoIfMissingFrom(node61);
        typePosition0.setItem(node75);
        com.google.javascript.rhino.Node node77 = typePosition0.getItem();
        boolean boolean78 = node77.isNull();
        boolean boolean79 = node77.isInstanceOf();
        boolean boolean80 = node77.isTypeOf();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isInterface();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags7.setThrows();
        sideEffectFlags7.setThrows();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(61440, "");
        node2.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node5 = node2.cloneTree();
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        int int7 = node5.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR 0", 46, 29);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.util.ListIterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor3 = visibilityList2.listIterator();
        java.lang.Object[] objArray4 = visibilityList2.toArray();
        java.lang.Object[] objArray5 = visibilityList2.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getParameterType("hi!");
        int int9 = jSDocInfo6.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getType();
        boolean boolean11 = visibilityList2.equals((java.lang.Object) jSDocInfo6);
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertNotNull(visibilityItor3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[PROTECTED]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[PROTECTED]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[PROTECTED]");
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(31);
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isQuotedString();
        int int5 = node1.getChildCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(40, "NUMBER 1.0 97");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(47, node3, 30, (int) 'a');
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean12 = node11.isNull();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(16, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", 52, 35);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node17, 52, 100);
        boolean boolean21 = node6.hasChild(node17);
        boolean boolean22 = node17.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        int int29 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node30 = typePosition0.getItem();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (short) 1, 41, (int) (byte) 1);
        typePosition0.setItem(node34);
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation((int) '#', 40, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 35?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo32.getTypeNodes();
        java.lang.String str44 = jSDocInfo32.getDescriptionForParameter("([PROTECTED])");
        boolean boolean45 = jSDocInfo32.hasBaseType();
        boolean boolean46 = jSDocInfo32.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo32.getType();
        java.lang.String str48 = jSDocInfo32.getMeaning();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo49.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo49.getFileOverview();
        boolean boolean52 = jSDocInfo49.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = jSDocInfo49.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo49.getBaseType();
        boolean boolean55 = jSDocInfo49.hasBaseType();
        jSDocInfo49.setLicense("(hi!)");
        int int58 = jSDocInfo49.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo49.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray61 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility60 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList62 = com.google.common.collect.ImmutableList.of(visibilityArray61);
        java.lang.String str63 = visibilityList62.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList64 = visibilityList62.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo65.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo65.getEnumParameterType();
        java.lang.String str69 = jSDocInfo65.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo65.getParameterType("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo65.setVisibility(visibility72);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = jSDocInfo65.getVisibility();
        boolean boolean75 = visibilityList64.equals((java.lang.Object) visibility74);
        jSDocInfo49.setVisibility(visibility74);
        jSDocInfo32.setVisibility(visibility74);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(visibility53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray61);
        org.junit.Assert.assertNotNull(visibilityList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[PROTECTED]" + "'", str63, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList64);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        boolean boolean6 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        boolean boolean30 = node24.isBreak();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 1, node11, node15, node24, node34, 1, (-1));
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean43 = node42.isFalse();
        java.lang.String str44 = node42.getSourceFileName();
        boolean boolean45 = node42.isLabel();
        node11.putProp(1, (java.lang.Object) node42);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoFromForTree(node11);
        boolean boolean48 = node47.isCall();
        node47.setType(52);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = node47.getExistingIntProp((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 52");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.lang.String str3 = visibilityList2.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList4 = visibilityList2.reverse();
        java.util.Spliterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilitySpliterator5 = visibilityList2.spliterator();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean11 = node10.isDo();
        boolean boolean12 = node10.isBlock();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        node16.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node20 = node16.cloneTree();
        com.google.javascript.rhino.Node node21 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node16.getJsDocBuilderForNode();
        int int23 = visibilityList2.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder22);
        fileLevelJsDocBuilder22.append("");
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[PROTECTED]" + "'", str3, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList4);
        org.junit.Assert.assertNotNull(visibilitySpliterator5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getParameterType("hi!");
        boolean boolean13 = jSDocInfo10.hasModifies();
        boolean boolean15 = jSDocInfo10.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo10.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo10.getType();
        boolean boolean18 = jSDocInfo10.isHidden();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray20 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility19 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList21 = com.google.common.collect.ImmutableList.of(visibilityArray20);
        java.lang.String str22 = visibilityList21.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList23 = visibilityList21.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo24.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo24.getEnumParameterType();
        java.lang.String str28 = jSDocInfo24.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo24.getParameterType("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo24.setVisibility(visibility31);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = jSDocInfo24.getVisibility();
        boolean boolean34 = visibilityList23.equals((java.lang.Object) visibility33);
        jSDocInfo10.setVisibility(visibility33);
        jSDocInfo0.setVisibility(visibility33);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray20);
        org.junit.Assert.assertNotNull(visibilityList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[PROTECTED]" + "'", str22, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList23);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.Node[] nodeArray36 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(54, nodeArray36, 31, (int) 'a');
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(44, nodeArray36, (int) (short) -1, (int) (byte) 0);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder43 = serializableBuilder0.add((java.io.Serializable[]) nodeArray36);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(nodeArray36);
        org.junit.Assert.assertNotNull(serializableBuilder43);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        boolean boolean7 = node4.isStringKey();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        boolean boolean31 = node25.isBreak();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 1, node12, node16, node25, node35, 1, (-1));
        node16.removeProp(0);
        com.google.javascript.rhino.Node node41 = node4.copyInformationFromForTree(node16);
        boolean boolean42 = node4.isWith();
        boolean boolean43 = node4.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean16 = node15.isSwitch();
        boolean boolean17 = node15.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node3.isNE();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node3.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node21 = node3.getFirstChild();
        java.lang.Appendable appendable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            node21.appendStringTree(appendable22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4095, "true");
        node2.setType(45);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node21.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean29 = node28.isGetterDef();
        com.google.javascript.rhino.Node node30 = node21.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node31 = node21.getNext();
        boolean boolean32 = node21.isNE();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        java.lang.String str43 = node37.toString();
        node37.removeProp((int) (short) 0);
        boolean boolean46 = node37.isGetProp();
        com.google.javascript.rhino.Node node47 = node37.getNext();
        node21.putProp((int) (short) 1, (java.lang.Object) node37);
        node2.addChildToFront(node37);
        com.google.javascript.rhino.Node node50 = node2.getLastSibling();
        node2.setType(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 1.0" + "'", str43, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        com.google.javascript.rhino.Node node26 = node24.getFirstChild();
        boolean boolean27 = node24.isArrayLit();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        java.lang.String str38 = node32.toString();
        node32.removeProp((int) (short) 0);
        boolean boolean41 = node32.isGetProp();
        boolean boolean42 = node32.isReturn();
        com.google.javascript.rhino.Node node43 = node24.srcref(node32);
        com.google.javascript.rhino.jstype.JSType jSType44 = node43.getJSType();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId47 = null;
        node46.setInputId(inputId47);
        node46.setCharno(12);
        boolean boolean51 = node46.isCase();
        com.google.javascript.rhino.Node node52 = node43.srcrefTree(node46);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        boolean boolean76 = node70.isBreak();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 1, node57, node61, node70, node80, 1, (-1));
        boolean boolean84 = node61.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList86 = jSDocInfo85.getImplementedInterfaces();
        java.lang.String str87 = jSDocInfo85.getFileOverview();
        boolean boolean88 = jSDocInfo85.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility89 = jSDocInfo85.getVisibility();
        node61.setJSDocInfo(jSDocInfo85);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = jSDocInfo85.getThisType();
        boolean boolean92 = jSDocInfo85.hasBaseType();
        jSDocInfo85.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection95 = jSDocInfo85.getTypeNodes();
        boolean boolean96 = jSDocInfo85.isNoTypeCheck();
        boolean boolean97 = jSDocInfo85.isNoCompile();
        node46.setJSDocInfo(jSDocInfo85);
        boolean boolean99 = node46.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(jSType44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(visibility89);
        org.junit.Assert.assertNull(jSTypeExpression91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(nodeCollection95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean6 = node3.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.siblings();
        boolean boolean8 = node3.isIn();
        node3.setLength((int) (short) 10);
        node3.setSourceFileForTesting("(((hi!)))");
        int int14 = node3.getIntProp(31);
        com.google.javascript.rhino.Node node15 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        jSDocInfo0.setLicense("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getLendsName();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        boolean boolean19 = node17.isVar();
        double double20 = node17.getDouble();
        boolean boolean21 = node17.isNull();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str26 = node25.toString();
        boolean boolean27 = node25.isDebugger();
        boolean boolean28 = node25.isGetterDef();
        com.google.javascript.rhino.Node node29 = node17.useSourceInfoIfMissingFromForTree(node25);
        node17.addSuppression("OR 0 [var_args_name: 1]\n");
        boolean boolean32 = node17.isCall();
        jSDocInfo0.setAssociatedNode(node17);
        java.lang.Object obj35 = node17.getProp(54);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 1.0" + "'", str26, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(42, "NUMBER 1.0 0", 97, 54);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isVarArgs();
        boolean boolean6 = node4.isOr();
        boolean boolean7 = node4.isAnd();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(16, "([PROTECTED])", 43, (int) (short) -1);
        boolean boolean14 = node12.getBooleanProp(48);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node28.getJSDocInfo();
        boolean boolean30 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoFromForTree(node28);
        boolean boolean32 = node19.isVarArgs();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean56 = node55.isBreak();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(4095, node37, node50, node55);
        boolean boolean58 = node50.isFunction();
        boolean boolean59 = node50.isInstanceOf();
        boolean boolean60 = node50.isHook();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        int int73 = node62.getIndexOfChild(node66);
        boolean boolean74 = node62.wasEmptyNode();
        node50.addChildrenToFront(node62);
        com.google.javascript.rhino.Node node76 = node19.useSourceInfoIfMissingFromForTree(node62);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node12, node19);
        boolean boolean78 = node4.isGetProp();
        boolean boolean79 = node4.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 42, 100);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(97);
        node6.setLength((int) (short) 0);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(44, node4, node6);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean33 = node32.isBreak();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(4095, node14, node27, node32);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.String str44 = node14.toString(true, true, false);
        boolean boolean45 = node14.isLabelName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node14.getStaticSourceFile();
        com.google.javascript.rhino.Node node47 = node6.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        boolean boolean71 = node65.isBreak();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) 1, node52, node56, node65, node75, 1, (-1));
        boolean boolean79 = node56.isInstanceOf();
        com.google.javascript.rhino.Node node80 = node14.useSourceInfoIfMissingFromForTree(node56);
        node80.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str44, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        java.lang.String str11 = node5.toString();
        int int12 = node1.getIndexOfChild(node5);
        boolean boolean13 = node1.wasEmptyNode();
        int int14 = node1.getCharno();
        com.google.javascript.rhino.Node node15 = node1.cloneTree();
        boolean boolean16 = node15.isQuotedString();
        boolean boolean17 = node15.isWith();
        boolean boolean18 = node15.isAssignAdd();
        boolean boolean19 = node15.isReturn();
        boolean boolean20 = node15.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 1.0" + "'", str11, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(50);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node33 = node28.detachFromParent();
        boolean boolean34 = node28.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node28.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node28.isTrue();
        node28.addSuppression("()");
        node28.addSuppression("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        java.lang.String str51 = node45.toString();
        node45.removeProp((int) (short) 0);
        boolean boolean54 = node45.isObjectLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean59 = node58.isGetterDef();
        com.google.javascript.rhino.Node node60 = node45.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(39, node28, node45, (int) 'a', (int) (short) 0);
        boolean boolean64 = node28.isHook();
        boolean boolean65 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node66 = node28.getNext();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 1.0" + "'", str51, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        boolean boolean4 = jSDocInfo0.isHidden();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 48, 221184);
        boolean boolean5 = node3.getBooleanProp(11);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        jSDocInfo0.addSuppression("([PROTECTED])");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            strSet9.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo23.getBaseType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        jSDocInfo0.setDeprecated(true);
        boolean boolean8 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 100);
        node1.setLineno((int) (short) 100);
        boolean boolean4 = node1.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        boolean boolean32 = node4.isParamList();
        boolean boolean33 = node4.isName();
        boolean boolean34 = node4.isGetProp();
        node4.addSuppression("STRING hi!");
        boolean boolean37 = node4.isContinue();
        com.google.javascript.rhino.jstype.JSType jSType38 = node4.getJSType();
        node4.setSourceEncodedPositionForTree(7);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType38);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean57 = node56.isBreak();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node38, node51, node56);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.lang.String str68 = node38.toString(true, true, false);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder69 = serializableBuilder33.add((java.io.Serializable) str68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo70.getImplementedInterfaces();
        boolean boolean72 = jSDocInfo70.isDeprecated();
        boolean boolean73 = jSDocInfo70.hasType();
        java.lang.String str74 = jSDocInfo70.getBlockDescription();
        java.lang.String str75 = jSDocInfo70.getReturnDescription();
        boolean boolean76 = jSDocInfo70.isExpose();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder77 = serializableBuilder33.add((java.io.Serializable) jSDocInfo70);
        int int78 = jSDocInfo70.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection79 = jSDocInfo70.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator80 = nodeCollection79.spliterator();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str68, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNotNull(serializableBuilder69);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(serializableBuilder77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(nodeCollection79);
        org.junit.Assert.assertNotNull(nodeSpliterator80);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(37, (int) (byte) 100, 30);
        node7.addChildrenToBack(node12);
        com.google.javascript.rhino.Node node14 = node12.removeChildren();
        boolean boolean15 = node12.isDebugger();
        java.util.Set<java.lang.String> strSet16 = node12.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition43.getPositionOnEndLine();
        int int57 = stringPosition43.getPositionOnEndLine();
        stringPosition43.setItem("");
        int int60 = stringPosition43.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 48 + "'", int60 == 48);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        java.lang.Object obj24 = node22.getProp(48);
        com.google.javascript.rhino.Node node25 = node22.getFirstChild();
        boolean boolean26 = node25.isQuotedString();
        boolean boolean27 = node25.isVoid();
        boolean boolean28 = node25.isFor();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean34 = node33.isNull();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(16, "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", 52, 35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node39, 52, 100);
        com.google.javascript.rhino.Node node43 = node25.copyInformationFrom(node42);
        boolean boolean44 = node43.isParamList();
        boolean boolean45 = node43.isVarArgs();
        boolean boolean46 = node43.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        boolean boolean11 = node9.isFalse();
        int int12 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node16.children();
        node16.setWasEmptyNode(false);
        boolean boolean20 = node16.isDec();
        java.lang.String str21 = node16.getSourceFileName();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100, node9, node16);
        int int23 = node9.getLineno();
        boolean boolean24 = node9.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean28 = node27.isVar();
        boolean boolean29 = node27.isName();
        boolean boolean30 = node27.isScript();
        node27.detachChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node36.siblings();
        boolean boolean38 = node36.isNull();
        int int39 = node36.getLineno();
        com.google.javascript.rhino.Node[] nodeArray44 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(54, nodeArray44, 31, (int) 'a');
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(44, nodeArray44, (int) (short) -1, (int) (byte) 0);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) '#', nodeArray44);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(3, nodeArray44, (int) '#', 61537);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) '#', node9, node27, node36, node54, 52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(nodeArray44);
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        int int5 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.lang.String str46 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo0.getParameterType("Unknown class name");
        boolean boolean49 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.setLicense("STRING ");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean57 = node56.isDo();
        boolean boolean58 = node56.isFalse();
        boolean boolean59 = node56.wasEmptyNode();
        boolean boolean60 = node56.isFalse();
        node56.setString("Not declared as a constructor");
        node56.setSourceEncodedPosition(12);
        boolean boolean65 = node56.isInstanceOf();
        jSDocInfo0.setAssociatedNode(node56);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList67 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList67);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        int int11 = node7.getLength();
        boolean boolean12 = node7.isArrayLit();
        node7.setDouble((double) '#');
        node7.setSourceEncodedPosition((int) (short) 0);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        boolean boolean40 = node34.isBreak();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 1, node21, node25, node34, node44, 1, (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        java.lang.String str57 = node51.toString();
        node51.removeProp((int) (short) 0);
        boolean boolean60 = node51.isGetProp();
        boolean boolean61 = node51.isReturn();
        com.google.javascript.rhino.Node node62 = node21.srcref(node51);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean67 = node66.isThis();
        node66.setSourceEncodedPositionForTree(0);
        boolean boolean70 = node66.hasOneChild();
        com.google.javascript.rhino.Node node71 = node21.useSourceInfoFrom(node66);
        boolean boolean72 = node71.isEmpty();
        com.google.javascript.rhino.Node node73 = node71.detachFromParent();
        boolean boolean74 = node73.isThrow();
        boolean boolean75 = node73.isString();
        node73.setOptionalArg(true);
        com.google.javascript.rhino.Node node78 = node7.useSourceInfoIfMissingFrom(node73);
        boolean boolean79 = node7.isSwitch();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("JSDocInfo");
        int int82 = node81.getLineno();
        com.google.javascript.rhino.Node node83 = node7.srcref(node81);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 1.0" + "'", str57, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean17 = node4.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags19.setAllFlags();
        node4.setSideEffectFlags(sideEffectFlags19);
        int int22 = node4.getLineno();
        node4.removeProp(35);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean28 = node27.isAssign();
        boolean boolean29 = node27.isDo();
        node4.addChildrenToBack(node27);
        com.google.javascript.rhino.Node node31 = node27.cloneNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isBreak();
        node36.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isGetProp();
        boolean boolean53 = node43.isDebugger();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '4', node36, node43);
        java.lang.String str55 = node54.toStringTree();
        boolean boolean56 = node54.isContinue();
        com.google.javascript.rhino.Node node57 = node27.srcrefTree(node54);
        node54.addSuppression("(Not declared as a constructor)");
        boolean boolean60 = node54.isString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n" + "'", str55, "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getPositionOnStartLine();
        int int4 = namePosition2.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int6 = namePosition5.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int8 = namePosition7.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int10 = namePosition9.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        java.lang.String str22 = node16.toString();
        node16.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean29 = node28.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', node16, node28, 0, (int) (short) 0);
        namePosition11.setItem(node16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition36 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int37 = namePosition36.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int39 = namePosition38.getPositionOnStartLine();
        int int40 = namePosition38.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition7, namePosition9, namePosition11, namePosition36, namePosition38);
        int int42 = namePosition7.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int44 = namePosition43.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int46 = namePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        java.lang.String str58 = node52.toString();
        node52.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean65 = node64.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) '#', node52, node64, 0, (int) (short) 0);
        namePosition47.setItem(node52);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition72 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int73 = namePosition72.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition74 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int75 = namePosition74.getPositionOnStartLine();
        int int76 = namePosition74.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList77 = com.google.common.collect.ImmutableList.of(namePosition43, namePosition45, namePosition47, namePosition72, namePosition74);
        int int78 = namePosition43.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList79 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition2, namePosition5, namePosition7, namePosition43);
        int int80 = namePosition5.getPositionOnEndLine();
        namePosition5.setPositionInformation((int) (byte) 0, 47, 3, 49);
        int int86 = namePosition5.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 1.0" + "'", str22, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER 1.0" + "'", str58, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(namePositionList77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(namePositionList79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node33 = node28.detachFromParent();
        boolean boolean34 = node28.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node28.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node28.isTrue();
        node28.addSuppression("()");
        node28.addSuppression("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        java.lang.String str51 = node45.toString();
        node45.removeProp((int) (short) 0);
        boolean boolean54 = node45.isObjectLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean59 = node58.isGetterDef();
        com.google.javascript.rhino.Node node60 = node45.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(39, node28, node45, (int) 'a', (int) (short) 0);
        boolean boolean64 = node63.isAnd();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node78 = node73.srcref(node77);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node87 = node82.srcref(node86);
        boolean boolean88 = node82.isBreak();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) (byte) 1, node69, node73, node82, node92, 1, (-1));
        boolean boolean96 = node69.isIf();
        boolean boolean97 = node69.isCatch();
        com.google.javascript.rhino.Node node98 = node63.clonePropsFrom(node69);
        boolean boolean99 = node69.isVar();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 1.0" + "'", str51, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        boolean boolean6 = node4.isFor();
        boolean boolean7 = node4.isSwitch();
        boolean boolean8 = node4.isThis();
        boolean boolean9 = node4.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [jsdoc_info: JSDocInfo]", 47, 35);
        com.google.javascript.rhino.Node node4 = node3.getNext();
        boolean boolean5 = node3.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isWhile();
        com.google.javascript.rhino.Node node7 = node3.getLastSibling();
        boolean boolean8 = node7.isVoid();
        com.google.javascript.rhino.Node node10 = node7.getAncestor(61440);
        boolean boolean11 = node7.isDo();
        // The following exception was thrown during execution in test generation
        try {
            node7.setString("NUMBER 1.0 0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        java.lang.String str47 = jSDocInfo0.getBlockDescription();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n");
        boolean boolean50 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        boolean boolean28 = node27.isDo();
        java.util.Set<java.lang.String> strSet29 = node27.getDirectives();
        com.google.javascript.rhino.Node node30 = node16.clonePropsFrom(node27);
        boolean boolean31 = node27.isDebugger();
        com.google.javascript.rhino.Node node32 = node27.getFirstChild();
        boolean boolean33 = node27.isSetterDef();
        boolean boolean34 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str39 = node38.toString();
        com.google.javascript.rhino.Node node40 = node38.cloneTree();
        com.google.javascript.rhino.Node node41 = node38.getLastSibling();
        boolean boolean42 = node41.isOptionalArg();
        boolean boolean43 = node41.isCall();
        boolean boolean44 = node41.isNumber();
        boolean boolean45 = node41.isDebugger();
        com.google.javascript.rhino.Node node46 = node27.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean51 = node50.isFalse();
        java.lang.String str52 = node50.getSourceFileName();
        boolean boolean53 = node50.isLabel();
        com.google.javascript.rhino.Node node54 = node50.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node55 = node46.srcref(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 1.0" + "'", str39, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isWhile();
        node3.setType((int) (byte) 0);
        com.google.javascript.rhino.Node node9 = node3.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = node9.isDebugger();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "(THIS JSDocInfo 16)", 54, 48);
        boolean boolean5 = node4.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean12 = node11.isFalse();
        boolean boolean13 = node11.isVoid();
        com.google.javascript.rhino.Node node14 = node11.getFirstChild();
        jSDocInfo0.setAssociatedNode(node14);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(51, "Not declared as a constructor");
        int int3 = node2.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        com.google.javascript.rhino.Node node5 = node2.cloneNode();
        boolean boolean6 = node2.isThrow();
        int int8 = node2.getIntProp(11);
        boolean boolean9 = node2.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo32.getTypeNodes();
        boolean boolean43 = jSDocInfo32.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo32.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo32.getThrownTypes();
        boolean boolean46 = jSDocInfo32.hasThisType();
        boolean boolean47 = jSDocInfo32.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo32.getBaseType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable14 = node8.getAncestors();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node23.isDo();
        java.util.Set<java.lang.String> strSet25 = node23.getDirectives();
        boolean boolean26 = node23.isString();
        node23.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node23.getAncestors();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        boolean boolean39 = node38.isDo();
        java.util.Set<java.lang.String> strSet40 = node38.getDirectives();
        boolean boolean41 = node38.isString();
        node38.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable44 = node38.getAncestors();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        boolean boolean54 = node53.isDo();
        java.util.Set<java.lang.String> strSet55 = node53.getDirectives();
        boolean boolean56 = node53.isString();
        node53.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node53.getAncestors();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.AncestorIterable> ancestorIterableList60 = com.google.common.collect.ImmutableList.of(ancestorIterable14, ancestorIterable29, ancestorIterable44, ancestorIterable59);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator61 = ancestorIterable59.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor62 = ancestorIterable59.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor63 = ancestorIterable59.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator64 = ancestorIterable59.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor65 = ancestorIterable59.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator66 = ancestorIterable59.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor67 = ancestorIterable59.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ancestorIterable14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ancestorIterable29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertNotNull(ancestorIterableList60);
        org.junit.Assert.assertNotNull(nodeSpliterator61);
        org.junit.Assert.assertNotNull(nodeItor62);
        org.junit.Assert.assertNotNull(nodeItor63);
        org.junit.Assert.assertNotNull(nodeSpliterator64);
        org.junit.Assert.assertNotNull(nodeItor65);
        org.junit.Assert.assertNotNull(nodeSpliterator66);
        org.junit.Assert.assertNotNull(nodeItor67);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((Not declared as a type name))", 16, 19);
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        boolean boolean5 = node3.isCase();
        boolean boolean6 = node3.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.containsDeclaration();
        boolean boolean33 = jSDocInfo23.isImplicitCast();
        boolean boolean34 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo23.getSuppressions();
        int int36 = strSet35.size();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setThrows();
        sideEffectFlags9.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition43.getPositionOnEndLine();
        int int57 = stringPosition43.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 48 + "'", int57 == 48);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isFalse();
        boolean boolean7 = node4.wasEmptyNode();
        boolean boolean8 = node4.isFalse();
        node4.setString("Not declared as a constructor");
        node4.setSourceEncodedPosition(12);
        boolean boolean13 = node4.isEmpty();
        boolean boolean14 = node4.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        boolean boolean26 = node17.isInstanceOf();
        boolean boolean27 = node17.isHook();
        node17.setCharno(4095);
        boolean boolean30 = node17.isCase();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        java.lang.String str41 = node35.toString();
        node35.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean48 = node47.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) '#', node35, node47, 0, (int) (short) 0);
        node47.setType(41);
        boolean boolean56 = node47.isInc();
        com.google.javascript.rhino.Node node57 = node17.copyInformationFrom(node47);
        boolean boolean58 = node57.isNE();
        node57.putIntProp(38, 51);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 1.0" + "'", str41, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean6 = node5.isGetterDef();
        boolean boolean7 = node5.isThis();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = node12.srcref(node16);
        java.lang.String str18 = node12.toString();
        node12.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', node12, node24, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node34.children();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean80 = node79.isGetterDef();
        com.google.javascript.rhino.Node node81 = node66.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node82 = node62.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 100, node5, node30, node34, node62, (int) '4', (int) (byte) 100);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder86 = serializableBuilder0.add((java.io.Serializable) node30);
        com.google.javascript.rhino.jstype.JSType jSType87 = node30.getJSType();
        org.junit.Assert.assertNotNull(serializableBuilder0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 1.0" + "'", str18, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(serializableBuilder86);
        org.junit.Assert.assertNull(jSType87);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        node3.setSourceFileForTesting("[PROTECTED]");
        node3.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoFromForTree(node13);
        boolean boolean15 = node14.isSwitch();
        boolean boolean16 = node14.isParamList();
        boolean boolean17 = node14.hasChildren();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition18.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition18.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int29 = typePosition18.getPositionOnEndLine();
        typePosition18.setPositionInformation(16, 44, (int) 'a', 12);
        int int35 = typePosition18.getPositionOnEndLine();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node39.setSourceEncodedPosition((int) (short) 10);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node59.isBreak();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 1, node46, node50, node59, node69, 1, (-1));
        boolean boolean73 = node50.isInstanceOf();
        boolean boolean74 = node50.isCase();
        int int75 = node50.getLineno();
        int int76 = node50.getType();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        node50.putProp((int) (byte) -1, (java.lang.Object) "hi!");
        com.google.javascript.rhino.Node node83 = node39.useSourceInfoFrom(node50);
        typePosition18.setItem(node50);
        com.google.javascript.rhino.Node node85 = node50.getLastSibling();
        java.lang.String str86 = node14.checkTreeEquals(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList88 = jSDocInfo87.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo87.getParameterType("Not declared as a constructor");
        int int91 = jSDocInfo87.getExtendedInterfacesCount();
        java.lang.String str92 = jSDocInfo87.getLicense();
        java.lang.String str93 = jSDocInfo87.getMeaning();
        java.util.Collection<java.lang.String> strCollection94 = jSDocInfo87.getReferences();
        java.lang.String str95 = jSDocInfo87.getMeaning();
        node50.setJSDocInfo(jSDocInfo87);
        boolean boolean97 = jSDocInfo87.hasReturnType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 39 + "'", int76 == 39);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(jSTypeExpressionList88);
        org.junit.Assert.assertNull(jSTypeExpression90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNull(strCollection94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        java.lang.String str12 = node7.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node7.getJSDocInfo();
        java.lang.String str14 = node7.getQualifiedName();
        boolean boolean15 = node7.isSetterDef();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = node19.srcref(node23);
        boolean boolean25 = node24.isDo();
        java.util.Set<java.lang.String> strSet26 = node24.getDirectives();
        boolean boolean27 = node24.isString();
        node24.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node24.getAncestors();
        com.google.javascript.rhino.Node node31 = node7.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        boolean boolean42 = node40.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node40.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = node40.getStaticSourceFile();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean49 = node48.isAnd();
        boolean boolean50 = node48.isBreak();
        boolean boolean51 = node48.isName();
        boolean boolean52 = node48.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(53, node40, node48, node54, 0, 29);
        com.google.javascript.rhino.Node node58 = node7.clonePropsFrom(node57);
        boolean boolean59 = node57.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertNull(staticSourceFile44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.lang.String str46 = jSDocInfo0.getOriginalCommentString();
        boolean boolean47 = jSDocInfo0.isExpose();
        boolean boolean48 = jSDocInfo0.hasModifies();
        int int49 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection50 = jSDocInfo0.getMarkers();
        boolean boolean51 = jSDocInfo0.isExterns();
        boolean boolean52 = jSDocInfo0.hasBaseType();
        boolean boolean53 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(markerCollection50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        java.lang.String str13 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        boolean boolean5 = booleanLiteralSet1.contains(true);
        boolean boolean7 = booleanLiteralSet1.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList19 = com.google.common.collect.ImmutableList.of(booleanLiteralSet10, booleanLiteralSet12, booleanLiteralSet14, booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet8.intersection(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet1.intersection(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean31 = booleanLiteralSet29.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList32 = com.google.common.collect.ImmutableList.of(booleanLiteralSet23, booleanLiteralSet25, booleanLiteralSet27, booleanLiteralSet29);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet36.intersection(booleanLiteralSet37);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList40 = com.google.common.collect.ImmutableList.of(booleanLiteralSet34, booleanLiteralSet37, booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet44.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList48 = com.google.common.collect.ImmutableList.of(booleanLiteralSet42, booleanLiteralSet45, booleanLiteralSet47);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet37.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet49.union(booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = booleanLiteralSet23.union(booleanLiteralSet52);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet55.intersection(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet59.intersection(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = booleanLiteralSet63.intersection(booleanLiteralSet64);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList68 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet55, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet61, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet65, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet66, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet67);
        boolean boolean70 = booleanLiteralSet66.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = booleanLiteralSet52.intersection(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet21.intersection(booleanLiteralSet71);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList19);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList32);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList40);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList48);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node22.isDo();
        boolean boolean24 = node3.isEquivalentToTyped(node22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean5 = node4.isAnd();
        boolean boolean7 = node4.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node4.siblings();
        node4.putBooleanProp((int) (short) 100, false);
        boolean boolean12 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean19 = node18.isDo();
        boolean boolean20 = node18.isBlock();
        boolean boolean21 = node18.isStringKey();
        node4.putProp((int) (byte) 10, (java.lang.Object) node18);
        boolean boolean23 = node4.isHook();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(47, node4, 29, 30);
        boolean boolean27 = node4.isGetterDef();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = node36.srcref(node40);
        java.lang.String str42 = node36.toString();
        node36.removeProp((int) (short) 0);
        boolean boolean45 = node36.isObjectLit();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean50 = node49.isGetterDef();
        com.google.javascript.rhino.Node node51 = node36.useSourceInfoFromForTree(node49);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 1, node51);
        com.google.javascript.rhino.Node node53 = node31.useSourceInfoFromForTree(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node53.siblings();
        node4.addChildrenToFront(node53);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER 1.0" + "'", str42, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeIterable54);
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        int int6 = jSDocInfo0.getParameterCount();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet7.spliterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setMutatesThis();
        boolean boolean13 = strSet7.equals((java.lang.Object) sideEffectFlags9);
        sideEffectFlags9.setThrows();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        java.lang.String str11 = jSDocInfo0.getDescription();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        boolean boolean14 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        boolean boolean11 = node7.isParamList();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean35 = node34.isBreak();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node16, node29, node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node29.getStaticSourceFile();
        boolean boolean38 = node29.isTry();
        java.lang.String str39 = node29.getQualifiedName();
        java.lang.String str43 = node29.toString(false, false, false);
        com.google.javascript.rhino.Node node44 = node29.cloneTree();
        boolean boolean45 = node7.isEquivalentTo(node29);
        node7.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo48.getImplementedInterfaces();
        java.lang.String str50 = jSDocInfo48.getFileOverview();
        boolean boolean51 = jSDocInfo48.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = jSDocInfo48.getVisibility();
        boolean boolean53 = jSDocInfo48.isNoAlias();
        boolean boolean54 = jSDocInfo48.isNoAlias();
        boolean boolean55 = jSDocInfo48.isNoShadow();
        node7.setJSDocInfo(jSDocInfo48);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER 1.0" + "'", str43, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(visibility52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo32.getTypeNodes();
        boolean boolean43 = jSDocInfo32.hasEnumParameterType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        java.lang.CharSequence charSequence2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList3 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "(NUMBER 100.0 100)", (java.lang.CharSequence) "((STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n))", charSequence2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 2");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setMutatesThis();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 24 + "'", int6 == 24);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        int int43 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean44 = jSDocInfo0.isConstant();
        boolean boolean45 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node8.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node8.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node8.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, node8, (int) (short) 0, (int) (short) 100);
        boolean boolean16 = node8.isContinue();
        int int17 = node8.getCharno();
        node8.setType(0);
        boolean boolean20 = node8.isFromExterns();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        int int33 = node8.getSourceOffset();
        boolean boolean34 = node8.isGetElem();
        boolean boolean35 = node8.isDelProp();
        // The following exception was thrown during execution in test generation
        try {
            node8.setString("NUMBER 1.0 0 [directives: [NUMBER 1.0, , hi!, Not declared as a constructor]]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        java.lang.String[] strArray1 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = com.google.common.collect.ImmutableList.copyOf(strArray1);
        java.lang.String[] strArray4 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.copyOf(strArray4);
        java.lang.String[] strArray6 = new java.lang.String[] {};
        java.lang.String[] strArray8 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.copyOf(strArray8);
        java.lang.String[] strArray16 = new java.lang.String[] { "STRING hi! 97", "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", "STRING hi! 97\n", "true", "Unknown class name", "STRING " };
        java.lang.String[] strArray20 = new java.lang.String[] { "OR 100", "(hi!)", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n" };
        java.lang.String[] strArray24 = new java.lang.String[] { "STRING true 1", "(JSDocInfo)", "(STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n)" };
        com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList25 = com.google.common.collect.ImmutableList.of(strArray1, strArray4, strArray6, strArray8, strArray16, strArray20, strArray24);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = com.google.common.collect.ImmutableList.copyOf((java.io.Serializable[]) strArray1);
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.copyOf(strArray28);
        java.lang.String[] strArray31 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.copyOf(strArray31);
        java.lang.String[] strArray33 = new java.lang.String[] {};
        java.lang.String[] strArray35 = new java.lang.String[] { "STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n" };
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.copyOf(strArray35);
        java.lang.String[] strArray43 = new java.lang.String[] { "STRING hi! 97", "Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n", "STRING hi! 97\n", "true", "Unknown class name", "STRING " };
        java.lang.String[] strArray47 = new java.lang.String[] { "OR 100", "(hi!)", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n" };
        java.lang.String[] strArray51 = new java.lang.String[] { "STRING true 1", "(JSDocInfo)", "(STRING  [jsdoc_info: JSDocInfo]\n    NUMBER 1.0 [jsdoc_info: JSDocInfo]\n)" };
        com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList52 = com.google.common.collect.ImmutableList.of(strArray28, strArray31, strArray33, strArray35, strArray43, strArray47, strArray51);
        java.lang.String[] strArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList54 = com.google.common.collect.ImmutableList.of(strArray1, strArray28, strArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 2");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArrayList52);
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean3 = node2.isDec();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder4 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean10 = node9.isGetterDef();
        boolean boolean11 = node9.isThis();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        java.lang.String str22 = node16.toString();
        node16.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean29 = node28.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', node16, node28, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node38.children();
        node38.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean65 = node64.isBreak();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(4095, node46, node59, node64);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        java.lang.String str76 = node70.toString();
        node70.removeProp((int) (short) 0);
        boolean boolean79 = node70.isObjectLit();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean84 = node83.isGetterDef();
        com.google.javascript.rhino.Node node85 = node70.useSourceInfoFromForTree(node83);
        com.google.javascript.rhino.Node node86 = node66.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 100, node9, node34, node38, node66, (int) '4', (int) (byte) 100);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder90 = serializableBuilder4.add((java.io.Serializable) node34);
        com.google.javascript.rhino.Node node91 = node2.srcref(node34);
        com.google.javascript.rhino.jstype.JSType jSType92 = node91.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder93 = node91.new FileLevelJsDocBuilder();
        boolean boolean94 = node91.hasMoreThanOneChild();
        java.lang.Appendable appendable95 = null;
        // The following exception was thrown during execution in test generation
        try {
            node91.appendStringTree(appendable95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableBuilder4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 1.0" + "'", str22, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER 1.0" + "'", str76, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(serializableBuilder90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(jSType92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str6 = node2.toString(false, false, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node2.getJsDocBuilderForNode();
        int int8 = node2.getSourceOffset();
        boolean boolean9 = node2.isNull();
        boolean boolean10 = node2.isExprResult();
        int int11 = node2.getSideEffectFlags();
        boolean boolean12 = node2.isInstanceOf();
        com.google.javascript.rhino.Node node13 = node2.cloneTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GETELEM Not declared as a constructor" + "'", str6, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node85 = node29.detachFromParent();
        boolean boolean86 = node85.isInstanceOf();
        node85.setCharno(30);
        boolean boolean89 = node85.isObjectLit();
        boolean boolean90 = node85.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node91 = node85.cloneNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList93 = jSDocInfo92.getImplementedInterfaces();
        java.lang.String str94 = jSDocInfo92.getFileOverview();
        boolean boolean95 = jSDocInfo92.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility96 = jSDocInfo92.getVisibility();
        java.lang.String str97 = jSDocInfo92.getLendsName();
        node91.setJSDocInfo(jSDocInfo92);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(jSTypeExpressionList93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(visibility96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(0);
        boolean boolean3 = node2.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node2.getStaticSourceFile();
        boolean boolean5 = node2.isWhile();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean10 = node9.isAnd();
        boolean boolean11 = node9.isDebugger();
        boolean boolean12 = node9.isWhile();
        node9.setType((int) (byte) 0);
        com.google.javascript.rhino.Node node15 = node2.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node16 = node9.getLastSibling();
        boolean boolean17 = node9.isScript();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        node26.removeProp((int) (short) 0);
        boolean boolean35 = node26.isObjectLit();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean40 = node39.isGetterDef();
        com.google.javascript.rhino.Node node41 = node26.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 1, node41);
        com.google.javascript.rhino.Node node43 = node21.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node43.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int49 = node48.getSideEffectFlags();
        boolean boolean50 = node48.hasMoreThanOneChild();
        node48.setCharno(100);
        node43.addChildToBack(node48);
        boolean boolean54 = node43.isCall();
        java.lang.String str55 = node43.getQualifiedName();
        com.google.javascript.rhino.Node node56 = node9.useSourceInfoFromForTree(node43);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node66 = node61.srcref(node65);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean80 = node79.isBreak();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(4095, node61, node74, node79);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet85);
        int int88 = node61.getCharno();
        boolean boolean89 = node61.isParamList();
        boolean boolean90 = node61.isName();
        boolean boolean91 = node61.isSyntheticBlock();
        node61.setType(52);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (byte) 1, node9, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(staticSourceFile4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("NUMBER 1.0\n");
        boolean boolean11 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.lang.String str3 = visibilityList2.toString();
        java.util.stream.Stream<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityStream4 = visibilityList2.parallelStream();
        java.util.stream.Stream<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityStream5 = visibilityList2.parallelStream();
        java.util.Spliterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilitySpliterator6 = visibilityList2.spliterator();
        int int7 = visibilityList2.size();
        java.lang.Object obj8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = visibilityList2.remove(obj8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[PROTECTED]" + "'", str3, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityStream4);
        org.junit.Assert.assertNotNull(visibilityStream5);
        org.junit.Assert.assertNotNull(visibilitySpliterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node9.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node51.isBreak();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 1, node38, node42, node51, node61, 1, (-1));
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean70 = node69.isAnd();
        node69.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str73 = node61.checkTreeEquals(node69);
        jSDocInfo33.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node75 = node9.useSourceInfoIfMissingFrom(node61);
        typePosition0.setItem(node75);
        int int77 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node78 = typePosition0.getItem();
        int int79 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(10.0d, (int) (short) -1, 4095);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node83.getStaticSourceFile();
        node83.setLength((int) '#');
        typePosition0.setItem(node83);
        int int88 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(staticSourceFile84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "Not declared as a constructor");
        java.lang.String str6 = node2.toString(false, false, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node2.getJsDocBuilderForNode();
        int int8 = node2.getSourceOffset();
        boolean boolean9 = node2.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GETELEM Not declared as a constructor" + "'", str6, "GETELEM Not declared as a constructor");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isDeprecated();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        int int9 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        boolean boolean3 = node1.isDo();
        boolean boolean4 = node1.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("Named type with empty name component");
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("()");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(4095, node6, node19, node24);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet30);
        int int33 = node6.getCharno();
        java.lang.String str34 = node6.getQualifiedName();
        boolean boolean35 = node6.isFromExterns();
        boolean boolean36 = node6.isIf();
        boolean boolean37 = node6.isIn();
        java.lang.Object obj39 = node6.getProp(100);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        boolean boolean63 = node57.isBreak();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 1, node44, node48, node57, node67, 1, (-1));
        java.lang.String str71 = node67.getQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder72 = node67.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node73 = node6.srcref(node67);
        com.google.javascript.rhino.Node node74 = node73.detachFromParent();
        com.google.javascript.rhino.Node node75 = node1.copyInformationFrom(node74);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean80 = node79.isAnd();
        boolean boolean81 = node79.isDebugger();
        boolean boolean82 = node79.isWhile();
        node79.setType((int) (byte) 0);
        boolean boolean85 = node79.isDelProp();
        boolean boolean86 = node79.isQualifiedName();
        boolean boolean87 = node79.isLabelName();
        boolean boolean88 = node79.isArrayLit();
        com.google.javascript.rhino.Node node89 = node75.useSourceInfoIfMissingFromForTree(node79);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node90 = node79.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        boolean boolean7 = node6.isOptionalArg();
        com.google.javascript.rhino.InputId inputId8 = node6.getInputId();
        boolean boolean9 = node6.isExprResult();
        boolean boolean10 = node6.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.setDeprecated(false);
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        java.lang.String str13 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(5);
        com.google.javascript.rhino.Node node3 = node1.getAncestor(31);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str5 = node4.toString();
        boolean boolean6 = node4.isDebugger();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean11 = node10.isThis();
        boolean boolean12 = node10.isVoid();
        boolean boolean13 = node10.isDebugger();
        int int14 = node10.getLineno();
        boolean boolean15 = node10.isStringKey();
        com.google.javascript.rhino.Node node16 = node4.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 2, 4095);
        boolean boolean21 = node20.isTypeOf();
        boolean boolean22 = node20.isAssign();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(50, node16, node20);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        boolean boolean47 = node41.isBreak();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 1, node28, node32, node41, node51, 1, (-1));
        boolean boolean55 = node32.isInstanceOf();
        boolean boolean56 = node32.isNot();
        int int57 = node32.getSourceOffset();
        boolean boolean58 = node32.isGetElem();
        boolean boolean59 = node32.isDelProp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        node32.setStaticSourceFile(staticSourceFile60);
        int int62 = node32.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node23.addChildToBack(node32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 1.0" + "'", str5, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        node9.addSuppression("NEW [PROTECTED]");
        java.lang.Object obj13 = node9.getProp((int) (byte) 100);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        node17.addSuppression("hi!");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node17.children();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        java.lang.String str30 = node24.toString();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node24.addChildToBack(node34);
        com.google.javascript.rhino.Node node36 = node34.removeChildren();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node40.children();
        java.util.Set<java.lang.String> strSet42 = node40.getDirectives();
        node34.addChildrenToBack(node40);
        com.google.javascript.rhino.Node node44 = node17.copyInformationFromForTree(node40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = node49.srcref(node53);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = node58.srcref(node62);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean68 = node67.isBreak();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node49, node62, node67);
        boolean boolean70 = node67.isIn();
        boolean boolean71 = node67.hasOneChild();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]");
        java.lang.String str74 = node67.checkTreeEquals(node73);
        boolean boolean75 = node73.isLabel();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node44, node73);
        node76.setCharno((int) '#');
        int int79 = node76.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING NUMBER 1.0 [directives: [, hi!]]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING NUMBER 1.0 [directives: [, hi!]]\n" + "'", str74, "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING NUMBER 1.0 [directives: [, hi!]]\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING NUMBER 1.0 [directives: [, hi!]]\n");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.hasChildren();
        boolean boolean7 = node3.isWhile();
        boolean boolean8 = node3.isGetProp();
        node3.setLength(61440);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING  15\n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING  15\n", 43, 35);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isBreak();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(4095, node11, node24, node29);
        boolean boolean32 = node24.isFunction();
        boolean boolean33 = node24.isInstanceOf();
        boolean boolean34 = node24.isHook();
        java.lang.String str35 = node24.getQualifiedName();
        boolean boolean36 = strSet6.equals((java.lang.Object) node24);
        boolean boolean37 = strSet6.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.hasThisType();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = strSet9.isEmpty();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        boolean boolean10 = jSDocInfo0.hasThisType();
        boolean boolean11 = jSDocInfo0.isNoShadow();
        boolean boolean12 = jSDocInfo0.isJavaDispatch();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "(Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n)", 51, 2);
        int int6 = node4.getIntProp((int) (short) 1);
        java.lang.String str7 = node4.getString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n)" + "'", str7, "(Node tree inequality:\nTree1:\nSTRING  97\n\n\nTree2:\nNUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: STRING  97\n\n\nSubtree2: NUMBER 1.0 0 [jsdoc_info: JSDocInfo]\n)");
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.lang.String str46 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo0.getParameterType("Unknown class name");
        boolean boolean49 = jSDocInfo0.hasType();
        boolean boolean50 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        boolean boolean26 = node1.isVoid();
        java.lang.String str27 = node1.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "STRING " + "'", str27, "STRING ");
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.String str46 = node40.toString();
        node40.removeProp((int) (short) 0);
        boolean boolean49 = node40.isGetProp();
        boolean boolean50 = node40.isDebugger();
        com.google.javascript.rhino.Node node51 = node36.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean52 = node40.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node53 = node40.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node33.isFalse();
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = node40.srcref(node44);
        java.lang.String str46 = node40.toString();
        node40.removeProp((int) (short) 0);
        boolean boolean49 = node40.isObjectLit();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean54 = node53.isGetterDef();
        com.google.javascript.rhino.Node node55 = node40.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node64.isDo();
        java.util.Set<java.lang.String> strSet66 = node64.getDirectives();
        com.google.javascript.rhino.Node node67 = node53.clonePropsFrom(node64);
        boolean boolean68 = node67.isCase();
        java.lang.String str69 = node36.checkTreeEquals(node67);
        boolean boolean70 = node67.isNot();
        boolean boolean71 = node67.isWith();
        boolean boolean72 = node67.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER 1.0" + "'", str46, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isCase();
        int int33 = node8.getLineno();
        node8.putIntProp((int) (byte) 100, (int) 'a');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((-1.0d), 0, 31);
        com.google.javascript.rhino.Node node41 = node8.srcref(node40);
        boolean boolean42 = node41.isOr();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        int int14 = node4.getSourceOffset();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 47, 15);
        int int19 = node18.getSideEffectFlags();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(4, node4, node18, 5, 4);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node26.detachChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo28.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo28.getEnumParameterType();
        java.lang.String str32 = jSDocInfo28.getDescription();
        boolean boolean33 = jSDocInfo28.isNoAlias();
        boolean boolean34 = jSDocInfo28.isDefine();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        boolean boolean45 = node44.isDo();
        java.util.Set<java.lang.String> strSet46 = node44.getDirectives();
        boolean boolean47 = node44.isString();
        node44.setWasEmptyNode(false);
        boolean boolean50 = node44.isGetterDef();
        boolean boolean51 = node44.isFunction();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        boolean boolean61 = node59.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = node59.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = node59.getSourceFileName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(2, node44, node59, node68, 32, 0);
        jSDocInfo28.setAssociatedNode(node44);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean78 = node77.isAnd();
        boolean boolean79 = node77.isDebugger();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(40, node77, (int) (short) 100, 29);
        com.google.javascript.rhino.Node node83 = node44.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean84 = node83.isAssignAdd();
        com.google.javascript.rhino.Node node85 = node83.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node4.addChildAfter(node26, node85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSDocInfo62);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 52, 42, (int) (byte) 1);
        boolean boolean12 = node7.isEquivalentToTyped(node11);
        double double13 = node11.getDouble();
        boolean boolean14 = node11.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node11.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator16 = ancestorIterable15.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        node22.setIsSyntheticBlock(false);
        node22.putIntProp(5, 53);
        boolean boolean33 = node22.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        boolean boolean11 = node7.isFalse();
        boolean boolean12 = node7.isCase();
        boolean boolean14 = node7.getBooleanProp((int) (short) 10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node7.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder15);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        boolean boolean26 = node3.isExprResult();
        boolean boolean27 = node3.isDec();
        boolean boolean28 = node3.isCatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node3.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.InputId inputId31 = null;
        node8.setInputId(inputId31);
        boolean boolean33 = node8.isThis();
        com.google.javascript.rhino.Node node34 = node8.getLastSibling();
        boolean boolean35 = node8.isEmpty();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesArguments();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        boolean boolean44 = jSDocInfo0.isExterns();
        boolean boolean45 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo0.getType();
        java.lang.String str47 = jSDocInfo0.toString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JSDocInfo" + "'", str47, "JSDocInfo");
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(54, nodeArray7, 31, (int) 'a');
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(44, nodeArray7, (int) (short) -1, (int) (byte) 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(10, nodeArray7, 5, (int) (short) 1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(31, nodeArray7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(221184, nodeArray7, (int) (short) 100, 41);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(0, nodeArray7, 54, (int) (byte) 10);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(38, nodeArray7);
        // The following exception was thrown during execution in test generation
        try {
            node24.setString("STRING STRING hi! 1");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NAME 0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getParameterType("NUMBER 1.0");
        java.lang.String str45 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("()");
        java.util.Set<java.lang.String> strSet48 = jSDocInfo0.getSuppressions();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo0.getParameterNames();
        boolean boolean50 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node51 = jSDocInfo0.getAssociatedNode();
        java.lang.String str52 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo0.getType();
        boolean boolean54 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean17 = node4.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags19.setAllFlags();
        node4.setSideEffectFlags(sideEffectFlags19);
        int int22 = node4.getLineno();
        node4.removeProp(35);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean28 = node27.isAssign();
        boolean boolean29 = node27.isDo();
        node4.addChildrenToBack(node27);
        com.google.javascript.rhino.Node node31 = node27.cloneNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isBreak();
        node36.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isGetProp();
        boolean boolean53 = node43.isDebugger();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '4', node36, node43);
        java.lang.String str55 = node54.toStringTree();
        boolean boolean56 = node54.isContinue();
        com.google.javascript.rhino.Node node57 = node27.srcrefTree(node54);
        node54.addSuppression("(Not declared as a constructor)");
        boolean boolean60 = node54.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n" + "'", str55, "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray0 };
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList2 = com.google.common.collect.ImmutableList.copyOf(genericDeclarationArray1);
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList3 = com.google.common.collect.ImmutableList.copyOf(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList2);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList3);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("NUMBER 1.0 [source_file: OR]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(NUMBER 1.0 [source_file: OR])" + "'", str1, "(NUMBER 1.0 [source_file: OR])");
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node19 = node3.cloneNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId22 = null;
        node21.setInputId(inputId22);
        boolean boolean24 = node21.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node21.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId26 = null;
        node21.setInputId(inputId26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        boolean boolean37 = node35.isVar();
        double double38 = node35.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo39.getEnumParameterType();
        java.lang.String str43 = jSDocInfo39.getDescription();
        node35.setJSDocInfo(jSDocInfo39);
        node21.addChildrenToBack(node35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = node21.getStaticSourceFile();
        node21.setOptionalArg(false);
        boolean boolean49 = node21.isName();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        java.lang.String str59 = node53.toString();
        node53.removeProp((int) (short) 0);
        boolean boolean62 = node53.isObjectLit();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean67 = node66.isGetterDef();
        com.google.javascript.rhino.Node node68 = node53.useSourceInfoFromForTree(node66);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node77 = node72.srcref(node76);
        boolean boolean78 = node77.isDo();
        java.util.Set<java.lang.String> strSet79 = node77.getDirectives();
        com.google.javascript.rhino.Node node80 = node66.clonePropsFrom(node77);
        boolean boolean81 = node66.isStringKey();
        com.google.javascript.rhino.Node node82 = node21.srcrefTree(node66);
        com.google.javascript.rhino.Node node83 = node21.cloneNode();
        boolean boolean84 = node19.hasChild(node83);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [jsdoc_info: JSDocInfo]", 47, 35);
        com.google.javascript.rhino.Node node89 = node88.getNext();
        node83.addChildrenToFront(node88);
        node88.setSourceEncodedPosition((int) '4');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(staticSourceFile46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 1.0" + "'", str59, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        boolean boolean6 = jSDocInfo0.isExport();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("NUMBER 1.0");
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        int int11 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean2 = node1.isFromExterns();
        com.google.javascript.rhino.Node node3 = node1.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        node24.removeProp(43);
        boolean boolean28 = node24.hasMoreThanOneChild();
        boolean boolean29 = node24.wasEmptyNode();
        com.google.javascript.rhino.Node node31 = node24.getAncestor(42);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = node31.getExistingIntProp(37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        int int12 = node8.getSourceOffset();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        boolean boolean36 = node30.isBreak();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 1, node17, node21, node30, node40, 1, (-1));
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean49 = node48.isFalse();
        java.lang.String str50 = node48.getSourceFileName();
        boolean boolean51 = node48.isLabel();
        node17.putProp(1, (java.lang.Object) node48);
        node17.detachChildren();
        node17.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = node59.srcref(node63);
        boolean boolean65 = node64.isDo();
        java.util.Set<java.lang.String> strSet66 = node64.getDirectives();
        boolean boolean67 = node64.isString();
        node64.setWasEmptyNode(false);
        boolean boolean70 = node64.isGetterDef();
        com.google.javascript.rhino.Node node71 = node17.useSourceInfoFrom(node64);
        boolean boolean72 = node64.isStringKey();
        node8.addChildToFront(node64);
        java.lang.Appendable appendable74 = null;
        // The following exception was thrown during execution in test generation
        try {
            node8.appendStringTree(appendable74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("(NUMBER 1.0)");
        boolean boolean13 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("([PROTECTED])");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "OR 0");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(0);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = node27.getStaticSourceFile();
        boolean boolean30 = node27.isAssignAdd();
        boolean boolean31 = node27.isDo();
        node24.addChildToFront(node27);
        boolean boolean33 = node27.isSyntheticBlock();
        boolean boolean34 = node27.isStringKey();
        com.google.javascript.rhino.Node node35 = node27.getNext();
        java.lang.Appendable appendable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            node27.appendStringTree(appendable36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(staticSourceFile29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.InputId inputId26 = node16.getInputId();
        int int28 = node16.getIntProp(41);
        node16.setCharno((int) (short) 1);
        boolean boolean31 = node16.isNull();
        boolean boolean32 = node16.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        boolean boolean41 = node36.isCase();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        java.lang.String str56 = node50.toString();
        node50.removeProp((int) (short) 0);
        boolean boolean59 = node50.isObjectLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean64 = node63.isGetterDef();
        com.google.javascript.rhino.Node node65 = node50.useSourceInfoFromForTree(node63);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 1, node65);
        com.google.javascript.rhino.Node node67 = node45.useSourceInfoFromForTree(node66);
        boolean boolean68 = node66.isGetterDef();
        int int69 = node66.getCharno();
        int int71 = node66.getIntProp(0);
        node66.putBooleanProp(48, true);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(409652, node36, node66);
        node66.putIntProp(0, 61537);
        node66.setSourceEncodedPositionForTree((-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER 1.0" + "'", str56, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = com.google.common.collect.ImmutableList.of(visibilityArray1);
        java.lang.String str3 = visibilityList2.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList4 = visibilityList2.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo5.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo5.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo5.getParameterType("Not declared as a constructor");
        boolean boolean10 = jSDocInfo5.isExport();
        boolean boolean11 = jSDocInfo5.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo5.getImplementedInterfaces();
        boolean boolean13 = visibilityList2.equals((java.lang.Object) jSDocInfo5);
        boolean boolean15 = jSDocInfo5.hasParameterType("NEW [PROTECTED] 0");
        jSDocInfo5.setLicense("BITXOR 45\n");
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertNotNull(visibilityList2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[PROTECTED]" + "'", str3, "[PROTECTED]");
        org.junit.Assert.assertNotNull(visibilityList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition0.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int11 = typePosition0.getPositionOnEndLine();
        boolean boolean12 = typePosition0.hasBrackets();
        int int13 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node18, node31, node36);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet42);
        int int45 = node18.getCharno();
        java.lang.String str46 = node18.getQualifiedName();
        boolean boolean47 = node18.isBreak();
        boolean boolean48 = node18.isQuotedString();
        typePosition0.setItem(node18);
        boolean boolean50 = node18.isQuotedString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet8.spliterator();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSpliterator9);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node3.setCharno((int) 'a');
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo34.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo34.getEnumParameterType();
        java.lang.String str38 = jSDocInfo34.getDeprecationReason();
        java.lang.String str39 = jSDocInfo34.toString();
        boolean boolean40 = jSDocInfo34.isExterns();
        boolean boolean41 = strSet29.contains((java.lang.Object) jSDocInfo34);
        java.lang.Object[] objArray42 = strSet29.toArray();
        java.lang.Object[] objArray43 = strSet29.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node53 = node48.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean67 = node66.isBreak();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(4095, node48, node61, node66);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = strSet29.equals((java.lang.Object) node68);
        node68.setVarArgs(true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JSDocInfo" + "'", str39, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[, hi!]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[, hi!]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        strSet28.clear();
        boolean boolean33 = strSet28.add("Named type with empty name component");
        boolean boolean34 = strSet28.isEmpty();
        java.lang.Object[] objArray35 = strSet28.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo36.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection38 = jSDocInfo36.getAuthors();
        boolean boolean39 = jSDocInfo36.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getThisType();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean43 = node42.isOr();
        com.google.javascript.rhino.Node node44 = node42.removeChildren();
        jSDocInfo36.setAssociatedNode(node42);
        boolean boolean46 = strSet28.remove((java.lang.Object) jSDocInfo36);
        jSDocInfo36.addSuppression("NUMBER 1.0 [directives: [, hi!]]");
        java.lang.String str49 = jSDocInfo36.getLendsName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[Named type with empty name component]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[Named type with empty name component]");
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNull(strCollection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        int int56 = stringPosition52.getStartLine();
        int int57 = stringPosition52.getEndLine();
        int int58 = stringPosition52.getPositionOnEndLine();
        int int59 = stringPosition52.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        boolean boolean4 = node3.isInstanceOf();
        boolean boolean5 = node3.isEmpty();
        boolean boolean6 = node3.isSetterDef();
        node3.detachChildren();
        boolean boolean8 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, 48, 51);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = node7.srcref(node11);
        java.lang.String str13 = node7.toString();
        int int14 = node3.getIndexOfChild(node7);
        boolean boolean15 = node7.isAssignAdd();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray20, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) 'a', nodeArray20);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(50, nodeArray20, 53, 1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(29, nodeArray20, 0, 37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(49, node1, node7, node30, 4095, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 1.0" + "'", str13, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray20);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        double double10 = node7.getDouble();
        int int11 = node7.getLength();
        boolean boolean12 = node7.isArrayLit();
        node7.setDouble((double) '#');
        node7.setSourceEncodedPosition((int) (short) 0);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        boolean boolean40 = node34.isBreak();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 1, node21, node25, node34, node44, 1, (-1));
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        java.lang.String str57 = node51.toString();
        node51.removeProp((int) (short) 0);
        boolean boolean60 = node51.isGetProp();
        boolean boolean61 = node51.isReturn();
        com.google.javascript.rhino.Node node62 = node21.srcref(node51);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean67 = node66.isThis();
        node66.setSourceEncodedPositionForTree(0);
        boolean boolean70 = node66.hasOneChild();
        com.google.javascript.rhino.Node node71 = node21.useSourceInfoFrom(node66);
        boolean boolean72 = node71.isEmpty();
        com.google.javascript.rhino.Node node73 = node71.detachFromParent();
        boolean boolean74 = node73.isThrow();
        boolean boolean75 = node73.isString();
        node73.setOptionalArg(true);
        com.google.javascript.rhino.Node node78 = node7.useSourceInfoIfMissingFrom(node73);
        java.lang.String str82 = node78.toString(true, false, false);
        com.google.javascript.rhino.Node node83 = node78.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 1.0" + "'", str57, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "NUMBER 35.0 0" + "'", str82, "NUMBER 35.0 0");
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        java.util.Set<java.lang.String> strSet27 = node22.getDirectives();
        boolean boolean28 = node22.isFunction();
        boolean boolean29 = node22.isThrow();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = node33.srcref(node37);
        boolean boolean39 = node33.isBreak();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node33.getStaticSourceFile();
        com.google.javascript.rhino.jstype.JSType jSType41 = node33.getJSType();
        boolean boolean42 = node33.isVarArgs();
        boolean boolean43 = node22.isEquivalentToTyped(node33);
        boolean boolean44 = node33.isIn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(staticSourceFile40);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(51, 53, 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean27 = node26.isBreak();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4095, node8, node21, node26);
        java.util.Set<java.lang.String> strSet29 = node28.getDirectives();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        boolean boolean31 = node28.isArrayLit();
        boolean boolean32 = node28.isGetElem();
        boolean boolean33 = node28.isTry();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFromForTree(node28);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getPositionOnStartLine();
        com.google.javascript.rhino.Node node37 = typePosition35.getItem();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        java.lang.String str47 = node41.toString();
        node41.removeProp((int) (short) 0);
        boolean boolean50 = node41.isObjectLit();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean55 = node54.isGetterDef();
        com.google.javascript.rhino.Node node56 = node41.useSourceInfoFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node65 = node60.srcref(node64);
        boolean boolean66 = node65.isDo();
        java.util.Set<java.lang.String> strSet67 = node65.getDirectives();
        com.google.javascript.rhino.Node node68 = node54.clonePropsFrom(node65);
        com.google.javascript.rhino.Node node69 = node68.getNext();
        typePosition35.setItem(node68);
        com.google.javascript.rhino.Node node71 = typePosition35.getItem();
        com.google.javascript.rhino.Node node72 = node71.cloneNode();
        int int73 = node34.getIndexOfChild(node71);
        boolean boolean74 = node34.isIn();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER 1.0" + "'", str47, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isBreak();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        boolean boolean14 = node13.isDo();
        java.util.Set<java.lang.String> strSet15 = node13.getDirectives();
        boolean boolean16 = node13.isAssignAdd();
        int int17 = node3.getIndexOfChild(node13);
        boolean boolean18 = node13.isSwitch();
        boolean boolean19 = node13.isNE();
        com.google.javascript.rhino.Node node20 = node13.getLastSibling();
        double double21 = node13.getDouble();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = node34.srcref(node38);
        java.lang.String str40 = node34.toString();
        node34.removeProp((int) (short) 0);
        boolean boolean43 = node34.isGetProp();
        boolean boolean44 = node34.isReturn();
        com.google.javascript.rhino.Node node45 = node4.srcref(node34);
        node34.putBooleanProp(44, false);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = node54.srcref(node58);
        java.lang.String str60 = node54.toString();
        int int61 = node50.getIndexOfChild(node54);
        boolean boolean62 = node50.wasEmptyNode();
        int int63 = node50.getCharno();
        com.google.javascript.rhino.Node node64 = node50.cloneTree();
        boolean boolean65 = node50.isInstanceOf();
        com.google.javascript.rhino.Node node66 = node34.useSourceInfoFrom(node50);
        boolean boolean67 = node66.isOr();
        java.lang.String str68 = node66.getSourceFileName();
        boolean boolean69 = node66.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = null;
        node66.setStaticSourceFile(staticSourceFile70);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 1.0" + "'", str40, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 1.0" + "'", str60, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesArguments();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setMutatesThis();
        int int8 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4095, "true");
        node2.setSourceEncodedPositionForTree(19);
        boolean boolean5 = node2.isRegExp();
        com.google.javascript.rhino.Node node6 = node2.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean9 = booleanLiteralSet7.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList10 = com.google.common.collect.ImmutableList.of(booleanLiteralSet1, booleanLiteralSet3, booleanLiteralSet5, booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet12.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean18 = booleanLiteralSet16.contains(false);
        boolean boolean20 = booleanLiteralSet16.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean36 = booleanLiteralSet34.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList37 = com.google.common.collect.ImmutableList.of(booleanLiteralSet28, booleanLiteralSet30, booleanLiteralSet32, booleanLiteralSet34);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean47 = booleanLiteralSet45.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList48 = com.google.common.collect.ImmutableList.of(booleanLiteralSet39, booleanLiteralSet41, booleanLiteralSet43, booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean58 = booleanLiteralSet56.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList59 = com.google.common.collect.ImmutableList.of(booleanLiteralSet50, booleanLiteralSet52, booleanLiteralSet54, booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.intersection(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList69 = com.google.common.collect.ImmutableList.of(booleanLiteralSet63, booleanLiteralSet66, booleanLiteralSet68);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean79 = booleanLiteralSet77.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList80 = com.google.common.collect.ImmutableList.of(booleanLiteralSet71, booleanLiteralSet73, booleanLiteralSet75, booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        boolean boolean90 = booleanLiteralSet88.contains(false);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList91 = com.google.common.collect.ImmutableList.of(booleanLiteralSet82, booleanLiteralSet84, booleanLiteralSet86, booleanLiteralSet88);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>> booleanLiteralSetEnumList92 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet16, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet22, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet25, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet34, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet43, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet52, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet61, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet66, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet71, (java.lang.Enum<com.google.javascript.rhino.jstype.BooleanLiteralSet>) booleanLiteralSet86);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = booleanLiteralSet13.union(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = booleanLiteralSet1.union(booleanLiteralSet25);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList10);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList37);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList48);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList59);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList69);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList80);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(booleanLiteralSetList91);
        org.junit.Assert.assertNotNull(booleanLiteralSetEnumList92);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean24 = node23.isGetterDef();
        com.google.javascript.rhino.Node node25 = node16.useSourceInfoFrom(node23);
        com.google.javascript.rhino.Node node26 = node16.getNext();
        boolean boolean27 = node16.isNE();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        java.lang.String str38 = node32.toString();
        node32.removeProp((int) (short) 0);
        boolean boolean41 = node32.isGetProp();
        com.google.javascript.rhino.Node node42 = node32.getNext();
        node16.putProp((int) (short) 1, (java.lang.Object) node32);
        boolean boolean44 = node16.isWith();
        boolean boolean45 = node16.isAssign();
        boolean boolean46 = node16.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 1.0" + "'", str38, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 47, 15);
        com.google.javascript.rhino.Node node5 = node4.getNext();
        boolean boolean6 = node4.isFor();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = node10.srcref(node14);
        boolean boolean16 = node14.isVar();
        double double17 = node14.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo18.getEnumParameterType();
        java.lang.String str22 = jSDocInfo18.getDescription();
        node14.setJSDocInfo(jSDocInfo18);
        com.google.javascript.rhino.Node node24 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(5, node4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo26.getEnumParameterType();
        java.lang.String str30 = jSDocInfo26.getDescription();
        boolean boolean31 = jSDocInfo26.isNoAlias();
        boolean boolean32 = jSDocInfo26.isDefine();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        boolean boolean43 = node42.isDo();
        java.util.Set<java.lang.String> strSet44 = node42.getDirectives();
        boolean boolean45 = node42.isString();
        node42.setWasEmptyNode(false);
        boolean boolean48 = node42.isGetterDef();
        boolean boolean49 = node42.isFunction();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        boolean boolean59 = node57.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = node57.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node57.getStaticSourceFile();
        java.lang.String str62 = node57.getSourceFileName();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(2, node42, node57, node66, 32, 0);
        jSDocInfo26.setAssociatedNode(node42);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean76 = node75.isAnd();
        boolean boolean77 = node75.isDebugger();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(40, node75, (int) (short) 100, 29);
        com.google.javascript.rhino.Node node81 = node42.useSourceInfoIfMissingFromForTree(node75);
        com.google.javascript.rhino.Node node82 = node4.useSourceInfoIfMissingFrom(node75);
        boolean boolean83 = node82.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        boolean boolean4 = node3.hasOneChild();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean9 = node8.isAnd();
        node8.setSourceFileForTesting("[PROTECTED]");
        node8.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node19 = node8.useSourceInfoFromForTree(node18);
        com.google.javascript.rhino.Node node20 = node3.srcrefTree(node8);
        boolean boolean21 = node3.isDebugger();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(10);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(3, node24);
        com.google.javascript.rhino.Node node26 = node3.copyInformationFrom(node25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node25.getJsDocBuilderForNode();
        boolean boolean28 = node25.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        boolean boolean7 = node3.isNumber();
        int int8 = node3.getCharno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        boolean boolean14 = node8.isObjectLit();
        boolean boolean15 = node8.isDebugger();
        node8.removeProp((-1));
        boolean boolean18 = node8.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 0);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node31.isWith();
        boolean boolean33 = node31.isNot();
        boolean boolean34 = node31.isLabelName();
        boolean boolean35 = node31.isReturn();
        boolean boolean36 = node31.isTrue();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean42 = node41.isDo();
        node31.addChildrenToBack(node41);
        boolean boolean44 = node41.isSetterDef();
        boolean boolean45 = node41.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(41, node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        boolean boolean61 = node60.isFromExterns();
        com.google.javascript.rhino.InputId inputId62 = node60.getInputId();
        node60.setType(45);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(inputId62);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo32.getVisibility();
        node8.setJSDocInfo(jSDocInfo32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getThisType();
        boolean boolean39 = jSDocInfo32.hasBaseType();
        jSDocInfo32.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection42 = jSDocInfo32.getTypeNodes();
        java.lang.String str44 = jSDocInfo32.getDescriptionForParameter("([PROTECTED])");
        boolean boolean45 = jSDocInfo32.isImplicitCast();
        java.lang.String str46 = jSDocInfo32.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo32.getType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(jSTypeExpression47);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        node5.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isOr();
        com.google.javascript.rhino.jstype.JSType jSType3 = node1.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSType3);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isExprResult();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(40, "NUMBER 1.0\n    NUMBER 1.0\n", 31, 0);
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        java.lang.String str35 = node29.toString();
        node29.removeProp((int) (short) 0);
        boolean boolean38 = node29.isObjectLit();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean43 = node42.isGetterDef();
        com.google.javascript.rhino.Node node44 = node29.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node42.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean50 = node49.isGetterDef();
        com.google.javascript.rhino.Node node51 = node42.useSourceInfoFrom(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        java.lang.String str61 = node55.toString();
        node55.removeProp((int) (short) 0);
        boolean boolean64 = node55.isObjectLit();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean69 = node68.isGetterDef();
        com.google.javascript.rhino.Node node70 = node55.useSourceInfoFromForTree(node68);
        boolean boolean71 = node70.isObjectLit();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(54, node21, node25, node49, node70);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder73 = node70.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node84 = node79.srcref(node83);
        java.lang.String str85 = node79.toString();
        int int86 = node75.getIndexOfChild(node79);
        node75.setSourceEncodedPositionForTree(97);
        com.google.javascript.rhino.Node node89 = node70.useSourceInfoIfMissingFromForTree(node75);
        node89.setSourceEncodedPositionForTree(48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node92 = node11.removeChildAfter(node89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 1.0" + "'", str35, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NUMBER 1.0" + "'", str61, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "NUMBER 1.0" + "'", str85, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        typePosition0.setPositionInformation(2, (int) '4', 43, 10);
        int int7 = typePosition0.getEndLine();
        int int8 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node9 = typePosition0.getItem();
        int int10 = typePosition0.getStartLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(65589, (int) (byte) 100, 4095, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 65589?end-line: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList4 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean5 = jSDocInfo0.isOverride();
        boolean boolean6 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node18.isObjectLit();
        boolean boolean20 = node18.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node24.srcrefTree(node34);
        boolean boolean43 = node24.getBooleanProp(30);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node24.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node68 = node63.srcref(node67);
        boolean boolean69 = node68.isDo();
        java.util.Set<java.lang.String> strSet70 = node68.getDirectives();
        boolean boolean71 = node68.isDebugger();
        boolean boolean72 = node68.isIf();
        com.google.javascript.rhino.Node node73 = node24.srcrefTree(node68);
        boolean boolean74 = node73.isArrayLit();
        boolean boolean75 = node73.isDec();
        boolean boolean76 = node73.isFor();
        boolean boolean77 = node73.isInc();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("GETELEM Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int6 = stringPosition5.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition7.setItem("hi!");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str11 = stringPosition10.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str13 = stringPosition12.getItem();
        int int14 = stringPosition12.getPositionOnStartLine();
        stringPosition12.setItem("GETELEM Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str18 = stringPosition17.getItem();
        int int19 = stringPosition17.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int30 = stringPosition29.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition31.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int37 = stringPosition31.getEndLine();
        int int38 = stringPosition31.getPositionOnEndLine();
        int int39 = stringPosition31.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition41.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int47 = stringPosition41.getEndLine();
        int int48 = stringPosition41.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition49.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int55 = stringPosition49.getEndLine();
        int int56 = stringPosition49.getPositionOnEndLine();
        int int57 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str59 = stringPosition58.getItem();
        int int60 = stringPosition58.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition61 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition61.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int67 = stringPosition61.getEndLine();
        int int68 = stringPosition61.getPositionOnEndLine();
        int int69 = stringPosition61.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int71 = stringPosition70.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition72.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition78 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str79 = stringPosition78.getItem();
        int int80 = stringPosition78.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition81 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str82 = stringPosition81.getItem();
        int int83 = stringPosition81.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList84 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition31, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition40, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition58, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition61, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition70, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition72, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition78, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition81);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition85 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition85.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int91 = stringPosition85.getEndLine();
        int int92 = stringPosition85.getPositionOnEndLine();
        int int93 = stringPosition85.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition94 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str95 = stringPosition94.getItem();
        int int96 = stringPosition94.getEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList97 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition5, stringPosition7, stringPosition10, stringPosition12, stringPosition17, stringPosition20, stringPosition58, stringPosition85, stringPosition94);
        int int98 = stringPosition10.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 48 + "'", int57 == 48);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 48 + "'", int69 == 48);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList84);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(stringPositionList97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        node3.setIsSyntheticBlock(false);
        java.lang.String str6 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = node24.srcref(node28);
        java.lang.String str30 = node24.toString();
        node24.removeProp((int) (short) 0);
        boolean boolean33 = node24.isObjectLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node24.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node37.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean45 = node44.isGetterDef();
        com.google.javascript.rhino.Node node46 = node37.useSourceInfoFrom(node44);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        java.lang.String str56 = node50.toString();
        node50.removeProp((int) (short) 0);
        boolean boolean59 = node50.isObjectLit();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean64 = node63.isGetterDef();
        com.google.javascript.rhino.Node node65 = node50.useSourceInfoFromForTree(node63);
        boolean boolean66 = node65.isObjectLit();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(54, node16, node20, node44, node65);
        int int69 = node20.getIntProp((int) (byte) 10);
        boolean boolean70 = node20.isTrue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node74.children();
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        boolean boolean77 = node74.isFunction();
        boolean boolean78 = node74.isDec();
        com.google.javascript.rhino.Node node79 = node20.srcref(node74);
        boolean boolean80 = node20.isOptionalArg();
        com.google.javascript.rhino.Node node81 = node3.clonePropsFrom(node20);
        java.lang.Object obj83 = node20.getProp(8);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 1.0" + "'", str30, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER 1.0" + "'", str56, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isThis();
        node3.setSourceEncodedPositionForTree(0);
        boolean boolean7 = node3.hasOneChild();
        boolean boolean8 = node3.hasChildren();
        boolean boolean9 = node3.isScript();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition2.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int8 = stringPosition2.getEndLine();
        int int9 = stringPosition2.getPositionOnEndLine();
        int int10 = stringPosition2.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition12.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int18 = stringPosition12.getEndLine();
        int int19 = stringPosition12.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition20.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int26 = stringPosition20.getEndLine();
        int int27 = stringPosition20.getPositionOnEndLine();
        int int28 = stringPosition20.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        int int31 = stringPosition29.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition32.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        int int38 = stringPosition32.getEndLine();
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int42 = stringPosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition43.setPositionInformation((int) (byte) -1, 48, (int) ' ', 8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str50 = stringPosition49.getItem();
        int int51 = stringPosition49.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        int int54 = stringPosition52.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<java.lang.String>> strSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition0, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition2, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition11, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition12, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition20, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition29, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition32, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition41, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition43, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition49, (com.google.javascript.rhino.SourcePosition<java.lang.String>) stringPosition52);
        stringPosition2.setPositionInformation(38, 49, 43, (int) (short) 10);
        java.lang.String str61 = stringPosition2.getItem();
        stringPosition2.setItem("STRING hi! 97");
        int int64 = stringPosition2.getPositionOnStartLine();
        int int65 = stringPosition2.getStartLine();
        int int66 = stringPosition2.getStartLine();
        java.lang.String str67 = stringPosition2.getItem();
        int int68 = stringPosition2.getStartLine();
        int int69 = stringPosition2.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSourcePositionList55);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 49 + "'", int64 == 49);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 38 + "'", int65 == 38);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 38 + "'", int66 == 38);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "STRING hi! 97" + "'", str67, "STRING hi! 97");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 38 + "'", int68 == 38);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 43 + "'", int69 == 43);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("JSDocInfo");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node11 = node6.srcref(node10);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = node15.srcref(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean25 = node24.isBreak();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(4095, node6, node19, node24);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet30);
        int int33 = node6.getCharno();
        java.lang.String str34 = node6.getQualifiedName();
        boolean boolean35 = node6.isFromExterns();
        boolean boolean36 = node6.isIf();
        boolean boolean37 = node6.isIn();
        java.lang.Object obj39 = node6.getProp(100);
        com.google.javascript.rhino.Node node40 = node1.useSourceInfoFromForTree(node6);
        node1.setOptionalArg(false);
        java.lang.String str43 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING JSDocInfo\n" + "'", str43, "STRING JSDocInfo\n");
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeCollection12);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("NUMBER 1.0 [directives: [, hi!]]");
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        java.lang.String str9 = jSDocInfo0.getDescription();
        boolean boolean10 = jSDocInfo0.isExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(0, (int) (short) -1, (int) (short) 0, 29);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node19.getJSDocInfo();
        boolean boolean21 = node19.isQualifiedName();
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoFromForTree(node19);
        typePosition0.setItem(node10);
        typePosition0.setPositionInformation(16, (int) 'a', 42, 4095);
        int int29 = typePosition0.getEndLine();
        boolean boolean30 = typePosition0.hasBrackets();
        boolean boolean31 = typePosition0.hasBrackets();
        boolean boolean32 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(0, 97, (int) (short) 10, 51);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet66);
        java.lang.String str72 = node42.toString(true, true, false);
        boolean boolean73 = node42.isLabelName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node42.getStaticSourceFile();
        boolean boolean75 = node42.isReturn();
        boolean boolean76 = node42.isWith();
        boolean boolean77 = node42.isName();
        typePosition0.setItem(node42);
        boolean boolean79 = node42.isDelProp();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 42 + "'", int29 == 42);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str72, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str10 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        node7.setSourceEncodedPositionForTree(31);
        com.google.javascript.rhino.Node node11 = null;
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        boolean boolean22 = node20.isVar();
        double double23 = node20.getDouble();
        boolean boolean24 = node20.isNull();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.Object obj35 = node28.getProp(10);
        boolean boolean36 = node28.isQuotedString();
        boolean boolean37 = node20.hasChild(node28);
        com.google.javascript.rhino.Node node38 = node7.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node39 = node20.getLastChild();
        node20.setSourceFileForTesting("NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(1.0d);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 47, 15);
        com.google.javascript.rhino.Node node4 = node3.getNext();
        java.lang.String str5 = node3.getQualifiedName();
        boolean boolean6 = node3.isSyntheticBlock();
        node3.setType(44);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int11 = typePosition10.getPositionOnStartLine();
        typePosition10.setPositionInformation(2, (int) '4', 43, 10);
        boolean boolean17 = typePosition10.hasBrackets();
        node3.putProp(31, (java.lang.Object) typePosition10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        boolean boolean23 = node22.hasOneChild();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean28 = node27.isAnd();
        node27.setSourceFileForTesting("[PROTECTED]");
        node27.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node38 = node27.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.Node node39 = node22.srcrefTree(node27);
        boolean boolean40 = node22.isExprResult();
        boolean boolean41 = node22.isVar();
        typePosition10.setItem(node22);
        // The following exception was thrown during execution in test generation
        try {
            typePosition10.setPositionInformation(16484, 35, 42, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 16484?end-line: 42");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node27.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 1, 38, (int) '4');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node54.getStaticSourceFile();
        boolean boolean63 = node54.isTry();
        node54.setType(3);
        com.google.javascript.rhino.Node node66 = node36.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node67 = node27.useSourceInfoFrom(node66);
        com.google.javascript.rhino.Node node68 = node27.cloneNode();
        boolean boolean69 = node68.isEmpty();
        node68.setLineno(53);
        node68.removeProp(3);
        boolean boolean74 = node68.isTrue();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.String str34 = node28.toString();
        node28.removeProp((int) (short) 0);
        boolean boolean37 = node28.isObjectLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean42 = node41.isGetterDef();
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node44 = node24.copyInformationFromForTree(node28);
        boolean boolean45 = node24.isNull();
        com.google.javascript.rhino.Node node46 = node24.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = node46.isIn();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0" + "'", str34, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        boolean boolean7 = node6.isOptionalArg();
        boolean boolean8 = node6.isDec();
        int int9 = node6.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nNUMBER 49.0 4095\n\n\nTree2:\nNUMBER 1.0 97\n\n\nSubtree1: NUMBER 49.0 4095\n\n\nSubtree2: NUMBER 1.0 97\n)");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node6 = null;
        jSDocInfo0.setAssociatedNode(node6);
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        boolean boolean11 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        boolean boolean11 = node9.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node9.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node9.getStaticSourceFile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean18 = node17.isAnd();
        boolean boolean19 = node17.isBreak();
        boolean boolean20 = node17.isName();
        boolean boolean21 = node17.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(53, node9, node17, node23, 0, 29);
        boolean boolean27 = node23.isBreak();
        com.google.javascript.rhino.Node node28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(37, node23, node28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(46, "Not declared as a type name", (int) (short) 1, 31);
        boolean boolean5 = node4.isThis();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean10 = node9.isAnd();
        boolean boolean12 = node9.getBooleanProp(4);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node9.siblings();
        boolean boolean14 = node9.isIn();
        node9.setLength((int) (short) 10);
        int int17 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = node4.copyInformationFrom(node9);
        boolean boolean19 = node18.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.hasMoreThanOneChild();
        boolean boolean6 = node3.isContinue();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node7.isLabel();
        boolean boolean9 = node7.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        boolean boolean32 = strSet28.isEmpty();
        boolean boolean34 = strSet28.add("hi!");
        java.lang.Object[] objArray35 = strSet28.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getParameterType("hi!");
        boolean boolean39 = jSDocInfo36.hasModifies();
        boolean boolean41 = jSDocInfo36.hasDescriptionForParameter("");
        boolean boolean42 = jSDocInfo36.isDeprecated();
        int int43 = jSDocInfo36.getParameterCount();
        java.lang.String str44 = jSDocInfo36.getOriginalCommentString();
        jSDocInfo36.setDeprecated(true);
        boolean boolean47 = strSet28.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[, hi!]");
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("true");
        java.lang.String[] strArray34 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Iterator<java.lang.String> strItor37 = strSet35.iterator();
        java.lang.Object[] objArray38 = strSet35.toArray();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = node52.srcref(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean62 = node61.isBreak();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(4095, node43, node56, node61);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet67);
        boolean boolean71 = strSet67.add("true");
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList72 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet28, (java.util.HashSet<java.lang.String>) strSet35, (java.util.HashSet<java.lang.String>) strSet67);
        java.lang.Object[] objArray73 = strSet67.toArray();
        java.util.Iterator<java.lang.String> strItor74 = strSet67.iterator();
        strSet67.clear();
        boolean boolean77 = strSet67.add("(STRING hi! [directives: []])");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSetList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[, hi!, true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[, hi!, true]");
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        node3.addSuppression("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        java.lang.String str19 = node13.toString();
        int int20 = node9.getIndexOfChild(node13);
        boolean boolean21 = node9.wasEmptyNode();
        int int22 = node9.getCharno();
        com.google.javascript.rhino.Node node23 = node9.cloneTree();
        boolean boolean24 = node9.isInstanceOf();
        com.google.javascript.rhino.Node node25 = node3.useSourceInfoIfMissingFrom(node9);
        boolean boolean26 = node3.isString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean33 = node32.isDo();
        boolean boolean34 = node32.isBlock();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean39 = node38.isBreak();
        node38.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node42 = node38.cloneTree();
        com.google.javascript.rhino.Node node43 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node32.getBooleanProp((int) (byte) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags47 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags47.setAllFlags();
        node32.setSideEffectFlags(sideEffectFlags47);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node58 = node53.srcref(node57);
        java.lang.Object obj60 = node53.getProp(10);
        boolean boolean61 = node53.isQuotedString();
        boolean boolean62 = node53.isAnd();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        java.lang.String str72 = node66.toString();
        node66.removeProp((int) (short) 0);
        boolean boolean75 = node66.isObjectLit();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean80 = node79.isGetterDef();
        com.google.javascript.rhino.Node node81 = node66.useSourceInfoFromForTree(node79);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(35, node32, node53, node79, (int) (short) 1, (int) (short) 1);
        boolean boolean85 = node3.hasChild(node53);
        boolean boolean86 = node3.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node88 = node3.getChildAtIndex(31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 1.0" + "'", str19, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER 1.0" + "'", str72, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        boolean boolean47 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str48 = jSDocInfo0.getSourceName();
        boolean boolean49 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean13 = node12.isFalse();
        java.lang.String str14 = node12.getSourceFileName();
        boolean boolean15 = node12.isLabel();
        boolean boolean16 = node12.isSetterDef();
        boolean boolean17 = node12.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        boolean boolean41 = node35.isBreak();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 1, node22, node26, node35, node45, 1, (-1));
        boolean boolean49 = node48.isWith();
        boolean boolean50 = node48.isNot();
        boolean boolean51 = node12.isEquivalentToTyped(node48);
        boolean boolean52 = node48.isSyntheticBlock();
        boolean boolean53 = node7.isEquivalentTo(node48);
        boolean boolean54 = node48.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(STRING hi! 97)", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        java.lang.Object obj6 = node4.getProp(32);
        boolean boolean7 = node4.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.InputId inputId25 = null;
        node22.setInputId(inputId25);
        boolean boolean27 = node22.isName();
        boolean boolean28 = node22.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo29.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo29.getFileOverview();
        boolean boolean32 = jSDocInfo29.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = jSDocInfo29.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo29.getBaseType();
        boolean boolean35 = jSDocInfo29.hasBaseType();
        jSDocInfo29.setLicense("(hi!)");
        int int38 = jSDocInfo29.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = jSDocInfo29.getTemplateTypeNames();
        boolean boolean40 = jSDocInfo29.hasReturnType();
        node22.setJSDocInfo(jSDocInfo29);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(visibility33);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(42, "JSDocInfo", 16, 54);
        boolean boolean5 = node4.isVar();
        boolean boolean6 = node4.isIf();
        node4.putIntProp(42, 45);
        boolean boolean10 = node4.hasOneChild();
        int int11 = node4.getType();
        boolean boolean12 = node4.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 42 + "'", int11 == 42);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n");
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo33.getParameterType("hi!");
        jSDocInfo33.addSuppression("hi!");
        java.lang.String str38 = jSDocInfo33.toString();
        node8.setJSDocInfo(jSDocInfo33);
        boolean boolean40 = jSDocInfo33.isJavaDispatch();
        boolean boolean41 = jSDocInfo33.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo33.getThisType();
        boolean boolean43 = jSDocInfo33.isIdGenerator();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection44 = jSDocInfo33.getMarkers();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JSDocInfo" + "'", str38, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(markerCollection44);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        java.lang.String str4 = ternaryValue1.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue6.and(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue1.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue9.or(ternaryValue12);
        java.lang.String str15 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.and(ternaryValue18);
        java.lang.String str20 = ternaryValue17.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.and(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue17.or(ternaryValue23);
        java.lang.String str26 = ternaryValue23.toString();
        java.lang.String str27 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue12.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue23.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue29.xor(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue33.and(ternaryValue34);
        java.lang.String str36 = ternaryValue33.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue38.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue33.or(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue39.xor(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue45.and(ternaryValue46);
        java.lang.String str48 = ternaryValue45.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.and(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue45.or(ternaryValue51);
        boolean boolean55 = ternaryValue53.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue39.or(ternaryValue53);
        boolean boolean58 = ternaryValue53.toBoolean(false);
        java.lang.String str59 = ternaryValue53.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue31.or(ternaryValue53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "true" + "'", str15, "true");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "true" + "'", str20, "true");
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "true" + "'", str27, "true");
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "true" + "'", str36, "true");
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "true" + "'", str48, "true");
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean5 = node4.isGetterDef();
        boolean boolean6 = node4.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        node11.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', node11, node23, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node33.children();
        node33.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = node41.srcref(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = node50.srcref(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean60 = node59.isBreak();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(4095, node41, node54, node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = node65.srcref(node69);
        java.lang.String str71 = node65.toString();
        node65.removeProp((int) (short) 0);
        boolean boolean74 = node65.isObjectLit();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean79 = node78.isGetterDef();
        com.google.javascript.rhino.Node node80 = node65.useSourceInfoFromForTree(node78);
        com.google.javascript.rhino.Node node81 = node61.copyInformationFromForTree(node65);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 100, node4, node29, node33, node61, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node85 = node61.removeFirstChild();
        boolean boolean86 = node61.isLabelName();
        boolean boolean87 = node61.isInstanceOf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = node61.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER 1.0" + "'", str71, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(staticSourceFile88);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(41, 53, 30);
        boolean boolean4 = node3.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray1 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility0 };
        java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList2 = new java.util.ArrayList<com.google.javascript.rhino.JSDocInfo.Visibility>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.JSDocInfo.Visibility>) visibilityList2, visibilityArray1);
        java.util.Iterator<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityItor4 = visibilityList2.iterator();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        boolean boolean15 = node13.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node13.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 10, node13);
        boolean boolean18 = node17.isLabelName();
        boolean boolean19 = visibilityList2.equals((java.lang.Object) node17);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = visibilityList2.remove((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(visibilityItor4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.addSuppression("true");
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean13 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nASSIGN_MOD 0\n\n\nTree2:\nOR\n\n\nSubtree1: ASSIGN_MOD 0\n\n\nSubtree2: OR\n");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str9 = node3.toString();
        node3.removeProp((int) (short) 0);
        boolean boolean12 = node3.isObjectLit();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean17 = node16.isGetterDef();
        com.google.javascript.rhino.Node node18 = node3.useSourceInfoFromForTree(node16);
        boolean boolean19 = node16.isAdd();
        boolean boolean20 = node16.isOr();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        java.lang.String str31 = node25.toString();
        node25.removeProp((int) (short) 0);
        boolean boolean34 = node25.isObjectLit();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean39 = node38.isGetterDef();
        com.google.javascript.rhino.Node node40 = node25.useSourceInfoFromForTree(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isOr();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isBreak();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node47, node60, node65);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet71);
        com.google.javascript.rhino.Node node74 = node47.detachFromParent();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node83 = node78.srcref(node82);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(42, node38, node47, node83, 15, (int) 'a');
        boolean boolean87 = node16.isEquivalentTo(node47);
        boolean boolean88 = node47.isCatch();
        boolean boolean89 = node47.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str95 = node94.toString();
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(46, node94);
        boolean boolean97 = node47.isEquivalentToTyped(node94);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 1.0" + "'", str9, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 1.0" + "'", str31, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "NUMBER 1.0" + "'", str95, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean3 = node2.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node2.new FileLevelJsDocBuilder();
        boolean boolean5 = node2.isBreak();
        boolean boolean6 = node2.isEmpty();
        boolean boolean7 = node2.isEmpty();
        boolean boolean8 = node2.isInc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        node3.setSourceFileForTesting("[PROTECTED]");
        node3.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoFromForTree(node13);
        com.google.javascript.rhino.InputId inputId15 = node3.getInputId();
        int int16 = node3.getChildCount();
        node3.setType((int) (byte) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean8 = node5.isEquivalentToTyped(node7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 1, node32);
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoFromForTree(node33);
        boolean boolean35 = node33.isInc();
        int int36 = node33.getSourcePosition();
        boolean boolean37 = node33.isQuotedString();
        boolean boolean38 = node33.isAssignAdd();
        com.google.javascript.rhino.Node node39 = node5.copyInformationFrom(node33);
        boolean boolean40 = node5.isRegExp();
        boolean boolean41 = node5.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        boolean boolean47 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean49 = jSDocInfo0.isNoAlias();
        boolean boolean50 = jSDocInfo0.hasThisType();
        boolean boolean52 = jSDocInfo0.hasParameterType("(true)");
        boolean boolean53 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(typePosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean11 = node10.isBreak();
        node10.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node14 = node10.cloneTree();
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoIfMissingFromForTree(node10);
        java.lang.String str16 = node10.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 1.0" + "'", str16, "NUMBER 1.0");
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isOverride();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(61440, "");
        node2.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node5 = node2.getLastSibling();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean10 = node9.isFalse();
        java.lang.String str11 = node9.getSourceFileName();
        boolean boolean12 = node9.isLabel();
        boolean boolean13 = node9.isSetterDef();
        boolean boolean14 = node9.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node37 = node32.srcref(node36);
        boolean boolean38 = node32.isBreak();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 1, node19, node23, node32, node42, 1, (-1));
        boolean boolean46 = node45.isWith();
        boolean boolean47 = node45.isNot();
        boolean boolean48 = node9.isEquivalentToTyped(node45);
        node5.addChildrenToBack(node45);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node45.setJSType(jSType50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean57 = node56.isDo();
        boolean boolean58 = node56.isBlock();
        boolean boolean59 = node56.isStringKey();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = node68.srcref(node72);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node82 = node77.srcref(node81);
        boolean boolean83 = node77.isBreak();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (byte) 1, node64, node68, node77, node87, 1, (-1));
        node68.removeProp(0);
        com.google.javascript.rhino.Node node93 = node56.copyInformationFromForTree(node68);
        boolean boolean94 = node93.isDelProp();
        node93.setIsSyntheticBlock(false);
        boolean boolean97 = node45.isEquivalentToTyped(node93);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(4095, 37, 35);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean3 = node2.isDec();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder4 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean10 = node9.isGetterDef();
        boolean boolean11 = node9.isThis();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = node16.srcref(node20);
        java.lang.String str22 = node16.toString();
        node16.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean29 = node28.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', node16, node28, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node38.children();
        node38.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = node55.srcref(node59);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean65 = node64.isBreak();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(4095, node46, node59, node64);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        java.lang.String str76 = node70.toString();
        node70.removeProp((int) (short) 0);
        boolean boolean79 = node70.isObjectLit();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean84 = node83.isGetterDef();
        com.google.javascript.rhino.Node node85 = node70.useSourceInfoFromForTree(node83);
        com.google.javascript.rhino.Node node86 = node66.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 100, node9, node34, node38, node66, (int) '4', (int) (byte) 100);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder90 = serializableBuilder4.add((java.io.Serializable) node34);
        com.google.javascript.rhino.Node node91 = node2.srcref(node34);
        boolean boolean92 = node91.isIn();
        boolean boolean93 = node91.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(serializableBuilder4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 1.0" + "'", str22, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER 1.0" + "'", str76, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(serializableBuilder90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        boolean boolean61 = node37.isExprResult();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node80 = node75.srcref(node79);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean85 = node84.isBreak();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(4095, node66, node79, node84);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node94 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node95 = node90.srcref(node94);
        boolean boolean96 = node79.isEquivalentTo(node90);
        boolean boolean97 = node90.isVoid();
        com.google.javascript.rhino.Node node98 = node37.srcrefTree(node90);
        int int99 = node98.getChildCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        boolean boolean20 = node17.isAdd();
        boolean boolean21 = node17.isOr();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = node35.srcref(node39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean45 = node44.isBreak();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(4095, node26, node39, node44);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node53 = node26.detachFromParent();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(42, node17, node26, node62, 15, (int) 'a');
        boolean boolean66 = node65.isNumber();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = node70.srcref(node74);
        boolean boolean76 = node75.isDo();
        java.util.Set<java.lang.String> strSet77 = node75.getDirectives();
        boolean boolean78 = node75.isString();
        node75.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = node75.getJSDocInfo();
        boolean boolean82 = node75.isLabelName();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(0);
        boolean boolean85 = node84.isRegExp();
        boolean boolean86 = node75.hasChild(node84);
        node65.addChildrenToBack(node75);
        com.google.javascript.rhino.Node node89 = node65.getAncestor(13);
        boolean boolean90 = node65.isNE();
        boolean boolean91 = node65.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        boolean boolean2 = node1.isParamList();
        boolean boolean3 = node1.isBreak();
        int int4 = node1.getSourcePosition();
        boolean boolean5 = node1.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getParameterType("NUMBER 1.0");
        java.lang.String str45 = jSDocInfo0.getSourceName();
        jSDocInfo0.setLicense("OR 0 [var_args_name: 1]\n");
        java.lang.String str48 = jSDocInfo0.getLendsName();
        boolean boolean49 = jSDocInfo0.isIdGenerator();
        boolean boolean50 = jSDocInfo0.isConstant();
        boolean boolean51 = jSDocInfo0.isExport();
        boolean boolean53 = jSDocInfo0.hasParameterType("(JSDocInfo)");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strCollection42);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        node3.detachChildren();
        int int10 = node3.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = node3.getJSDocInfo();
        boolean boolean12 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        node17.setQuotedString();
        int int19 = node17.getChildCount();
        boolean boolean20 = node17.isBreak();
        boolean boolean21 = node17.isTypeOf();
        com.google.javascript.rhino.Node node22 = node3.useSourceInfoFromForTree(node17);
        boolean boolean23 = node22.isStringKey();
        node22.setWasEmptyNode(true);
        com.google.javascript.rhino.InputId inputId26 = null;
        node22.setInputId(inputId26);
        boolean boolean28 = node22.isDelProp();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.String str12 = node8.toString(false, false, true);
        boolean boolean13 = node8.isEmpty();
        boolean boolean14 = node8.isVoid();
        java.lang.Object obj16 = node8.getProp(23);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 1.0" + "'", str12, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node23.isBreak();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, node10, node14, node23, node33, 1, (-1));
        jSDocInfo0.setAssociatedNode(node36);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList38 = com.google.common.collect.ImmutableList.of(node36);
        boolean boolean39 = node36.isCall();
        com.google.javascript.rhino.Node node40 = node36.removeFirstChild();
        boolean boolean41 = node36.isInc();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 49, 4095, 48);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        java.lang.String str14 = node8.toString();
        node8.removeProp((int) (short) 0);
        boolean boolean17 = node8.isObjectLit();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean22 = node21.isGetterDef();
        com.google.javascript.rhino.Node node23 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 1, node23);
        com.google.javascript.rhino.Node node25 = node23.getLastChild();
        boolean boolean26 = node23.isCall();
        boolean boolean27 = node23.isNumber();
        boolean boolean28 = node23.isThis();
        java.lang.String str29 = node3.checkTreeEquals(node23);
        boolean boolean30 = node3.isParamList();
        boolean boolean31 = node3.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 1.0" + "'", str14, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 49.0 4095\n\n\nTree2:\nNUMBER 1.0 97\n\n\nSubtree1: NUMBER 49.0 4095\n\n\nSubtree2: NUMBER 1.0 97\n" + "'", str29, "Node tree inequality:\nTree1:\nNUMBER 49.0 4095\n\n\nTree2:\nNUMBER 1.0 97\n\n\nSubtree1: NUMBER 49.0 4095\n\n\nSubtree2: NUMBER 1.0 97\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 45);
        boolean boolean2 = node1.isNot();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(1, "([PROTECTED])", 4, (int) (byte) 100);
        node7.setOptionalArg(true);
        boolean boolean10 = node7.isOr();
        node7.setSourceEncodedPosition((int) (byte) 0);
        java.util.Set<java.lang.String> strSet13 = node7.getDirectives();
        node7.detachChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        boolean boolean19 = node18.isObjectLit();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node22 = node7.useSourceInfoIfMissingFrom(node18);
        boolean boolean23 = node1.isEquivalentTo(node22);
        boolean boolean24 = node1.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n))" + "'", str1, "((Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n))");
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isFromExterns();
        boolean boolean34 = node4.isIf();
        boolean boolean35 = node4.isIn();
        java.lang.Object obj37 = node4.getProp(100);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean61 = node60.isBreak();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(4095, node42, node55, node60);
        boolean boolean63 = node55.isFunction();
        boolean boolean64 = node55.isInstanceOf();
        boolean boolean65 = node55.isHook();
        node55.setCharno(4095);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node55.setJSType(jSType68);
        node55.setCharno(35);
        boolean boolean72 = node4.isEquivalentToTyped(node55);
        boolean boolean73 = node4.isArrayLit();
        com.google.javascript.rhino.Node node74 = node4.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.isDebugger();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean10 = node9.isThis();
        boolean boolean11 = node9.isVoid();
        boolean boolean12 = node9.isDebugger();
        int int13 = node9.getLineno();
        boolean boolean14 = node9.isStringKey();
        com.google.javascript.rhino.Node node15 = node3.clonePropsFrom(node9);
        boolean boolean16 = node3.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node17 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray4, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(50, nodeArray4, 53, 1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4, 51, 44);
        boolean boolean15 = node14.isCatch();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node14.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        node31.setOptionalArg(true);
        int int34 = node31.getLength();
        boolean boolean35 = node31.isCall();
        boolean boolean36 = node31.isDelProp();
        boolean boolean37 = node31.isCatch();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean42 = node41.isFalse();
        boolean boolean43 = node41.isVoid();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        java.lang.String str53 = node47.toString();
        node47.removeProp((int) (short) 0);
        boolean boolean56 = node47.isObjectLit();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean61 = node60.isGetterDef();
        com.google.javascript.rhino.Node node62 = node47.useSourceInfoFromForTree(node60);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node71 = node66.srcref(node70);
        boolean boolean72 = node71.isDo();
        java.util.Set<java.lang.String> strSet73 = node71.getDirectives();
        com.google.javascript.rhino.Node node74 = node60.clonePropsFrom(node71);
        boolean boolean75 = node71.isNot();
        node71.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable83 = node82.children();
        java.util.Set<java.lang.String> strSet84 = node82.getDirectives();
        boolean boolean85 = node82.hasChildren();
        node82.setSourceEncodedPosition(4);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(4, node31, node41, node71, node82, (int) '#', 0);
        node82.setSourceFileForTesting("(Node tree inequality:\nTree1:\nNEW [PROTECTED]\n\n\nTree2:\nNUMBER 1.0 0\n\n\nSubtree1: NEW [PROTECTED]\n\n\nSubtree2: NUMBER 1.0 0\n)");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER 1.0" + "'", str53, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeIterable83);
        org.junit.Assert.assertNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        boolean boolean12 = jSDocInfo0.isExterns();
        java.lang.String str13 = jSDocInfo0.toString();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(visibility11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        boolean boolean10 = node9.isDo();
        java.util.Set<java.lang.String> strSet11 = node9.getDirectives();
        boolean boolean12 = node9.isString();
        node9.setWasEmptyNode(false);
        boolean boolean15 = node9.isGetterDef();
        boolean boolean16 = node9.isFunction();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = node20.srcref(node24);
        boolean boolean26 = node24.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node24.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile();
        java.lang.String str29 = node24.getSourceFileName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(2, node9, node24, node33, 32, 0);
        boolean boolean37 = node33.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean4 = node3.isAnd();
        node3.setSourceFileForTesting("[PROTECTED]");
        node3.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoFromForTree(node13);
        boolean boolean15 = node14.isSwitch();
        node14.setWasEmptyNode(false);
        node14.setType(53);
        com.google.javascript.rhino.Node node20 = node14.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(54, nodeArray6, 31, (int) 'a');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, nodeArray6, 0, 35);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6, 48, 40);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(30, nodeArray6);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(100, nodeArray6, 61537, 41);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isDec();
        java.lang.String str8 = node3.getSourceFileName();
        node3.detachChildren();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = node27.srcref(node31);
        boolean boolean33 = node27.isBreak();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 1, node14, node18, node27, node37, 1, (-1));
        com.google.javascript.rhino.Node node41 = node40.cloneNode();
        com.google.javascript.rhino.Node node42 = null;
        node3.addChildrenAfter(node41, node42);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node41.getJsDocBuilderForNode();
        boolean boolean45 = node41.isEmpty();
        boolean boolean46 = node41.isFor();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        int int31 = node4.getCharno();
        java.lang.String str32 = node4.getQualifiedName();
        boolean boolean33 = node4.isRegExp();
        boolean boolean34 = node4.isWith();
        java.lang.String str35 = node4.toString();
        node4.setSourceFileForTesting("(STRING hi! [directives: []])");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str35, "NUMBER 1.0 [directives: [, hi!]]");
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags1.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags3.setThrows();
        sideEffectFlags3.setReturnsTainted();
        sideEffectFlags3.setMutatesGlobalState();
        sideEffectFlags3.setMutatesThis();
        boolean boolean8 = sideEffectFlags3.areAllFlagsSet();
        sideEffectFlags3.setMutatesGlobalState();
        sideEffectFlags3.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags11.setThrows();
        sideEffectFlags11.setReturnsTainted();
        sideEffectFlags11.setMutatesGlobalState();
        sideEffectFlags11.setMutatesThis();
        boolean boolean16 = sideEffectFlags11.areAllFlagsSet();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags3, sideEffectFlags11);
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList4 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(30, 4095, 4095, (int) (byte) 100);
        typePosition0.setPositionInformation(3, (int) (short) -1, 52, 53);
        int int11 = typePosition0.getPositionOnEndLine();
        typePosition0.setPositionInformation(16, 44, (int) 'a', 12);
        int int17 = typePosition0.getPositionOnEndLine();
        int int18 = typePosition0.getEndLine();
        int int19 = typePosition0.getStartLine();
        int int20 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(409652, 46, 221184, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 409652?end-line: 221184");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair5 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType3, jSType4);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair8 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType6, jSType7);
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair8.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair12 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType10, jSType11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType13, jSType14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair18 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType16, jSType17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType19, jSType20);
        com.google.javascript.rhino.jstype.JSType jSType22 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType23 = typePair21.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList24 = com.google.common.collect.ImmutableList.of(typePair2, typePair5, typePair8, typePair12, typePair15, typePair18, typePair21);
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType26 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType27 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType28 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType29 = typePair21.typeA;
        com.google.javascript.rhino.jstype.JSType jSType30 = typePair21.typeB;
        com.google.javascript.rhino.jstype.JSType jSType31 = typePair21.typeA;
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertNull(jSType23);
        org.junit.Assert.assertNotNull(typePairList24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertNull(jSType31);
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags9.setAllFlags();
        sideEffectFlags9.setMutatesArguments();
        boolean boolean20 = sideEffectFlags9.areAllFlagsSet();
        sideEffectFlags9.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        java.lang.String[] strArray26 = new java.lang.String[] { "(hi!)", "()", "Node tree inequality:\nTree1:\nNUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: STRING \n", "([PROTECTED])", "Named type with empty name component", "NUMBER 1.0 97", "(NUMBER 1.0)", "", "hi!", "()", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "Unknown class name", "NUMBER 1.0\n", "JSDocInfo", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n", "([PROTECTED])", "Named type with empty name component", "(JSDocInfo)", "OR 100\n", "Node tree inequality:\nTree1:\nNUMBER 1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 1.0\n\n\nSubtree2: STRING \n", "([PROTECTED])", "NUMBER 1.0\n", "NUMBER 1.0", "(NUMBER 1.0)", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = node37.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = node46.srcref(node50);
        boolean boolean52 = node46.isBreak();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 1, node33, node37, node46, node56, 1, (-1));
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        int int62 = node59.getIntProp(10);
        boolean boolean63 = strSet27.remove((java.lang.Object) node59);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        node66.setLength(2);
        com.google.javascript.rhino.Node node69 = node59.useSourceInfoIfMissingFromForTree(node66);
        int int70 = node69.getSourceOffset();
        boolean boolean71 = node69.isSwitch();
        boolean boolean72 = node69.isDefaultCase();
        boolean boolean73 = node69.isSwitch();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node69.new FileLevelJsDocBuilder();
        int int75 = node69.getLength();
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getAuthors();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.hasParameter("(NUMBER 1.0)");
        java.lang.String str6 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10, 45, (int) (short) 10);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        boolean boolean5 = node4.isLocalResultCall();
        boolean boolean6 = node4.isFunction();
        com.google.javascript.rhino.Node node7 = node4.getParent();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        java.lang.String str17 = node11.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        node11.addChildToBack(node21);
        com.google.javascript.rhino.Node node23 = node21.removeChildren();
        com.google.javascript.rhino.InputId inputId24 = null;
        node21.setInputId(inputId24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = node29.srcref(node33);
        boolean boolean35 = node34.isDo();
        java.util.Set<java.lang.String> strSet36 = node34.getDirectives();
        boolean boolean37 = node34.isString();
        node34.setWasEmptyNode(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node34.getAncestors();
        com.google.javascript.rhino.Node node41 = node21.clonePropsFrom(node34);
        boolean boolean42 = node34.isOptionalArg();
        com.google.javascript.rhino.Node node43 = node4.useSourceInfoFromForTree(node34);
        com.google.javascript.rhino.Node node44 = node43.cloneTree();
        boolean boolean45 = node43.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 1.0" + "'", str17, "NUMBER 1.0");
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        int int26 = node17.getType();
        int int27 = node17.getSourcePosition();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 39 + "'", int26 == 39);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.io.Serializable>();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node10 = node5.srcref(node9);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node19 = node14.srcref(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean24 = node23.isBreak();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(4095, node5, node18, node23);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder33 = serializableBuilder0.add((java.io.Serializable) strSet29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean57 = node56.isBreak();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(4095, node38, node51, node56);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.lang.String str68 = node38.toString(true, true, false);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder69 = serializableBuilder33.add((java.io.Serializable) str68);
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder71 = serializableBuilder33.add((java.io.Serializable) 31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo72.getImplementedInterfaces();
        java.lang.String str74 = jSDocInfo72.getFileOverview();
        boolean boolean75 = jSDocInfo72.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = jSDocInfo72.getVisibility();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo72.getModifies();
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable> serializableBuilder78 = serializableBuilder71.add((java.io.Serializable) jSDocInfo72);
        java.util.Collection<java.lang.String> strCollection79 = jSDocInfo72.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean81 = jSDocInfo80.isNoTypeCheck();
        boolean boolean82 = jSDocInfo80.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility83 = jSDocInfo80.getVisibility();
        java.lang.String str84 = jSDocInfo80.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility85 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo80.setVisibility(visibility85);
        jSDocInfo72.setVisibility(visibility85);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo72.getBaseType();
        java.lang.String str89 = jSDocInfo72.getOriginalCommentString();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[, hi!]");
        org.junit.Assert.assertNotNull(serializableBuilder33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER 1.0 [directives: [, hi!]]" + "'", str68, "NUMBER 1.0 [directives: [, hi!]]");
        org.junit.Assert.assertNotNull(serializableBuilder69);
        org.junit.Assert.assertNotNull(serializableBuilder71);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(visibility76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(serializableBuilder78);
        org.junit.Assert.assertNull(strCollection79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(visibility83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + visibility85 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility85.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags2 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags2.setThrows();
        sideEffectFlags2.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean8 = sideEffectFlags7.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags9.clearSideEffectFlags();
        sideEffectFlags9.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags13.clearAllFlags();
        sideEffectFlags13.setAllFlags();
        int int16 = sideEffectFlags13.valueOf();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList17 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags2, sideEffectFlags6, sideEffectFlags7, sideEffectFlags9, sideEffectFlags13);
        sideEffectFlags6.setMutatesArguments();
        sideEffectFlags6.setThrows();
        sideEffectFlags6.setAllFlags();
        sideEffectFlags6.clearSideEffectFlags();
        boolean boolean22 = sideEffectFlags6.areAllFlagsSet();
        sideEffectFlags6.setThrows();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(sideEffectFlagsList17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.util.Set<java.lang.String> strSet25 = node24.getDirectives();
        com.google.javascript.rhino.Node node26 = node24.getFirstChild();
        java.util.Set<java.lang.String> strSet27 = node26.getDirectives();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo28.getParameterType("Not declared as a constructor");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo28.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo28.getBaseType();
        boolean boolean34 = jSDocInfo28.isConstant();
        boolean boolean36 = jSDocInfo28.hasDescriptionForParameter("([PROTECTED])");
        boolean boolean37 = jSDocInfo28.isExpose();
        boolean boolean38 = jSDocInfo28.hasFileOverview();
        node26.setJSDocInfo(jSDocInfo28);
        java.lang.String str40 = jSDocInfo28.getFileOverview();
        boolean boolean41 = jSDocInfo28.isDefine();
        java.util.Collection<java.lang.String> strCollection42 = jSDocInfo28.getReferences();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strCollection42);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getImplementedInterfaces();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        node22.setJSDocInfo(jSDocInfo23);
        boolean boolean28 = jSDocInfo23.hasParameterType("NUMBER 1.0");
        boolean boolean29 = jSDocInfo23.hasModifies();
        jSDocInfo23.addSuppression("([PROTECTED])");
        boolean boolean32 = jSDocInfo23.hasTypedefType();
        boolean boolean33 = jSDocInfo23.hasFileOverview();
        boolean boolean34 = jSDocInfo23.hasModifies();
        boolean boolean35 = jSDocInfo23.hasThisType();
        java.lang.String str36 = jSDocInfo23.getDeprecationReason();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.lang.String str9 = jSDocInfo0.getLicense();
        java.lang.String str10 = jSDocInfo0.getDescription();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        boolean boolean13 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node8.isDo();
        java.util.Set<java.lang.String> strSet10 = node8.getDirectives();
        boolean boolean11 = node8.isString();
        node8.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node8.getJSDocInfo();
        boolean boolean15 = node8.isLabelName();
        boolean boolean16 = node8.isCatch();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(0);
        boolean boolean19 = node18.isRegExp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = node25.srcref(node29);
        java.lang.String str31 = node25.toString();
        node25.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean38 = node37.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) '#', node25, node37, 0, (int) (short) 0);
        boolean boolean44 = node37.isFalse();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d);
        boolean boolean47 = node46.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder48 = node46.getJsDocBuilderForNode();
        boolean boolean49 = node37.hasChild(node46);
        boolean boolean50 = node46.isParamList();
        node46.setLineno(16);
        node18.addChildrenToBack(node46);
        int int54 = node8.getIndexOfChild(node46);
        boolean boolean55 = node46.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 1.0" + "'", str31, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node4.isCall();
        boolean boolean32 = node4.isAnd();
        com.google.javascript.rhino.Node node33 = node4.getLastSibling();
        boolean boolean34 = node33.isGetterDef();
        boolean boolean35 = node33.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setReturnsTainted();
        int int6 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags8.setThrows();
        sideEffectFlags8.setReturnsTainted();
        sideEffectFlags8.setMutatesGlobalState();
        sideEffectFlags8.setMutatesThis();
        boolean boolean13 = sideEffectFlags8.areAllFlagsSet();
        sideEffectFlags8.setMutatesGlobalState();
        sideEffectFlags8.clearSideEffectFlags();
        sideEffectFlags8.setThrows();
        sideEffectFlags8.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags19 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 1);
        sideEffectFlags19.setMutatesGlobalState();
        sideEffectFlags19.setAllFlags();
        int int22 = sideEffectFlags19.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags23 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags23.setThrows();
        sideEffectFlags23.setReturnsTainted();
        sideEffectFlags23.setMutatesGlobalState();
        sideEffectFlags23.setMutatesThis();
        boolean boolean28 = sideEffectFlags23.areAllFlagsSet();
        sideEffectFlags23.setMutatesGlobalState();
        sideEffectFlags23.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags32 = new com.google.javascript.rhino.Node.SideEffectFlags(41);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags33 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags33.setThrows();
        sideEffectFlags33.setMutatesArguments();
        int int36 = sideEffectFlags33.valueOf();
        sideEffectFlags33.setThrows();
        sideEffectFlags33.setReturnsTainted();
        sideEffectFlags33.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags40 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags40.setThrows();
        boolean boolean42 = sideEffectFlags40.areAllFlagsSet();
        boolean boolean43 = sideEffectFlags40.areAllFlagsSet();
        sideEffectFlags40.setReturnsTainted();
        sideEffectFlags40.setMutatesThis();
        sideEffectFlags40.setMutatesThis();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        sideEffectFlags48.clearSideEffectFlags();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList50 = com.google.common.collect.ImmutableList.of(sideEffectFlags0, sideEffectFlags8, sideEffectFlags19, sideEffectFlags23, sideEffectFlags32, sideEffectFlags33, sideEffectFlags40, sideEffectFlags48);
        sideEffectFlags19.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(sideEffectFlagsList50);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node33 = node28.detachFromParent();
        boolean boolean34 = node28.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node28.setStaticSourceFile(staticSourceFile35);
        boolean boolean37 = node28.isTrue();
        node28.addSuppression("()");
        node28.addSuppression("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node50 = node45.srcref(node49);
        java.lang.String str51 = node45.toString();
        node45.removeProp((int) (short) 0);
        boolean boolean54 = node45.isObjectLit();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean59 = node58.isGetterDef();
        com.google.javascript.rhino.Node node60 = node45.useSourceInfoFromForTree(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(39, node28, node45, (int) 'a', (int) (short) 0);
        com.google.javascript.rhino.Node node64 = node63.cloneNode();
        node63.setVarArgs(true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 1.0" + "'", str51, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        boolean boolean2 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node3 = node1.removeFirstChild();
        java.lang.Object obj5 = node1.getProp(29);
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node7 = node1.useSourceInfoIfMissingFromForTree(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        boolean boolean33 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo34.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getParameterType("Not declared as a constructor");
        boolean boolean39 = jSDocInfo34.isExport();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo34.getModifies();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node49 = node44.srcref(node48);
        java.lang.String str50 = node44.toString();
        node44.removeProp((int) (short) 0);
        boolean boolean53 = node44.isObjectLit();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean58 = node57.isGetterDef();
        com.google.javascript.rhino.Node node59 = node44.useSourceInfoFromForTree(node57);
        boolean boolean60 = node57.isAdd();
        boolean boolean61 = node57.isOr();
        boolean boolean62 = node57.isTry();
        com.google.javascript.rhino.InputId inputId63 = null;
        node57.setInputId(inputId63);
        boolean boolean65 = strSet40.contains((java.lang.Object) node57);
        int int66 = node8.getIndexOfChild(node57);
        boolean boolean67 = node57.isAssignAdd();
        node57.addSuppression("NUMBER 1.0 [jsdoc_info: JSDocInfo] [directives: [JSDocInfo, hi!, true, NUMBER 1.0]]\n");
        boolean boolean70 = node57.isThrow();
        com.google.javascript.rhino.jstype.JSType jSType71 = node57.getJSType();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 1.0" + "'", str50, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean37 = node36.isFalse();
        java.lang.String str38 = node36.getSourceFileName();
        boolean boolean39 = node36.isLabel();
        node5.putProp(1, (java.lang.Object) node36);
        node5.detachChildren();
        node5.setSourceEncodedPosition((int) (short) 100);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node52.isDo();
        java.util.Set<java.lang.String> strSet54 = node52.getDirectives();
        boolean boolean55 = node52.isString();
        node52.setWasEmptyNode(false);
        boolean boolean58 = node52.isGetterDef();
        com.google.javascript.rhino.Node node59 = node5.useSourceInfoFrom(node52);
        double double60 = node52.getDouble();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(3, "Not declared as a constructor");
        boolean boolean64 = node63.isAssign();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node74 = node69.srcref(node73);
        boolean boolean75 = node74.isDo();
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        boolean boolean77 = node74.isString();
        node74.setWasEmptyNode(false);
        boolean boolean80 = node74.isObjectLit();
        boolean boolean81 = node74.isParamList();
        boolean boolean82 = node74.hasOneChild();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(38, node74, (int) (byte) -1, 0);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(32, node52, node63, node85, 16, 53);
        boolean boolean89 = node52.isNew();
        boolean boolean90 = node52.isScript();
        node52.setIsSyntheticBlock(false);
        boolean boolean93 = node52.isTrue();
        boolean boolean94 = node52.isWhile();
        boolean boolean95 = node52.isNoSideEffectsCall();
        double double96 = node52.getDouble();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.0d + "'", double96 == 1.0d);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        node1.setString("");
        boolean boolean8 = node1.isDec();
        boolean boolean9 = node1.isInc();
        boolean boolean10 = node1.isName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node14.children();
        node14.setWasEmptyNode(false);
        boolean boolean18 = node14.isDec();
        java.lang.String str19 = node14.getSourceFileName();
        node14.detachChildren();
        int int21 = node14.getLineno();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = node30.srcref(node34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node44 = node39.srcref(node43);
        boolean boolean45 = node39.isBreak();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 1, node26, node30, node39, node49, 1, (-1));
        com.google.javascript.rhino.Node node53 = node14.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean54 = node53.isNull();
        int int55 = node53.getChildCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node56 = node1.getChildBefore(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR STRING hi! 97\n", 1, (int) 'a');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setReturnsTainted();
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        boolean boolean4 = node3.isFalse();
        com.google.javascript.rhino.Node node5 = node3.cloneTree();
        node5.setOptionalArg(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node5.getAncestors();
        boolean boolean9 = node5.isGetElem();
        boolean boolean10 = node5.isNull();
        boolean boolean11 = node5.isTry();
        boolean boolean12 = node5.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = node22.srcref(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(4095, node13, node26, node31);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet37);
        strSet37.clear();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean42 = node3.isCase();
        boolean boolean43 = node3.isAssign();
        boolean boolean44 = node3.isOnlyModifiesThisCall();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 1.0 [directives: []] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.lang.String str7 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("NUMBER 45.0\n    BITXOR\n");
        int int6 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        boolean boolean45 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node4.detachFromParent();
        boolean boolean32 = node4.isAssign();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        node36.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node47 = node36.useSourceInfoFromForTree(node46);
        boolean boolean48 = node47.isSwitch();
        boolean boolean49 = node47.isParamList();
        com.google.javascript.rhino.Node node50 = node4.useSourceInfoIfMissingFrom(node47);
        node47.removeProp(47);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node4.isIf();
        boolean boolean32 = node4.isCatch();
        java.lang.String str36 = node4.toString(true, true, false);
        boolean boolean37 = node4.isTypeOf();
        boolean boolean38 = node4.isQuotedString();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR 100" + "'", str36, "OR 100");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getDescription();
        boolean boolean2 = jSDocInfo0.isInterface();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.hasParameter("(Not declared as a type name)");
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.hasType();
        jSDocInfo0.setLicense("(NUMBER 1.0 0)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId6 = null;
        node1.setInputId(inputId6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node16 = node11.srcref(node15);
        boolean boolean17 = node15.isVar();
        double double18 = node15.getDouble();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo19.getEnumParameterType();
        java.lang.String str23 = jSDocInfo19.getDescription();
        node15.setJSDocInfo(jSDocInfo19);
        node1.addChildrenToBack(node15);
        node1.addSuppression("");
        com.google.javascript.rhino.Node node28 = node1.removeChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node43 = node38.srcref(node42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        boolean boolean53 = node47.isBreak();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, node34, node38, node47, node57, 1, (-1));
        java.lang.String str61 = node57.getQualifiedName();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isAnd();
        node65.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str69 = node57.checkTreeEquals(node65);
        jSDocInfo29.setAssociatedNode(node57);
        java.util.Collection<java.lang.String> strCollection71 = jSDocInfo29.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo29.getParameterType("NUMBER 1.0");
        java.util.Set<java.lang.String> strSet74 = jSDocInfo29.getSuppressions();
        node1.setJSDocInfo(jSDocInfo29);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection76 = jSDocInfo29.getMarkers();
        boolean boolean77 = jSDocInfo29.isConstructor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(strCollection71);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(markerCollection76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean7 = node6.isDo();
        boolean boolean8 = node6.isBlock();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean13 = node12.isBreak();
        node12.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node16 = node12.cloneTree();
        com.google.javascript.rhino.Node node17 = node6.useSourceInfoIfMissingFromForTree(node12);
        boolean boolean18 = node6.isNew();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) ' ', 29, (int) (short) 1);
        boolean boolean23 = node22.isObjectLit();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node36 = node31.srcref(node35);
        java.lang.String str37 = node31.toString();
        int int38 = node27.getIndexOfChild(node31);
        boolean boolean39 = node27.wasEmptyNode();
        int int40 = node27.getCharno();
        com.google.javascript.rhino.Node node41 = node27.cloneTree();
        boolean boolean42 = node27.isInstanceOf();
        boolean boolean43 = node27.isCall();
        boolean boolean44 = node27.isFromExterns();
        node22.addChildToFront(node27);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean50 = node49.isAnd();
        boolean boolean51 = node49.isBreak();
        boolean boolean52 = node49.isName();
        boolean boolean53 = node49.isRegExp();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = node57.srcref(node61);
        boolean boolean63 = node62.isDo();
        java.util.Set<java.lang.String> strSet64 = node62.getDirectives();
        boolean boolean65 = node62.isDebugger();
        boolean boolean66 = node62.isHook();
        boolean boolean67 = node62.isNew();
        boolean boolean68 = node62.isOptionalArg();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(13, node6, node22, node49, node62);
        com.google.javascript.rhino.Node node70 = node62.getParent();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean75 = node74.isAnd();
        node74.setSourceFileForTesting("[PROTECTED]");
        node74.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node85 = node74.useSourceInfoFromForTree(node84);
        java.lang.Object obj87 = node74.getProp((int) (byte) 100);
        boolean boolean88 = node74.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(53, node62, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 1.0" + "'", str37, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean5 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        int int4 = node1.getSourcePosition();
        boolean boolean5 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 11);
        boolean boolean2 = node1.isFalse();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        boolean boolean9 = node7.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = node7.getStaticSourceFile();
        boolean boolean12 = node7.isCase();
        node7.setWasEmptyNode(false);
        boolean boolean15 = node7.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNull(staticSourceFile11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        java.lang.String str32 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean37 = node36.isAnd();
        node36.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str40 = node28.checkTreeEquals(node36);
        jSDocInfo0.setAssociatedNode(node28);
        boolean boolean42 = jSDocInfo0.hasFileOverview();
        boolean boolean43 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo0.getTypedefType();
        int int45 = jSDocInfo0.getParameterCount();
        boolean boolean46 = jSDocInfo0.containsDeclaration();
        boolean boolean47 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo48.getParameterType("hi!");
        jSDocInfo48.addSuppression("hi!");
        java.lang.String str53 = jSDocInfo48.toString();
        boolean boolean54 = jSDocInfo48.isNoAlias();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection55 = jSDocInfo48.getMarkers();
        java.lang.String str56 = jSDocInfo48.getDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = jSDocInfo57.getTemplateTypeNames();
        boolean boolean59 = jSDocInfo57.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList61 = jSDocInfo60.getImplementedInterfaces();
        java.lang.String str62 = jSDocInfo60.getFileOverview();
        boolean boolean63 = jSDocInfo60.hasBaseType();
        boolean boolean64 = jSDocInfo60.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = jSDocInfo60.getVisibility();
        java.lang.String str66 = jSDocInfo60.getMeaning();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo60.setVisibility(visibility67);
        jSDocInfo57.setVisibility(visibility67);
        jSDocInfo48.setVisibility(visibility67);
        jSDocInfo0.setVisibility(visibility67);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JSDocInfo" + "'", str53, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(markerCollection55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(visibility65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        com.google.common.collect.ImmutableList<java.lang.Class<?>> wildcardClassList3 = com.google.common.collect.ImmutableList.copyOf((java.lang.Class<?>[]) classArray1);
        java.lang.Class[] classArray5 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray6 = (java.lang.Class<?>[]) classArray5;
        com.google.common.collect.ImmutableList<java.lang.Class<?>> wildcardClassList7 = com.google.common.collect.ImmutableList.copyOf((java.lang.Class<?>[]) classArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo8.getParameterType("hi!");
        boolean boolean11 = jSDocInfo8.hasModifies();
        boolean boolean13 = jSDocInfo8.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo8.getThrownTypes();
        boolean boolean15 = jSDocInfo8.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo8.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = jSDocInfo8.getTemplateTypeNames();
        java.lang.Class<?> wildcardClass18 = strList17.getClass();
        java.lang.Class[] classArray19 = new java.lang.Class[] { wildcardClass18 };
        java.lang.Class[] classArray21 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray22 = (java.lang.Class<?>[]) classArray21;
        com.google.common.collect.ImmutableList<java.lang.Class<?>> wildcardClassList23 = com.google.common.collect.ImmutableList.copyOf((java.lang.Class<?>[]) classArray21);
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration> genericDeclarationList24 = com.google.common.collect.ImmutableList.of((java.lang.reflect.GenericDeclaration[]) classArray21);
        com.google.common.collect.ImmutableList<java.lang.Class[]> classArrayList25 = com.google.common.collect.ImmutableList.of(classArray1, classArray5, classArray19, classArray21);
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList26 = com.google.common.collect.ImmutableList.copyOf((java.lang.reflect.Type[]) classArray1);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassList3);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(wildcardClassArray6);
        org.junit.Assert.assertNotNull(wildcardClassList7);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(wildcardClassArray22);
        org.junit.Assert.assertNotNull(wildcardClassList23);
        org.junit.Assert.assertNotNull(genericDeclarationList24);
        org.junit.Assert.assertNotNull(classArrayList25);
        org.junit.Assert.assertNotNull(typeList26);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node33 = node28.srcref(node32);
        java.lang.String str34 = node28.toString();
        node28.removeProp((int) (short) 0);
        boolean boolean37 = node28.isObjectLit();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean42 = node41.isGetterDef();
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node44 = node24.copyInformationFromForTree(node28);
        node24.putIntProp(4095, (int) (short) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node24.children();
        com.google.javascript.rhino.Node node49 = node24.removeFirstChild();
        boolean boolean50 = node24.isRegExp();
        boolean boolean51 = node24.isLabelName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 1.0" + "'", str34, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue1.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue5.and(ternaryValue6);
        java.lang.String str8 = ternaryValue5.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.and(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue5.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue11.xor(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue3.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        boolean boolean19 = ternaryValue16.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue20.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue23.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue27.and(ternaryValue28);
        java.lang.String str30 = ternaryValue27.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue32.and(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue27.or(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue33.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue25.xor(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue40.and(ternaryValue41);
        java.lang.String str43 = ternaryValue40.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue45.and(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue40.or(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue46.xor(ternaryValue49);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue52.and(ternaryValue53);
        java.lang.String str55 = ternaryValue52.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue57.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue52.or(ternaryValue58);
        boolean boolean62 = ternaryValue60.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue46.or(ternaryValue60);
        boolean boolean65 = ternaryValue46.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue25.and(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue68.and(ternaryValue69);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue72.and(ternaryValue73);
        java.lang.String str75 = ternaryValue72.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue77.and(ternaryValue78);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = ternaryValue72.or(ternaryValue78);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = ternaryValue78.xor(ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = ternaryValue70.xor(ternaryValue78);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = ternaryValue83.and(ternaryValue84);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = ternaryValue46.and(ternaryValue83);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue87 = ternaryValue21.xor(ternaryValue86);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue16.or(ternaryValue21);
        java.lang.String str89 = ternaryValue16.toString();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "true" + "'", str43, "true");
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "true" + "'", str55, "true");
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "true" + "'", str75, "true");
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValue87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "false" + "'", str89, "false");
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, (int) (byte) -1, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        boolean boolean14 = node13.isDo();
        java.util.Set<java.lang.String> strSet15 = node13.getDirectives();
        boolean boolean16 = node13.isDebugger();
        boolean boolean17 = node13.isHook();
        java.lang.String[] strArray19 = new java.lang.String[] { "[PROTECTED]" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.util.Iterator<java.lang.String> strItor22 = strSet20.iterator();
        java.lang.Object[] objArray23 = strSet20.toArray();
        java.lang.String[] strArray28 = new java.lang.String[] { "JSDocInfo", "hi!", "true", "NUMBER 1.0" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList31 = com.google.common.collect.ImmutableList.of(strSet20, strSet29);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet20);
        boolean boolean33 = node13.isDo();
        boolean boolean34 = node13.isFalse();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(221184, node4, node13);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[PROTECTED]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[PROTECTED]]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSetList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(54, "JSDocInfo");
        boolean boolean3 = node2.isDec();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node2.getAncestors();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node2.children();
        node2.setOptionalArg(true);
        int int8 = node2.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(3, "[PROTECTED]", 3, 37);
        boolean boolean5 = node4.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean11 = node10.isGetterDef();
        boolean boolean12 = node10.isThis();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', node17, node29, 0, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.children();
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node52 = node47.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node61 = node56.srcref(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean66 = node65.isBreak();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node47, node60, node65);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node76 = node71.srcref(node75);
        java.lang.String str77 = node71.toString();
        node71.removeProp((int) (short) 0);
        boolean boolean80 = node71.isObjectLit();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean85 = node84.isGetterDef();
        com.google.javascript.rhino.Node node86 = node71.useSourceInfoFromForTree(node84);
        com.google.javascript.rhino.Node node87 = node67.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 100, node10, node35, node39, node67, (int) '4', (int) (byte) 100);
        com.google.javascript.rhino.Node node91 = node35.detachFromParent();
        node91.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.Node node94 = node4.useSourceInfoIfMissingFrom(node91);
        boolean boolean95 = node4.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER 1.0" + "'", str77, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 0.0\n", 12, 12325);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean5 = node4.isAnd();
        boolean boolean6 = node4.isDebugger();
        boolean boolean7 = node4.isWhile();
        node4.setLength(43);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean15 = node14.isBreak();
        node14.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node26 = node21.srcref(node25);
        java.lang.String str27 = node21.toString();
        node21.removeProp((int) (short) 0);
        boolean boolean30 = node21.isGetProp();
        boolean boolean31 = node21.isDebugger();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) '4', node14, node21);
        node21.addSuppression("Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node21.getJSDocInfo();
        boolean boolean36 = node4.hasChild(node21);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(397316, node4);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 1.0" + "'", str27, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node9.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node51.isBreak();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 1, node38, node42, node51, node61, 1, (-1));
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean70 = node69.isAnd();
        node69.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str73 = node61.checkTreeEquals(node69);
        jSDocInfo33.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node75 = node9.useSourceInfoIfMissingFrom(node61);
        typePosition0.setItem(node75);
        com.google.javascript.rhino.Node node77 = typePosition0.getItem();
        boolean boolean78 = node77.isDefaultCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node77.getJSDocInfo();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSDocInfo79);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node8.isInstanceOf();
        boolean boolean32 = node8.isNot();
        boolean boolean33 = node8.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo34.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo34.getParameterType("Not declared as a constructor");
        boolean boolean39 = jSDocInfo34.isExport();
        node8.setJSDocInfo(jSDocInfo34);
        java.lang.String str41 = jSDocInfo34.getLicense();
        boolean boolean42 = jSDocInfo34.hasReturnType();
        boolean boolean43 = jSDocInfo34.isExterns();
        boolean boolean44 = jSDocInfo34.isConstant();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean5 = node4.isAnd();
        node4.setSourceFileForTesting("[PROTECTED]");
        node4.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node15 = node4.useSourceInfoFromForTree(node14);
        java.lang.Object obj17 = node4.getProp((int) (byte) 100);
        node4.setIsSyntheticBlock(false);
        boolean boolean20 = node4.isFor();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = node26.srcref(node30);
        java.lang.String str32 = node26.toString();
        int int33 = node22.getIndexOfChild(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node22.getJSDocInfo();
        int int35 = node22.getType();
        node22.putBooleanProp((int) (byte) -1, false);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        java.lang.String str51 = node47.toString(false, false, true);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(44, node4, node22, node47);
        com.google.javascript.rhino.Node node53 = node47.cloneTree();
        boolean boolean54 = node53.isCatch();
        int int55 = node53.getChildCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 1.0" + "'", str32, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 1.0" + "'", str51, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        boolean boolean4 = node1.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node1.getJsDocBuilderForNode();
        int int7 = node1.getIntProp(37);
        boolean boolean8 = node1.isOnlyModifiesThisCall();
        int int9 = node1.getSourceOffset();
        node1.addSuppression("(Named type with empty name component)");
        boolean boolean12 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        boolean boolean61 = node60.isThis();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.hasChildren();
        node3.setOptionalArg(true);
        node3.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean10 = node3.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(0, "true");
        boolean boolean4 = node3.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder5 = node3.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, node3, (int) (byte) 1, 48);
        boolean boolean9 = node8.isParamList();
        boolean boolean10 = node8.isComma();
        boolean boolean11 = node8.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray5, 40, (int) (short) 0);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(43, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray5, 49, 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(37, nodeArray5);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(40, nodeArray5, 10, 11);
        boolean boolean17 = node16.isBlock();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = node3.srcref(node7);
        java.lang.Object obj10 = node3.getProp(10);
        boolean boolean11 = node3.isArrayLit();
        boolean boolean12 = node3.isAdd();
        int int13 = node3.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.children();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 [directives: [, hi!]]", 51, (int) (short) 100);
        com.google.javascript.rhino.Node node19 = node3.srcref(node18);
        int int20 = node19.getType();
        boolean boolean21 = node19.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getParameterType("hi!");
        boolean boolean25 = jSDocInfo22.hasModifies();
        int int26 = jSDocInfo22.getParameterCount();
        boolean boolean27 = jSDocInfo22.hasBaseType();
        node19.setJSDocInfo(jSDocInfo22);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 39 + "'", int20 == 39);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 2, 29, (int) (short) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.children();
        int int5 = node3.getSideEffectFlags();
        boolean boolean6 = node3.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        java.lang.String str31 = node27.getQualifiedName();
        boolean boolean32 = node27.isDec();
        com.google.javascript.rhino.Node node33 = node27.cloneTree();
        boolean boolean34 = node33.isVoid();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        node38.setIsSyntheticBlock(false);
        java.lang.String str41 = node38.getSourceFileName();
        com.google.javascript.rhino.Node node42 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node43 = node42.removeFirstChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node42.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(30, "[PROTECTED]", 0, 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isInstanceOf();
        boolean boolean7 = node4.isFor();
        com.google.javascript.rhino.Node node8 = node4.getLastChild();
        boolean boolean9 = node4.isTrue();
        boolean boolean10 = node4.isScript();
        boolean boolean11 = node4.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str10 = jSDocInfo0.getDescription();
        java.lang.String str11 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node18 = node13.srcref(node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean23 = node22.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(4095, node4, node17, node22);
        boolean boolean25 = node17.isFunction();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean30 = node29.isAnd();
        node29.setSourceFileForTesting("[PROTECTED]");
        node29.putIntProp(1, 4095);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 0, 54, (int) (short) 0);
        com.google.javascript.rhino.Node node40 = node29.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node41 = node17.copyInformationFrom(node29);
        boolean boolean42 = node17.isDo();
        boolean boolean43 = node17.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97");
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        boolean boolean3 = jSDocInfo0.hasType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(typePosition9);
        org.junit.Assert.assertNull(stringPosition10);
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean17 = node16.isBreak();
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) '#', node4, node16, 0, (int) (short) 0);
        boolean boolean23 = node16.isFalse();
        boolean boolean24 = node16.isAssignAdd();
        boolean boolean25 = node16.isLocalResultCall();
        com.google.javascript.rhino.jstype.JSType jSType26 = node16.getJSType();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("NUMBER 1.0 97", 30, (int) (byte) -1);
        boolean boolean31 = node30.isNull();
        boolean boolean32 = node16.hasChild(node30);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        java.lang.String str10 = node4.toString();
        node4.removeProp((int) (short) 0);
        boolean boolean13 = node4.isObjectLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean18 = node17.isGetterDef();
        com.google.javascript.rhino.Node node19 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node28 = node23.srcref(node27);
        boolean boolean29 = node28.isDo();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        com.google.javascript.rhino.Node node31 = node17.clonePropsFrom(node28);
        boolean boolean32 = node28.isDebugger();
        com.google.javascript.rhino.Node node33 = node28.getFirstChild();
        boolean boolean34 = node28.isSetterDef();
        boolean boolean35 = node28.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        int int38 = node28.getIndexOfChild(node37);
        boolean boolean39 = node37.isThrow();
        boolean boolean40 = node37.isComma();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node37.getAncestors();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(12, node37);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 1.0" + "'", str10, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ancestorIterable41);
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        jSDocInfo0.addSuppression("hi!");
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        boolean boolean15 = jSDocInfo0.hasParameter("false");
        java.lang.String str17 = jSDocInfo0.getDescriptionForParameter("(NUMBER 1.0 [jsdoc_info: JSDocInfo] [directives: [JSDocInfo, hi!, true, NUMBER 1.0]]\n)");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean5 = jSDocInfo0.hasParameter("");
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor8 = strSet7.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo9.getParameterType("Not declared as a constructor");
        int int13 = jSDocInfo9.getExtendedInterfacesCount();
        java.lang.String str14 = jSDocInfo9.getLicense();
        java.lang.String str15 = jSDocInfo9.getMeaning();
        boolean boolean16 = jSDocInfo9.isDefine();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo9.getSuppressions();
        boolean boolean18 = strSet7.remove((java.lang.Object) jSDocInfo9);
        strSet7.clear();
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node9 = node4.srcref(node8);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(54, (int) (byte) 10, 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        java.lang.String str23 = node17.toString();
        node17.removeProp((int) (short) 0);
        boolean boolean26 = node17.isObjectLit();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean31 = node30.isGetterDef();
        com.google.javascript.rhino.Node node32 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean38 = node37.isGetterDef();
        com.google.javascript.rhino.Node node39 = node30.useSourceInfoFrom(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node48 = node43.srcref(node47);
        java.lang.String str49 = node43.toString();
        node43.removeProp((int) (short) 0);
        boolean boolean52 = node43.isObjectLit();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 4);
        boolean boolean57 = node56.isGetterDef();
        com.google.javascript.rhino.Node node58 = node43.useSourceInfoFromForTree(node56);
        boolean boolean59 = node58.isObjectLit();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(54, node9, node13, node37, node58);
        int int62 = node13.getIntProp((int) (byte) 10);
        boolean boolean63 = node13.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo64.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo64.getEnumParameterType();
        java.lang.String str68 = jSDocInfo64.getDescription();
        boolean boolean69 = jSDocInfo64.isNoAlias();
        boolean boolean70 = jSDocInfo64.isDefine();
        boolean boolean71 = jSDocInfo64.hasThisType();
        java.util.Collection<java.lang.String> strCollection72 = jSDocInfo64.getAuthors();
        boolean boolean74 = jSDocInfo64.hasDescriptionForParameter("INSTANCEOF\n    NUMBER 1.0\n    NUMBER 1.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo64.getEnumParameterType();
        node13.setJSDocInfo(jSDocInfo64);
        boolean boolean77 = jSDocInfo64.isImplicitCast();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER 1.0" + "'", str23, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER 1.0" + "'", str49, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(strCollection72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertNotNull(markerCollection8);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = node8.srcref(node12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = node17.srcref(node21);
        boolean boolean23 = node17.isBreak();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node8, node17, node27, 1, (-1));
        boolean boolean31 = node30.isWith();
        boolean boolean32 = node30.isNot();
        com.google.javascript.rhino.Node node33 = node30.getLastChild();
        node33.setSourceEncodedPosition((int) (byte) 10);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescription();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("STRING hi! 97");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray11 = strSet10.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strSet10.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node14 = node9.srcref(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node23 = node18.srcref(node22);
        boolean boolean24 = node18.isBreak();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node9, node18, node28, 1, (-1));
        boolean boolean32 = node9.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node47 = node42.srcref(node46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node56 = node51.srcref(node55);
        boolean boolean57 = node51.isBreak();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 1, node38, node42, node51, node61, 1, (-1));
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        boolean boolean70 = node69.isAnd();
        node69.setSourceFileForTesting("[PROTECTED]");
        java.lang.String str73 = node61.checkTreeEquals(node69);
        jSDocInfo33.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node75 = node9.useSourceInfoIfMissingFrom(node61);
        typePosition0.setItem(node75);
        int int77 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node78 = typePosition0.getItem();
        int int79 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100, 100, (int) '4');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node83.children();
        node83.setWasEmptyNode(false);
        boolean boolean87 = node83.isDec();
        java.lang.String str88 = node83.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = node83.getJSDocInfo();
        typePosition0.setItem(node83);
        com.google.javascript.rhino.Node node91 = typePosition0.getItem();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(nodeIterable84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(jSDocInfo89);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(1.0d, (int) (short) -1, 0);
        java.lang.String str4 = node3.toString();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isGetterDef();
        node3.putIntProp((int) (short) 100, 46);
        boolean boolean10 = node3.isThrow();
        boolean boolean11 = node3.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 1.0" + "'", str4, "NUMBER 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoTypeCheck();
        boolean boolean2 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        boolean boolean10 = jSDocInfo0.hasParameter("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        com.google.common.collect.ImmutableList.Builder<java.util.LinkedHashSet<java.lang.String>[]> strSetArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(strSetArrayBuilder0);
    }
}

